    *(byte *)((uVar2 - 3) + v) = bVar4 & 0x7f | 0x80;
    *(byte *)((uVar2 - 2) + v) = (byte)(in_RDI >> 7) & 0x7f | 0x80;
    *(char *)((uVar2 - 1) + v) = (char)(in_RDI >> 0xe);
  }
  else if (in_RDI < 0x10000000) {
    uVar2 = in_RBX + 4;
    if (in_RCX < uVar2) {
      runtime_growslice((void *)v,uVar2,in_RCX,4,(internal_abi_Type *)&DAT_00807920,
                        in_stack_ffffffffffffffb8);
      v = extraout_RAX_02;
      uVar2 = extraout_RBX_02;
    }
    *(byte *)((uVar2 - 4) + v) = bVar4 & 0x7f | 0x80;
    *(byte *)((uVar2 - 3) + v) = (byte)(in_RDI >> 7) & 0x7f | 0x80;
    *(byte *)((uVar2 - 2) + v) = (byte)(in_RDI >> 0xe) & 0x7f | 0x80;
    *(char *)((uVar2 - 1) + v) = (char)(in_RDI >> 0x15);
  }
  else if (in_RDI < 0x800000000) {
    uVar2 = in_RBX + 5;
    if (in_RCX < uVar2) {
      runtime_growslice((void *)v,uVar2,in_RCX,5,(internal_abi_Type *)&DAT_00807920,
                        in_stack_ffffffffffffffb8);
      v = extraout_RAX_03;
      uVar2 = extraout_RBX_03;
    }
    *(byte *)((uVar2 - 5) + v) = bVar4 & 0x7f | 0x80;
    *(byte *)((uVar2 - 4) + v) = (byte)(in_RDI >> 7) & 0x7f | 0x80;
    *(byte *)((uVar2 - 3) + v) = (byte)(in_RDI >> 0xe) & 0x7f | 0x80;
    *(byte *)((uVar2 - 2) + v) = (byte)(in_RDI >> 0x15) & 0x7f | 0x80;
    *(char *)((uVar2 - 1) + v) = (char)(in_RDI >> 0x1c);
  }
  else if (in_RDI < 0x40000000000) {
    uVar2 = in_RBX + 6;
    if (in_RCX < uVar2) {
      runtime_growslice((void *)v,uVar2,in_RCX,6,(internal_abi_Type *)&DAT_00807920,
                        in_stack_ffffffffffffffb8);
      v = extraout_RAX_04;
      uVar2 = extraout_RBX_04;
    }
    *(byte *)((uVar2 - 6) + v) = bVar4 & 0x7f | 0x80;
    *(byte *)((uVar2 - 5) + v) = (byte)(in_RDI >> 7) & 0x7f | 0x80;
    *(byte *)((uVar2 - 4) + v) = (byte)(in_RDI >> 0xe) & 0x7f | 0x80;
    *(byte *)((uVar2 - 3) + v) = (byte)(in_RDI >> 0x15) & 0x7f | 0x80;
    *(byte *)((uVar2 - 2) + v) = (byte)(in_RDI >> 0x1c) & 0x7f | 0x80;
    *(char *)((uVar2 - 1) + v) = (char)(in_RDI >> 0x23);
  }
  else {
    dVar1 = (dword)(in_RDI >> 0x20);
    if (in_RDI < 0x2000000000000) {
      uVar2 = in_RBX + 7;
      if (in_RCX < uVar2) {
        runtime_growslice((void *)v,uVar2,in_RCX,7,(internal_abi_Type *)&DAT_00807920,
                          in_stack_ffffffffffffffb8);
        v = extraout_RAX_05;
        uVar2 = extraout_RBX_05;
      }
      *(byte *)((uVar2 - 7) + v) = bVar4 & 0x7f | 0x80;
      *(byte *)((uVar2 - 6) + v) = (byte)(in_RDI >> 7) & 0x7f | 0x80;
      *(byte *)((uVar2 - 5) + v) = (byte)(in_RDI >> 0xe) & 0x7f | 0x80;
      *(byte *)((uVar2 - 4) + v) = (byte)(in_RDI >> 0x15) & 0x7f | 0x80;
      *(byte *)((uVar2 - 3) + v) = (byte)(in_RDI >> 0x1c) & 0x7f | 0x80;
      *(byte *)((uVar2 - 2) + v) = (byte)(dVar1 >> 3) & 0x7f | 0x80;
      *(char *)((uVar2 - 1) + v) = (char)(in_RDI >> 0x2a);
    }
    else if (in_RDI < 0x100000000000000) {
      uVar2 = in_RBX + 8;
      if (in_RCX < uVar2) {
        runtime_growslice((void *)v,uVar2,in_RCX,8,(internal_abi_Type *)&DAT_00807920,
                          in_stack_ffffffffffffffb8);
        v = extraout_RAX_06;
        uVar2 = extraout_RBX_06;
      }
      *(byte *)((uVar2 - 8) + v) = bVar4 & 0x7f | 0x80;
      *(byte *)((uVar2 - 7) + v) = (byte)(in_RDI >> 7) & 0x7f | 0x80;
      *(byte *)((uVar2 - 6) + v) = (byte)(in_RDI >> 0xe) & 0x7f | 0x80;
      *(byte *)((uVar2 - 5) + v) = (byte)(in_RDI >> 0x15) & 0x7f | 0x80;
      *(byte *)((uVar2 - 4) + v) = (byte)(in_RDI >> 0x1c) & 0x7f | 0x80;
      *(byte *)((uVar2 - 3) + v) = (byte)(dVar1 >> 3) & 0x7f | 0x80;
      *(byte *)((uVar2 - 2) + v) = (byte)(dVar1 >> 10) & 0x7f | 0x80;
      *(char *)((uVar2 - 1) + v) = (char)(in_RDI >> 0x31);
    }
    else {
      bVar3 = (byte)(in_RDI >> 0x38);
      if (in_RDI < 0x8000000000000000) {
        uVar2 = in_RBX + 9;
        if (in_RCX < uVar2) {
          runtime_growslice((void *)v,uVar2,in_RCX,9,(internal_abi_Type *)&DAT_00807920,
                            in_stack_ffffffffffffffb8);
          v = extraout_RAX_07;
          uVar2 = extraout_RBX_07;
        }
        *(byte *)((uVar2 - 9) + v) = bVar4 & 0x7f | 0x80;
        *(byte *)((uVar2 - 8) + v) = (byte)(in_RDI >> 7) & 0x7f | 0x80;
        *(byte *)((uVar2 - 7) + v) = (byte)(in_RDI >> 0xe) & 0x7f | 0x80;
        *(byte *)((uVar2 - 6) + v) = (byte)(in_RDI >> 0x15) & 0x7f | 0x80;
        *(byte *)((uVar2 - 5) + v) = (byte)(in_RDI >> 0x1c) & 0x7f | 0x80;
        *(byte *)((uVar2 - 4) + v) = (byte)(dVar1 >> 3) & 0x7f | 0x80;
        *(byte *)((uVar2 - 3) + v) = (byte)(dVar1 >> 10) & 0x7f | 0x80;
        *(byte *)((uVar2 - 2) + v) = (byte)(dVar1 >> 0x11) & 0x7f | 0x80;
        *(byte *)((uVar2 - 1) + v) = bVar3;
      }
      else {
        uVar2 = in_RBX + 10;
        if (in_RCX < uVar2) {
          runtime_growslice((void *)v,uVar2,in_RCX,10,(internal_abi_Type *)&DAT_00807920,
                            in_stack_ffffffffffffffb8);
          v = extraout_RAX_08;
          uVar2 = extraout_RBX_08;
        }
        *(byte *)((uVar2 - 10) + v) = bVar4 & 0x7f | 0x80;
        *(byte *)((uVar2 - 9) + v) = (byte)(in_RDI >> 7) & 0x7f | 0x80;
        *(byte *)((uVar2 - 8) + v) = (byte)(in_RDI >> 0xe) & 0x7f | 0x80;
        *(byte *)((uVar2 - 7) + v) = (byte)(in_RDI >> 0x15) & 0x7f | 0x80;
        *(byte *)((uVar2 - 6) + v) = (byte)(in_RDI >> 0x1c) & 0x7f | 0x80;
        *(byte *)((uVar2 - 5) + v) = (byte)(dVar1 >> 3) & 0x7f | 0x80;
        *(byte *)((uVar2 - 4) + v) = (byte)(dVar1 >> 10) & 0x7f | 0x80;
        *(byte *)((uVar2 - 3) + v) = (byte)(dVar1 >> 0x11) & 0x7f | 0x80;
        *(byte *)((uVar2 - 2) + v) = bVar3 & 0x7f | 0x80;
        *(undefined *)((uVar2 - 1) + v) = 1;
      }
    }
  }
  return;
}



void google_golang_org_protobuf_encoding_protowire_ConsumeVarint(__uint8 b,uint64 v,int n)

{
  if (n < 1) {
    return;
  }
  if (*(byte *)v < 0x80) {
    return;
  }
  if (n < 2) {
    return;
  }
  if (*(byte *)(v + 1) < 0x80) {
    return;
  }
  if (n < 3) {
    return;
  }
  if (*(byte *)(v + 2) < 0x80) {
    return;
  }
  if (n < 4) {
    return;
  }
  if (*(byte *)(v + 3) < 0x80) {
    return;
  }
  if (n < 5) {
    return;
  }
  if (*(byte *)(v + 4) < 0x80) {
    return;
  }
  if (n < 6) {
    return;
  }
  if (*(byte *)(v + 5) < 0x80) {
    return;
  }
  if (n < 7) {
    return;
  }
  if (*(byte *)(v + 6) < 0x80) {
    return;
  }
  if (n < 8) {
    return;
  }
  if (0x7f < *(byte *)(v + 7)) {
    if (n < 9) {
      return;
    }
    if (*(byte *)(v + 8) < 0x80) {
      return;
    }
    if (n < 10) {
      return;
    }
    if (*(byte *)(v + 9) < 2) {
      return;
    }
    return;
  }
  return;
}



void google_golang_org_protobuf_encoding_protowire_ConsumeBytes(__uint8 b,__uint8 v,int n)

{
  uint extraout_RAX;
  uint64 m;
  uint in_RBX;
  uint extraout_RBX;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  google_golang_org_protobuf_encoding_protowire_ConsumeVarint(in_stack_ffffffffffffffe0,n,in_RBX);
  if ((int)extraout_RBX < 0) {
    return;
  }
  if (in_RBX < extraout_RBX) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  if (in_RBX - extraout_RBX < extraout_RAX) {
    return;
  }
  return;
}



void google_golang_org_protobuf_encoding_protowire_ConsumeGroup
               (google_golang_org_protobuf_encoding_protowire_Number num,__uint8 b,__uint8 v,int n)

{
  int iVar1;
  uint extraout_RAX;
  uint uVar2;
  int in_RCX;
  uint in_RDI;
  sdword sVar3;
  uint uVar4;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  google_golang_org_protobuf_encoding_protowire_consumeFieldValueD
            (num,3,in_stack_ffffffffffffffd0,n,in_RCX);
  if ((int)extraout_RAX < 0) {
    return;
  }
  uVar2 = extraout_RAX;
  if (in_RDI < extraout_RAX) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  while ((uVar2 != 0 && ((*(byte *)((uVar2 - 1) + n) & 0x7f) == 0))) {
    uVar2 = uVar2 - 1;
  }
  uVar4 = (int)num << 3;
  iVar1 = 0x3f;
  if (uVar4 != 0) {
    for (; uVar4 >> iVar1 == 0; iVar1 = iVar1 + -1) {
    }
  }
  sVar3 = (sdword)iVar1;
  if (uVar4 == 0) {
    sVar3 = -1;
  }
  if (in_RDI < uVar2 - ((dword)((sVar3 + 1) * 9 + 0x40U) >> 6)) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// WARNING: Restarted to delay deadcode elimination for space: stack

int google_golang_org_protobuf_encoding_protowire_init(EVP_PKEY_CTX *ctx)

{
  string ~r0;
  string ~r0_00;
  string ~r0_01;
  string ~r0_02;
  string ~r0_03;
  undefined8 extraout_RAX;
  undefined8 extraout_RAX_00;
  undefined8 extraout_RAX_01;
  undefined8 extraout_RAX_02;
  undefined8 extraout_RAX_03;
  undefined8 extraout_RAX_04;
  undefined8 extraout_RAX_05;
  undefined8 extraout_RAX_06;
  undefined8 uVar1;
  int extraout_RAX_07;
  int extraout_RAX_08;
  int iVar2;
  undefined8 extraout_RBX;
  undefined8 extraout_RBX_00;
  undefined8 extraout_RBX_01;
  undefined8 extraout_RBX_02;
  undefined8 extraout_RBX_03;
  uint8 *unaff_RBP;
  undefined8 *extraout_R11;
  undefined8 *extraout_R11_00;
  undefined8 *extraout_R11_01;
  undefined8 *extraout_R11_02;
  int *extraout_R11_03;
  int unaff_R14;
  int unaff_retaddr;
  string in_stack_ffffffffffffffd0;
  __interface___ in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ~r0.len = unaff_retaddr;
  ~r0.str = unaff_RBP;
  google_golang_org_protobuf_internal_errors_format
            (in_stack_ffffffffffffffd0,in_stack_ffffffffffffffe0,~r0);
  uVar1 = extraout_RAX;
  _DAT_00c5acd8 = extraout_RBX;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RAX_00;
    extraout_R11[1] = DAT_00c5acd0;
    uVar1 = extraout_RAX_00;
  }
  ~r0_00.len = unaff_retaddr;
  ~r0_00.str = unaff_RBP;
  DAT_00c5acd0 = uVar1;
  google_golang_org_protobuf_internal_errors_format
            (in_stack_ffffffffffffffd0,in_stack_ffffffffffffffe0,~r0_00);
  uVar1 = extraout_RAX_01;
  _DAT_00c5ace8 = extraout_RBX_00;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = extraout_RAX_02;
    extraout_R11_00[1] = DAT_00c5ace0;
    uVar1 = extraout_RAX_02;
  }
  ~r0_01.len = unaff_retaddr;
  ~r0_01.str = unaff_RBP;
  DAT_00c5ace0 = uVar1;
  google_golang_org_protobuf_internal_errors_format
            (in_stack_ffffffffffffffd0,in_stack_ffffffffffffffe0,~r0_01);
  uVar1 = extraout_RAX_03;
  _DAT_00c5acf8 = extraout_RBX_01;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_01 = extraout_RAX_04;
    extraout_R11_01[1] = DAT_00c5acf0;
    uVar1 = extraout_RAX_04;
  }
  ~r0_02.len = unaff_retaddr;
  ~r0_02.str = unaff_RBP;
  DAT_00c5acf0 = uVar1;
  google_golang_org_protobuf_internal_errors_format
            (in_stack_ffffffffffffffd0,in_stack_ffffffffffffffe0,~r0_02);
  uVar1 = extraout_RAX_05;
  _DAT_00c5ad08 = extraout_RBX_02;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_02 = extraout_RAX_06;
    extraout_R11_02[1] = DAT_00c5ad00;
    uVar1 = extraout_RAX_06;
  }
  ~r0_03.len = unaff_retaddr;
  ~r0_03.str = unaff_RBP;
  DAT_00c5ad00 = uVar1;
  google_golang_org_protobuf_internal_errors_format
            (in_stack_ffffffffffffffd0,in_stack_ffffffffffffffe0,~r0_03);
  iVar2 = extraout_RAX_07;
  _DAT_00c5ad18 = extraout_RBX_03;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_03 = extraout_RAX_08;
    extraout_R11_03[1] = DAT_00c5ad10;
    iVar2 = extraout_RAX_08;
  }
  DAT_00c5ad10 = iVar2;
  return iVar2;
}



void google_golang_org_protobuf_encoding_protowire___Number__IsValid(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void bytes___Buffer__Bytes(bytes_Buffer *b,__uint8 ~r0)

{
  if ((uint)b->off <= (uint)(b->buf).len) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceB();
}



void bytes___Buffer__AvailableBuffer(bytes_Buffer *b,__uint8 ~r0)

{
  return;
}



void bytes___Buffer__String(bytes_Buffer *b,string ~r0)

{
  uint uVar1;
  uint uVar2;
  int unaff_R14;
  string in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (b != (bytes_Buffer *)0x0) {
    uVar1 = (b->buf).len;
    uVar2 = b->off;
    if (uVar2 <= uVar1) {
      runtime_slicebytetostring
                ((runtime_tmpBuf *)0x0,
                 (b->buf).array + (uVar2 & (int)(uVar2 - (b->buf).cap) >> 0x3f),uVar1 - uVar2,
                 in_stack_ffffffffffffffe0);
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  return;
}



void bytes___Buffer__Len(bytes_Buffer *b,int ~r0)

{
  return;
}



void bytes___Buffer__Cap(bytes_Buffer *b,int ~r0)

{
  return;
}



void bytes___Buffer__Available(bytes_Buffer *b,int ~r0)

{
  return;
}



// WARNING: Unknown calling convention

void bytes___Buffer__Truncate(bytes_Buffer *b,int n)

{
  uint uVar1;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (n != 0) {
    b->lastRead = 0;
    if ((-1 < n) && (n <= (b->buf).len - b->off)) {
      uVar1 = b->off + n;
      if (uVar1 <= (uint)(b->buf).cap) {
        (b->buf).len = uVar1;
        return;
      }
                    // WARNING: Subroutine does not return
      runtime_panicSliceAcap();
    }
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffffe8);
  }
  (b->buf).len = 0;
  b->off = 0;
  b->lastRead = 0;
  return;
}



// WARNING: Unknown calling convention

void bytes___Buffer__Reset(bytes_Buffer *b)

{
  (b->buf).len = 0;
  b->off = 0;
  b->lastRead = 0;
  return;
}



void bytes___Buffer__grow(bytes_Buffer *b,int n,int ~r0)

{
  uint uVar1;
  __uint8 ~r0_1;
  __uint8 b_00;
  __uint8 ~r0_00;
  uint8 *extraout_RAX;
  uint8 *extraout_RAX_00;
  uint8 *puVar2;
  uint8 *extraout_RAX_01;
  uint8 *extraout_RAX_02;
  uint __n;
  int extraout_RCX;
  int extraout_RBX;
  int unaff_RBP;
  int iVar3;
  int m;
  bytes_Buffer *extraout_RSI;
  void *in_RDI;
  uint uVar4;
  void *extraout_RDI;
  uint8 **extraout_R11;
  uint8 **extraout_R11_00;
  int unaff_R14;
  undefined8 unaff_retaddr;
  bytes_Buffer *in_stack_00000008;
  int in_stack_00000010;
  interface___ in_stack_ffffffffffffffd0;
  int in_stack_ffffffffffffffe0;
  undefined8 in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = b;
    in_stack_00000010 = n;
    runtime_morestack_noctxt();
    b = in_stack_00000008;
    n = in_stack_00000010;
    in_RDI = extraout_RDI;
  }
  iVar3 = (b->buf).len - b->off;
  if ((iVar3 == 0) && (b->off != 0)) {
    (b->buf).len = 0;
    b->off = 0;
    b->lastRead = 0;
  }
  __n = (b->buf).len;
  uVar4 = (b->buf).cap;
  if (n <= (int)(uVar4 - __n)) {
    if (n + __n <= uVar4) {
      (b->buf).len = n + __n;
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  puVar2 = (b->buf).array;
  if ((puVar2 == (uint8 *)0x0) && (n < 0x41)) {
    in_stack_00000008 = b;
    in_stack_00000010 = n;
    runtime_makeslice((internal_abi_Type *)&DAT_00807920,n,0x40,in_RDI);
    (in_stack_00000008->buf).len = in_stack_00000010;
    (in_stack_00000008->buf).cap = 0x40;
    puVar2 = extraout_RAX_01;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_00 = extraout_RAX_02;
      extraout_R11_00[1] = (extraout_RSI->buf).array;
      puVar2 = extraout_RAX_02;
      in_stack_00000008 = extraout_RSI;
    }
    (in_stack_00000008->buf).array = puVar2;
    return;
  }
  if ((int)((uVar4 >> 1) - iVar3) < n) {
    if ((int)(0x7fffffffffffffff - (n + uVar4)) < (int)uVar4) {
      in_stack_00000008 = b;
      in_stack_00000010 = n;
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffffd0);
    }
    uVar1 = b->off;
    if (__n < uVar1) {
      in_stack_00000008 = b;
      in_stack_00000010 = n;
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    b_00.cap = in_stack_ffffffffffffffe0;
    b_00.array = (uint8 *)in_stack_ffffffffffffffd0._type;
    b_00.len = (int)in_stack_ffffffffffffffd0.data;
    ~r0_00.len = iVar3;
    ~r0_00.array = (uint8 *)in_stack_ffffffffffffffe8;
    ~r0_00.cap = unaff_RBP;
    ~r0_1.len = (int)b;
    ~r0_1.array = (uint8 *)unaff_retaddr;
    ~r0_1.cap = n;
    in_stack_00000008 = b;
    in_stack_00000010 = n;
    bytes_growSlice(b_00,(int)(puVar2 + ((int)-(uVar4 - uVar1) >> 0x3f & uVar1)),~r0_00,~r0_1);
    (in_stack_00000008->buf).len = extraout_RBX;
    (in_stack_00000008->buf).cap = extraout_RCX;
    puVar2 = extraout_RAX;
    b = in_stack_00000008;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RAX_00;
      extraout_R11[1] = (b->buf).array;
      puVar2 = extraout_RAX_00;
    }
    (b->buf).array = puVar2;
  }
  else {
    uVar1 = b->off;
    if (__n < uVar1) {
      in_stack_00000008 = b;
      in_stack_00000010 = n;
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    uVar4 = (int)(uVar1 - uVar4) >> 0x3f & uVar1;
    if ((int)(__n - uVar1) < (int)__n) {
      __n = __n - uVar1;
    }
    in_stack_00000008 = b;
    in_stack_00000010 = n;
    if (uVar4 != 0) {
      runtime_memmove(puVar2,puVar2 + uVar4,__n);
      b = in_stack_00000008;
    }
  }
  b->off = 0;
  if ((uint)(in_stack_00000010 + iVar3) <= (uint)(b->buf).cap) {
    (b->buf).len = in_stack_00000010 + iVar3;
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceAcap();
}



// WARNING: Unknown calling convention

void bytes___Buffer__Grow(bytes_Buffer *b,int n)

{
  uint extraout_RAX;
  int m;
  int in_RCX;
  int extraout_RCX;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RCX = extraout_RCX;
  }
  if (-1 < n) {
    bytes___Buffer__grow(b,n,in_RCX);
    if (extraout_RAX <= (uint)(b->buf).cap) {
      (b->buf).len = extraout_RAX;
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffe8);
}



void bytes___Buffer__Write(bytes_Buffer *b,__uint8 p,int n,error err)

{
  uint8 *__dest;
  uint uVar1;
  uint extraout_RAX;
  int m;
  size_t in_RCX;
  size_t __n;
  uint uVar2;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  b->lastRead = 0;
  uVar2 = (b->buf).len;
  uVar1 = (b->buf).cap;
  if ((int)(uVar1 - uVar2) < (int)in_RCX) {
    bytes___Buffer__grow(b,in_RCX,in_RCX);
    uVar2 = extraout_RAX;
  }
  else {
    if (uVar1 < uVar2 + in_RCX) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAcap();
    }
    (b->buf).len = uVar2 + in_RCX;
  }
  uVar1 = (b->buf).len;
  if (uVar2 <= uVar1) {
    __n = uVar1 - uVar2;
    __dest = (b->buf).array + (uVar2 & (int)(uVar2 - (b->buf).cap) >> 0x3f);
    if ((int)in_RCX < (int)__n) {
      __n = in_RCX;
    }
    if ((uint8 *)n != __dest) {
      runtime_memmove(__dest,(void *)n,__n);
    }
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceB();
}



void bytes___Buffer__WriteString(bytes_Buffer *b,string s,int n,error err)

{
  uint8 *__dest;
  uint uVar1;
  uint extraout_RAX;
  int m;
  size_t in_RCX;
  size_t __n;
  uint uVar2;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  b->lastRead = 0;
  uVar2 = (b->buf).len;
  uVar1 = (b->buf).cap;
  if ((int)(uVar1 - uVar2) < (int)in_RCX) {
    bytes___Buffer__grow(b,in_RCX,in_RCX);
    uVar2 = extraout_RAX;
  }
  else {
    if (uVar1 < uVar2 + in_RCX) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAcap();
    }
    (b->buf).len = uVar2 + in_RCX;
  }
  uVar1 = (b->buf).len;
  if (uVar2 <= uVar1) {
    __n = uVar1 - uVar2;
    __dest = (b->buf).array + (uVar2 & (int)(uVar2 - (b->buf).cap) >> 0x3f);
    if ((int)in_RCX < (int)__n) {
      __n = in_RCX;
    }
    if ((uint8 *)n != __dest) {
      runtime_memmove(__dest,(void *)n,__n);
    }
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceB();
}



void bytes___Buffer__ReadFrom(bytes_Buffer *b,io_Reader r,int64 n,error err)

{
  char extraout_AL;
  uint extraout_RAX;
  int i;
  int extraout_RAX_00;
  int m;
  void *in_RCX;
  void *~r0;
  void *x;
  runtime_itab *tab;
  int iVar1;
  uint uVar2;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffb0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  b->lastRead = 0;
  ~r0 = in_RCX;
  while( true ) {
    bytes___Buffer__grow(b,0x200,(int)~r0);
    if ((uint)(b->buf).cap < extraout_RAX) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAcap();
    }
    (b->buf).len = extraout_RAX;
    uVar2 = (b->buf).cap;
    if (uVar2 < extraout_RAX) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    iVar1 = uVar2 - extraout_RAX;
    (**(code **)(n + 0x18))(in_RCX,(b->buf).array + (-iVar1 >> 0x3f & extraout_RAX),iVar1);
    if (extraout_RAX_00 < 0) {
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffffb0);
    }
    uVar2 = extraout_RAX + extraout_RAX_00;
    if ((uint)(b->buf).cap < uVar2) break;
    (b->buf).len = uVar2;
    if ((io_EOF.tab == tab) &&
       (runtime_ifaceeq(tab,x,io_EOF.data,SUB81(uVar2,0)), extraout_AL != '\0')) {
      return;
    }
    ~r0 = x;
    if (tab != (runtime_itab *)0x0) {
      return;
    }
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceAcap();
}



// DWARF original prototype: void bytes.growSlice([]uint8 b, int n, []uint8 ~r0, []uint8 ~r0)

void bytes_growSlice(__uint8 b,int n,__uint8 ~r0,__uint8 ~r0_1)

{
  void *extraout_RAX;
  int in_RCX;
  void *__dest;
  uint extraout_RCX;
  size_t __n;
  uint in_RBX;
  size_t extraout_RBX;
  uint uVar1;
  int in_RDI;
  int c;
  int newLen;
  int unaff_R14;
  runtime_slice in_stack_ffffffffffffff88;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  newLen = in_RDI + in_RBX;
  if ((int)(in_RDI + in_RBX) < in_RCX * 2) {
    newLen = in_RCX * 2;
  }
  if (-1 < newLen) {
    if (newLen == 0) {
      __dest = (void *)0x0;
      __n = 0;
      uVar1 = 0;
    }
    else {
      runtime_growslice((void *)0x0,newLen,0,newLen,(internal_abi_Type *)&DAT_00807920,
                        in_stack_ffffffffffffff88);
      __dest = extraout_RAX;
      __n = extraout_RBX;
      uVar1 = extraout_RCX;
    }
    runtime_memclrNoHeapPointers();
    if ((int)in_RBX < (int)__n) {
      __n = in_RBX;
    }
    if ((void *)n != __dest) {
      runtime_memmove(__dest,(void *)n,__n);
    }
    if (in_RBX <= uVar1) {
      bytes_growSlice_func1();
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
                    // WARNING: Subroutine does not return
  runtime_panicmakeslicelen();
}



void bytes___Buffer__WriteTo(bytes_Buffer *b,io_Writer w,int64 n,error err)

{
  uint uVar1;
  uint uVar2;
  int iVar3;
  int m;
  undefined8 in_RCX;
  int iVar4;
  int nBytes;
  int unaff_R14;
  undefined auVar5 [16];
  interface___ in_stack_ffffffffffffffd0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  b->lastRead = 0;
  uVar1 = (b->buf).len;
  uVar2 = b->off;
  iVar4 = uVar1 - uVar2;
  if (0 < iVar4) {
    if (uVar1 < uVar2) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    auVar5 = (**(code **)(n + 0x18))
                       (in_RCX,(b->buf).array + (uVar2 & (int)-((b->buf).cap - uVar2) >> 0x3f),iVar4
                       );
    iVar3 = auVar5._0_8_;
    if (iVar4 < iVar3) {
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffffd0);
    }
    b->off = b->off + iVar3;
    if (auVar5._8_8_ != 0) {
      return;
    }
    if (iVar3 != iVar4) {
      return;
    }
  }
  (b->buf).len = 0;
  b->off = 0;
  b->lastRead = 0;
  return;
}



void bytes___Buffer__WriteByte(bytes_Buffer *b,uint8 c,error ~r0)

{
  uint uVar1;
  uint extraout_RAX;
  int m;
  uint ~r0_00;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  b->lastRead = 0;
  ~r0_00 = (b->buf).len;
  uVar1 = (b->buf).cap;
  if (uVar1 == ~r0_00 || (int)(uVar1 - ~r0_00) < 0) {
    bytes___Buffer__grow(b,1,~r0_00);
    ~r0_00 = extraout_RAX;
  }
  else {
    if (uVar1 < ~r0_00 + 1) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAcap();
    }
    (b->buf).len = ~r0_00 + 1;
  }
  if (~r0_00 < (uint)(b->buf).len) {
    (b->buf).array[~r0_00] = c;
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void bytes___Buffer__WriteRune(bytes_Buffer *b,int32 r,int n,error err)

{
  uint uVar1;
  __uint8 p;
