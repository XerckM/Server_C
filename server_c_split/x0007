    int32 nextPairFreq;
    int32 needed;
};

typedef struct vendor/golang.org/x/text/unicode/norm.nfcTrie vendor/golang.org/x/text/unicode/norm.nfcTrie, *Pvendor/golang.org/x/text/unicode/norm.nfcTrie;

struct vendor/golang.org/x/text/unicode/norm.nfcTrie {
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Messages_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Messages_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Messages_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Messages_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/filedesc.Messages }
    uintptr F;
    struct google.golang.org/protobuf/internal/filedesc.Messages *X0;
};

typedef struct os.LinkError os.LinkError, *Pos.LinkError;

struct os.LinkError {
    struct string Op;
    struct string Old;
    struct string New;
    error Err;
};

typedef struct []unsafe.Pointer []unsafe.Pointer, *P[]unsafe.Pointer;

struct []unsafe.Pointer {
    void **array;
    int len;
    int cap;
};

typedef struct []google.golang.org/protobuf/internal/descfmt.methodAndName []google.golang.org/protobuf/internal/descfmt.methodAndName, *P[]google.golang.org/protobuf/internal/descfmt.methodAndName;

typedef struct google.golang.org/protobuf/internal/descfmt.methodAndName google.golang.org/protobuf/internal/descfmt.methodAndName, *Pgoogle.golang.org/protobuf/internal/descfmt.methodAndName;

typedef struct reflect.Value reflect.Value, *Preflect.Value;

struct []google.golang.org/protobuf/internal/descfmt.methodAndName {
    struct google.golang.org/protobuf/internal/descfmt.methodAndName *array;
    int len;
    int cap;
};

struct reflect.Value {
    struct internal/abi.Type *typ_;
    void *ptr;
    reflect.flag flag;
};

struct google.golang.org/protobuf/internal/descfmt.methodAndName {
    struct reflect.Value method;
    struct string name;
};

typedef struct html/template.Template html/template.Template, *Phtml/template.Template;

typedef struct html/template.Template *noalg.[8]*html/template.Template[8];

typedef struct text/template.Template text/template.Template, *Ptext/template.Template;

typedef struct html/template.nameSpace html/template.nameSpace, *Phtml/template.nameSpace;

typedef struct text/template.common text/template.common, *Ptext/template.common;

typedef struct hash<string,*html/template.Template> hash<string,*html/template.Template>, *Phash<string,*html/template.Template>;

typedef struct hash<string,*html/template.Template> *map[string]*html/template.Template;

typedef struct html/template.escaper html/template.escaper, *Phtml/template.escaper;

typedef struct hash<string,*text/template.Template> hash<string,*text/template.Template>, *Phash<string,*text/template.Template>;

typedef struct hash<string,*text/template.Template> *map[string]*text/template.Template;

typedef struct text/template.option text/template.option, *Ptext/template.option;

typedef struct hash<string,interface_{}> *text/template.FuncMap;

typedef struct hash<string,reflect.Value> hash<string,reflect.Value>, *Phash<string,reflect.Value>;

typedef struct hash<string,reflect.Value> *map[string]reflect.Value;

typedef struct bucket<string,*html/template.Template> bucket<string,*html/template.Template>, *Pbucket<string,*html/template.Template>;

typedef struct hash<string,html/template.context> hash<string,html/template.context>, *Phash<string,html/template.context>;

typedef struct hash<string,html/template.context> *map[string]html/template.context;

typedef struct hash<string,bool> hash<string,bool>, *Phash<string,bool>;

typedef struct hash<string,bool> *map[string]bool;

typedef struct hash<*text/template/parse.ActionNode,[]string> hash<*text/template/parse.ActionNode,[]string>, *Phash<*text/template/parse.ActionNode,[]string>;

typedef struct hash<*text/template/parse.ActionNode,[]string> *map[*text/template/parse.ActionNode][]string;

typedef struct hash<*text/template/parse.TemplateNode,string> hash<*text/template/parse.TemplateNode,string>, *Phash<*text/template/parse.TemplateNode,string>;

typedef struct hash<*text/template/parse.TemplateNode,string> *map[*text/template/parse.TemplateNode]string;

typedef struct hash<*text/template/parse.TextNode,[]uint8> *map[*text/template/parse.TextNode][]uint8;

typedef struct html/template.rangeContext html/template.rangeContext, *Phtml/template.rangeContext;

typedef struct bucket<string,*text/template.Template> bucket<string,*text/template.Template>, *Pbucket<string,*text/template.Template>;

typedef struct bucket<string,reflect.Value> bucket<string,reflect.Value>, *Pbucket<string,reflect.Value>;

typedef struct bucket<string,html/template.context> bucket<string,html/template.context>, *Pbucket<string,html/template.context>;

typedef struct bucket<string,bool> bucket<string,bool>, *Pbucket<string,bool>;

typedef struct bucket<*text/template/parse.ActionNode,[]string> bucket<*text/template/parse.ActionNode,[]string>, *Pbucket<*text/template/parse.ActionNode,[]string>;

typedef struct bucket<*text/template/parse.TemplateNode,string> bucket<*text/template/parse.TemplateNode,string>, *Pbucket<*text/template/parse.TemplateNode,string>;

typedef struct []html/template.context []html/template.context, *P[]html/template.context;

typedef struct html/template.context html/template.context, *Phtml/template.context;

typedef struct text/template/parse.ActionNode text/template/parse.ActionNode, *Ptext/template/parse.ActionNode;

typedef struct html/template.Error html/template.Error, *Phtml/template.Error;

struct html/template.escaper {
    struct html/template.nameSpace *ns;
    map[string]html/template.context output;
    map[string]*text/template.Template derived;
    map[string]bool called;
    map[*text/template/parse.ActionNode][]string actionNodeEdits;
    map[*text/template/parse.TemplateNode]string templateNodeEdits;
    map[*text/template/parse.TextNode][]uint8 textNodeEdits;
    struct html/template.rangeContext *rangeContext;
};

struct html/template.nameSpace {
    struct sync.Mutex mu;
    map[string]*html/template.Template set;
    bool escaped;
    struct html/template.escaper esc;
};

struct bucket<*text/template/parse.ActionNode,[]string> {
    uint8 tophash[8];
    struct text/template/parse.ActionNode *keys[8];
    struct []string values[8];
    struct bucket<*text/template/parse.ActionNode,[]string> *overflow;
};

struct bucket<string,*html/template.Template> {
    uint8 tophash[8];
    struct string keys[8];
    struct html/template.Template *values[8];
    struct bucket<string,*html/template.Template> *overflow;
};

struct text/template.option {
    text/template.missingKeyAction missingKey;
};

struct text/template.common {
    map[string]*text/template.Template tmpl;
    struct sync.RWMutex muTmpl;
    struct text/template.option option;
    struct sync.RWMutex muFuncs;
    text/template.FuncMap parseFuncs;
    map[string]reflect.Value execFuncs;
};

struct text/template/parse.ActionNode {
    text/template/parse.NodeType NodeType;
    text/template/parse.Pos Pos;
    struct text/template/parse.Tree *tr;
    int Line;
    struct text/template/parse.PipeNode *Pipe;
};

struct hash<string,*html/template.Template> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,*html/template.Template> *buckets;
    struct bucket<string,*html/template.Template> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct html/template.context {
    html/template.state state;
    html/template.delim delim;
    html/template.urlPart urlPart;
    html/template.jsCtx jsCtx;
    html/template.attr attr;
    html/template.element element;
    text/template/parse.Node n;
    struct html/template.Error *err;
};

struct hash<string,html/template.context> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,html/template.context> *buckets;
    struct bucket<string,html/template.context> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<string,bool> {
    uint8 tophash[8];
    struct string keys[8];
    bool values[8];
    struct bucket<string,bool> *overflow;
};

struct hash<*text/template/parse.ActionNode,[]string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<*text/template/parse.ActionNode,[]string> *buckets;
    struct bucket<*text/template/parse.ActionNode,[]string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct text/template.Template {
    struct string name;
    struct text/template/parse.Tree *Tree;
    struct text/template.common *common;
    struct string leftDelim;
    struct string rightDelim;
};

struct []html/template.context {
    struct html/template.context *array;
    int len;
    int cap;
};

struct html/template.rangeContext {
    struct html/template.rangeContext *outer;
    struct []html/template.context breaks;
    struct []html/template.context continues;
};

struct bucket<string,reflect.Value> {
    uint8 tophash[8];
    struct string keys[8];
    struct reflect.Value values[8];
    struct bucket<string,reflect.Value> *overflow;
};

struct hash<*text/template/parse.TemplateNode,string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<*text/template/parse.TemplateNode,string> *buckets;
    struct bucket<*text/template/parse.TemplateNode,string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct hash<string,*text/template.Template> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,*text/template.Template> *buckets;
    struct bucket<string,*text/template.Template> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct hash<string,bool> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,bool> *buckets;
    struct bucket<string,bool> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<*text/template/parse.TemplateNode,string> {
    uint8 tophash[8];
    struct text/template/parse.TemplateNode *keys[8];
    struct string values[8];
    struct bucket<*text/template/parse.TemplateNode,string> *overflow;
};

struct bucket<string,html/template.context> {
    uint8 tophash[8];
    struct string keys[8];
    struct html/template.context values[8];
    struct bucket<string,html/template.context> *overflow;
};

struct html/template.Template {
    error escapeErr;
    struct text/template.Template *text;
    struct text/template/parse.Tree *Tree;
    struct html/template.nameSpace *nameSpace;
};

struct hash<string,reflect.Value> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,reflect.Value> *buckets;
    struct bucket<string,reflect.Value> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<string,*text/template.Template> {
    uint8 tophash[8];
    struct string keys[8];
    struct text/template.Template *values[8];
    struct bucket<string,*text/template.Template> *overflow;
};

struct html/template.Error {
    html/template.ErrorCode ErrorCode;
    text/template/parse.Node Node;
    struct string Name;
    int Line;
    struct string Description;
};

typedef struct google.golang.org/grpc/balancer/base.Config google.golang.org/grpc/balancer/base.Config, *Pgoogle.golang.org/grpc/balancer/base.Config;

struct google.golang.org/grpc/balancer/base.Config {
    bool HealthCheck;
};

typedef struct hash<context.canceler,struct_{}> hash<context.canceler,struct_{}>, *Phash<context.canceler,struct_{}>;

struct hash<context.canceler,struct_{}> { // Original name: hash<context.canceler,struct {}>
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<context.canceler,struct_{}> *buckets;
    struct bucket<context.canceler,struct_{}> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct net.result[go.shape.[]string].1 net.result[go.shape.[]string].1, *Pnet.result[go.shape.[]string].1;

typedef struct go.shape.[]string go.shape.[]string, *Pgo.shape.[]string;

struct go.shape.[]string {
    struct string *array;
    int len;
    int cap;
};

struct net.result[go.shape.[]string].1 { // Original name: net.result[go.shape.[]string]·1
    struct go.shape.[]string res;
    error err;
};

typedef struct runtime.iface io.ReaderAt;

typedef struct runtime.iface hash.Hash;

typedef struct google.golang.org/grpc/stats.Begin google.golang.org/grpc/stats.Begin, *Pgoogle.golang.org/grpc/stats.Begin;

struct google.golang.org/grpc/stats.Begin {
    bool Client;
    struct time.Time BeginTime;
    bool FailFast;
    bool IsClientStream;
    bool IsServerStream;
    bool IsTransparentRetryAttempt;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.SourceLocations_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.SourceLocations_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.SourceLocations_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.SourceLocations_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/filedesc.SourceLocations }
    uintptr F;
    struct google.golang.org/protobuf/internal/filedesc.SourceLocations *X0;
};

typedef struct hash<string,*golang.org/x/net/trace.family> hash<string,*golang.org/x/net/trace.family>, *Phash<string,*golang.org/x/net/trace.family>;

typedef struct hash<string,*golang.org/x/net/trace.family> *map[string]*golang.org/x/net/trace.family;

struct hash<string,*golang.org/x/net/trace.family> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,*golang.org/x/net/trace.family> *buckets;
    struct bucket<string,*golang.org/x/net/trace.family> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct runtime/internal/atomic.UnsafePointer runtime/internal/atomic.UnsafePointer, *Pruntime/internal/atomic.UnsafePointer;

struct runtime/internal/atomic.UnsafePointer {
    struct runtime/internal/atomic.noCopy noCopy;
    void *value;
};

typedef struct runtime/internal/atomic.UnsafePointer runtime.buckhashArray[179999];

typedef struct noalg.struct_{_F_uintptr;_X0_*[]uint8;_X1_*error;_X2_google.golang.org/protobuf/proto.MarshalOptions_} noalg.struct_{_F_uintptr;_X0_*[]uint8;_X1_*error;_X2_google.golang.org/protobuf/proto.MarshalOptions_}, *Pnoalg.struct_{_F_uintptr;_X0_*[]uint8;_X1_*error;_X2_google.golang.org/protobuf/proto.MarshalOptions_};

typedef struct google.golang.org/protobuf/proto.MarshalOptions google.golang.org/protobuf/proto.MarshalOptions, *Pgoogle.golang.org/protobuf/proto.MarshalOptions;

struct google.golang.org/protobuf/proto.MarshalOptions {
    struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals NoUnkeyedLiterals;
    bool AllowPartial;
    bool Deterministic;
    bool UseCachedSize;
};

struct noalg.struct_{_F_uintptr;_X0_*[]uint8;_X1_*error;_X2_google.golang.org/protobuf/proto.MarshalOptions_} { // Original name: noalg.struct { F uintptr; X0 *[]uint8; X1 *error; X2 google.golang.org/protobuf/proto.MarshalOptions }
    uintptr F;
    struct []uint8 *X0;
    error *X1;
    struct google.golang.org/protobuf/proto.MarshalOptions X2;
};

typedef struct compress/gzip.Reader compress/gzip.Reader, *Pcompress/gzip.Reader;

typedef struct compress/gzip.Header compress/gzip.Header, *Pcompress/gzip.Header;

typedef struct runtime.iface compress/flate.Reader;

typedef struct runtime.iface io.ReadCloser;

struct compress/gzip.Header {
    struct string Comment;
    struct []uint8 Extra;
    struct time.Time ModTime;
    struct string Name;
    uint8 OS;
};

struct compress/gzip.Reader {
    struct compress/gzip.Header Header;
    compress/flate.Reader r;
    io.ReadCloser decompressor;
    uint32 digest;
    uint32 size;
    uint8 buf[512];
    error err;
    bool multistream;
};

typedef struct google.golang.org/grpc/stats.End google.golang.org/grpc/stats.End, *Pgoogle.golang.org/grpc/stats.End;

typedef struct hash<string,[]string> *google.golang.org/grpc/metadata.MD;

struct google.golang.org/grpc/stats.End {
    bool Client;
    struct time.Time BeginTime;
    struct time.Time EndTime;
    google.golang.org/grpc/metadata.MD Trailer;
    error Error;
};

typedef struct hash<google.golang.org/grpc/balancer.SubConn,google.golang.org/grpc/balancer/base.SubConnInfo> hash<google.golang.org/grpc/balancer.SubConn,google.golang.org/grpc/balancer/base.SubConnInfo>, *Phash<google.golang.org/grpc/balancer.SubConn,google.golang.org/grpc/balancer/base.SubConnInfo>;

typedef struct bucket<google.golang.org/grpc/balancer.SubConn,google.golang.org/grpc/balancer/base.SubConnInfo> bucket<google.golang.org/grpc/balancer.SubConn,google.golang.org/grpc/balancer/base.SubConnInfo>, *Pbucket<google.golang.org/grpc/balancer.SubConn,google.golang.org/grpc/balancer/base.SubConnInfo>;

struct hash<google.golang.org/grpc/balancer.SubConn,google.golang.org/grpc/balancer/base.SubConnInfo> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/grpc/balancer.SubConn,google.golang.org/grpc/balancer/base.SubConnInfo> *buckets;
    struct bucket<google.golang.org/grpc/balancer.SubConn,google.golang.org/grpc/balancer/base.SubConnInfo> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<google.golang.org/grpc/balancer.SubConn,google.golang.org/grpc/balancer/base.SubConnInfo> {
    uint8 tophash[8];
    google.golang.org/grpc/balancer.SubConn keys[8];
    struct google.golang.org/grpc/balancer/base.SubConnInfo values[8];
    struct bucket<google.golang.org/grpc/balancer.SubConn,google.golang.org/grpc/balancer/base.SubConnInfo> *overflow;
};

typedef struct bytes.Buffer bytes.Buffer, *Pbytes.Buffer;

struct bytes.Buffer {
    struct []uint8 buf;
    int off;
    bytes.readOp lastRead;
};

typedef struct runtime.iface google.golang.org/grpc.ServerTransportStream;

typedef struct go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource, *Pgo.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource;

typedef struct vendor/golang.org/x/net/dns/dnsmessage.Resource vendor/golang.org/x/net/dns/dnsmessage.Resource, *Pvendor/golang.org/x/net/dns/dnsmessage.Resource;

typedef struct vendor/golang.org/x/net/dns/dnsmessage.ResourceHeader vendor/golang.org/x/net/dns/dnsmessage.ResourceHeader, *Pvendor/golang.org/x/net/dns/dnsmessage.ResourceHeader;

typedef struct runtime.iface vendor/golang.org/x/net/dns/dnsmessage.ResourceBody;

typedef struct vendor/golang.org/x/net/dns/dnsmessage.Name vendor/golang.org/x/net/dns/dnsmessage.Name, *Pvendor/golang.org/x/net/dns/dnsmessage.Name;

struct go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource {
    struct vendor/golang.org/x/net/dns/dnsmessage.Resource *array;
    int len;
    int cap;
};

struct vendor/golang.org/x/net/dns/dnsmessage.Name {
    uint8 Data[255];
    uint8 Length;
};

struct vendor/golang.org/x/net/dns/dnsmessage.ResourceHeader {
    struct vendor/golang.org/x/net/dns/dnsmessage.Name Name;
    vendor/golang.org/x/net/dns/dnsmessage.Type Type;
    vendor/golang.org/x/net/dns/dnsmessage.Class Class;
    uint32 TTL;
    uint16 Length;
};

struct vendor/golang.org/x/net/dns/dnsmessage.Resource {
    struct vendor/golang.org/x/net/dns/dnsmessage.ResourceHeader Header;
    vendor/golang.org/x/net/dns/dnsmessage.ResourceBody Body;
};

typedef struct strings.stringFinder strings.stringFinder, *Pstrings.stringFinder;

struct strings.stringFinder {
    struct string pattern;
    int badCharSkip[256];
    struct []int goodSuffixSkip;
};

typedef struct bucket<string,[]net.nssSource> bucket<string,[]net.nssSource>, *Pbucket<string,[]net.nssSource>;

typedef struct []net.nssSource []net.nssSource, *P[]net.nssSource;

typedef struct net.nssSource net.nssSource, *Pnet.nssSource;

typedef struct []net.nssCriterion []net.nssCriterion, *P[]net.nssCriterion;

typedef struct net.nssCriterion net.nssCriterion, *Pnet.nssCriterion;

struct net.nssCriterion {
    bool negate;
    struct string status;
    struct string action;
};

struct []net.nssCriterion {
    struct net.nssCriterion *array;
    int len;
    int cap;
};

struct []net.nssSource {
    struct net.nssSource *array;
    int len;
    int cap;
};

struct bucket<string,[]net.nssSource> {
    uint8 tophash[8];
    struct string keys[8];
    struct []net.nssSource values[8];
    struct bucket<string,[]net.nssSource> *overflow;
};

struct net.nssSource {
    struct string source;
    struct []net.nssCriterion criteria;
};

typedef struct internal/abi.FuncType internal/abi.FuncType, *Pinternal/abi.FuncType;

struct internal/abi.FuncType {
    struct internal/abi.Type Type;
    uint16 InCount;
    uint16 OutCount;
};

typedef struct golang.org/x/net/trace.traceSet golang.org/x/net/trace.traceSet, *Pgolang.org/x/net/trace.traceSet;

typedef struct golang.org/x/net/trace.traceSet *noalg.[8]*golang.org/x/net/trace.traceSet[8];

struct golang.org/x/net/trace.traceSet {
    struct sync.RWMutex mu;
    map[*golang.org/x/net/trace.trace]bool m;
};

typedef struct google.golang.org/grpc/stats.InPayload google.golang.org/grpc/stats.InPayload, *Pgoogle.golang.org/grpc/stats.InPayload;

struct google.golang.org/grpc/stats.InPayload {
    bool Client;
    interface_{} Payload;
    struct []uint8 Data;
    int Length;
    int CompressedLength;
    int WireLength;
    struct time.Time RecvTime;
};

typedef struct runtime.iface interface_{_GoPackagePath()_string_};

typedef struct [][8]vendor/golang.org/x/net/idna.joinState [][8]vendor/golang.org/x/net/idna.joinState, *P[][8]vendor/golang.org/x/net/idna.joinState;

struct [][8]vendor/golang.org/x/net/idna.joinState {
    vendor/golang.org/x/net/idna.joinState (*array)[8];
    int len;
    int cap;
};

typedef struct sync/atomic.Pointer[go.shape.interface_{}] sync/atomic.Pointer[go.shape.interface_{}], *Psync/atomic.Pointer[go.shape.interface_{}];

typedef struct runtime.eface go.shape.interface_{};

struct sync/atomic.Pointer[go.shape.interface_{}] { // Original name: sync/atomic.Pointer[go.shape.interface {}]
    struct sync/atomic.noCopy _;
    go.shape.interface_{} *_[0];
    void *v;
};

typedef struct bucket<int32,string> bucket<int32,string>, *Pbucket<int32,string>;

struct bucket<int32,string> {
    uint8 tophash[8];
    int32 keys[8];
    struct string values[8];
    struct bucket<int32,string> *overflow;
};

typedef struct go.shape.struct_{_runtime.stack_runtime.stack;_runtime.stackguard0_uintptr;_runtime.stackguard1_uintptr;_runtime._panic_*runtime._panic;_runtime._defer_*runtime._defer;_runtime.m_*runtime.m;_runtime.sched_runtime.gobuf;_runtime.syscallsp_uintptr;_runtime.syscallpc_uintptr;_runtime.stktopsp_uintptr;_runtime.param_unsafe.Pointer;_runtime.atomicstatus_runtime/internal/atomic.Uint32;_runtime.stackLock_uint32;_runtime.goid_uint64;_runtime.schedlink_runtime.guintptr;_runtime.waitsince_int64;_runtime.waitreason_runtime.waitReason;_runtime.preempt_bool;_runtime.preemptStop_bool;_runtime.preemptShrink_bool;_runtime.asyncSafePoint_bool;_runtime.paniconfault_bool;_runtime.gcscandone_bool;_runtime.throwsplit_bool;_runtime.activeStackChans_bool;_runtime.parkingOnChan_runtime/internal/atomic.Bool;_runtime.raceignore_int8;_runtime.tracking_bool;_runtime.trackingSeq_uint8;_runtime.trackingStamp_int64;_runtime.runnableTime_int64;_runtime.lockedm_runtime.muintptr;_runtime.sig_uint32;_runtime.writebuf_[]uint8;_runtime.sigcode0_uintptr;_runtime.sigcode1_uintptr;_runtime.sigpc_uintptr;_runtime.parentGoid_uint64;_runtime.gopc_uintptr;_runtime.ancestors_*[]runtime.ancestorInfo;_runtime.startpc_uintptr;_runtime.racectx_uintptr;_runtime.waiting_*runtime.sudog;_runtime.cgoCtxt_[]uintptr;_runtime.labels_unsafe.Pointer;_runtime.timer_*runtime.timer;_runtime.selectDone_runtime/internal/atomic.Uint32;_runtime.goroutineProfiled_runtime.goroutineProfileStateHolder;_runtime.trace_runtime.gTraceState;_runtime.gcAssistBytes_int64_} go.shape.struct_{_runtime.stack_runtime.stack;_runtime.stackguard0_uintptr;_runtime.stackguard1_uintptr;_runtime._panic_*runtime._panic;_runtime._defer_*runtime._defer;_runtime.m_*runtime.m;_runtime.sched_runtime.gobuf;_runtime.syscallsp_uintptr;_runtime.syscallpc_uintptr;_runtime.stktopsp_uintptr;_runtime.param_unsafe.Pointer;_runtime.atomicstatus_runtime/internal/atomic.Uint32;_runtime.stackLock_uint32;_runtime.goid_uint64;_runtime.schedlink_runtime.guintptr;_runtime.waitsince_int64;_runtime.waitreason_runtime.waitReason;_runtime.preempt_bool;_runtime.preemptStop_bool;_runtime.preemptShrink_bool;_runtime.asyncSafePoint_bool;_runtime.paniconfault_bool;_runtime.gcscandone_bool;_runtime.throwsplit_bool;_runtime.activeStackChans_bool;_runtime.parkingOnChan_runtime/internal/atomic.Bool;_runtime.raceignore_int8;_runtime.tracking_bool;_runtime.trackingSeq_uint8;_runtime.trackingStamp_int64;_runtime.runnableTime_int64;_runtime.lockedm_runtime.muintptr;_runtime.sig_uint32;_runtime.writebuf_[]uint8;_runtime.sigcode0_uintptr;_runtime.sigcode1_uintptr;_runtime.sigpc_uintptr;_runtime.parentGoid_uint64;_runtime.gopc_uintptr;_runtime.ancestors_*[]runtime.ancestorInfo;_runtime.startpc_uintptr;_runtime.racectx_uintptr;_runtime.waiting_*runtime.sudog;_runtime.cgoCtxt_[]uintptr;_runtime.labels_unsafe.Pointer;_runtime.timer_*runtime.timer;_runtime.selectDone_runtime/internal/atomic.Uint32;_runtime.goroutineProfiled_runtime.goroutineProfileStateHolder;_runtime.trace_runtime.gTraceState;_runtime.gcAssistBytes_int64_}, *Pgo.shape.struct_{_runtime.stack_runtime.stack;_runtime.stackguard0_uintptr;_runtime.stackguard1_uintptr;_runtime._panic_*runtime._panic;_runtime._defer_*runtime._defer;_runtime.m_*runtime.m;_runtime.sched_runtime.gobuf;_runtime.syscallsp_uintptr;_runtime.syscallpc_uintptr;_runtime.stktopsp_uintptr;_runtime.param_unsafe.Pointer;_runtime.atomicstatus_runtime/internal/atomic.Uint32;_runtime.stackLock_uint32;_runtime.goid_uint64;_runtime.schedlink_runtime.guintptr;_runtime.waitsince_int64;_runtime.waitreason_runtime.waitReason;_runtime.preempt_bool;_runtime.preemptStop_bool;_runtime.preemptShrink_bool;_runtime.asyncSafePoint_bool;_runtime.paniconfault_bool;_runtime.gcscandone_bool;_runtime.throwsplit_bool;_runtime.activeStackChans_bool;_runtime.parkingOnChan_runtime/internal/atomic.Bool;_runtime.raceignore_int8;_runtime.tracking_bool;_runtime.trackingSeq_uint8;_runtime.trackingStamp_int64;_runtime.runnableTime_int64;_runtime.lockedm_runtime.muintptr;_runtime.sig_uint32;_runtime.writebuf_[]uint8;_runtime.sigcode0_uintptr;_runtime.sigcode1_uintptr;_runtime.sigpc_uintptr;_runtime.parentGoid_uint64;_runtime.gopc_uintptr;_runtime.ancestors_*[]runtime.ancestorInfo;_runtime.startpc_uintptr;_runtime.racectx_uintptr;_runtime.waiting_*runtime.sudog;_runtime.cgoCtxt_[]uintptr;_runtime.labels_unsafe.Pointer;_runtime.timer_*runtime.timer;_runtime.selectDone_runtime/internal/atomic.Uint32;_runtime.goroutineProfiled_runtime.goroutineProfileStateHolder;_runtime.trace_runtime.gTraceState;_runtime.gcAssistBytes_int64_};

struct go.shape.struct_{_runtime.stack_runtime.stack;_runtime.stackguard0_uintptr;_runtime.stackguard1_uintptr;_runtime._panic_*runtime._panic;_runtime._defer_*runtime._defer;_runtime.m_*runtime.m;_runtime.sched_runtime.gobuf;_runtime.syscallsp_uintptr;_runtime.syscallpc_uintptr;_runtime.stktopsp_uintptr;_runtime.param_unsafe.Pointer;_runtime.atomicstatus_runtime/internal/atomic.Uint32;_runtime.stackLock_uint32;_runtime.goid_uint64;_runtime.schedlink_runtime.guintptr;_runtime.waitsince_int64;_runtime.waitreason_runtime.waitReason;_runtime.preempt_bool;_runtime.preemptStop_bool;_runtime.preemptShrink_bool;_runtime.asyncSafePoint_bool;_runtime.paniconfault_bool;_runtime.gcscandone_bool;_runtime.throwsplit_bool;_runtime.activeStackChans_bool;_runtime.parkingOnChan_runtime/internal/atomic.Bool;_runtime.raceignore_int8;_runtime.tracking_bool;_runtime.trackingSeq_uint8;_runtime.trackingStamp_int64;_runtime.runnableTime_int64;_runtime.lockedm_runtime.muintptr;_runtime.sig_uint32;_runtime.writebuf_[]uint8;_runtime.sigcode0_uintptr;_runtime.sigcode1_uintptr;_runtime.sigpc_uintptr;_runtime.parentGoid_uint64;_runtime.gopc_uintptr;_runtime.ancestors_*[]runtime.ancestorInfo;_runtime.startpc_uintptr;_runtime.racectx_uintptr;_runtime.waiting_*runtime.sudog;_runtime.cgoCtxt_[]uintptr;_runtime.labels_unsafe.Pointer;_runtime.timer_*runtime.timer;_runtime.selectDone_runtime/internal/atomic.Uint32;_runtime.goroutineProfiled_runtime.goroutineProfileStateHolder;_runtime.trace_runtime.gTraceState;_runtime.gcAssistBytes_int64_} { // Original name: go.shape.struct { runtime.stack runtime.stack; runtime.stackguard0 uintptr; runtime.stackguard1 uintptr; runtime._panic *runtime._panic; runtime._defer *runtime._defer; runtime.m *runtime.m; runtime.sched runtime.gobuf; runtime.syscallsp uintptr; runtime.syscallpc uintptr; runtime.stktopsp uintptr; runtime.param unsafe.Pointer; runtime.atomicstatus runtime/internal/atomic.Uint32; runtime.stackLock uint32; runtime.goid uint64; runtime.schedlink runtime.guintptr; runtime.waitsince int64; runtime.waitreason runtime.waitReason; runtime.preempt bool; runtime.preemptStop bool; runtime.preemptShrink bool; runtime.asyncSafePoint bool; runtime.paniconfault bool; runtime.gcscandone bool; runtime.throwsplit bool; runtime.activeStackChans bool; runtime.parkingOnChan runtime/internal/atomic.Bool; runtime.raceignore int8; runtime.tracking bool; runtime.trackingSeq uint8; runtime.trackingStamp int64; runtime.runnableTime int64; runtime.lockedm runtime.muintptr; runtime.sig uint32; runtime.writebuf []uint8; runtime.sigcode0 uintptr; runtime.sigcode1 uintptr; runtime.sigpc uintptr; runtime.parentGoid uint64; runtime.gopc uintptr; runtime.ancestors *[]runtime.ancestorInfo; runtime.startpc uintptr; runtime.racectx uintptr; runtime.waiting *runtime.sudog; runtime.cgoCtxt []uintptr; runtime.labels unsafe.Pointer; runtime.timer *runtime.timer; runtime.selectDone runtime/internal/atomic.Uint32; runtime.goroutineProfiled runtime.goroutineProfileStateHolder; runtime.trace runtime.gTraceState; runtime.gcAssistBytes int64 }
    struct runtime.stack stack;
    uintptr stackguard0;
    uintptr stackguard1;
    struct runtime._panic *_panic;
    struct runtime._defer *_defer;
    struct runtime.m *m;
    struct runtime.gobuf sched;
    uintptr syscallsp;
    uintptr syscallpc;
    uintptr stktopsp;
    void *param;
    struct runtime/internal/atomic.Uint32 atomicstatus;
    uint32 stackLock;
    uint64 goid;
    runtime.guintptr schedlink;
    int64 waitsince;
    runtime.waitReason waitreason;
    bool preempt;
    bool preemptStop;
    bool preemptShrink;
    bool asyncSafePoint;
    bool paniconfault;
    bool gcscandone;
    bool throwsplit;
    bool activeStackChans;
    struct runtime/internal/atomic.Bool parkingOnChan;
    int8 raceignore;
    bool tracking;
    uint8 trackingSeq;
    int64 trackingStamp;
    int64 runnableTime;
    runtime.muintptr lockedm;
    uint32 sig;
    struct []uint8 writebuf;
    uintptr sigcode0;
    uintptr sigcode1;
    uintptr sigpc;
    uint64 parentGoid;
    uintptr gopc;
    struct []runtime.ancestorInfo *ancestors;
    uintptr startpc;
    uintptr racectx;
    struct runtime.sudog *waiting;
    struct []uintptr cgoCtxt;
    void *labels;
    struct runtime.timer *timer;
    struct runtime/internal/atomic.Uint32 selectDone;
    struct runtime.goroutineProfileStateHolder goroutineProfiled;
    struct runtime.gTraceState trace;
    int64 gcAssistBytes;
};

typedef struct syscall.SockaddrLinklayer syscall.SockaddrLinklayer, *Psyscall.SockaddrLinklayer;

typedef struct syscall.RawSockaddrLinklayer syscall.RawSockaddrLinklayer, *Psyscall.RawSockaddrLinklayer;

struct syscall.RawSockaddrLinklayer {
    uint16 Family;
    uint16 Protocol;
    int32 Ifindex;
    uint16 Hatype;
    uint8 Pkttype;
    uint8 Halen;
    uint8 Addr[8];
};

struct syscall.SockaddrLinklayer {
    uint16 Protocol;
    int Ifindex;
    uint16 Hatype;
    uint8 Pkttype;
    uint8 Halen;
    uint8 Addr[8];
    struct syscall.RawSockaddrLinklayer raw;
};

typedef struct google.golang.org/grpc.addrConnStream google.golang.org/grpc.addrConnStream, *Pgoogle.golang.org/grpc.addrConnStream;

typedef struct google.golang.org/grpc/internal/transport.Stream google.golang.org/grpc/internal/transport.Stream, *Pgoogle.golang.org/grpc/internal/transport.Stream;

typedef struct google.golang.org/grpc/internal/transport.CallHdr google.golang.org/grpc/internal/transport.CallHdr, *Pgoogle.golang.org/grpc/internal/transport.CallHdr;

typedef struct google.golang.org/grpc.callInfo google.golang.org/grpc.callInfo, *Pgoogle.golang.org/grpc.callInfo;

typedef struct runtime.iface google.golang.org/grpc.baseCodec;

typedef struct runtime.iface google.golang.org/grpc/encoding.Compressor;

typedef struct google.golang.org/grpc.parser google.golang.org/grpc.parser, *Pgoogle.golang.org/grpc.parser;

typedef struct runtime.iface google.golang.org/grpc/internal/transport.ServerTransport;

typedef struct google.golang.org/grpc/internal/transport.http2Client google.golang.org/grpc/internal/transport.http2Client, *Pgoogle.golang.org/grpc/internal/transport.http2Client;

typedef struct hchan<struct_{}> *<-chan_struct_{};

typedef struct google.golang.org/grpc/internal/transport.recvBuffer google.golang.org/grpc/internal/transport.recvBuffer, *Pgoogle.golang.org/grpc/internal/transport.recvBuffer;

typedef struct runtime.iface io.Reader;

typedef struct google.golang.org/grpc/internal/transport.inFlow google.golang.org/grpc/internal/transport.inFlow, *Pgoogle.golang.org/grpc/internal/transport.inFlow;

typedef struct google.golang.org/grpc/internal/transport.writeQuota google.golang.org/grpc/internal/transport.writeQuota, *Pgoogle.golang.org/grpc/internal/transport.writeQuota;

typedef struct google.golang.org/grpc/internal/status.Status google.golang.org/grpc/internal/status.Status, *Pgoogle.golang.org/grpc/internal/status.Status;

typedef struct []func(error) []func(error), *P[]func(error);

typedef struct google.golang.org/grpc/internal/transport.loopyWriter google.golang.org/grpc/internal/transport.loopyWriter, *Pgoogle.golang.org/grpc/internal/transport.loopyWriter;

typedef struct google.golang.org/grpc/internal/transport.goAway google.golang.org/grpc/internal/transport.goAway, *Pgoogle.golang.org/grpc/internal/transport.goAway;

typedef struct runtime.iface google.golang.org/grpc/credentials.AuthInfo;

typedef struct google.golang.org/grpc/internal/transport.framer google.golang.org/grpc/internal/transport.framer, *Pgoogle.golang.org/grpc/internal/transport.framer;

typedef struct google.golang.org/grpc/internal/transport.controlBuffer google.golang.org/grpc/internal/transport.controlBuffer, *Pgoogle.golang.org/grpc/internal/transport.controlBuffer;

typedef struct google.golang.org/grpc/internal/transport.trInFlow google.golang.org/grpc/internal/transport.trInFlow, *Pgoogle.golang.org/grpc/internal/transport.trInFlow;

typedef struct google.golang.org/grpc/internal/transport.bdpEstimator google.golang.org/grpc/internal/transport.bdpEstimator, *Pgoogle.golang.org/grpc/internal/transport.bdpEstimator;

typedef struct hash<uint32,*google.golang.org/grpc/internal/transport.Stream> hash<uint32,*google.golang.org/grpc/internal/transport.Stream>, *Phash<uint32,*google.golang.org/grpc/internal/transport.Stream>;

typedef struct hash<uint32,*google.golang.org/grpc/internal/transport.Stream> *map[uint32]*google.golang.org/grpc/internal/transport.Stream;

typedef struct sync.Cond sync.Cond, *Psync.Cond;

typedef struct google.golang.org/grpc/internal/transport.bufferPool google.golang.org/grpc/internal/transport.bufferPool, *Pgoogle.golang.org/grpc/internal/transport.bufferPool;

typedef struct google.golang.org/grpc/internal/grpclog.PrefixLogger google.golang.org/grpc/internal/grpclog.PrefixLogger, *Pgoogle.golang.org/grpc/internal/grpclog.PrefixLogger;

typedef struct hchan<google.golang.org/grpc/internal/transport.recvMsg> hchan<google.golang.org/grpc/internal/transport.recvMsg>, *Phchan<google.golang.org/grpc/internal/transport.recvMsg>;

typedef struct hchan<google.golang.org/grpc/internal/transport.recvMsg> *chan_google.golang.org/grpc/internal/transport.recvMsg;

typedef struct []google.golang.org/grpc/internal/transport.recvMsg []google.golang.org/grpc/internal/transport.recvMsg, *P[]google.golang.org/grpc/internal/transport.recvMsg;

typedef struct google.golang.org/genproto/googleapis/rpc/status.Status google.golang.org/genproto/googleapis/rpc/status.Status, *Pgoogle.golang.org/genproto/googleapis/rpc/status.Status;

typedef struct hash<uint32,*google.golang.org/grpc/internal/transport.outStream> hash<uint32,*google.golang.org/grpc/internal/transport.outStream>, *Phash<uint32,*google.golang.org/grpc/internal/transport.outStream>;

typedef struct hash<uint32,*google.golang.org/grpc/internal/transport.outStream> *map[uint32]*google.golang.org/grpc/internal/transport.outStream;

typedef struct google.golang.org/grpc/internal/transport.outStreamList google.golang.org/grpc/internal/transport.outStreamList, *Pgoogle.golang.org/grpc/internal/transport.outStreamList;

typedef struct golang.org/x/net/http2/hpack.Encoder golang.org/x/net/http2/hpack.Encoder, *Pgolang.org/x/net/http2/hpack.Encoder;

typedef struct google.golang.org/grpc/internal/transport.bufWriter google.golang.org/grpc/internal/transport.bufWriter, *Pgoogle.golang.org/grpc/internal/transport.bufWriter;

typedef struct golang.org/x/net/http2.Framer golang.org/x/net/http2.Framer, *Pgolang.org/x/net/http2.Framer;

typedef struct google.golang.org/grpc/internal/transport.itemList google.golang.org/grpc/internal/transport.itemList, *Pgoogle.golang.org/grpc/internal/transport.itemList;

typedef struct bucket<uint32,*google.golang.org/grpc/internal/transport.Stream> bucket<uint32,*google.golang.org/grpc/internal/transport.Stream>, *Pbucket<uint32,*google.golang.org/grpc/internal/transport.Stream>;

typedef struct sync.noCopy sync.noCopy, *Psync.noCopy;

typedef struct runtime.iface sync.Locker;

typedef struct sync.notifyList sync.notifyList, *Psync.notifyList;

typedef struct sync.Pool sync.Pool, *Psync.Pool;

typedef struct runtime.iface google.golang.org/grpc/internal/grpclog.DepthLoggerV2;

typedef struct waitq<google.golang.org/grpc/internal/transport.recvMsg> waitq<google.golang.org/grpc/internal/transport.recvMsg>, *Pwaitq<google.golang.org/grpc/internal/transport.recvMsg>;

typedef struct google.golang.org/grpc/internal/transport.recvMsg google.golang.org/grpc/internal/transport.recvMsg, *Pgoogle.golang.org/grpc/internal/transport.recvMsg;

typedef struct google.golang.org/protobuf/internal/impl.MessageState google.golang.org/protobuf/internal/impl.MessageState, *Pgoogle.golang.org/protobuf/internal/impl.MessageState;

typedef struct []*google.golang.org/protobuf/types/known/anypb.Any []*google.golang.org/protobuf/types/known/anypb.Any, *P[]*google.golang.org/protobuf/types/known/anypb.Any;

typedef struct bucket<uint32,*google.golang.org/grpc/internal/transport.outStream> bucket<uint32,*google.golang.org/grpc/internal/transport.outStream>, *Pbucket<uint32,*google.golang.org/grpc/internal/transport.outStream>;

typedef struct google.golang.org/grpc/internal/transport.outStream google.golang.org/grpc/internal/transport.outStream, *Pgoogle.golang.org/grpc/internal/transport.outStream;

typedef struct golang.org/x/net/http2/hpack.dynamicTable golang.org/x/net/http2/hpack.dynamicTable, *Pgolang.org/x/net/http2/hpack.dynamicTable;

typedef struct runtime.iface golang.org/x/net/http2.Frame;

typedef struct golang.org/x/net/http2/hpack.Decoder golang.org/x/net/http2/hpack.Decoder, *Pgolang.org/x/net/http2/hpack.Decoder;

typedef struct golang.org/x/net/http2/hpack.HeaderField golang.org/x/net/http2/hpack.HeaderField, *Pgolang.org/x/net/http2/hpack.HeaderField;

typedef struct golang.org/x/net/http2.frameCache golang.org/x/net/http2.frameCache, *Pgolang.org/x/net/http2.frameCache;

typedef struct google.golang.org/grpc/internal/transport.itemNode google.golang.org/grpc/internal/transport.itemNode, *Pgoogle.golang.org/grpc/internal/transport.itemNode;

typedef struct sudog<google.golang.org/grpc/internal/transport.recvMsg> sudog<google.golang.org/grpc/internal/transport.recvMsg>, *Psudog<google.golang.org/grpc/internal/transport.recvMsg>;

typedef struct google.golang.org/protobuf/types/known/anypb.Any google.golang.org/protobuf/types/known/anypb.Any, *Pgoogle.golang.org/protobuf/types/known/anypb.Any;

typedef struct golang.org/x/net/http2/hpack.headerFieldTable golang.org/x/net/http2/hpack.headerFieldTable, *Pgolang.org/x/net/http2/hpack.headerFieldTable;

typedef struct golang.org/x/net/http2.DataFrame golang.org/x/net/http2.DataFrame, *Pgolang.org/x/net/http2.DataFrame;

typedef struct []golang.org/x/net/http2/hpack.HeaderField []golang.org/x/net/http2/hpack.HeaderField, *P[]golang.org/x/net/http2/hpack.HeaderField;

typedef struct hash<string,uint64> hash<string,uint64>, *Phash<string,uint64>;

typedef struct hash<string,uint64> *map[string]uint64;

typedef struct hash<golang.org/x/net/http2/hpack.pairNameValue,uint64> hash<golang.org/x/net/http2/hpack.pairNameValue,uint64>, *Phash<golang.org/x/net/http2/hpack.pairNameValue,uint64>;

typedef struct hash<golang.org/x/net/http2/hpack.pairNameValue,uint64> *map[golang.org/x/net/http2/hpack.pairNameValue]uint64;

typedef struct golang.org/x/net/http2.FrameHeader golang.org/x/net/http2.FrameHeader, *Pgolang.org/x/net/http2.FrameHeader;

typedef struct bucket<string,uint64> bucket<string,uint64>, *Pbucket<string,uint64>;

typedef struct bucket<golang.org/x/net/http2/hpack.pairNameValue,uint64> bucket<golang.org/x/net/http2/hpack.pairNameValue,uint64>, *Pbucket<golang.org/x/net/http2/hpack.pairNameValue,uint64>;

typedef struct golang.org/x/net/http2/hpack.pairNameValue golang.org/x/net/http2/hpack.pairNameValue, *Pgolang.org/x/net/http2/hpack.pairNameValue;

struct sync.noCopy {
};

struct sync.Pool {
    struct sync.noCopy noCopy;
    void *local;
    uintptr localSize;
    void *victim;
    uintptr victimSize;
    void (**New)(interface_{} *);
};

struct google.golang.org/grpc/internal/transport.bufferPool {
    struct sync.Pool pool;
};

struct sync.notifyList {
    uint32 wait;
    uint32 notify;
    uintptr lock;
    void *head;
    void *tail;
};

struct sync.Cond {
    struct sync.noCopy noCopy;
    sync.Locker L;
    struct sync.notifyList notify;
    sync.copyChecker checker;
};

struct bucket<uint32,*google.golang.org/grpc/internal/transport.Stream> {
    uint8 tophash[8];
    uint32 keys[8];
    struct google.golang.org/grpc/internal/transport.Stream *values[8];
    struct bucket<uint32,*google.golang.org/grpc/internal/transport.Stream> *overflow;
};

struct golang.org/x/net/http2/hpack.pairNameValue {
    struct string name;
    struct string value;
};

struct bucket<golang.org/x/net/http2/hpack.pairNameValue,uint64> {
    uint8 tophash[8];
    struct golang.org/x/net/http2/hpack.pairNameValue keys[8];
    uint64 values[8];
    struct bucket<golang.org/x/net/http2/hpack.pairNameValue,uint64> *overflow;
};

struct google.golang.org/grpc/internal/transport.http2Client {
    int64 lastRead;
    context.Context ctx;
    void (**cancel)(void);
    <-chan_struct_{} ctxDone;
    struct string userAgent;
    struct google.golang.org/grpc/resolver.Address address;
    google.golang.org/grpc/metadata.MD md;
    net.Conn conn;
    struct google.golang.org/grpc/internal/transport.loopyWriter *loopy;
    net.Addr remoteAddr;
    net.Addr localAddr;
    google.golang.org/grpc/credentials.AuthInfo authInfo;
    chan_struct_{} readerDone;
    chan_struct_{} writerDone;
    chan_struct_{} goAway;
    struct google.golang.org/grpc/internal/transport.framer *framer;
    struct google.golang.org/grpc/internal/transport.controlBuffer *controlBuf;
    struct google.golang.org/grpc/internal/transport.trInFlow *fc;
    struct string scheme;
    bool isSecure;
    struct []google.golang.org/grpc/credentials.PerRPCCredentials perRPCCreds;
    struct google.golang.org/grpc/keepalive.ClientParameters kp;
    bool keepaliveEnabled;
    struct []google.golang.org/grpc/stats.Handler statsHandlers;
    int32 initialWindowSize;
    uint32 *maxSendHeaderListSize;
    struct google.golang.org/grpc/internal/transport.bdpEstimator *bdpEst;
    uint32 maxConcurrentStreams;
    int64 streamQuota;
    chan_struct_{} streamsQuotaAvailable;
    uint32 waitingStreams;
    struct string registeredCompressors;
    struct sync.Mutex mu;
    uint32 nextID;
    google.golang.org/grpc/internal/transport.transportState state;
    map[uint32]*google.golang.org/grpc/internal/transport.Stream activeStreams;
    uint32 prevGoAwayID;
    google.golang.org/grpc/internal/transport.GoAwayReason goAwayReason;
    struct string goAwayDebugMessage;
    struct sync.Cond *kpDormancyCond;
    bool kpDormant;
    struct google.golang.org/grpc/internal/channelz.Socket *channelz;
    void (**onClose)(google.golang.org/grpc/internal/transport.GoAwayReason);
    struct google.golang.org/grpc/internal/transport.bufferPool *bufferPool;
    uint64 connectionID;
    struct google.golang.org/grpc/internal/grpclog.PrefixLogger *logger;
};

struct google.golang.org/grpc.addrConnStream {
    struct google.golang.org/grpc/internal/transport.Stream *s;
    struct google.golang.org/grpc.addrConn *ac;
    struct google.golang.org/grpc/internal/transport.CallHdr *callHdr;
    void (**cancel)(void);
    struct []google.golang.org/grpc.CallOption opts;
    struct google.golang.org/grpc.callInfo *callInfo;
    google.golang.org/grpc/internal/transport.ClientTransport t;
    context.Context ctx;
    bool sentLast;
    struct google.golang.org/grpc.StreamDesc *desc;
    google.golang.org/grpc.baseCodec codec;
    google.golang.org/grpc.Compressor cp;
    google.golang.org/grpc/encoding.Compressor comp;
    bool decompSet;
    google.golang.org/grpc.Decompressor dc;
    google.golang.org/grpc/encoding.Compressor decomp;
    struct google.golang.org/grpc.parser *p;
    struct sync.Mutex mu;
    bool finished;
};

struct []golang.org/x/net/http2/hpack.HeaderField {
    struct golang.org/x/net/http2/hpack.HeaderField *array;
    int len;
    int cap;
