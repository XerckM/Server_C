
void io_fs_FileMode_Type(io_fs_FileMode m,io_fs_FileMode ~r0)

{
  return;
}



void io_fs___PathError__Error(io_fs_PathError *e,string ~r0)

{
  string a0;
  string ~r0_00;
  int unaff_RBP;
  int unaff_R14;
  string in_stack_ffffffffffffffb0;
  string in_stack_ffffffffffffffc0;
  string in_stack_ffffffffffffffd0;
  string in_stack_ffffffffffffffe0;
  uint8 *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  a0 = (string)(*(code *)((e->Err).tab)->fun[0])((e->Err).data);
  ~r0_00.len = unaff_RBP;
  ~r0_00.str = in_stack_fffffffffffffff0;
  runtime_concatstring5
            ((runtime_tmpBuf *)0x0,a0,in_stack_ffffffffffffffb0,in_stack_ffffffffffffffc0,
             in_stack_ffffffffffffffd0,in_stack_ffffffffffffffe0,~r0_00);
  return;
}



void io_fs___PathError__Unwrap(io_fs_PathError *e,error ~r0)

{
  return;
}



void io_fs___PathError__Timeout(io_fs_PathError *e,bool ~r0)

{
  int extraout_RAX;
  undefined8 extraout_RBX;
  int unaff_R14;
  runtime_iface in_stack_ffffffffffffffd0;
  runtime_iface in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_assertI2I2((internal_abi_InterfaceType *)&DAT_0082c980,in_stack_ffffffffffffffd0,
                     in_stack_ffffffffffffffe0);
  if (extraout_RAX != 0) {
    (**(code **)(extraout_RAX + 0x18))(extraout_RBX);
  }
  return;
}



int io_fs_init(EVP_PKEY_CTX *ctx)

{
  runtime_itab *prVar1;
  void *extraout_RCX;
  void *extraout_RCX_00;
  void *extraout_RCX_01;
  void *extraout_RCX_02;
  void *pvVar2;
  void *extraout_RCX_03;
  void *pvVar3;
  void **extraout_R11;
  void **extraout_R11_00;
  void **extraout_R11_01;
  void **extraout_R11_02;
  void **extraout_R11_03;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  io_fs_ErrInvalid.tab = internal_oserror_ErrInvalid.tab;
  pvVar3 = internal_oserror_ErrInvalid.data;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RCX;
    extraout_R11[1] = io_fs_ErrInvalid.data;
    pvVar3 = extraout_RCX;
  }
  io_fs_ErrPermission.tab = internal_oserror_ErrPermission.tab;
  pvVar2 = internal_oserror_ErrPermission.data;
  io_fs_ErrInvalid.data = pvVar3;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = extraout_RCX_00;
    extraout_R11_00[1] = io_fs_ErrPermission.data;
    pvVar2 = extraout_RCX_00;
  }
  io_fs_ErrExist.tab = internal_oserror_ErrExist.tab;
  pvVar3 = internal_oserror_ErrExist.data;
  io_fs_ErrPermission.data = pvVar2;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_01 = extraout_RCX_01;
    extraout_R11_01[1] = io_fs_ErrExist.data;
    pvVar3 = extraout_RCX_01;
  }
  io_fs_ErrNotExist.tab = internal_oserror_ErrNotExist.tab;
  pvVar2 = internal_oserror_ErrNotExist.data;
  io_fs_ErrExist.data = pvVar3;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_02 = extraout_RCX_02;
    extraout_R11_02[1] = io_fs_ErrNotExist.data;
    pvVar2 = extraout_RCX_02;
  }
  io_fs_ErrClosed.tab = internal_oserror_ErrClosed.tab;
  prVar1 = internal_oserror_ErrClosed.tab;
  pvVar3 = internal_oserror_ErrClosed.data;
  io_fs_ErrNotExist.data = pvVar2;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_03 = extraout_RCX_03;
    extraout_R11_03[1] = io_fs_ErrClosed.data;
    prVar1 = (runtime_itab *)io_fs_ErrClosed.data;
    pvVar3 = extraout_RCX_03;
  }
  io_fs_ErrClosed.data = pvVar3;
  return (int)prVar1;
}



void type__eq_io_fs_PathError(io_fs_PathError *p,io_fs_PathError *q,bool r)

{
  runtime_itab *tab;
  char extraout_AL;
  char extraout_AL_00;
  bool ~r0;
  int unaff_R14;
  io_fs_PathError *piStack0000000000000008;
  io_fs_PathError *piStack0000000000000010;
  
  piStack0000000000000008 = p;
  piStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (((((piStack0000000000000010->Op).len == (piStack0000000000000008->Op).len) &&
       ((piStack0000000000000008->Path).len == (piStack0000000000000010->Path).len)) &&
      (runtime_memequal(), extraout_AL != '\0')) &&
     ((runtime_memequal(), extraout_AL_00 != '\0' &&
      (tab = (piStack0000000000000008->Err).tab, (piStack0000000000000010->Err).tab == tab)))) {
    runtime_ifaceeq(tab,(piStack0000000000000008->Err).data,(piStack0000000000000010->Err).data,~r0)
    ;
  }
  return;
}



void io_fs___FileMode__IsDir(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void io_fs___FileMode__IsRegular(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void io_fs___FileMode__Perm(io_fs_FileMode ~r0)

{
  int *piVar1;
  undefined4 in_register_00000004;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT44(in_register_00000004,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void io_fs___FileMode__String(string ~r0)

{
  string **ppsVar1;
  string ~r0_00;
  io_fs_FileMode *in_RAX;
  int unaff_RBP;
  int unaff_R14;
  uint8 *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.str = (uint8 *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (io_fs_FileMode *)~r0.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &~r0)) {
    *ppsVar1 = (string *)&stack0xfffffffffffffff0;
  }
  if (in_RAX != (io_fs_FileMode *)0x0) {
    ~r0_00.len = unaff_RBP;
    ~r0_00.str = in_stack_fffffffffffffff0;
    io_fs_FileMode_String(*in_RAX,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void io_fs___FileMode__Type(io_fs_FileMode ~r0)

{
  int *piVar1;
  undefined4 in_register_00000004;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT44(in_register_00000004,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack
// DWARF original prototype: void internal/testlog.PanicOnExit0(bool ~r0, bool ~r0)

void internal_testlog_PanicOnExit0(bool ~r0,bool ~r0_1)

{
  int unaff_R14;
  bool bVar1;
  undefined local_20 [16];
  undefined *local_10;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  LOCK();
  bVar1 = internal_testlog_panicOnExit0.mu.state == 0;
  if (bVar1) {
    internal_testlog_panicOnExit0.mu.state = 1;
  }
  UNLOCK();
  if (!bVar1) {
    sync___Mutex__lockSlow(&internal_testlog_panicOnExit0.mu);
  }
  local_20._8_8_ = &internal_testlog_panicOnExit0;
  local_20._0_8_ = internal_testlog_PanicOnExit0_func1;
  local_10 = local_20;
  internal_testlog_PanicOnExit0_func1();
  return;
}



// WARNING: Unknown calling convention

void internal_testlog_PanicOnExit0_func1(void)

{
  int *piVar1;
  int in_RDX;
  int unaff_R14;
  undefined auStack_10 [8];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  sync___Mutex__Unlock(*(sync_Mutex **)(in_RDX + 8));
  return;
}



void internal_testlog_Getenv(string name)

{
  undefined8 in_RAX;
  void *typ;
  int iVar1;
  undefined8 in_RBX;
  void *data;
  int iVar2;
  int unaff_R14;
  undefined in_XMM15 [16];
  undefined local_18 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  local_18 = in_XMM15;
  if ((internal_testlog_logger.v._type != (internal_abi_Type *)0x0) &&
     (internal_testlog_logger.v._type != (internal_abi_Type *)&sync_atomic_firstStoreInProgress)) {
    local_18._8_8_ = internal_testlog_logger.v.data;
    local_18._0_8_ = internal_testlog_logger.v._type;
  }
  if ((internal_abi_Type *)local_18._0_8_ == (internal_abi_Type *)0x0) {
    iVar2 = 0;
    iVar1 = 0;
  }
  else {
    if ((internal_abi_Type *)local_18._0_8_ != (internal_abi_Type *)&DAT_007f9960) {
                    // WARNING: Subroutine does not return
      runtime_panicdottypeE
                ((internal_abi_Type *)local_18._0_8_,(internal_abi_Type *)&DAT_007f9960,
                 (internal_abi_Type *)&DAT_00821120);
    }
    iVar2 = *(int *)local_18._8_8_;
    iVar1 = *(int *)(local_18._8_8_ + 8);
  }
  if (iVar2 != 0) {
    (**(code **)(iVar2 + 0x20))(iVar1,in_RAX,in_RBX);
  }
  return;
}



void internal_testlog_Open(string name)

{
  undefined8 in_RAX;
  void *typ;
  int iVar1;
  undefined8 in_RBX;
  void *data;
  int iVar2;
  int unaff_R14;
  undefined in_XMM15 [16];
  undefined local_18 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  local_18 = in_XMM15;
  if ((internal_testlog_logger.v._type != (internal_abi_Type *)0x0) &&
     (internal_testlog_logger.v._type != (internal_abi_Type *)&sync_atomic_firstStoreInProgress)) {
    local_18._8_8_ = internal_testlog_logger.v.data;
    local_18._0_8_ = internal_testlog_logger.v._type;
  }
  if ((internal_abi_Type *)local_18._0_8_ == (internal_abi_Type *)0x0) {
    iVar2 = 0;
    iVar1 = 0;
  }
  else {
    if ((internal_abi_Type *)local_18._0_8_ != (internal_abi_Type *)&DAT_007f9960) {
                    // WARNING: Subroutine does not return
      runtime_panicdottypeE
                ((internal_abi_Type *)local_18._0_8_,(internal_abi_Type *)&DAT_007f9960,
                 (internal_abi_Type *)&DAT_00821120);
    }
    iVar2 = *(int *)local_18._8_8_;
    iVar1 = *(int *)(local_18._8_8_ + 8);
  }
  if (iVar2 != 0) {
    (**(code **)(iVar2 + 0x28))(iVar1,in_RAX,in_RBX);
  }
  return;
}



void internal_testlog_Stat(string name)

{
  undefined8 in_RAX;
  void *typ;
  int iVar1;
  undefined8 in_RBX;
  void *data;
  int iVar2;
  int unaff_R14;
  undefined in_XMM15 [16];
  undefined local_18 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  local_18 = in_XMM15;
  if ((internal_testlog_logger.v._type != (internal_abi_Type *)0x0) &&
     (internal_testlog_logger.v._type != (internal_abi_Type *)&sync_atomic_firstStoreInProgress)) {
    local_18._8_8_ = internal_testlog_logger.v.data;
    local_18._0_8_ = internal_testlog_logger.v._type;
  }
  if ((internal_abi_Type *)local_18._0_8_ == (internal_abi_Type *)0x0) {
    iVar2 = 0;
    iVar1 = 0;
  }
  else {
    if ((internal_abi_Type *)local_18._0_8_ != (internal_abi_Type *)&DAT_007f9960) {
                    // WARNING: Subroutine does not return
      runtime_panicdottypeE
                ((internal_abi_Type *)local_18._0_8_,(internal_abi_Type *)&DAT_007f9960,
                 (internal_abi_Type *)&DAT_00821120);
    }
    iVar2 = *(int *)local_18._8_8_;
    iVar1 = *(int *)(local_18._8_8_ + 8);
  }
  if (iVar2 != 0) {
    (**(code **)(iVar2 + 0x30))(iVar1,in_RAX,in_RBX);
  }
  return;
}



void internal_syscall_unix_CopyFileRange
               (int rfd,int64 *roff,int wfd,int64 *woff,int len,int flags,int n,error err)

{
  uintptr r1;
  uint64 val;
  syscall_Errno errno;
  void *x;
  uintptr in_R11;
  uintptr extraout_R11;
  int unaff_R14;
  syscall_Errno in_stack_ffffffffffffffa8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_R11 = extraout_R11;
  }
  syscall_Syscall6(0x146,rfd,(uintptr)roff,wfd,(uintptr)woff,len,flags,(uintptr)woff,in_R11,
                   in_stack_ffffffffffffffa8);
  if (val != 0) {
    runtime_convT64(val,x);
  }
  return;
}



void internal_syscall_unix_Fcntl(int fd,int cmd,int arg,int ~r0,error ~r1)

{
  int32 val;
  int iVar1;
  int32 errno;
  void *x;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar1 = runtime_fcntl(fd,cmd);
  val = (int32)iVar1;
  if (val == -1) {
    runtime_convT64((int)(sdword)x,x);
    return;
  }
  return;
}



void internal_syscall_unix_GetRandom
               (__uint8 p,internal_syscall_unix_GetRandomFlag flags,int n,error err)

{
  uintptr r1;
  uint64 val;
  syscall_Errno errno;
  sync_atomic_Bool *extraout_RBX;
  sync_atomic_Bool *x;
  uintptr in_RSI;
  uintptr extraout_RSI;
  uintptr in_RDI;
  uintptr in_R8;
  uintptr extraout_R8;
  syscall_Errno in_R9;
  syscall_Errno extraout_R9;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RSI = extraout_RSI;
    in_R8 = extraout_R8;
    in_R9 = extraout_R9;
  }
  if (n == 0) {
    return;
  }
  if (internal_syscall_unix_getrandomUnsupported.v != 0) {
    return;
  }
  syscall_Syscall(0x13e,flags,n,in_RDI,in_RSI,in_R8,in_R9);
  if (val != 0) {
    x = extraout_RBX;
    if (val == 0x26) {
      x = &internal_syscall_unix_getrandomUnsupported;
      LOCK();
      internal_syscall_unix_getrandomUnsupported.v = 1;
      UNLOCK();
    }
    runtime_convT64(val,x);
    return;
  }
  return;
}



void internal_syscall_unix_KernelVersion(int major,int minor)

{
  int extraout_RAX;
  int iVar1;
  int value;
  int vi;
  int8 c;
  int unaff_R14;
  error in_stack_fffffffffffffe10;
  int local_1e0 [2];
  char local_1cf;
  undefined4 uStack_1ce;
  undefined4 uStack_1ca;
  undefined4 uStack_1c6;
  undefined4 uStack_1c2;
  undefined4 local_1be;
  undefined4 uStack_1ba;
  undefined4 uStack_1b6;
  undefined4 uStack_1b2;
  undefined4 local_1ae;
  undefined4 uStack_1aa;
  undefined4 uStack_1a6;
  undefined4 uStack_1a2;
  undefined4 local_19e;
  undefined4 uStack_19a;
  undefined4 uStack_196;
  undefined4 uStack_192;
  syscall_Utsname local_18e;
  
  while (local_18e.Sysname + 0x1e <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  FUN_0046cd46();
  syscall_Uname(&local_18e,in_stack_fffffffffffffe10);
  if (extraout_RAX != 0) {
    return;
  }
  uStack_1ce._0_1_ = local_18e.Release[1];
  uStack_1ce._1_1_ = local_18e.Release[2];
  uStack_1ce._2_1_ = local_18e.Release[3];
  uStack_1ce._3_1_ = local_18e.Release[4];
  uStack_1ca._0_1_ = local_18e.Release[5];
  uStack_1ca._1_1_ = local_18e.Release[6];
  uStack_1ca._2_1_ = local_18e.Release[7];
  uStack_1ca._3_1_ = local_18e.Release[8];
  uStack_1c6._0_1_ = local_18e.Release[9];
  uStack_1c6._1_1_ = local_18e.Release[10];
  uStack_1c6._2_1_ = local_18e.Release[11];
  uStack_1c6._3_1_ = local_18e.Release[12];
  uStack_1c2._0_1_ = local_18e.Release[13];
  uStack_1c2._1_1_ = local_18e.Release[14];
  uStack_1c2._2_1_ = local_18e.Release[15];
  uStack_1c2._3_1_ = local_18e.Release[16];
  local_1be._0_1_ = local_18e.Release[17];
  local_1be._1_1_ = local_18e.Release[18];
  local_1be._2_1_ = local_18e.Release[19];
  local_1be._3_1_ = local_18e.Release[20];
  uStack_1ba._0_1_ = local_18e.Release[21];
  uStack_1ba._1_1_ = local_18e.Release[22];
  uStack_1ba._2_1_ = local_18e.Release[23];
  uStack_1ba._3_1_ = local_18e.Release[24];
  uStack_1b6._0_1_ = local_18e.Release[25];
  uStack_1b6._1_1_ = local_18e.Release[26];
  uStack_1b6._2_1_ = local_18e.Release[27];
  uStack_1b6._3_1_ = local_18e.Release[28];
  uStack_1b2._0_1_ = local_18e.Release[29];
  uStack_1b2._1_1_ = local_18e.Release[30];
  uStack_1b2._2_1_ = local_18e.Release[31];
  uStack_1b2._3_1_ = local_18e.Release[32];
  local_1ae._0_1_ = local_18e.Release[33];
  local_1ae._1_1_ = local_18e.Release[34];
  local_1ae._2_1_ = local_18e.Release[35];
  local_1ae._3_1_ = local_18e.Release[36];
  uStack_1aa._0_1_ = local_18e.Release[37];
  uStack_1aa._1_1_ = local_18e.Release[38];
  uStack_1aa._2_1_ = local_18e.Release[39];
  uStack_1aa._3_1_ = local_18e.Release[40];
  uStack_1a6._0_1_ = local_18e.Release[41];
  uStack_1a6._1_1_ = local_18e.Release[42];
  uStack_1a6._2_1_ = local_18e.Release[43];
  uStack_1a6._3_1_ = local_18e.Release[44];
  uStack_1a2._0_1_ = local_18e.Release[45];
  uStack_1a2._1_1_ = local_18e.Release[46];
  uStack_1a2._2_1_ = local_18e.Release[47];
  uStack_1a2._3_1_ = local_18e.Release[48];
  local_19e._0_1_ = local_18e.Release[49];
  local_19e._1_1_ = local_18e.Release[50];
  local_19e._2_1_ = local_18e.Release[51];
  local_19e._3_1_ = local_18e.Release[52];
  uStack_19a._0_1_ = local_18e.Release[53];
  uStack_19a._1_1_ = local_18e.Release[54];
  uStack_19a._2_1_ = local_18e.Release[55];
  uStack_19a._3_1_ = local_18e.Release[56];
  uStack_196._0_1_ = local_18e.Release[57];
  uStack_196._1_1_ = local_18e.Release[58];
  uStack_196._2_1_ = local_18e.Release[59];
  uStack_196._3_1_ = local_18e.Release[60];
  uStack_192._0_1_ = local_18e.Release[61];
  uStack_192._1_1_ = local_18e.Release[62];
  uStack_192._2_1_ = local_18e.Release[63];
  uStack_192._3_1_ = local_18e.Release[64];
  iVar1 = 0;
  vi = 0;
  value = 0;
  do {
    if (0x40 < iVar1) {
      return;
    }
    c = (&local_1cf)[iVar1] + -0x30;
    if ((byte)c < 10) {
      value = (int)c + value * 10;
    }
    else {
      if (1 < (uint)vi) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      local_1e0[vi] = value;
      vi = vi + 1;
      if (1 < vi) {
        return;
      }
      value = 0;
    }
    iVar1 = iVar1 + 1;
  } while( true );
}



void internal_poll_CopyFileRange
               (internal_poll_FD *dst,internal_poll_FD *src,int64 remain,int64 written,bool handled,
               error err)

{
  char extraout_AL;
  char extraout_AL_00;
  char extraout_AL_01;
  char extraout_AL_02;
  char extraout_AL_03;
  char extraout_AL_04;
  int extraout_RAX;
  void *x;
  undefined1 *extraout_RBX;
  int iVar1;
  int max_00;
  int64 extraout_RDI;
  int64 extraout_RDI_00;
  int64 extraout_RDI_01;
  int64 extraout_RDI_02;
  int64 extraout_RDI_03;
  int64 extraout_RDI_04;
  int64 extraout_RDI_05;
  int64 extraout_RDI_06;
  int64 extraout_RDI_07;
  int unaff_R14;
  error in_stack_ffffffffffffffa8;
  int64 n;
  int64 max;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    written = extraout_RDI_07;
  }
  if (internal_poll_kernelVersion53Once.done == 0) {
    sync___Once__doSlow(&internal_poll_kernelVersion53Once,
                        (func__ **)&PTR_internal_poll_CopyFileRange_func1_008eb660);
    written = extraout_RDI;
  }
  if (internal_poll_kernelVersion53 == false) {
    return;
  }
  iVar1 = 0;
  while( true ) {
    if (remain < 1) {
      return;
    }
    max_00 = remain;
    if (0x40000000 < remain) {
      max_00 = 0x40000000;
    }
    internal_poll_copyFileRange(dst,src,max_00,written,max_00,in_stack_ffffffffffffffa8);
    written = extraout_RDI_00;
    if ((extraout_RBX == go_itab_syscall_Errno_error) &&
       (runtime_ifaceeq((runtime_itab *)go_itab_syscall_Errno_error,x,&DAT_0095c808,
                        SUB81(extraout_RDI_00,0)), written = extraout_RDI_01, extraout_AL != '\0'))
    {
      return;
    }
    if ((((((extraout_RBX == go_itab_syscall_Errno_error) &&
           (runtime_ifaceeq((runtime_itab *)go_itab_syscall_Errno_error,x,&DAT_0095a748,
                            SUB81(written,0)), written = extraout_RDI_02, extraout_AL_00 != '\0'))
          || ((extraout_RBX == go_itab_syscall_Errno_error &&
              (runtime_ifaceeq((runtime_itab *)go_itab_syscall_Errno_error,x,&DAT_0095c5d8,
                               SUB81(written,0)), written = extraout_RDI_03, extraout_AL_01 != '\0')
              ))) ||
         ((extraout_RBX == go_itab_syscall_Errno_error &&
          (runtime_ifaceeq((runtime_itab *)go_itab_syscall_Errno_error,x,&DAT_0095a6e0,
                           SUB81(written,0)), written = extraout_RDI_04, extraout_AL_02 != '\0'))))
        || ((extraout_RBX == go_itab_syscall_Errno_error &&
            (runtime_ifaceeq((runtime_itab *)go_itab_syscall_Errno_error,x,&DAT_0095c658,
                             SUB81(written,0)), written = extraout_RDI_05, extraout_AL_03 != '\0')))
        ) || ((extraout_RBX == go_itab_syscall_Errno_error &&
              (runtime_ifaceeq((runtime_itab *)go_itab_syscall_Errno_error,x,&runtime_gcbits__,
                               SUB81(written,0)), written = extraout_RDI_06, extraout_AL_04 != '\0')
              ))) {
      return;
    }
    if (extraout_RBX != (undefined1 *)0x0) {
      return;
    }
    if (extraout_RAX == 0) break;
    remain = remain - extraout_RAX;
    iVar1 = iVar1 + extraout_RAX;
  }
  if (iVar1 != 0) {
    return;
  }
  return;
}



// DWARF original prototype: void internal/poll.copyFileRange(internal/poll.FD * dst,
// internal/poll.FD * src, int max, int64 written, int64 written, error err)

void internal_poll_copyFileRange
               (internal_poll_FD *dst,internal_poll_FD *src,int max,int64 written,int64 written_1,
               error err)

{
  char extraout_AL;
  char extraout_AL_01;
  char extraout_AL_00;
  int n;
  void *x;
  undefined1 *extraout_RBX;
  bool ~r0;
  undefined1 *puVar1;
  int unaff_R14;
  undefined in_XMM15 [16];
  error in_stack_ffffffffffffff68;
  error err_local;
  undefined local_38 [16];
  undefined local_28 [16];
  undefined local_18 [16];
  
  while (local_18._0_8_ = in_XMM15._0_8_, local_18 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  internal_poll___fdMutex__rwlock(&dst->fdmu,false,SUB81(max,0));
  if (extraout_AL == '\0') {
    puVar1 = (undefined1 *)internal_poll_ErrFileClosing.tab;
    if (dst->isFile == false) {
      puVar1 = go_itab_internal_poll_errNetClosing_error;
    }
  }
  else {
    puVar1 = (undefined1 *)0x0;
  }
  if ((runtime_itab *)puVar1 != (runtime_itab *)0x0) {
    return;
  }
  local_28._8_8_ = dst;
  local_28._0_8_ = internal_poll_copyFileRange_func1;
  local_18._8_8_ = local_28;
  internal_poll___fdMutex__rwlock(&src->fdmu,true,SUB81(local_18._8_8_,0));
  if (extraout_AL_00 == '\0') {
    puVar1 = (undefined1 *)internal_poll_ErrFileClosing.tab;
    if (src->isFile == false) {
      puVar1 = go_itab_internal_poll_errNetClosing_error;
    }
  }
  else {
    puVar1 = (undefined1 *)0x0;
  }
  if ((runtime_itab *)puVar1 != (runtime_itab *)0x0) {
    (**(code **)local_18._8_8_)();
    return;
  }
  local_38._8_8_ = src;
  local_38._0_8_ = internal_poll_copyFileRange_func2;
  local_18._0_8_ = local_38;
  do {
    internal_syscall_unix_CopyFileRange
              (src->Sysfd,(int64 *)0x0,dst->Sysfd,(int64 *)0x0,max,0,(int)src,
               in_stack_ffffffffffffff68);
    if (extraout_RBX != go_itab_syscall_Errno_error) break;
    runtime_ifaceeq((runtime_itab *)go_itab_syscall_Errno_error,x,&DAT_0095a650,~r0);
  } while (extraout_AL_01 != '\0');
  (**(code **)local_18._0_8_)();
  (**(code **)local_18._8_8_)();
  return;
}



// WARNING: Unknown calling convention

void internal_poll_copyFileRange_func2(void)

{
  int *piVar1;
  int in_RDX;
  int unaff_R14;
  undefined auStack_10 [8];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  internal_poll___FD__readUnlock(*(internal_poll_FD **)(in_RDX + 8));
  return;
}



// WARNING: Unknown calling convention

void internal_poll_copyFileRange_func1(void)

{
  int *piVar1;
  int in_RDX;
  int unaff_R14;
  undefined auStack_10 [8];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  internal_poll___FD__writeUnlock(*(internal_poll_FD **)(in_RDX + 8));
  return;
}



void internal_poll_errNetClosing_Error(internal_poll_errNetClosing e,string ~r0)

{
  return;
}



void internal_poll_errNetClosing_Timeout(internal_poll_errNetClosing e,bool ~r0)

{
  return;
}



void internal_poll_errNetClosing_Temporary(internal_poll_errNetClosing e,bool ~r0)

{
  return;
}



void internal_poll___DeadlineExceededError__Error(internal_poll_DeadlineExceededError *e,string ~r0)

{
  return;
}



void internal_poll___DeadlineExceededError__Timeout(internal_poll_DeadlineExceededError *e,bool ~r0)

{
  return;
}



void internal_poll___DeadlineExceededError__Temporary
               (internal_poll_DeadlineExceededError *e,bool ~r0)

{
  return;
}



// WARNING: Unknown calling convention

void internal_poll_glob__func1(int wrote)

{
  return;
}



// DWARF original prototype: void internal/poll.(*FD).Fsync(internal/poll.FD * fd, error ~r0, error
// ~r0)

void internal_poll___FD__Fsync(internal_poll_FD *fd,error ~r0,error ~r0_1)

{
  uint uVar1;
  char extraout_AL;
  undefined1 *extraout_RAX;
  uint64 old;
  undefined1 *puVar2;
  uint64 new;
  void *x;
  bool ~r0_00;
  int unaff_R14;
  bool bVar3;
  interface___ in_stack_ffffffffffffff98;
  undefined local_20 [16];
  code **local_10;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  do {
    uVar1 = (fd->fdmu).state;
    bVar3 = (uVar1 & 1) != 0;
    if (bVar3) goto LAB_004a60a8;
    if ((uVar1 + 8 & 0x7ffff8) == 0) {
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffff98);
    }
    LOCK();
    bVar3 = uVar1 == (fd->fdmu).state;
    if (bVar3) {
