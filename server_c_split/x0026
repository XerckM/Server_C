typedef struct internal/reflectlite.Value internal/reflectlite.Value, *Pinternal/reflectlite.Value;

struct internal/reflectlite.Value {
    struct internal/abi.Type *typ;
    void *ptr;
    internal/reflectlite.flag flag;
};

typedef struct internal/unsafeheader.Slice internal/unsafeheader.Slice, *Pinternal/unsafeheader.Slice;

struct internal/unsafeheader.Slice {
    void *Data;
    int Len;
    int Cap;
};

typedef struct runtime.tracestat runtime.tracestat, *Pruntime.tracestat;

struct runtime.tracestat {
    bool active;
    uint64 id;
    uint64 allocs;
    uint64 bytes;
};

typedef struct []map[internal/abi.TypeOff]*internal/abi.Type []map[internal/abi.TypeOff]*internal/abi.Type, *P[]map[internal/abi.TypeOff]*internal/abi.Type;

struct []map[internal/abi.TypeOff]*internal/abi.Type {
    map[internal/abi.TypeOff]*internal/abi.Type *array;
    int len;
    int cap;
};

typedef struct google.golang.org/protobuf/internal/impl.int64Converter google.golang.org/protobuf/internal/impl.int64Converter, *Pgoogle.golang.org/protobuf/internal/impl.int64Converter;

struct google.golang.org/protobuf/internal/impl.int64Converter {
    reflect.Type goType;
    struct google.golang.org/protobuf/reflect/protoreflect.Value def;
};

typedef struct noalg.map.iter[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool noalg.map.iter[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool, *Pnoalg.map.iter[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool;

struct noalg.map.iter[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool {
    struct string *key;
    map[google.golang.org/grpc/internal/transport.ServerTransport]bool *elem;
    void *t;
    struct noalg.map.hdr[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool *h;
    struct noalg.map.bucket[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool *buckets;
    struct noalg.map.bucket[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct noalg.struct_{_google.golang.org/grpc.c_unsafe.Pointer;_google.golang.org/grpc.elem_unsafe.Pointer_} noalg.[2]struct_{_google.golang.org/grpc.c_unsafe.Pointer;_google.golang.org/grpc.elem_unsafe.Pointer_}[2];

typedef struct fmt.stringReader fmt.stringReader, *Pfmt.stringReader;

struct fmt.stringReader {
    uint8 *str;
    int len;
};

typedef struct noalg.struct_{_F_uintptr;_X0_func(string)_string;_X1_string_} noalg.struct_{_F_uintptr;_X0_func(string)_string;_X1_string_}, *Pnoalg.struct_{_F_uintptr;_X0_func(string)_string;_X1_string_};

struct noalg.struct_{_F_uintptr;_X0_func(string)_string;_X1_string_} { // Original name: noalg.struct { F uintptr; X0 func(string) string; X1 string }
    uintptr F;
    void (**X0)(struct string, struct string *);
    struct string X1;
};

typedef struct noalg.struct_{_F_uintptr;_X0_io.ReadCloser_} noalg.struct_{_F_uintptr;_X0_io.ReadCloser_}, *Pnoalg.struct_{_F_uintptr;_X0_io.ReadCloser_};

struct noalg.struct_{_F_uintptr;_X0_io.ReadCloser_} { // Original name: noalg.struct { F uintptr; X0 io.ReadCloser }
    uintptr F;
    io.ReadCloser X0;
};

typedef struct runtime.iface io.StringWriter;

typedef struct runtime.iface google.golang.org/grpc/credentials.ChannelzSecurityInfo;

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/text.Encoder;_X1_google.golang.org/protobuf/internal/encoding/text.encType_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/text.Encoder;_X1_google.golang.org/protobuf/internal/encoding/text.encType_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/text.Encoder;_X1_google.golang.org/protobuf/internal/encoding/text.encType_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/text.Encoder;_X1_google.golang.org/protobuf/internal/encoding/text.encType_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/encoding/text.Encoder; X1 google.golang.org/protobuf/internal/encoding/text.encType }
    uintptr F;
    struct google.golang.org/protobuf/internal/encoding/text.Encoder *X0;
    google.golang.org/protobuf/internal/encoding/text.encType X1;
};

typedef struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.x.1 google.golang.org/grpc/binarylog/grpc_binarylog_v1.x.1, *Pgoogle.golang.org/grpc/binarylog/grpc_binarylog_v1.x.1;

struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.x.1 { // Original name: google.golang.org/grpc/binarylog/grpc_binarylog_v1.xÂ·1
};

typedef struct hash<string,regexp/syntax.charGroup> hash<string,regexp/syntax.charGroup>, *Phash<string,regexp/syntax.charGroup>;

typedef struct hash<string,regexp/syntax.charGroup> *map[string]regexp/syntax.charGroup;

struct hash<string,regexp/syntax.charGroup> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,regexp/syntax.charGroup> *buckets;
    struct bucket<string,regexp/syntax.charGroup> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct io/fs.PathError io/fs.PathError, *Pio/fs.PathError;

struct io/fs.PathError {
    struct string Op;
    struct string Path;
    error Err;
};

typedef struct noalg.struct_{_F_uintptr;_X0_chan_struct_{};_X1_chan_error;_X2_*error;_X3_*net.netFD_} noalg.struct_{_F_uintptr;_X0_chan_struct_{};_X1_chan_error;_X2_*error;_X3_*net.netFD_}, *Pnoalg.struct_{_F_uintptr;_X0_chan_struct_{};_X1_chan_error;_X2_*error;_X3_*net.netFD_};

struct noalg.struct_{_F_uintptr;_X0_chan_struct_{};_X1_chan_error;_X2_*error;_X3_*net.netFD_} { // Original name: noalg.struct { F uintptr; X0 chan struct {}; X1 chan error; X2 *error; X3 *net.netFD }
    uintptr F;
    chan_struct_{} X0;
    chan_error X1;
    error *X2;
    struct net.netFD *X3;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.Server;_X1_google.golang.org/grpc/internal/transport.ServerTransport_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.Server;_X1_google.golang.org/grpc/internal/transport.ServerTransport_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.Server;_X1_google.golang.org/grpc/internal/transport.ServerTransport_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.Server;_X1_google.golang.org/grpc/internal/transport.ServerTransport_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc.Server; X1 google.golang.org/grpc/internal/transport.ServerTransport }
    uintptr F;
    struct google.golang.org/grpc.Server *X0;
    google.golang.org/grpc/internal/transport.ServerTransport X1;
};

typedef struct google.golang.org/grpc.funcServerOption google.golang.org/grpc.funcServerOption, *Pgoogle.golang.org/grpc.funcServerOption;

struct google.golang.org/grpc.funcServerOption {
    void (**f)(struct google.golang.org/grpc.serverOptions *);
};

typedef struct noalg.struct_{_F_uintptr;_X0_*sync.Mutex_} noalg.struct_{_F_uintptr;_X0_*sync.Mutex_}, *Pnoalg.struct_{_F_uintptr;_X0_*sync.Mutex_};

struct noalg.struct_{_F_uintptr;_X0_*sync.Mutex_} { // Original name: noalg.struct { F uintptr; X0 *sync.Mutex }
    uintptr F;
    struct sync.Mutex *X0;
};

typedef struct text/template/parse.NilNode text/template/parse.NilNode, *Ptext/template/parse.NilNode;

struct text/template/parse.NilNode {
    text/template/parse.NodeType NodeType;
    text/template/parse.Pos Pos;
    struct text/template/parse.Tree *tr;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_int_} noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_int_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_int_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_int_} { // Original name: noalg.struct { F uintptr; X0 *runtime.g; X1 int }
    uintptr F;
    struct runtime.g *X0;
    int X1;
};

typedef struct noalg.map.iter[google.golang.org/protobuf/internal/filedesc.pathKey][]int noalg.map.iter[google.golang.org/protobuf/internal/filedesc.pathKey][]int, *Pnoalg.map.iter[google.golang.org/protobuf/internal/filedesc.pathKey][]int;

struct noalg.map.iter[google.golang.org/protobuf/internal/filedesc.pathKey][]int {
    struct google.golang.org/protobuf/internal/filedesc.pathKey *key;
    struct []int *elem;
    void *t;
    struct noalg.map.hdr[google.golang.org/protobuf/internal/filedesc.pathKey][]int *h;
    struct noalg.map.bucket[google.golang.org/protobuf/internal/filedesc.pathKey][]int *buckets;
    struct noalg.map.bucket[google.golang.org/protobuf/internal/filedesc.pathKey][]int *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.mheap;_X1_uintptr;_X2_**runtime.mspan;_X3_runtime.spanClass_} noalg.struct_{_F_uintptr;_X0_*runtime.mheap;_X1_uintptr;_X2_**runtime.mspan;_X3_runtime.spanClass_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.mheap;_X1_uintptr;_X2_**runtime.mspan;_X3_runtime.spanClass_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.mheap;_X1_uintptr;_X2_**runtime.mspan;_X3_runtime.spanClass_} { // Original name: noalg.struct { F uintptr; X0 *runtime.mheap; X1 uintptr; X2 **runtime.mspan; X3 runtime.spanClass }
    uintptr F;
    struct runtime.mheap *X0;
    uintptr X1;
    struct runtime.mspan **X2;
    runtime.spanClass X3;
};

typedef struct regexp/syntax.frag regexp/syntax.frag, *Pregexp/syntax.frag;

typedef struct regexp/syntax.patchList regexp/syntax.patchList, *Pregexp/syntax.patchList;

struct regexp/syntax.patchList {
    uint32 head;
    uint32 tail;
};

struct regexp/syntax.frag {
    uint32 i;
    struct regexp/syntax.patchList out;
    bool nullable;
};

typedef struct hash<crypto.Hash,encoding/asn1.RawValue> *map[crypto.Hash]encoding/asn1.RawValue;

typedef struct noalg.map.iter[int32]google.golang.org/protobuf/internal/impl.ExtensionField noalg.map.iter[int32]google.golang.org/protobuf/internal/impl.ExtensionField, *Pnoalg.map.iter[int32]google.golang.org/protobuf/internal/impl.ExtensionField;

struct noalg.map.iter[int32]google.golang.org/protobuf/internal/impl.ExtensionField {
    int32 *key;
    struct google.golang.org/protobuf/internal/impl.ExtensionField *elem;
    void *t;
    struct noalg.map.hdr[int32]google.golang.org/protobuf/internal/impl.ExtensionField *h;
    struct noalg.map.bucket[int32]google.golang.org/protobuf/internal/impl.ExtensionField *buckets;
    struct noalg.map.bucket[int32]google.golang.org/protobuf/internal/impl.ExtensionField *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoregistry.MessageTypeResolver;

typedef struct hash<vendor/golang.org/x/net/dns/dnsmessage.Class,string> *map[vendor/golang.org/x/net/dns/dnsmessage.Class]string;

typedef struct noalg.map.iter[*text/template/parse.TemplateNode]string noalg.map.iter[*text/template/parse.TemplateNode]string, *Pnoalg.map.iter[*text/template/parse.TemplateNode]string;

struct noalg.map.iter[*text/template/parse.TemplateNode]string {
    struct text/template/parse.TemplateNode **key;
    struct string *elem;
    void *t;
    struct noalg.map.hdr[*text/template/parse.TemplateNode]string *h;
    struct noalg.map.bucket[*text/template/parse.TemplateNode]string *buckets;
    struct noalg.map.bucket[*text/template/parse.TemplateNode]string *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct google.golang.org/grpc/resolver.BuildOptions google.golang.org/grpc/resolver.BuildOptions, *Pgoogle.golang.org/grpc/resolver.BuildOptions;

struct google.golang.org/grpc/resolver.BuildOptions {
    bool DisableServiceConfig;
    google.golang.org/grpc/credentials.TransportCredentials DialCreds;
    google.golang.org/grpc/credentials.Bundle CredsBundle;
    void (**Dialer)(context.Context, struct string, net.Conn *, error *);
    struct string Authority;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.mcache_} noalg.struct_{_F_uintptr;_X0_*runtime.mcache_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.mcache_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.mcache_} { // Original name: noalg.struct { F uintptr; X0 *runtime.mcache }
    uintptr F;
    struct runtime.mcache *X0;
};

typedef struct google.golang.org/protobuf/internal/errors.SizeMismatchError google.golang.org/protobuf/internal/errors.SizeMismatchError, *Pgoogle.golang.org/protobuf/internal/errors.SizeMismatchError;

struct google.golang.org/protobuf/internal/errors.SizeMismatchError {
    int Calculated;
    int Measured;
};

typedef struct noalg.struct_{_F_uintptr;_X0_[]runtime.scase;_X1_[]uint16_} noalg.struct_{_F_uintptr;_X0_[]runtime.scase;_X1_[]uint16_}, *Pnoalg.struct_{_F_uintptr;_X0_[]runtime.scase;_X1_[]uint16_};

struct noalg.struct_{_F_uintptr;_X0_[]runtime.scase;_X1_[]uint16_} { // Original name: noalg.struct { F uintptr; X0 []runtime.scase; X1 []uint16 }
    uintptr F;
    struct []runtime.scase X0;
    struct []uint16 X1;
};

typedef struct []struct_{_crypto/x509.extKeyUsage_crypto/x509.ExtKeyUsage;_crypto/x509.oid_encoding/asn1.ObjectIdentifier_} []struct_{_crypto/x509.extKeyUsage_crypto/x509.ExtKeyUsage;_crypto/x509.oid_encoding/asn1.ObjectIdentifier_}, *P[]struct_{_crypto/x509.extKeyUsage_crypto/x509.ExtKeyUsage;_crypto/x509.oid_encoding/asn1.ObjectIdentifier_};

struct []struct_{_crypto/x509.extKeyUsage_crypto/x509.ExtKeyUsage;_crypto/x509.oid_encoding/asn1.ObjectIdentifier_} { // Original name: []struct { crypto/x509.extKeyUsage crypto/x509.ExtKeyUsage; crypto/x509.oid encoding/asn1.ObjectIdentifier }
    struct struct_{_crypto/x509.extKeyUsage_crypto/x509.ExtKeyUsage;_crypto/x509.oid_encoding/asn1.ObjectIdentifier_} *array;
    int len;
    int cap;
};

typedef struct []*google.golang.org/grpc/internal/transport.Stream []*google.golang.org/grpc/internal/transport.Stream, *P[]*google.golang.org/grpc/internal/transport.Stream;

struct []*google.golang.org/grpc/internal/transport.Stream {
    struct google.golang.org/grpc/internal/transport.Stream **array;
    int len;
    int cap;
};

typedef struct vendor/golang.org/x/net/dns/dnsmessage.Header vendor/golang.org/x/net/dns/dnsmessage.Header, *Pvendor/golang.org/x/net/dns/dnsmessage.Header;

struct vendor/golang.org/x/net/dns/dnsmessage.Header {
    uint16 ID;
    bool Response;
    vendor/golang.org/x/net/dns/dnsmessage.OpCode OpCode;
    bool Authoritative;
    bool Truncated;
    bool RecursionDesired;
    bool RecursionAvailable;
    bool AuthenticData;
    bool CheckingDisabled;
    vendor/golang.org/x/net/dns/dnsmessage.RCode RCode;
};

typedef struct hash<string,go/token.Token> *map[string]go/token.Token;

typedef struct noalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc.addrConnStream_} noalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc.addrConnStream_}, *Pnoalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc.addrConnStream_};

struct noalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc.addrConnStream_} { // Original name: noalg.struct { F uintptr; X0 *error; X1 *google.golang.org/grpc.addrConnStream }
    uintptr F;
    error *X0;
    struct google.golang.org/grpc.addrConnStream *X1;
};

typedef struct []*runtime.g []*runtime.g, *P[]*runtime.g;

struct []*runtime.g {
    struct runtime.g **array;
    int len;
    int cap;
};

typedef struct []*runtime.p []*runtime.p, *P[]*runtime.p;

struct []*runtime.p {
    struct runtime.p **array;
    int len;
    int cap;
};

typedef struct struct_{_internal/reflectlite.b_bool;_internal/reflectlite.x_interface_{}_} struct_{_internal/reflectlite.b_bool;_internal/reflectlite.x_interface_{}_}, *Pstruct_{_internal/reflectlite.b_bool;_internal/reflectlite.x_interface_{}_};

struct struct_{_internal/reflectlite.b_bool;_internal/reflectlite.x_interface_{}_} { // Original name: struct { internal/reflectlite.b bool; internal/reflectlite.x interface {} }
    bool b;
    interface_{} x;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*crypto/ecdh.PrivateKey_} noalg.struct_{_F_uintptr;_X0_*crypto/ecdh.PrivateKey_}, *Pnoalg.struct_{_F_uintptr;_X0_*crypto/ecdh.PrivateKey_};

struct noalg.struct_{_F_uintptr;_X0_*crypto/ecdh.PrivateKey_} { // Original name: noalg.struct { F uintptr; X0 *crypto/ecdh.PrivateKey }
    uintptr F;
    struct crypto/ecdh.PrivateKey *X0;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_int64_} noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_int64_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_int64_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_int64_} { // Original name: noalg.struct { F uintptr; X0 *runtime.g; X1 int64 }
    uintptr F;
    struct runtime.g *X0;
    int64 X1;
};

typedef struct runtime.iface interface_{_Is(error)_bool_};

typedef uint8 *log/slog.stringptr;

typedef struct syscall.IPv6Mreq syscall.IPv6Mreq, *Psyscall.IPv6Mreq;

struct syscall.IPv6Mreq {
    uint8 Multiaddr[16];
    uint32 Interface;
};

typedef struct runtime.iface google.golang.org/grpc/grpclog.DepthLoggerV2;

typedef struct runtime.iface io.WriteCloser;

typedef struct google.golang.org/grpc/internal/transport.incomingWindowUpdate google.golang.org/grpc/internal/transport.incomingWindowUpdate, *Pgoogle.golang.org/grpc/internal/transport.incomingWindowUpdate;

struct google.golang.org/grpc/internal/transport.incomingWindowUpdate {
    uint32 streamID;
    uint32 increment;
};

typedef struct hchan<net.result[[]net.IPAddr].1> *chan_net.result[[]net.IPAddr].1;

typedef struct noalg.struct_{_F_uintptr;_X0_*net.sysListener_} noalg.struct_{_F_uintptr;_X0_*net.sysListener_}, *Pnoalg.struct_{_F_uintptr;_X0_*net.sysListener_};

struct noalg.struct_{_F_uintptr;_X0_*net.sysListener_} { // Original name: noalg.struct { F uintptr; X0 *net.sysListener }
    uintptr F;
    struct net.sysListener *X0;
};

typedef struct runtime.iface context.afterFuncer;

typedef struct runtime.iface golang.org/x/net/http2.headersOrContinuation;

typedef struct net.OpError net.OpError, *Pnet.OpError;

struct net.OpError {
    struct string Op;
    struct string Net;
    net.Addr Source;
    net.Addr Addr;
    error Err;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*[][]uint8;_X1_[]uint8_} noalg.struct_{_F_uintptr;_X0_*[][]uint8;_X1_[]uint8_}, *Pnoalg.struct_{_F_uintptr;_X0_*[][]uint8;_X1_[]uint8_};

struct noalg.struct_{_F_uintptr;_X0_*[][]uint8;_X1_[]uint8_} { // Original name: noalg.struct { F uintptr; X0 *[][]uint8; X1 []uint8 }
    uintptr F;
    struct [][]uint8 *X0;
    struct []uint8 X1;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*[]string;_X1_*[]string;_X2_*[]*net/url.URL;_X3_*[]net.IP_} noalg.struct_{_F_uintptr;_X0_*[]string;_X1_*[]string;_X2_*[]*net/url.URL;_X3_*[]net.IP_}, *Pnoalg.struct_{_F_uintptr;_X0_*[]string;_X1_*[]string;_X2_*[]*net/url.URL;_X3_*[]net.IP_};

struct noalg.struct_{_F_uintptr;_X0_*[]string;_X1_*[]string;_X2_*[]*net/url.URL;_X3_*[]net.IP_} { // Original name: noalg.struct { F uintptr; X0 *[]string; X1 *[]string; X2 *[]*net/url.URL; X3 *[]net.IP }
    uintptr F;
    struct []string *X0;
    struct []string *X1;
    struct []*net/url.URL *X2;
    struct []net.IP *X3;
};

typedef struct noalg.map.hdr[string]html/template.context noalg.map.hdr[string]html/template.context, *Pnoalg.map.hdr[string]html/template.context;

struct noalg.map.hdr[string]html/template.context {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string]html/template.context *buckets;
    struct noalg.map.bucket[string]html/template.context *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct crypto/md5.digest crypto/md5.digest, *Pcrypto/md5.digest;

struct crypto/md5.digest {
    uint32 s[4];
    uint8 x[64];
    int nx;
    uint64 len;
};

typedef struct path/filepath.lazybuf path/filepath.lazybuf, *Ppath/filepath.lazybuf;

struct path/filepath.lazybuf {
    struct string path;
    struct []uint8 buf;
    int w;
    struct string volAndPath;
    int volLen;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client;_X1_uint32_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client;_X1_uint32_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client;_X1_uint32_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client;_X1_uint32_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc/internal/transport.http2Client; X1 uint32 }
    uintptr F;
    struct google.golang.org/grpc/internal/transport.http2Client *X0;
    uint32 X1;
};

typedef struct []*vendor/golang.org/x/text/unicode/norm.formInfo []*vendor/golang.org/x/text/unicode/norm.formInfo, *P[]*vendor/golang.org/x/text/unicode/norm.formInfo;

struct []*vendor/golang.org/x/text/unicode/norm.formInfo {
    struct vendor/golang.org/x/text/unicode/norm.formInfo **array;
    int len;
    int cap;
};

typedef struct golang.org/x/net/http2.WindowUpdateFrame golang.org/x/net/http2.WindowUpdateFrame, *Pgolang.org/x/net/http2.WindowUpdateFrame;

struct golang.org/x/net/http2.WindowUpdateFrame {
    struct golang.org/x/net/http2.FrameHeader FrameHeader;
    uint32 Increment;
};

typedef struct runtime.iface net.PacketConn;

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/json.Encoder;_X1_google.golang.org/protobuf/internal/encoding/json.kind_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/json.Encoder;_X1_google.golang.org/protobuf/internal/encoding/json.kind_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/json.Encoder;_X1_google.golang.org/protobuf/internal/encoding/json.kind_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/json.Encoder;_X1_google.golang.org/protobuf/internal/encoding/json.kind_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/encoding/json.Encoder; X1 google.golang.org/protobuf/internal/encoding/json.kind }
    uintptr F;
    struct google.golang.org/protobuf/internal/encoding/json.Encoder *X0;
    google.golang.org/protobuf/internal/encoding/json.kind X1;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.g_} noalg.struct_{_F_uintptr;_X0_*runtime.g_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.g_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.g_} { // Original name: noalg.struct { F uintptr; X0 *runtime.g }
    uintptr F;
    struct runtime.g *X0;
};

typedef struct html/template.JSStr html/template.JSStr, *Phtml/template.JSStr;

struct html/template.JSStr {
    uint8 *str;
    int len;
};

typedef struct struct_{_runtime.lock_runtime.mutex;_runtime.q_runtime.gQueue_} struct_{_runtime.lock_runtime.mutex;_runtime.q_runtime.gQueue_}, *Pstruct_{_runtime.lock_runtime.mutex;_runtime.q_runtime.gQueue_};

struct struct_{_runtime.lock_runtime.mutex;_runtime.q_runtime.gQueue_} { // Original name: struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }
    struct runtime.mutex lock;
    struct runtime.gQueue q;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*time.Timer;_X1_*time.Timer;_X2_*time.Timer_} noalg.struct_{_F_uintptr;_X0_*time.Timer;_X1_*time.Timer;_X2_*time.Timer_}, *Pnoalg.struct_{_F_uintptr;_X0_*time.Timer;_X1_*time.Timer;_X2_*time.Timer_};

struct noalg.struct_{_F_uintptr;_X0_*time.Timer;_X1_*time.Timer;_X2_*time.Timer_} { // Original name: noalg.struct { F uintptr; X0 *time.Timer; X1 *time.Timer; X2 *time.Timer }
    uintptr F;
    struct time.Timer *X0;
    struct time.Timer *X1;
    struct time.Timer *X2;
};

typedef struct struct_{_sync.Mutex;_reflect.m_sync.Map_} struct_{_sync.Mutex;_reflect.m_sync.Map_}, *Pstruct_{_sync.Mutex;_reflect.m_sync.Map_};

struct struct_{_sync.Mutex;_reflect.m_sync.Map_} { // Original name: struct { sync.Mutex; reflect.m sync.Map }
    struct sync.Mutex Mutex;
    struct sync.Map m;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*[]google.golang.org/protobuf/internal/order.messageField;_X1_*[]google.golang.org/protobuf/internal/order.messageField_} noalg.struct_{_F_uintptr;_X0_*[]google.golang.org/protobuf/internal/order.messageField;_X1_*[]google.golang.org/protobuf/internal/order.messageField_}, *Pnoalg.struct_{_F_uintptr;_X0_*[]google.golang.org/protobuf/internal/order.messageField;_X1_*[]google.golang.org/protobuf/internal/order.messageField_};

struct noalg.struct_{_F_uintptr;_X0_*[]google.golang.org/protobuf/internal/order.messageField;_X1_*[]google.golang.org/protobuf/internal/order.messageField_} { // Original name: noalg.struct { F uintptr; X0 *[]google.golang.org/protobuf/internal/order.messageField; X1 *[]google.golang.org/protobuf/internal/order.messageField }
    uintptr F;
    struct []google.golang.org/protobuf/internal/order.messageField *X0;
    struct []google.golang.org/protobuf/internal/order.messageField *X1;
};

typedef struct struct_{_internal/cpu.__internal/cpu.CacheLinePad;_HasZARCH_bool;_HasSTFLE_bool;_HasLDISP_bool;_HasEIMM_bool;_HasDFP_bool;_HasETF3EH_bool;_HasMSA_bool;_HasAES_bool;_HasAESCBC_bool;_HasAESCTR_bool;_HasAESGCM_bool;_HasGHASH_bool;_HasSHA1_bool;_HasSHA256_bool;_HasSHA512_bool;_HasSHA3_bool;_HasVX_bool;_HasVXE_bool;_HasKDSA_bool;_HasECDSA_bool;_HasEDDSA_bool;_internal/cpu.__internal/cpu.CacheLinePad_} struct_{_internal/cpu.__internal/cpu.CacheLinePad;_HasZARCH_bool;_HasSTFLE_bool;_HasLDISP_bool;_HasEIMM_bool;_HasDFP_bool;_HasETF3EH_bool;_HasMSA_bool;_HasAES_bool;_HasAESCBC_bool;_HasAESCTR_bool;_HasAESGCM_bool;_HasGHASH_bool;_HasSHA1_bool;_HasSHA256_bool;_HasSHA512_bool;_HasSHA3_bool;_HasVX_bool;_HasVXE_bool;_HasKDSA_bool;_HasECDSA_bool;_HasEDDSA_bool;_internal/cpu.__internal/cpu.CacheLinePad_}, *Pstruct_{_internal/cpu.__internal/cpu.CacheLinePad;_HasZARCH_bool;_HasSTFLE_bool;_HasLDISP_bool;_HasEIMM_bool;_HasDFP_bool;_HasETF3EH_bool;_HasMSA_bool;_HasAES_bool;_HasAESCBC_bool;_HasAESCTR_bool;_HasAESGCM_bool;_HasGHASH_bool;_HasSHA1_bool;_HasSHA256_bool;_HasSHA512_bool;_HasSHA3_bool;_HasVX_bool;_HasVXE_bool;_HasKDSA_bool;_HasECDSA_bool;_HasEDDSA_bool;_internal/cpu.__internal/cpu.CacheLinePad_};

struct struct_{_internal/cpu.__internal/cpu.CacheLinePad;_HasZARCH_bool;_HasSTFLE_bool;_HasLDISP_bool;_HasEIMM_bool;_HasDFP_bool;_HasETF3EH_bool;_HasMSA_bool;_HasAES_bool;_HasAESCBC_bool;_HasAESCTR_bool;_HasAESGCM_bool;_HasGHASH_bool;_HasSHA1_bool;_HasSHA256_bool;_HasSHA512_bool;_HasSHA3_bool;_HasVX_bool;_HasVXE_bool;_HasKDSA_bool;_HasECDSA_bool;_HasEDDSA_bool;_internal/cpu.__internal/cpu.CacheLinePad_} { // Original name: struct { internal/cpu._ internal/cpu.CacheLinePad; HasZARCH bool; HasSTFLE bool; HasLDISP bool; HasEIMM bool; HasDFP bool; HasETF3EH bool; HasMSA bool; HasAES bool; HasAESCBC bool; HasAESCTR bool; HasAESGCM bool; HasGHASH bool; HasSHA1 bool; HasSHA256 bool; HasSHA512 bool; HasSHA3 bool; HasVX bool; HasVXE bool; HasKDSA bool; HasECDSA bool; HasEDDSA bool; internal/cpu._ internal/cpu.CacheLinePad }
    struct internal/cpu.CacheLinePad _;
    bool HasZARCH;
    bool HasSTFLE;
    bool HasLDISP;
    bool HasEIMM;
    bool HasDFP;
    bool HasETF3EH;
    bool HasMSA;
    bool HasAES;
    bool HasAESCBC;
    bool HasAESCTR;
    bool HasAESGCM;
    bool HasGHASH;
    bool HasSHA1;
    bool HasSHA256;
    bool HasSHA512;
    bool HasSHA3;
    bool HasVX;
    bool HasVXE;
    bool HasKDSA;
    bool HasECDSA;
    bool HasEDDSA;
    struct internal/cpu.CacheLinePad _;
};

typedef struct []encoding/asn1.encoder []encoding/asn1.encoder, *P[]encoding/asn1.encoder;

struct []encoding/asn1.encoder {
    encoding/asn1.encoder *array;
    int len;
    int cap;
};

typedef struct hash<int32,google.golang.org/protobuf/internal/impl.ExtensionField> *map[int32]google.golang.org/protobuf/internal/impl.ExtensionField;

typedef struct runtime.iface crypto/elliptic.unmarshaler;

typedef struct noalg.map.iter[*text/template/parse.ActionNode][]string noalg.map.iter[*text/template/parse.ActionNode][]string, *Pnoalg.map.iter[*text/template/parse.ActionNode][]string;

struct noalg.map.iter[*text/template/parse.ActionNode][]string {
    struct text/template/parse.ActionNode **key;
    struct []string *elem;
    void *t;
    struct noalg.map.hdr[*text/template/parse.ActionNode][]string *h;
    struct noalg.map.bucket[*text/template/parse.ActionNode][]string *buckets;
    struct noalg.map.bucket[*text/template/parse.ActionNode][]string *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.ServiceDescriptor;

typedef struct google.golang.org/grpc/grpclog.loggerV2Config google.golang.org/grpc/grpclog.loggerV2Config, *Pgoogle.golang.org/grpc/grpclog.loggerV2Config;

struct google.golang.org/grpc/grpclog.loggerV2Config {
    int verbose;
    bool jsonFormat;
};

typedef struct noalg.map.hdr[reflect.visit]bool noalg.map.hdr[reflect.visit]bool, *Pnoalg.map.hdr[reflect.visit]bool;

struct noalg.map.hdr[reflect.visit]bool {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[reflect.visit]bool *buckets;
    struct noalg.map.bucket[reflect.visit]bool *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct struct_{_runtime.note_runtime.note;_runtime.mask_[3]uint32;_runtime.wanted_[3]uint32;_runtime.ignored_[3]uint32;_runtime.recv_[3]uint32;_runtime.state_runtime/internal/atomic.Uint32;_runtime.delivering_runtime/internal/atomic.Uint32;_runtime.inuse_bool_} struct_{_runtime.note_runtime.note;_runtime.mask_[3]uint32;_runtime.wanted_[3]uint32;_runtime.ignored_[3]uint32;_runtime.recv_[3]uint32;_runtime.state_runtime/internal/atomic.Uint32;_runtime.delivering_runtime/internal/atomic.Uint32;_runtime.inuse_bool_}, *Pstruct_{_runtime.note_runtime.note;_runtime.mask_[3]uint32;_runtime.wanted_[3]uint32;_runtime.ignored_[3]uint32;_runtime.recv_[3]uint32;_runtime.state_runtime/internal/atomic.Uint32;_runtime.delivering_runtime/internal/atomic.Uint32;_runtime.inuse_bool_};

struct struct_{_runtime.note_runtime.note;_runtime.mask_[3]uint32;_runtime.wanted_[3]uint32;_runtime.ignored_[3]uint32;_runtime.recv_[3]uint32;_runtime.state_runtime/internal/atomic.Uint32;_runtime.delivering_runtime/internal/atomic.Uint32;_runtime.inuse_bool_} { // Original name: struct { runtime.note runtime.note; runtime.mask [3]uint32; runtime.wanted [3]uint32; runtime.ignored [3]uint32; runtime.recv [3]uint32; runtime.state runtime/internal/atomic.Uint32; runtime.delivering runtime/internal/atomic.Uint32; runtime.inuse bool }
    struct runtime.note note;
    uint32 mask[3];
    uint32 wanted[3];
    uint32 ignored[3];
    uint32 recv[3];
    struct runtime/internal/atomic.Uint32 state;
    struct runtime/internal/atomic.Uint32 delivering;
    bool inuse;
};

typedef struct [][2]uint16 [][2]uint16, *P[][2]uint16;

struct [][2]uint16 {
    uint16 (*array)[2];
    int len;
    int cap;
};

typedef struct noalg.struct_{_google.golang.org/grpc/internal/transport.c_unsafe.Pointer;_google.golang.org/grpc/internal/transport.elem_unsafe.Pointer_} noalg.[2]struct_{_google.golang.org/grpc/internal/transport.c_unsafe.Pointer;_google.golang.org/grpc/internal/transport.elem_unsafe.Pointer_}[2];

typedef struct crypto/internal/edwards25519.projP2 crypto/internal/edwards25519.projP2, *Pcrypto/internal/edwards25519.projP2;

struct crypto/internal/edwards25519.projP2 {
    struct crypto/internal/edwards25519/field.Element X;
    struct crypto/internal/edwards25519/field.Element Y;
    struct crypto/internal/edwards25519/field.Element Z;
};

typedef struct []*reflect.rtype []*reflect.rtype, *P[]*reflect.rtype;

struct []*reflect.rtype {
    struct reflect.rtype **array;
    int len;
    int cap;
};

typedef struct noalg.struct_{_F_uintptr;_X0_func(int,_runtime.addrRange)_(int,_int);_X1_func(int,_int,_int)_runtime.addrRange_} noalg.struct_{_F_uintptr;_X0_func(int,_runtime.addrRange)_(int,_int);_X1_func(int,_int,_int)_runtime.addrRange_}, *Pnoalg.struct_{_F_uintptr;_X0_func(int,_runtime.addrRange)_(int,_int);_X1_func(int,_int,_int)_runtime.addrRange_};

struct noalg.struct_{_F_uintptr;_X0_func(int,_runtime.addrRange)_(int,_int);_X1_func(int,_int,_int)_runtime.addrRange_} { // Original name: noalg.struct { F uintptr; X0 func(int, runtime.addrRange) (int, int); X1 func(int, int, int) runtime.addrRange }
    uintptr F;
    void (**X0)(int, struct runtime.addrRange, int *, int *);
    void (**X1)(int, int, int, struct runtime.addrRange *);
};

typedef struct noalg.struct_{_F_uintptr;_X0_func(net.Conn);_X1_net.Conn_} noalg.struct_{_F_uintptr;_X0_func(net.Conn);_X1_net.Conn_}, *Pnoalg.struct_{_F_uintptr;_X0_func(net.Conn);_X1_net.Conn_};

struct noalg.struct_{_F_uintptr;_X0_func(net.Conn);_X1_net.Conn_} { // Original name: noalg.struct { F uintptr; X0 func(net.Conn); X1 net.Conn }
    uintptr F;
    void (**X0)(net.Conn);
    net.Conn X1;
};

typedef struct google.golang.org/protobuf/internal/impl.boolConverter google.golang.org/protobuf/internal/impl.boolConverter, *Pgoogle.golang.org/protobuf/internal/impl.boolConverter;

struct google.golang.org/protobuf/internal/impl.boolConverter {
    reflect.Type goType;
    struct google.golang.org/protobuf/reflect/protoreflect.Value def;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.traceInfo;_X1_*error;_X2_[]google.golang.org/grpc/stats.Handler;_X3_*google.golang.org/grpc/stats.Begin;_X4_*context.Context;_X5_*google.golang.org/grpc.Server_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.traceInfo;_X1_*error;_X2_[]google.golang.org/grpc/stats.Handler;_X3_*google.golang.org/grpc/stats.Begin;_X4_*context.Context;_X5_*google.golang.org/grpc.Server_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.traceInfo;_X1_*error;_X2_[]google.golang.org/grpc/stats.Handler;_X3_*google.golang.org/grpc/stats.Begin;_X4_*context.Context;_X5_*google.golang.org/grpc.Server_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.traceInfo;_X1_*error;_X2_[]google.golang.org/grpc/stats.Handler;_X3_*google.golang.org/grpc/stats.Begin;_X4_*context.Context;_X5_*google.golang.org/grpc.Server_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc.traceInfo; X1 *error; X2 []google.golang.org/grpc/stats.Handler; X3 *google.golang.org/grpc/stats.Begin; X4 *context.Context; X5 *google.golang.org/grpc.Server }
    uintptr F;
    struct google.golang.org/grpc.traceInfo *X0;
    error *X1;
    struct []google.golang.org/grpc/stats.Handler X2;
    struct google.golang.org/grpc/stats.Begin *X3;
    context.Context *X4;
    struct google.golang.org/grpc.Server *X5;
};

typedef struct hash<google.golang.org/grpc/internal/channelz.RefChannelType,string> *map[google.golang.org/grpc/internal/channelz.RefChannelType]string;

typedef struct runtime.schedt runtime.schedt, *Pruntime.schedt;

struct runtime.schedt {
    struct runtime/internal/atomic.Uint64 goidgen;
    struct runtime/internal/atomic.Int64 lastpoll;
    struct runtime/internal/atomic.Int64 pollUntil;
    struct runtime.mutex lock;
    runtime.muintptr midle;
    int32 nmidle;
    int32 nmidlelocked;
    int64 mnext;
    int32 maxmcount;
    int32 nmsys;
    int64 nmfreed;
    struct runtime/internal/atomic.Int32 ngsys;
    runtime.puintptr pidle;
    struct runtime/internal/atomic.Int32 npidle;
    struct runtime/internal/atomic.Int32 nmspinning;
    struct runtime/internal/atomic.Uint32 needspinning;
    struct runtime.gQueue runq;
    int32 runqsize;
    struct struct_{_runtime.user_bool;_runtime.runnable_runtime.gQueue;_runtime.n_int32_} disable;
    struct struct_{_runtime.lock_runtime.mutex;_runtime.stack_runtime.gList;_runtime.noStack_runtime.gList;_runtime.n_int32_} gFree;
    struct runtime.mutex sudoglock;
    struct runtime.sudog *sudogcache;
    struct runtime.mutex deferlock;
    struct runtime._defer *deferpool;
    struct runtime.m *freem;
    struct runtime/internal/atomic.Bool gcwaiting;
    int32 stopwait;
    struct runtime.note stopnote;
    struct runtime/internal/atomic.Bool sysmonwait;
    struct runtime.note sysmonnote;
    void (**safePointFn)(struct runtime.p *);
    int32 safePointWait;
    struct runtime.note safePointNote;
    int32 profilehz;
    int64 procresizetime;
    int64 totaltime;
    struct runtime.mutex sysmonlock;
    struct runtime.timeHistogram timeToRun;
    struct runtime/internal/atomic.Int64 idleTime;
    struct runtime/internal/atomic.Int64 totalMutexWaitTime;
};

typedef struct noalg.struct_{_google.golang.org/grpc/internal/transport.c_unsafe.Pointer;_google.golang.org/grpc/internal/transport.elem_unsafe.Pointer_} noalg.[4]struct_{_google.golang.org/grpc/internal/transport.c_unsafe.Pointer;_google.golang.org/grpc/internal/transport.elem_unsafe.Pointer_}[4];

typedef struct noalg.struct_{_F_uintptr;_X0_[]uint8;_X1_*runtime.g;_X2_uintptr;_X3_uintptr;_X4_bool;_X5_*int_} noalg.struct_{_F_uintptr;_X0_[]uint8;_X1_*runtime.g;_X2_uintptr;_X3_uintptr;_X4_bool;_X5_*int_}, *Pnoalg.struct_{_F_uintptr;_X0_[]uint8;_X1_*runtime.g;_X2_uintptr;_X3_uintptr;_X4_bool;_X5_*int_};

struct noalg.struct_{_F_uintptr;_X0_[]uint8;_X1_*runtime.g;_X2_uintptr;_X3_uintptr;_X4_bool;_X5_*int_} { // Original name: noalg.struct { F uintptr; X0 []uint8; X1 *runtime.g; X2 uintptr; X3 uintptr; X4 bool; X5 *int }
    uintptr F;
    struct []uint8 X0;
    struct runtime.g *X1;
    uintptr X2;
    uintptr X3;
    bool X4;
    int *X5;
};

typedef struct noalg.map.iter[string]html/template.context noalg.map.iter[string]html/template.context, *Pnoalg.map.iter[string]html/template.context;

struct noalg.map.iter[string]html/template.context {
    struct string *key;
    struct html/template.context *elem;
    void *t;
    struct noalg.map.hdr[string]html/template.context *h;
    struct noalg.map.bucket[string]html/template.context *buckets;
    struct noalg.map.bucket[string]html/template.context *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct hash<google.golang.org/protobuf/internal/filedesc.pathKey,[]int> *map[google.golang.org/protobuf/internal/filedesc.pathKey][]int;

typedef struct noalg.struct_{_F_uintptr;_X0_*int;_X1_*bytes.Buffer_} noalg.struct_{_F_uintptr;_X0_*int;_X1_*bytes.Buffer_}, *Pnoalg.struct_{_F_uintptr;_X0_*int;_X1_*bytes.Buffer_};

struct noalg.struct_{_F_uintptr;_X0_*int;_X1_*bytes.Buffer_} { // Original name: noalg.struct { F uintptr; X0 *int; X1 *bytes.Buffer }
    uintptr F;
    int *X0;
    struct bytes.Buffer *X1;
};

typedef struct crypto/x509.authKeyId crypto/x509.authKeyId, *Pcrypto/x509.authKeyId;

struct crypto/x509.authKeyId {
    struct []uint8 Id;
};

typedef struct noalg.struct_{_F_uintptr;_R_*google.golang.org/grpc/internal/transport.http2Server_} noalg.struct_{_F_uintptr;_R_*google.golang.org/grpc/internal/transport.http2Server_}, *Pnoalg.struct_{_F_uintptr;_R_*google.golang.org/grpc/internal/transport.http2Server_};

struct noalg.struct_{_F_uintptr;_R_*google.golang.org/grpc/internal/transport.http2Server_} { // Original name: noalg.struct { F uintptr; R *google.golang.org/grpc/internal/transport.http2Server }
    uintptr F;
    struct google.golang.org/grpc/internal/transport.http2Server *R;
};

typedef struct runtime.iface net.Error;

typedef struct noalg.struct_{_F_uintptr;_X0_bool_} noalg.struct_{_F_uintptr;_X0_bool_}, *Pnoalg.struct_{_F_uintptr;_X0_bool_};

struct noalg.struct_{_F_uintptr;_X0_bool_} { // Original name: noalg.struct { F uintptr; X0 bool }
    uintptr F;
    bool X0;
};

typedef struct runtime/internal/atomic.Pointer[go.shape.func(string)_func()] runtime/internal/atomic.Pointer[go.shape.func(string)_func()], *Pruntime/internal/atomic.Pointer[go.shape.func(string)_func()];

struct runtime/internal/atomic.Pointer[go.shape.func(string)_func()] { // Original name: runtime/internal/atomic.Pointer[go.shape.func(string) func()]
    struct runtime/internal/atomic.UnsafePointer u;
};

typedef struct runtime.finblock runtime.finblock, *Pruntime.finblock;

struct runtime.finblock {
    struct runtime/internal/sys.NotInHeap _;
    struct runtime.finblock *alllink;
    struct runtime.finblock *next;
    uint32 cnt;
    int32 _;
    struct runtime.finalizer fin[101];
};

typedef struct noalg.struct_{_F_uintptr;_X0_unsafe.Pointer;_X1_uintptr_} noalg.struct_{_F_uintptr;_X0_unsafe.Pointer;_X1_uintptr_}, *Pnoalg.struct_{_F_uintptr;_X0_unsafe.Pointer;_X1_uintptr_};

struct noalg.struct_{_F_uintptr;_X0_unsafe.Pointer;_X1_uintptr_} { // Original name: noalg.struct { F uintptr; X0 unsafe.Pointer; X1 uintptr }
    uintptr F;
    void *X0;
    uintptr X1;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.stkframe;_X1_uintptr_} noalg.struct_{_F_uintptr;_X0_*runtime.stkframe;_X1_uintptr_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.stkframe;_X1_uintptr_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.stkframe;_X1_uintptr_} { // Original name: noalg.struct { F uintptr; X0 *runtime.stkframe; X1 uintptr }
    uintptr F;
    struct runtime.stkframe *X0;
    uintptr X1;
};

typedef struct noalg.map.iter[interface_{}]interface_{} noalg.map.iter[interface_{}]interface_{}, *Pnoalg.map.iter[interface_{}]interface_{};

struct noalg.map.iter[interface_{}]interface_{} { // Original name: noalg.map.iter[interface {}]interface {}
    interface_{} *key;
    interface_{} *elem;
    void *t;
    struct noalg.map.hdr[interface_{}]interface_{} *h;
    struct noalg.map.bucket[interface_{}]interface_{} *buckets;
    struct noalg.map.bucket[interface_{}]interface_{} *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct runtime.heapBits runtime.heapBits, *Pruntime.heapBits;

struct runtime.heapBits {
    uintptr addr;
    uintptr size;
    uintptr mask;
    uintptr valid;
};

typedef struct google.golang.org/protobuf/types/known/durationpb.x.1 google.golang.org/protobuf/types/known/durationpb.x.1, *Pgoogle.golang.org/protobuf/types/known/durationpb.x.1;

struct google.golang.org/protobuf/types/known/durationpb.x.1 { // Original name: google.golang.org/protobuf/types/known/durationpb.xÂ·1
};

typedef struct hash<string,*golang.org/x/net/trace.eventFamily> *map[string]*golang.org/x/net/trace.eventFamily;

typedef struct google.golang.org/grpc.rpcInfoContextKey google.golang.org/grpc.rpcInfoContextKey, *Pgoogle.golang.org/grpc.rpcInfoContextKey;

struct google.golang.org/grpc.rpcInfoContextKey {
};

typedef struct noalg.struct_{_F_uintptr;_X0_chan_struct_{}_} noalg.struct_{_F_uintptr;_X0_chan_struct_{}_}, *Pnoalg.struct_{_F_uintptr;_X0_chan_struct_{}_};

struct noalg.struct_{_F_uintptr;_X0_chan_struct_{}_} { // Original name: noalg.struct { F uintptr; X0 chan struct {} }
    uintptr F;
    chan_struct_{} X0;
};

typedef struct reflect.MapIter reflect.MapIter, *Preflect.MapIter;

struct reflect.MapIter {
    struct reflect.Value m;
    struct reflect.hiter hiter;
};

typedef struct io.LimitedReader io.LimitedReader, *Pio.LimitedReader;

struct io.LimitedReader {
    io.Reader R;
    int64 N;
};

typedef struct text/template/parse.BreakNode text/template/parse.BreakNode, *Ptext/template/parse.BreakNode;

struct text/template/parse.BreakNode {
    struct text/template/parse.Tree *tr;
    text/template/parse.NodeType NodeType;
    text/template/parse.Pos Pos;
    int Line;
};

typedef struct noalg.struct_{_F_uintptr;_X0_func()_bool;_X1_func()_bool_} noalg.struct_{_F_uintptr;_X0_func()_bool;_X1_func()_bool_}, *Pnoalg.struct_{_F_uintptr;_X0_func()_bool;_X1_func()_bool_};

struct noalg.struct_{_F_uintptr;_X0_func()_bool;_X1_func()_bool_} { // Original name: noalg.struct { F uintptr; X0 func() bool; X1 func() bool }
    uintptr F;
    void (**X0)(bool *);
    void (**X1)(bool *);
};

typedef struct noalg.struct_{_F_uintptr;_X0_**os.File;_X1_*error;_X2_bool;_X3_*int;_X4_*mime/multipart.Form_} noalg.struct_{_F_uintptr;_X0_**os.File;_X1_*error;_X2_bool;_X3_*int;_X4_*mime/multipart.Form_}, *Pnoalg.struct_{_F_uintptr;_X0_**os.File;_X1_*error;_X2_bool;_X3_*int;_X4_*mime/multipart.Form_};

struct noalg.struct_{_F_uintptr;_X0_**os.File;_X1_*error;_X2_bool;_X3_*int;_X4_*mime/multipart.Form_} { // Original name: noalg.struct { F uintptr; X0 **os.File; X1 *error; X2 bool; X3 *int; X4 *mime/multipart.Form }
    uintptr F;
    struct os.File **X0;
    error *X1;
    bool X2;
    int *X3;
    struct mime/multipart.Form *X4;
};

typedef struct []*net/http.Cookie []*net/http.Cookie, *P[]*net/http.Cookie;

struct []*net/http.Cookie {
    struct net/http.Cookie **array;
    int len;
    int cap;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.eface_} noalg.struct_{_F_uintptr;_X0_*runtime.eface_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.eface_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.eface_} { // Original name: noalg.struct { F uintptr; X0 *runtime.eface }
    uintptr F;
    struct runtime.eface *X0;
};

typedef struct hchan<bool> *chan_bool;

typedef struct runtime.iface interface_{_ProtoMessageInfo()_*google.golang.org/protobuf/internal/impl.MessageInfo_};

typedef struct net/http.maxBytesReader net/http.maxBytesReader, *Pnet/http.maxBytesReader;

struct net/http.maxBytesReader {
    net/http.ResponseWriter w;
    io.ReadCloser r;
    int64 i;
    int64 n;
    error err;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.FieldNumbers;

typedef struct runtime.workType runtime.workType, *Pruntime.workType;

typedef struct struct_{_runtime.lock_runtime.mutex;_runtime.list_runtime.gList_} struct_{_runtime.lock_runtime.mutex;_runtime.list_runtime.gList_}, *Pstruct_{_runtime.lock_runtime.mutex;_runtime.list_runtime.gList_};

struct struct_{_runtime.lock_runtime.mutex;_runtime.list_runtime.gList_} { // Original name: struct { runtime.lock runtime.mutex; runtime.list runtime.gList }
    struct runtime.mutex lock;
    struct runtime.gList list;
};

struct runtime.workType {
    runtime.lfstack full;
    struct internal/cpu.CacheLinePad _;
    runtime.lfstack empty;
    struct internal/cpu.CacheLinePad _;
    struct struct_{_runtime.lock_runtime.mutex;_runtime.free_runtime.mSpanList;_runtime.busy_runtime.mSpanList_} wbufSpans;
    uint32 _;
    uint64 bytesMarked;
    uint32 markrootNext;
    uint32 markrootJobs;
    uint32 nproc;
    int64 tstart;
    uint32 nwait;
    int nDataRoots;
    int nBSSRoots;
    int nSpanRoots;
    int nStackRoots;
    uint32 baseData;
    uint32 baseBSS;
