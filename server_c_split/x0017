    int len;
    int cap;
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.structInfo_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.structInfo_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.structInfo_};

typedef struct google.golang.org/protobuf/internal/impl.structInfo google.golang.org/protobuf/internal/impl.structInfo, *Pgoogle.golang.org/protobuf/internal/impl.structInfo;

typedef struct hash<google.golang.org/protobuf/encoding/protowire.Number,reflect.StructField> hash<google.golang.org/protobuf/encoding/protowire.Number,reflect.StructField>, *Phash<google.golang.org/protobuf/encoding/protowire.Number,reflect.StructField>;

typedef struct hash<google.golang.org/protobuf/encoding/protowire.Number,reflect.StructField> *map[google.golang.org/protobuf/encoding/protowire.Number]reflect.StructField;

typedef struct hash<google.golang.org/protobuf/reflect/protoreflect.Name,reflect.StructField> hash<google.golang.org/protobuf/reflect/protoreflect.Name,reflect.StructField>, *Phash<google.golang.org/protobuf/reflect/protoreflect.Name,reflect.StructField>;

typedef struct hash<google.golang.org/protobuf/reflect/protoreflect.Name,reflect.StructField> *map[google.golang.org/protobuf/reflect/protoreflect.Name]reflect.StructField;

typedef struct hash<reflect.Type,google.golang.org/protobuf/encoding/protowire.Number> hash<reflect.Type,google.golang.org/protobuf/encoding/protowire.Number>, *Phash<reflect.Type,google.golang.org/protobuf/encoding/protowire.Number>;

typedef struct hash<reflect.Type,google.golang.org/protobuf/encoding/protowire.Number> *map[reflect.Type]google.golang.org/protobuf/encoding/protowire.Number;

typedef struct hash<google.golang.org/protobuf/encoding/protowire.Number,reflect.Type> *map[google.golang.org/protobuf/encoding/protowire.Number]reflect.Type;

typedef struct bucket<google.golang.org/protobuf/reflect/protoreflect.Name,reflect.StructField> bucket<google.golang.org/protobuf/reflect/protoreflect.Name,reflect.StructField>, *Pbucket<google.golang.org/protobuf/reflect/protoreflect.Name,reflect.StructField>;

typedef struct bucket<reflect.Type,google.golang.org/protobuf/encoding/protowire.Number> bucket<reflect.Type,google.golang.org/protobuf/encoding/protowire.Number>, *Pbucket<reflect.Type,google.golang.org/protobuf/encoding/protowire.Number>;

struct hash<google.golang.org/protobuf/reflect/protoreflect.Name,reflect.StructField> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/protobuf/reflect/protoreflect.Name,reflect.StructField> *buckets;
    struct bucket<google.golang.org/protobuf/reflect/protoreflect.Name,reflect.StructField> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct google.golang.org/protobuf/internal/impl.structInfo {
    google.golang.org/protobuf/internal/impl.offset sizecacheOffset;
    reflect.Type sizecacheType;
    google.golang.org/protobuf/internal/impl.offset weakOffset;
    reflect.Type weakType;
    google.golang.org/protobuf/internal/impl.offset unknownOffset;
    reflect.Type unknownType;
    google.golang.org/protobuf/internal/impl.offset extensionOffset;
    reflect.Type extensionType;
    map[google.golang.org/protobuf/encoding/protowire.Number]reflect.StructField fieldsByNumber;
    map[google.golang.org/protobuf/reflect/protoreflect.Name]reflect.StructField oneofsByName;
    map[reflect.Type]google.golang.org/protobuf/encoding/protowire.Number oneofWrappersByType;
    map[google.golang.org/protobuf/encoding/protowire.Number]reflect.Type oneofWrappersByNumber;
};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.structInfo_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/internal/impl.structInfo }
    uintptr F;
    struct google.golang.org/protobuf/internal/impl.structInfo X0;
};

struct bucket<google.golang.org/protobuf/reflect/protoreflect.Name,reflect.StructField> {
    uint8 tophash[8];
    struct google.golang.org/protobuf/reflect/protoreflect.Name keys[8];
    struct reflect.StructField values[8];
    struct bucket<google.golang.org/protobuf/reflect/protoreflect.Name,reflect.StructField> *overflow;
};

struct hash<reflect.Type,google.golang.org/protobuf/encoding/protowire.Number> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<reflect.Type,google.golang.org/protobuf/encoding/protowire.Number> *buckets;
    struct bucket<reflect.Type,google.golang.org/protobuf/encoding/protowire.Number> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct hash<google.golang.org/protobuf/encoding/protowire.Number,reflect.StructField> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,reflect.StructField> *buckets;
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,reflect.StructField> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<reflect.Type,google.golang.org/protobuf/encoding/protowire.Number> {
    uint8 tophash[8];
    reflect.Type keys[8];
    google.golang.org/protobuf/encoding/protowire.Number values[8];
    struct bucket<reflect.Type,google.golang.org/protobuf/encoding/protowire.Number> *overflow;
};

typedef struct runtime.iface google.golang.org/protobuf/internal/impl.legacyUnmarshaler;

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/grpcsync.Event_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/grpcsync.Event_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/grpcsync.Event_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/grpcsync.Event_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc/internal/grpcsync.Event }
    uintptr F;
    struct google.golang.org/grpc/internal/grpcsync.Event *X0;
};

typedef struct bucket<vendor/golang.org/x/net/dns/dnsmessage.RCode,string> bucket<vendor/golang.org/x/net/dns/dnsmessage.RCode,string>, *Pbucket<vendor/golang.org/x/net/dns/dnsmessage.RCode,string>;

struct bucket<vendor/golang.org/x/net/dns/dnsmessage.RCode,string> {
    uint8 tophash[8];
    vendor/golang.org/x/net/dns/dnsmessage.RCode keys[8];
    struct string values[8];
    struct bucket<vendor/golang.org/x/net/dns/dnsmessage.RCode,string> *overflow;
};

typedef struct hash<*reflect.structType,bool> hash<*reflect.structType,bool>, *Phash<*reflect.structType,bool>;

struct hash<*reflect.structType,bool> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<*reflect.structType,bool> *buckets;
    struct bucket<*reflect.structType,bool> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct noalg.map.iter[string][]int noalg.map.iter[string][]int, *Pnoalg.map.iter[string][]int;

typedef struct noalg.map.hdr[string][]int noalg.map.hdr[string][]int, *Pnoalg.map.hdr[string][]int;

struct noalg.map.hdr[string][]int {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string][]int *buckets;
    struct noalg.map.bucket[string][]int *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.iter[string][]int {
    struct string *key;
    struct []int *elem;
    void *t;
    struct noalg.map.hdr[string][]int *h;
    struct noalg.map.bucket[string][]int *buckets;
    struct noalg.map.bucket[string][]int *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct sync.rlocker sync.rlocker, *Psync.rlocker;

struct sync.rlocker {
    struct sync.Mutex w;
    uint32 writerSem;
    uint32 readerSem;
    struct sync/atomic.Int32 readerCount;
    struct sync/atomic.Int32 readerWait;
};

typedef struct hash<string,[]int> hash<string,[]int>, *Phash<string,[]int>;

typedef struct bucket<string,[]int> bucket<string,[]int>, *Pbucket<string,[]int>;

struct bucket<string,[]int> {
    uint8 tophash[8];
    struct string keys[8];
    struct []int values[8];
    struct bucket<string,[]int> *overflow;
};

struct hash<string,[]int> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,[]int> *buckets;
    struct bucket<string,[]int> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct runtime.iface google.golang.org/grpc/resolver.AuthorityOverrider;

typedef struct runtime.evacDst runtime.evacDst, *Pruntime.evacDst;

struct runtime.evacDst {
    struct runtime.bmap *b;
    int i;
    void *k;
    void *e;
};

typedef struct text/template/parse.ContinueNode text/template/parse.ContinueNode, *Ptext/template/parse.ContinueNode;

struct text/template/parse.ContinueNode {
    struct text/template/parse.Tree *tr;
    text/template/parse.NodeType NodeType;
    text/template/parse.Pos Pos;
    int Line;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.Stream_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.Stream_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.Stream_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.Stream_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc/internal/transport.Stream }
    uintptr F;
    struct google.golang.org/grpc/internal/transport.Stream *X0;
};

typedef struct encoding/base64.Encoding encoding/base64.Encoding, *Pencoding/base64.Encoding;

struct encoding/base64.Encoding {
    uint8 encode[64];
    uint8 decodeMap[256];
    int32 padChar;
    bool strict;
};

typedef struct golang.org/x/net/http2.ContinuationFrame golang.org/x/net/http2.ContinuationFrame, *Pgolang.org/x/net/http2.ContinuationFrame;

struct golang.org/x/net/http2.ContinuationFrame {
    struct golang.org/x/net/http2.FrameHeader FrameHeader;
    struct []uint8 headerFragBuf;
};

typedef struct crypto/ecdh.x25519Curve crypto/ecdh.x25519Curve, *Pcrypto/ecdh.x25519Curve;

struct crypto/ecdh.x25519Curve {
};

typedef struct []google.golang.org/grpc.StreamDesc []google.golang.org/grpc.StreamDesc, *P[]google.golang.org/grpc.StreamDesc;

struct []google.golang.org/grpc.StreamDesc {
    struct google.golang.org/grpc.StreamDesc *array;
    int len;
    int cap;
};

typedef struct reflect.layoutKey reflect.layoutKey, *Preflect.layoutKey;

struct reflect.layoutKey {
    struct internal/abi.FuncType *ftyp;
    struct internal/abi.Type *rcvr;
};

typedef struct runtime.iface google.golang.org/protobuf/internal/impl.unwrapper;

typedef struct google.golang.org/grpc/stats.ConnBegin google.golang.org/grpc/stats.ConnBegin, *Pgoogle.golang.org/grpc/stats.ConnBegin;

struct google.golang.org/grpc/stats.ConnBegin {
    bool Client;
};

typedef struct google.golang.org/grpc/stats.OutHeader google.golang.org/grpc/stats.OutHeader, *Pgoogle.golang.org/grpc/stats.OutHeader;

struct google.golang.org/grpc/stats.OutHeader {
    bool Client;
    struct string Compression;
    google.golang.org/grpc/metadata.MD Header;
    struct string FullMethod;
    net.Addr RemoteAddr;
    net.Addr LocalAddr;
};

typedef struct runtime.scavChunkData runtime.scavChunkData, *Pruntime.scavChunkData;

struct runtime.scavChunkData {
    uint16 inUse;
    uint16 lastInUse;
    uint32 gen;
    runtime.scavChunkFlags scavChunkFlags;
};

typedef struct runtime.godebugInc runtime.godebugInc, *Pruntime.godebugInc;

typedef struct runtime/internal/atomic.Pointer[func()] runtime/internal/atomic.Pointer[func()], *Pruntime/internal/atomic.Pointer[func()];

struct runtime/internal/atomic.Pointer[func()] {
    struct runtime/internal/atomic.UnsafePointer u;
};

struct runtime.godebugInc {
    struct string name;
    struct runtime/internal/atomic.Pointer[func()] inc;
};

typedef struct []net.Interface []net.Interface, *P[]net.Interface;

struct []net.Interface {
    struct net.Interface *array;
    int len;
    int cap;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*internal/poll.FD;_X1_time.Time_} noalg.struct_{_F_uintptr;_X0_*internal/poll.FD;_X1_time.Time_}, *Pnoalg.struct_{_F_uintptr;_X0_*internal/poll.FD;_X1_time.Time_};

struct noalg.struct_{_F_uintptr;_X0_*internal/poll.FD;_X1_time.Time_} { // Original name: noalg.struct { F uintptr; X0 *internal/poll.FD; X1 time.Time }
    uintptr F;
    struct internal/poll.FD *X0;
    struct time.Time X1;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.ExtensionDescriptors;

typedef struct hash<string,net.byName> hash<string,net.byName>, *Phash<string,net.byName>;

typedef struct bucket<string,net.byName> bucket<string,net.byName>, *Pbucket<string,net.byName>;

typedef struct net.byName net.byName, *Pnet.byName;

struct net.byName {
    struct []string addrs;
    struct string canonicalName;
};

struct bucket<string,net.byName> {
    uint8 tophash[8];
    struct string keys[8];
    struct net.byName values[8];
    struct bucket<string,net.byName> *overflow;
};

struct hash<string,net.byName> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,net.byName> *buckets;
    struct bucket<string,net.byName> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.ServiceDescriptors;

typedef uint32 bytes.asciiSet[8];

typedef struct google.golang.org/protobuf/internal/impl.resolverOnly google.golang.org/protobuf/internal/impl.resolverOnly, *Pgoogle.golang.org/protobuf/internal/impl.resolverOnly;

typedef struct google.golang.org/protobuf/reflect/protoregistry.Files google.golang.org/protobuf/reflect/protoregistry.Files, *Pgoogle.golang.org/protobuf/reflect/protoregistry.Files;

typedef struct hash<google.golang.org/protobuf/reflect/protoreflect.FullName,interface_{}> *map[google.golang.org/protobuf/reflect/protoreflect.FullName]interface_{};

typedef struct hash<string,[]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor> hash<string,[]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor>, *Phash<string,[]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor>;

typedef struct hash<string,[]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor> *map[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor;

typedef struct bucket<string,[]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor> bucket<string,[]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor>, *Pbucket<string,[]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor>;

typedef struct []google.golang.org/protobuf/reflect/protoreflect.FileDescriptor []google.golang.org/protobuf/reflect/protoreflect.FileDescriptor, *P[]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor;

struct []google.golang.org/protobuf/reflect/protoreflect.FileDescriptor {
    google.golang.org/protobuf/reflect/protoreflect.FileDescriptor *array;
    int len;
    int cap;
};

struct hash<string,[]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,[]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor> *buckets;
    struct bucket<string,[]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<string,[]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor> {
    uint8 tophash[8];
    struct string keys[8];
    struct []google.golang.org/protobuf/reflect/protoreflect.FileDescriptor values[8];
    struct bucket<string,[]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor> *overflow;
};

struct google.golang.org/protobuf/reflect/protoregistry.Files {
    map[google.golang.org/protobuf/reflect/protoreflect.FullName]interface_{} descsByName;
    map[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor filesByPath;
    int numFiles;
};

struct google.golang.org/protobuf/internal/impl.resolverOnly {
    struct google.golang.org/protobuf/reflect/protoregistry.Files *reg;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*net.Resolver;_X1_context.Context;_X2_*net.dnsConfig_} noalg.struct_{_F_uintptr;_X0_*net.Resolver;_X1_context.Context;_X2_*net.dnsConfig_}, *Pnoalg.struct_{_F_uintptr;_X0_*net.Resolver;_X1_context.Context;_X2_*net.dnsConfig_};

struct noalg.struct_{_F_uintptr;_X0_*net.Resolver;_X1_context.Context;_X2_*net.dnsConfig_} { // Original name: noalg.struct { F uintptr; X0 *net.Resolver; X1 context.Context; X2 *net.dnsConfig }
    uintptr F;
    struct net.Resolver *X0;
    context.Context X1;
    struct net.dnsConfig *X2;
};

typedef struct text/template/parse.BoolNode text/template/parse.BoolNode, *Ptext/template/parse.BoolNode;

struct text/template/parse.BoolNode {
    text/template/parse.NodeType NodeType;
    text/template/parse.Pos Pos;
    struct text/template/parse.Tree *tr;
    bool True;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*error;_X1_net/http.Header_} noalg.struct_{_F_uintptr;_X0_*error;_X1_net/http.Header_}, *Pnoalg.struct_{_F_uintptr;_X0_*error;_X1_net/http.Header_};

struct noalg.struct_{_F_uintptr;_X0_*error;_X1_net/http.Header_} { // Original name: noalg.struct { F uintptr; X0 *error; X1 net/http.Header }
    uintptr F;
    error *X0;
    net/http.Header X1;
};

typedef struct runtime.iface interface_{_Unwrap()_error_};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc/internal/transport.http2Client }
    uintptr F;
    struct google.golang.org/grpc/internal/transport.http2Client *X0;
};

typedef struct google.golang.org/protobuf/internal/encoding/text.Token google.golang.org/protobuf/internal/encoding/text.Token, *Pgoogle.golang.org/protobuf/internal/encoding/text.Token;

struct google.golang.org/protobuf/internal/encoding/text.Token {
    google.golang.org/protobuf/internal/encoding/text.Kind kind;
    uint8 attrs;
    uint8 numAttrs;
    int pos;
    struct []uint8 raw;
    struct string str;
};

typedef struct bucket<string,google.golang.org/grpc/encoding.Codec> bucket<string,google.golang.org/grpc/encoding.Codec>, *Pbucket<string,google.golang.org/grpc/encoding.Codec>;

struct bucket<string,google.golang.org/grpc/encoding.Codec> {
    uint8 tophash[8];
    struct string keys[8];
    google.golang.org/grpc/encoding.Codec values[8];
    struct bucket<string,google.golang.org/grpc/encoding.Codec> *overflow;
};

typedef struct net.IPConn net.IPConn, *Pnet.IPConn;

struct net.IPConn {
    struct net.conn conn;
};

typedef struct crypto/ecdsa.nistCurve[*crypto/internal/nistec.P224Point] crypto/ecdsa.nistCurve[*crypto/internal/nistec.P224Point], *Pcrypto/ecdsa.nistCurve[*crypto/internal/nistec.P224Point];

struct crypto/ecdsa.nistCurve[*crypto/internal/nistec.P224Point] {
    void (**newPoint)(struct crypto/internal/nistec.P224Point **);
    crypto/elliptic.Curve curve;
    struct crypto/internal/bigmod.Modulus *N;
    struct []uint8 nMinus2;
};

typedef struct google.golang.org/grpc.jsonSC google.golang.org/grpc.jsonSC, *Pgoogle.golang.org/grpc.jsonSC;

typedef struct []google.golang.org/grpc.jsonMC []google.golang.org/grpc.jsonMC, *P[]google.golang.org/grpc.jsonMC;

typedef struct google.golang.org/grpc.jsonMC google.golang.org/grpc.jsonMC, *Pgoogle.golang.org/grpc.jsonMC;

typedef struct []google.golang.org/grpc.jsonName []google.golang.org/grpc.jsonName, *P[]google.golang.org/grpc.jsonName;

typedef struct google.golang.org/grpc.jsonRetryPolicy google.golang.org/grpc.jsonRetryPolicy, *Pgoogle.golang.org/grpc.jsonRetryPolicy;

typedef struct google.golang.org/grpc.jsonName google.golang.org/grpc.jsonName, *Pgoogle.golang.org/grpc.jsonName;

typedef struct []google.golang.org/grpc/codes.Code []google.golang.org/grpc/codes.Code, *P[]google.golang.org/grpc/codes.Code;

struct []google.golang.org/grpc.jsonMC {
    struct google.golang.org/grpc.jsonMC *array;
    int len;
    int cap;
};

struct google.golang.org/grpc.jsonName {
    struct string Service;
    struct string Method;
};

struct []google.golang.org/grpc/codes.Code {
    google.golang.org/grpc/codes.Code *array;
    int len;
    int cap;
};

struct google.golang.org/grpc.jsonRetryPolicy {
    int MaxAttempts;
    google.golang.org/grpc/internal/serviceconfig.Duration InitialBackoff;
    google.golang.org/grpc/internal/serviceconfig.Duration MaxBackoff;
    float64 BackoffMultiplier;
    struct []google.golang.org/grpc/codes.Code RetryableStatusCodes;
};

struct google.golang.org/grpc.jsonSC {
    struct string *LoadBalancingPolicy;
    struct encoding/json.RawMessage *LoadBalancingConfig;
    struct []google.golang.org/grpc.jsonMC *MethodConfig;
    struct google.golang.org/grpc.retryThrottlingPolicy *RetryThrottling;
    struct google.golang.org/grpc.healthCheckConfig *HealthCheckConfig;
};

struct []google.golang.org/grpc.jsonName {
    struct google.golang.org/grpc.jsonName *array;
    int len;
    int cap;
};

struct google.golang.org/grpc.jsonMC {
    struct []google.golang.org/grpc.jsonName *Name;
    bool *WaitForReady;
    google.golang.org/grpc/internal/serviceconfig.Duration *Timeout;
    int64 *MaxRequestMessageBytes;
    int64 *MaxResponseMessageBytes;
    struct google.golang.org/grpc.jsonRetryPolicy *RetryPolicy;
};

typedef struct hchan<*golang.org/x/net/trace.eventLog> hchan<*golang.org/x/net/trace.eventLog>, *Phchan<*golang.org/x/net/trace.eventLog>;

struct hchan<*golang.org/x/net/trace.eventLog> {
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<*golang.org/x/net/trace.eventLog> recvq;
    struct waitq<*golang.org/x/net/trace.eventLog> sendq;
    struct runtime.mutex lock;
};

typedef struct compress/flate.InternalError compress/flate.InternalError, *Pcompress/flate.InternalError;

struct compress/flate.InternalError {
    uint8 *str;
    int len;
};

typedef struct runtime.iface io.ByteScanner;

typedef struct runtime.traceStack runtime.traceStack, *Pruntime.traceStack;

struct runtime.traceStack {
    runtime.traceStackPtr link;
    uintptr hash;
    uint32 id;
    undefined field3_0x14;
    undefined field4_0x15;
    undefined field5_0x16;
    undefined field6_0x17;
    int n;
    uintptr stk[0];
    undefined field9_0x20;
    undefined field10_0x21;
    undefined field11_0x22;
    undefined field12_0x23;
    undefined field13_0x24;
    undefined field14_0x25;
    undefined field15_0x26;
    undefined field16_0x27;
};

typedef struct strings.stringWriter strings.stringWriter, *Pstrings.stringWriter;

struct strings.stringWriter {
    io.Writer w;
};

typedef struct reflect.interfaceType reflect.interfaceType, *Preflect.interfaceType;

struct reflect.interfaceType {
    struct internal/abi.InterfaceType InterfaceType;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*encoding/json.scanner_} noalg.struct_{_F_uintptr;_X0_*encoding/json.scanner_}, *Pnoalg.struct_{_F_uintptr;_X0_*encoding/json.scanner_};

typedef struct encoding/json.scanner encoding/json.scanner, *Pencoding/json.scanner;

struct encoding/json.scanner {
    void (**step)(struct encoding/json.scanner *, uint8, int *);
    bool endTop;
    struct []int parseState;
    error err;
    int64 bytes;
};

struct noalg.struct_{_F_uintptr;_X0_*encoding/json.scanner_} { // Original name: noalg.struct { F uintptr; X0 *encoding/json.scanner }
    uintptr F;
    struct encoding/json.scanner *X0;
};

typedef struct mime/quotedprintable.Reader mime/quotedprintable.Reader, *Pmime/quotedprintable.Reader;

struct mime/quotedprintable.Reader {
    struct bufio.Reader *br;
    error rerr;
    struct []uint8 line;
};

typedef struct context.deadlineExceededError context.deadlineExceededError, *Pcontext.deadlineExceededError;

struct context.deadlineExceededError {
};

typedef struct vendor/golang.org/x/net/dns/dnsmessage.nestedError vendor/golang.org/x/net/dns/dnsmessage.nestedError, *Pvendor/golang.org/x/net/dns/dnsmessage.nestedError;

struct vendor/golang.org/x/net/dns/dnsmessage.nestedError {
    struct string s;
    error err;
};

typedef struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry, *Pgoogle.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry;

typedef struct google.golang.org/protobuf/types/known/timestamppb.Timestamp google.golang.org/protobuf/types/known/timestamppb.Timestamp, *Pgoogle.golang.org/protobuf/types/known/timestamppb.Timestamp;

typedef struct runtime.iface google.golang.org/grpc/binarylog/grpc_binarylog_v1.isGrpcLogEntry_Payload;

typedef struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.Address google.golang.org/grpc/binarylog/grpc_binarylog_v1.Address, *Pgoogle.golang.org/grpc/binarylog/grpc_binarylog_v1.Address;

struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    struct google.golang.org/protobuf/types/known/timestamppb.Timestamp *Timestamp;
    uint64 CallId;
    uint64 SequenceIdWithinCall;
    google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_EventType Type;
    google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_Logger Logger;
    google.golang.org/grpc/binarylog/grpc_binarylog_v1.isGrpcLogEntry_Payload Payload;
    bool PayloadTruncated;
    struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.Address *Peer;
};

struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.Address {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    google.golang.org/grpc/binarylog/grpc_binarylog_v1.Address_Type Type;
    struct string Address;
    uint32 IpPort;
};

struct google.golang.org/protobuf/types/known/timestamppb.Timestamp {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    int64 Seconds;
    int32 Nanos;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.FieldDescriptors;

typedef struct noalg.struct_{_F_uintptr;_X0_*error;_X1_string_} noalg.struct_{_F_uintptr;_X0_*error;_X1_string_}, *Pnoalg.struct_{_F_uintptr;_X0_*error;_X1_string_};

struct noalg.struct_{_F_uintptr;_X0_*error;_X1_string_} { // Original name: noalg.struct { F uintptr; X0 *error; X1 string }
    uintptr F;
    error *X0;
    struct string X1;
};

typedef struct reflect.ValueError reflect.ValueError, *Preflect.ValueError;

struct reflect.ValueError {
    struct string Method;
    reflect.Kind Kind;
};

typedef struct google.golang.org/grpc.disableGlobalDialOptions google.golang.org/grpc.disableGlobalDialOptions, *Pgoogle.golang.org/grpc.disableGlobalDialOptions;

struct google.golang.org/grpc.disableGlobalDialOptions {
};

typedef struct net.AddrError net.AddrError, *Pnet.AddrError;

struct net.AddrError {
    struct string Err;
    struct string Addr;
};

typedef struct runtime.iface interface_{_otp/seedgen.testEmbeddedByValue()_};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Services_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Services_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Services_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Services_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/filedesc.Services }
    uintptr F;
    struct google.golang.org/protobuf/internal/filedesc.Services *X0;
};

typedef struct crypto/x509.HostnameError crypto/x509.HostnameError, *Pcrypto/x509.HostnameError;

struct crypto/x509.HostnameError {
    struct crypto/x509.Certificate *Certificate;
    struct string Host;
};

typedef struct runtime.iface google.golang.org/grpc/status.grpcstatus.1;

typedef struct noalg.map.bucket[string]*google.golang.org/grpc.StreamDesc noalg.map.bucket[string]*google.golang.org/grpc.StreamDesc, *Pnoalg.map.bucket[string]*google.golang.org/grpc.StreamDesc;

struct noalg.map.bucket[string]*google.golang.org/grpc.StreamDesc {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8]*google.golang.org/grpc.StreamDesc elems;
    void *overflow;
};

typedef struct hash<vendor/golang.org/x/net/dns/dnsmessage.section,string> hash<vendor/golang.org/x/net/dns/dnsmessage.section,string>, *Phash<vendor/golang.org/x/net/dns/dnsmessage.section,string>;

typedef struct bucket<vendor/golang.org/x/net/dns/dnsmessage.section,string> bucket<vendor/golang.org/x/net/dns/dnsmessage.section,string>, *Pbucket<vendor/golang.org/x/net/dns/dnsmessage.section,string>;

struct bucket<vendor/golang.org/x/net/dns/dnsmessage.section,string> {
    uint8 tophash[8];
    vendor/golang.org/x/net/dns/dnsmessage.section keys[8];
    struct string values[8];
    struct bucket<vendor/golang.org/x/net/dns/dnsmessage.section,string> *overflow;
};

struct hash<vendor/golang.org/x/net/dns/dnsmessage.section,string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<vendor/golang.org/x/net/dns/dnsmessage.section,string> *buckets;
    struct bucket<vendor/golang.org/x/net/dns/dnsmessage.section,string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct log/slog.handleState log/slog.handleState, *Plog/slog.handleState;

typedef struct log/slog/internal/buffer.Buffer log/slog/internal/buffer.Buffer, *Plog/slog/internal/buffer.Buffer;

struct log/slog/internal/buffer.Buffer {
    uint8 *array;
    int len;
    int cap;
};

struct log/slog.handleState {
    struct log/slog.commonHandler *h;
    struct log/slog/internal/buffer.Buffer *buf;
    bool freeBuf;
    struct string sep;
    struct log/slog/internal/buffer.Buffer *prefix;
    struct []string *groups;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*text/template/parse.Tree;_X1_*error_} noalg.struct_{_F_uintptr;_X0_*text/template/parse.Tree;_X1_*error_}, *Pnoalg.struct_{_F_uintptr;_X0_*text/template/parse.Tree;_X1_*error_};

struct noalg.struct_{_F_uintptr;_X0_*text/template/parse.Tree;_X1_*error_} { // Original name: noalg.struct { F uintptr; X0 *text/template/parse.Tree; X1 *error }
    uintptr F;
    struct text/template/parse.Tree *X0;
    error *X1;
};

typedef struct otp/seedgen.StressTestRequest otp/seedgen.StressTestRequest, *Potp/seedgen.StressTestRequest;

struct otp/seedgen.StressTestRequest {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    int64 Count;
};

typedef struct hash<int32,google.golang.org/protobuf/reflect/protoreflect.ProtoMessage> *google.golang.org/protobuf/internal/impl.weakFields;

typedef struct hash<google.golang.org/grpc/balancer.SubConn,google.golang.org/grpc/balancer/base.SubConnInfo> *map[google.golang.org/grpc/balancer.SubConn]google.golang.org/grpc/balancer/base.SubConnInfo;

typedef int noalg.[8]int[8];

typedef struct noalg.map.hdr[string]bool noalg.map.hdr[string]bool, *Pnoalg.map.hdr[string]bool;

typedef struct noalg.map.bucket[string]bool noalg.map.bucket[string]bool, *Pnoalg.map.bucket[string]bool;

struct noalg.map.bucket[string]bool {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8]bool elems;
    void *overflow;
};

struct noalg.map.hdr[string]bool {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string]bool *buckets;
    struct noalg.map.bucket[string]bool *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct google.golang.org/protobuf/internal/encoding/text.encoderState google.golang.org/protobuf/internal/encoding/text.encoderState, *Pgoogle.golang.org/protobuf/internal/encoding/text.encoderState;

struct google.golang.org/protobuf/internal/encoding/text.encoderState {
    google.golang.org/protobuf/internal/encoding/text.encType lastType;
    struct []uint8 indents;
    struct []uint8 out;
};

typedef struct google.golang.org/grpc/internal/binarylog.MethodLoggerConfig google.golang.org/grpc/internal/binarylog.MethodLoggerConfig, *Pgoogle.golang.org/grpc/internal/binarylog.MethodLoggerConfig;

struct google.golang.org/grpc/internal/binarylog.MethodLoggerConfig {
    uint64 Header;
    uint64 Message;
};

typedef struct noalg.struct_{_F_uintptr;_X0_func(*runtime.g);_X1_*runtime.g_} noalg.struct_{_F_uintptr;_X0_func(*runtime.g);_X1_*runtime.g_}, *Pnoalg.struct_{_F_uintptr;_X0_func(*runtime.g);_X1_*runtime.g_};

struct noalg.struct_{_F_uintptr;_X0_func(*runtime.g);_X1_*runtime.g_} { // Original name: noalg.struct { F uintptr; X0 func(*runtime.g); X1 *runtime.g }
    uintptr F;
    void (**X0)(struct runtime.g *);
    struct runtime.g *X1;
};

typedef struct google.golang.org/grpc.OnFinishCallOption google.golang.org/grpc.OnFinishCallOption, *Pgoogle.golang.org/grpc.OnFinishCallOption;

struct google.golang.org/grpc.OnFinishCallOption {
    void (**OnFinish)(error);
};

typedef struct noalg.map.hdr[string]*html/template.Template noalg.map.hdr[string]*html/template.Template, *Pnoalg.map.hdr[string]*html/template.Template;

struct noalg.map.hdr[string]*html/template.Template {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string]*html/template.Template *buckets;
    struct noalg.map.bucket[string]*html/template.Template *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct noalg.struct_{_F_uintptr;_X0_**runtime.traceBuf;_X1_int32_} noalg.struct_{_F_uintptr;_X0_**runtime.traceBuf;_X1_int32_}, *Pnoalg.struct_{_F_uintptr;_X0_**runtime.traceBuf;_X1_int32_};

typedef struct runtime.traceBuf runtime.traceBuf, *Pruntime.traceBuf;

typedef struct runtime.traceBufHeader runtime.traceBufHeader, *Pruntime.traceBufHeader;

struct noalg.struct_{_F_uintptr;_X0_**runtime.traceBuf;_X1_int32_} { // Original name: noalg.struct { F uintptr; X0 **runtime.traceBuf; X1 int32 }
    uintptr F;
    struct runtime.traceBuf **X0;
    int32 X1;
};

struct runtime.traceBufHeader {
    runtime.traceBufPtr link;
    runtime.traceTime lastTime;
    int pos;
    uintptr stk[128];
};

struct runtime.traceBuf {
    struct runtime/internal/sys.NotInHeap _;
    struct runtime.traceBufHeader traceBufHeader;
    uint8 arr[64488];
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Extensions_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Extensions_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Extensions_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Extensions_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/filedesc.Extensions }
    uintptr F;
    struct google.golang.org/protobuf/internal/filedesc.Extensions *X0;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime._panic;_X1_*bool;_X2_*runtime.g;_X3_uintptr;_X4_uintptr_} noalg.struct_{_F_uintptr;_X0_*runtime._panic;_X1_*bool;_X2_*runtime.g;_X3_uintptr;_X4_uintptr_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime._panic;_X1_*bool;_X2_*runtime.g;_X3_uintptr;_X4_uintptr_};

struct noalg.struct_{_F_uintptr;_X0_*runtime._panic;_X1_*bool;_X2_*runtime.g;_X3_uintptr;_X4_uintptr_} { // Original name: noalg.struct { F uintptr; X0 *runtime._panic; X1 *bool; X2 *runtime.g; X3 uintptr; X4 uintptr }
    uintptr F;
    struct runtime._panic *X0;
    bool *X1;
    struct runtime.g *X2;
    uintptr X3;
    uintptr X4;
};

typedef struct auth/auth_grpc.AuthResponse auth/auth_grpc.AuthResponse, *Pauth/auth_grpc.AuthResponse;

struct auth/auth_grpc.AuthResponse {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    bool Success;
};

typedef struct encoding/json.decodeState encoding/json.decodeState, *Pencoding/json.decodeState;

struct encoding/json.decodeState {
    struct []uint8 data;
    int off;
    int opcode;
    struct encoding/json.scanner scan;
    struct encoding/json.errorContext *errorContext;
    error savedError;
    bool useNumber;
    bool disallowUnknownFields;
};

typedef struct hchan<uint32> hchan<uint32>, *Phchan<uint32>;

typedef struct waitq<uint32> waitq<uint32>, *Pwaitq<uint32>;

struct waitq<uint32> {
    struct sudog<uint32> *first;
    struct sudog<uint32> *last;
};

struct hchan<uint32> {
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<uint32> recvq;
    struct waitq<uint32> sendq;
    struct runtime.mutex lock;
};

typedef struct google.golang.org/grpc/metadata.mdOutgoingKey google.golang.org/grpc/metadata.mdOutgoingKey, *Pgoogle.golang.org/grpc/metadata.mdOutgoingKey;

struct google.golang.org/grpc/metadata.mdOutgoingKey {
};

typedef struct google.golang.org/protobuf/internal/impl.uint32Converter google.golang.org/protobuf/internal/impl.uint32Converter, *Pgoogle.golang.org/protobuf/internal/impl.uint32Converter;

struct google.golang.org/protobuf/internal/impl.uint32Converter {
    reflect.Type goType;
    struct google.golang.org/protobuf/reflect/protoreflect.Value def;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*crypto/x509.Certificate;_X1_*int;_X2_*int_} noalg.struct_{_F_uintptr;_X0_*crypto/x509.Certificate;_X1_*int;_X2_*int_}, *Pnoalg.struct_{_F_uintptr;_X0_*crypto/x509.Certificate;_X1_*int;_X2_*int_};

struct noalg.struct_{_F_uintptr;_X0_*crypto/x509.Certificate;_X1_*int;_X2_*int_} { // Original name: noalg.struct { F uintptr; X0 *crypto/x509.Certificate; X1 *int; X2 *int }
    uintptr F;
    struct crypto/x509.Certificate *X0;
    int *X1;
    int *X2;
};

typedef struct sudog<net.result[[]string].1> sudog<net.result[[]string].1>, *Psudog<net.result[[]string].1>;

typedef struct net.result[[]string].1 net.result[[]string].1, *Pnet.result[[]string].1;

struct net.result[[]string].1 { // Original name: net.result[[]string]·1
    struct []string res;
    error err;
};

struct sudog<net.result[[]string].1> { // Original name: sudog<net.result[[]string]·1>
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    struct net.result[[]string].1 *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

typedef struct strings.trieNode strings.trieNode, *Pstrings.trieNode;

typedef struct []*strings.trieNode []*strings.trieNode, *P[]*strings.trieNode;

struct []*strings.trieNode {
    struct strings.trieNode **array;
    int len;
    int cap;
};

struct strings.trieNode {
    struct string value;
