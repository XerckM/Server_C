    return;
  }
  iVar10 = (pub->N->abs).len;
  iVar8 = iVar10 + -1;
  if (iVar8 < 0) {
    iVar8 = 0;
  }
  else {
    uVar9 = (pub->N->abs).array[iVar10 + -1];
    uVar9 = uVar9 >> 1 | uVar9;
    uVar9 = uVar9 >> 2 | uVar9;
    uVar9 = uVar9 >> 4 | uVar9;
    uVar9 = uVar9 >> 8 | uVar9;
    uVar9 = uVar9 >> 0x10 | uVar9;
    uVar9 = uVar9 >> 0x20 | uVar9;
    iVar10 = 0x3f;
    if (uVar9 != 0) {
      for (; uVar9 >> iVar10 == 0; iVar10 = iVar10 + -1) {
      }
    }
    if (uVar9 == 0) {
      iVar10 = -1;
    }
    iVar8 = iVar10 + iVar8 * 0x40 + 1;
  }
  uVar9 = (int)(((uint)(iVar8 + 7 >> 0x3f) >> 0x3d) + iVar8 + 7) >> 3;
  if ((int)uVar9 < (int)pvVar4 + iVar1 + 0xb) {
    return;
  }
  if (in_R9 != uVar9) {
    return;
  }
  crypto_rsa_encrypt((char *)pub,in_R8);
  if (extraout_RDI != 0) {
    return;
  }
  if (extraout_RBX == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if (1 < extraout_RBX) {
    uVar7 = uVar9 - (int)pvVar4;
    if (extraout_RCX < uVar9) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAcap();
    }
    if (uVar9 < uVar7) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    if (in_RDI == (void *)(uVar9 - uVar7)) {
      v = 0;
      for (iVar8 = 0; iVar8 < (int)(void *)(uVar9 - uVar7); iVar8 = iVar8 + 1) {
        v = v | *(byte *)(in_RCX + iVar8) ^
                extraout_RAX_02[iVar8 + ((int)(uVar7 - extraout_RCX) >> 0x3f & uVar7)];
      }
      dVar6 = (dword)(v - 1) >> 0x1f;
    }
    else {
      dVar6 = 0;
    }
    uVar9 = uVar9 - ((int)pvVar4 + iVar1);
    if (uVar7 < uVar9) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    if (iVar1 == uVar7 - uVar9) {
      v_1 = 0;
      for (iVar1 = 0; iVar1 < (int)(uVar7 - uVar9); iVar1 = iVar1 + 1) {
        v_1 = v_1 | *(byte *)(iVar1 + iVar2) ^
                    extraout_RAX_02[iVar1 + ((int)(uVar9 - extraout_RCX) >> 0x3f & uVar9)];
      }
      dVar3 = (dword)(v_1 - 1) >> 0x1f;
    }
    else {
      dVar3 = 0;
    }
    if (uVar9 - 1 < extraout_RBX) {
      dVar6 = dVar3 & dVar6 & (dword)(*extraout_RAX_02 - 1 & (extraout_RAX_02[1] ^ 1) - 1) >> 0x1f &
              (dword)(extraout_RAX_02[uVar9 - 1] - 1) >> 0x1f;
      for (iVar2 = 2; iVar2 < (int)(uVar9 - 1); iVar2 = iVar2 + 1) {
        dVar6 = dVar6 & (dword)((byte)~extraout_RAX_02[iVar2] - 1) >> 0x1f;
      }
      if (dVar6 != 1) {
        return;
      }
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void crypto_rsa_emsaPSSVerify(__uint8 mHash,__uint8 em,int emBits,int sLen,hash_Hash hash,error ~r0)

{
  void *pvVar1;
  void *pvVar2;
  __uint8 out;
  hash_Hash hash_00;
  char extraout_AL;
  int iVar3;
  int hLen;
  int psLen_1;
  undefined8 *extraout_RAX;
  undefined8 extraout_RAX_00;
  uint8 (*_prefix) [8];
  undefined8 in_RCX;
  void *~r0_00;
  int emLen;
  int iVar4;
  int extraout_RBX;
  void *in_RSI;
  uint uVar5;
  byte *in_RDI;
  int psLen;
  void *in_R8;
  int iVar6;
  int in_R9;
  int in_R10;
  byte bVar7;
  uint8 bitMask;
  int unaff_R14;
  undefined8 in_stack_ffffffffffffff70;
  undefined8 in_stack_ffffffffffffff78;
  int in_stack_ffffffffffffff80;
  undefined in_stack_ffffffffffffff88;
  undefined7 in_stack_ffffffffffffff89;
  void *in_stack_ffffffffffffff90;
  __uint8 in_stack_ffffffffffffff98;
  byte *local_10;
  
  while (&local_10 <= *(byte ***)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar3 = (**(code **)(mHash.array + 0x28))(mHash.len);
  if (in_R10 == -1) {
    in_R10 = iVar3;
  }
  ~r0_00 = (void *)((int)(((uint)(in_R9 + 7 >> 0x3f) >> 0x3d) + in_R9 + 7) >> 3);
  if (in_RSI != ~r0_00) {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_00);
    extraout_RAX[1] = 0x28;
    *extraout_RAX = &DAT_008c4cbc;
    return;
  }
  if (iVar3 != sLen) {
    return;
  }
  if ((int)~r0_00 < in_R10 + iVar3 + 2) {
    return;
  }
  if (in_RSI <= (void *)((int)~r0_00 - 1U)) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if (in_RDI[(int)~r0_00 + -1] != 0xbc) {
    return;
  }
  iVar3 = (int)~r0_00 - iVar3;
  pvVar1 = (void *)(iVar3 - 1);
  if (in_R8 < pvVar1) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  if ((void *)((int)~r0_00 - 1U) < pvVar1) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  uVar5 = (int)~r0_00 * 8 - in_R9;
  local_10 = in_RDI + (-((int)in_R8 + (1 - iVar3)) >> 0x3f & (uint)pvVar1);
  if ((int)uVar5 < 0) {
                    // WARNING: Subroutine does not return
    runtime_panicshift();
  }
  bVar7 = 0xffU >> ((byte)uVar5 & 0x1f) & -(uVar5 < 8);
  if ((*in_RDI & ~bVar7) != 0) {
    return;
  }
  out.len = in_stack_ffffffffffffff78;
  out.array = (uint8 *)in_stack_ffffffffffffff70;
  out.cap = in_stack_ffffffffffffff80;
  hash_00.tab._1_7_ = in_stack_ffffffffffffff89;
  hash_00.tab._0_1_ = in_stack_ffffffffffffff88;
  hash_00.data = in_stack_ffffffffffffff90;
  crypto_rsa_mgf1XOR(out,hash_00,in_stack_ffffffffffffff98);
  if (pvVar1 == (void *)0x0) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  *in_RDI = bVar7 & *in_RDI;
  if (in_R10 == 0) {
    internal_bytealg_IndexByte();
    if ((int)in_stack_ffffffffffffff90 < 0) {
      return;
    }
    in_R10 = (iVar3 - (int)in_stack_ffffffffffffff90) + -2;
  }
  iVar6 = iVar3 - in_R10;
  pvVar2 = (void *)(iVar6 - 2);
  if (in_R8 < pvVar2) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  for (iVar4 = 0; iVar4 < (int)pvVar2; iVar4 = iVar4 + 1) {
    if (in_RDI[iVar4] != 0) {
      return;
    }
  }
  if (pvVar1 <= pvVar2) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if (in_RDI[iVar6 + -2] != 1) {
    return;
  }
  pvVar2 = (void *)(iVar6 + -1);
  if (pvVar2 <= pvVar1) {
    runtime_newobject((internal_abi_Type *)&DAT_0080fa60,pvVar2);
    iVar4 = (int)in_R8 + (1 - iVar6);
    (**(code **)(mHash.array + 0x38))(mHash.len,extraout_RAX_00,8,8);
    (**(code **)(mHash.array + 0x38))(mHash.len,emBits,sLen,in_RCX);
    (**(code **)(mHash.array + 0x38))
              (mHash.len,in_RDI + ((uint)pvVar2 & -iVar4 >> 0x3f),iVar3 - iVar6,iVar4);
    (**(code **)(mHash.array + 0x30))(mHash.len,0,0);
    if ((extraout_RBX == (int)~r0_00 - iVar3) && (runtime_memequal(), extraout_AL != '\0')) {
      return;
    }
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceB();
}



void crypto_rsa_VerifyPSS
               (crypto_rsa_PublicKey *pub,crypto_Hash hash,__uint8 digest,__uint8 sig,
               crypto_rsa_PSSOptions *opts,error ~r0)

{
  math_big_Word *pmVar1;
  hash_Hash ~r0_00;
  __uint8 mHash;
  char *extraout_RAX;
  undefined8 extraout_RAX_00;
  int extraout_RCX;
  uint top_1;
  int iVar2;
  int iVar3;
  int extraout_RBX;
  undefined8 extraout_RBX_00;
  int emLen;
  int in_RDI;
  int extraout_RDI;
  int in_R8;
  int in_R9;
  int emBits;
  int *in_R11;
  int i;
  int unaff_R14;
  uint top;
  uint uVar4;
  int iVar5;
  int *piStack0000000000000048;
  runtime_itab *in_stack_ffffffffffffff70;
  void *in_stack_ffffffffffffff78;
  int in_stack_ffffffffffffff80;
  __uint8 in_stack_ffffffffffffff88;
  hash_Hash in_stack_ffffffffffffffa0;
  error in_stack_ffffffffffffffb0;
  char *local_10;
  
  piStack0000000000000048 = in_R11;
  while (&local_10 <= *(char ***)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar2 = (pub->N->abs).len;
  iVar3 = iVar2 + -1;
  pmVar1 = (pub->N->abs).array;
  if (iVar3 < 0) {
    iVar5 = 0;
  }
  else {
    uVar4 = pmVar1[iVar2 + -1];
    uVar4 = uVar4 >> 1 | uVar4;
    uVar4 = uVar4 >> 2 | uVar4;
    uVar4 = uVar4 >> 4 | uVar4;
    uVar4 = uVar4 >> 8 | uVar4;
    uVar4 = uVar4 >> 0x10 | uVar4;
    uVar4 = uVar4 >> 0x20 | uVar4;
    iVar5 = 0x3f;
    if (uVar4 != 0) {
      for (; uVar4 >> iVar5 == 0; iVar5 = iVar5 + -1) {
      }
    }
    if (uVar4 == 0) {
      iVar5 = -1;
    }
    iVar5 = iVar3 * 0x40 + iVar5 + 1;
  }
  if (in_R9 != (int)(iVar5 + ((uint)(iVar5 + 7 >> 0x3f) >> 0x3d) + 7) >> 3) {
    return;
  }
  if (piStack0000000000000048 == (int *)0x0) {
    iVar5 = 0;
  }
  else {
    iVar5 = *piStack0000000000000048;
  }
  if (iVar5 < -1) {
    return;
  }
  if (iVar3 < 0) {
    iVar3 = 0;
  }
  else {
    uVar4 = pmVar1[iVar2 + -1];
    uVar4 = uVar4 >> 1 | uVar4;
    uVar4 = uVar4 >> 2 | uVar4;
    uVar4 = uVar4 >> 4 | uVar4;
    uVar4 = uVar4 >> 8 | uVar4;
    uVar4 = uVar4 >> 0x10 | uVar4;
    uVar4 = uVar4 >> 0x20 | uVar4;
    iVar2 = 0x3f;
    if (uVar4 != 0) {
      for (; uVar4 >> iVar2 == 0; iVar2 = iVar2 + -1) {
      }
    }
    if (uVar4 == 0) {
      iVar2 = -1;
    }
    iVar3 = iVar3 * 0x40 + iVar2 + 1;
  }
  crypto_rsa_encrypt((char *)pub,in_R8);
  if (extraout_RDI != 0) {
    return;
  }
  local_10 = extraout_RAX;
  iVar2 = extraout_RCX;
  for (iVar5 = extraout_RBX;
      ((int)(iVar3 + ((uint)(iVar3 + 6 >> 0x3f) >> 0x3d) + 6) >> 3 < iVar5 && (iVar5 != 0));
      iVar5 = iVar5 + -1) {
    if (*local_10 != '\0') {
      return;
    }
    iVar2 = iVar2 + -1;
    local_10 = local_10 + ((dword)(-iVar2 >> 0x3f) & 1);
  }
  ~r0_00.data = in_stack_ffffffffffffff78;
  ~r0_00.tab = in_stack_ffffffffffffff70;
  crypto_Hash_New(hash,~r0_00);
  mHash.len = extraout_RBX_00;
  mHash.array = (uint8 *)extraout_RAX_00;
  mHash.cap = in_stack_ffffffffffffff80;
  crypto_rsa_emsaPSSVerify
            (mHash,in_stack_ffffffffffffff88,(int)opts,in_RDI,in_stack_ffffffffffffffa0,
             in_stack_ffffffffffffffb0);
  return;
}



void crypto_rsa___PublicKey__Size(crypto_rsa_PublicKey *pub,int ~r0)

{
  int iVar1;
  uint top;
  uint uVar2;
  int i;
  
  iVar1 = (pub->N->abs).len;
  if (-1 < iVar1 + -1) {
    uVar2 = (pub->N->abs).array[iVar1 + -1];
    uVar2 = uVar2 >> 1 | uVar2;
    uVar2 = uVar2 >> 2 | uVar2;
    uVar2 = uVar2 >> 4 | uVar2;
    uVar2 = uVar2 >> 8 | uVar2;
    uVar2 = uVar2 >> 0x10 | uVar2;
    uVar2 = uVar2 >> 0x20 | uVar2;
    iVar1 = 0x3f;
    if (uVar2 != 0) {
      for (; uVar2 >> iVar1 == 0; iVar1 = iVar1 + -1) {
      }
    }
  }
  return;
}



void crypto_rsa___PublicKey__Equal(crypto_rsa_PublicKey *pub,crypto_PublicKey x,bool ~r0)

{
  crypto_rsa_PublicKey *in_RCX;
  crypto_rsa_PublicKey *xx;
  undefined7 in_register_00000019;
  int unaff_R14;
  
  xx = in_RCX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((undefined *)CONCAT71(in_register_00000019,~r0) == &DAT_0083a2c0) {
    crypto_rsa_bigIntEqual(pub->N,xx->N,SUB81(xx,0));
    return;
  }
  return;
}



void crypto_rsa_bigIntEqual(math_big_Int *a,math_big_Int *b,bool ~r0)

{
  __uint8 ~r0_00;
  __uint8 ~r0_01;
  int extraout_RAX;
  int extraout_RBX;
  int extraout_RBX_00;
  int iVar1;
  int i;
  uint8 v;
  int unaff_R14;
  undefined8 in_stack_ffffffffffffffd8;
  undefined8 in_stack_ffffffffffffffe0;
  int iVar2;
  int in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ~r0_00.len = in_stack_ffffffffffffffe0;
  ~r0_00.array = (uint8 *)in_stack_ffffffffffffffd8;
  ~r0_00.cap = in_stack_ffffffffffffffe8;
  math_big___Int__Bytes(a,~r0_00);
  ~r0_01.len = extraout_RBX;
  ~r0_01.array = (uint8 *)in_stack_ffffffffffffffd8;
  ~r0_01.cap = extraout_RAX;
  iVar2 = extraout_RBX;
  math_big___Int__Bytes(b,~r0_01);
  if (extraout_RBX_00 == iVar2) {
    for (iVar1 = 0; iVar1 < iVar2; iVar1 = iVar1 + 1) {
    }
  }
  return;
}



void crypto_rsa_mgf1XOR(__uint8 out,hash_Hash hash,__uint8 seed)

{
  char cVar1;
  int in_RAX;
  char *extraout_RAX;
  uint8 (*_counter) [4];
  int extraout_RAX_00;
  int iVar2;
  int i;
  int done;
  undefined8 extraout_RCX;
  undefined8 uVar3;
  void *in_RBX;
  int extraout_RBX;
  undefined8 in_RSI;
  int in_RDI;
  undefined8 in_R8;
  undefined8 in_R9;
  undefined8 in_R10;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_newobject((internal_abi_Type *)&DAT_00812c40,in_RBX);
  done = 0;
  uVar3 = 0;
  iVar2 = 0;
  do {
    if ((int)in_RBX <= done) {
      return;
    }
    (**(code **)(in_RDI + 0x38))(in_RSI,in_R8,in_R9,in_R10);
    (**(code **)(in_RDI + 0x38))(in_RSI,extraout_RAX,4,4);
    (**(code **)(in_RDI + 0x30))(in_RSI,iVar2,0,uVar3);
    (**(code **)(in_RDI + 0x20))(in_RSI);
    iVar2 = 0;
    for (; (iVar2 < extraout_RBX && (done < (int)in_RBX)); done = done + 1) {
      if (in_RBX <= (uint)done) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      *(byte *)(in_RAX + done) = *(byte *)(done + in_RAX) ^ *(byte *)(extraout_RAX_00 + iVar2);
      iVar2 = iVar2 + 1;
    }
    cVar1 = extraout_RAX[3];
    extraout_RAX[3] = cVar1 + '\x01';
    uVar3 = extraout_RCX;
    iVar2 = extraout_RAX_00;
    if (((cVar1 == -1) && (cVar1 = extraout_RAX[2], extraout_RAX[2] = cVar1 + '\x01', cVar1 == -1))
       && (cVar1 = extraout_RAX[1], extraout_RAX[1] = cVar1 + '\x01', cVar1 == -1)) {
      *extraout_RAX = *extraout_RAX + '\x01';
    }
  } while( true );
}



void crypto_rsa_encrypt(char *__block,int __edflag)

{
  uint uVar1;
  int iVar2;
  __uint8 b;
  crypto_internal_bigmod_Modulus *extraout_RAX;
  crypto_internal_bigmod_Modulus *N;
  crypto_internal_bigmod_Nat *m;
  crypto_internal_bigmod_Nat *x;
  int *extraout_RAX_00;
  int extraout_RAX_01;
  crypto_internal_bigmod_Nat *in_RCX;
  uint e;
  uint e_00;
  uint len;
  int i;
  crypto_internal_bigmod_Modulus *~r0;
  int extraout_RBX;
  int extraout_RBX_00;
  int iVar3;
  crypto_internal_bigmod_Nat *~r0_00;
  int iVar4;
  void *~r0_01;
  int iVar5;
  int j;
  uint uVar6;
  uint limb;
  uint uVar7;
  int unaff_R14;
  math_big_Int **ppmStack0000000000000008;
  crypto_internal_bigmod_Modulus *pcStack0000000000000010;
  crypto_internal_bigmod_Nat *pcStack0000000000000018;
  interface___ in_stack_fffffffffffffd88;
  int in_stack_fffffffffffffd98;
  error in_stack_fffffffffffffda0;
  uint local_248 [10];
  undefined local_1f8 [176];
  uint local_148 [32];
  int *local_48;
  crypto_internal_bigmod_Modulus *local_40;
  undefined local_38 [24];
  undefined local_20 [24];
  
  ppmStack0000000000000008 = (math_big_Int **)__block;
  pcStack0000000000000018 = in_RCX;
  pcStack0000000000000010 = (crypto_internal_bigmod_Modulus *)__edflag;
  while (local_1f8 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  crypto_internal_boring_sig_StandardCrypto();
  crypto_internal_bigmod_NewModulusFromBig
            (*ppmStack0000000000000008,~r0,(error)in_stack_fffffffffffffd88);
  if (extraout_RBX != 0) {
    return;
  }
  local_40 = extraout_RAX;
  FUN_0046cd74();
  local_20._8_16_ = ZEXT816(0x20) << 0x40;
  local_20._0_8_ = local_148;
  b.cap = in_stack_fffffffffffffd98;
  b.array = (uint8 *)in_stack_fffffffffffffd88._type;
  b.len = (int)in_stack_fffffffffffffd88.data;
  crypto_internal_bigmod___Nat__SetBytes
            ((crypto_internal_bigmod_Nat *)local_20,b,pcStack0000000000000010,
             pcStack0000000000000018,in_stack_fffffffffffffda0);
  if (extraout_RBX_00 != 0) {
    return;
  }
  x = (crypto_internal_bigmod_Nat *)FUN_0046cd74();
  local_38._8_16_ = ZEXT816(0x20) << 0x40;
  local_38._0_8_ = local_248;
  crypto_internal_bigmod___Nat__ExpShort
            ((crypto_internal_bigmod_Nat *)local_38,x,e_00,local_40,~r0_00);
  iVar4 = (local_40->nat->limbs).len * 0x40 - local_40->leading;
  len = (int)(((uint)(iVar4 + 7 >> 0x3f) >> 0x3d) + iVar4 + 7) >> 3;
  local_48 = extraout_RAX_00;
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,len,len,~r0_01);
  iVar4 = *local_48;
  iVar2 = local_48[1];
  iVar3 = 0;
  uVar6 = len;
  do {
    if (iVar2 <= iVar3) {
      return;
    }
    uVar7 = *(uint *)(iVar4 + iVar3 * 8);
    for (iVar5 = 0; iVar5 < 8; iVar5 = iVar5 + 1) {
      uVar1 = uVar6 - 1;
      if ((int)uVar1 < 0) {
        uVar6 = uVar1;
        if (uVar7 != 0) {
                    // WARNING: Subroutine does not return
          runtime_gopanic(in_stack_fffffffffffffd88);
        }
        break;
      }
      if (len <= uVar1) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      *(char *)((uVar6 - 1) + extraout_RAX_01) = (char)uVar7;
      uVar7 = uVar7 >> 8;
      uVar6 = uVar1;
    }
    iVar3 = iVar3 + 1;
  } while( true );
}



int crypto_rsa_init(EVP_PKEY_CTX *ctx)

{
  math_big_Word *extraout_RAX;
  math_big_Int *extraout_RAX_00;
  math_big_Int *extraout_RAX_01;
  math_big_Int *pmVar1;
  void *~r0;
  void *~r0_00;
  math_big_Word **extraout_R11;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  crypto_rsa_map_init_0();
  runtime_newobject((internal_abi_Type *)&DAT_0081cba0,~r0);
  *extraout_RAX = 1;
  runtime_newobject((internal_abi_Type *)&DAT_00855ba0,~r0_00);
  (extraout_RAX_00->abs).len = 1;
  (extraout_RAX_00->abs).cap = 1;
  pmVar1 = extraout_RAX_00;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier3();
    *extraout_R11 = extraout_RAX;
    extraout_R11[1] = (math_big_Word *)extraout_RAX_01;
    extraout_R11[2] = (math_big_Word *)crypto_rsa_bigOne;
    pmVar1 = extraout_RAX_01;
  }
  (pmVar1->abs).array = extraout_RAX;
  crypto_rsa_bigOne = pmVar1;
  return (int)pmVar1;
}



// WARNING: Unknown calling convention

void crypto_rsa_map_init_0(void)

{
  runtime_hmap *in_RAX;
  map_crypto_Hash___uint8 h;
  undefined2 *extraout_RAX;
  undefined8 *extraout_RAX_00;
  undefined8 *extraout_RAX_01;
  undefined *extraout_RAX_02;
  undefined8 *extraout_RAX_03;
  undefined8 *extraout_RAX_04;
  undefined *extraout_RAX_05;
  undefined8 *extraout_RAX_06;
  undefined8 *extraout_RAX_07;
  undefined *extraout_RAX_08;
  undefined8 *extraout_RAX_09;
  undefined8 *extraout_RAX_10;
  undefined *extraout_RAX_11;
  undefined8 *extraout_RAX_12;
  undefined8 *extraout_RAX_13;
  undefined *extraout_RAX_14;
  undefined8 *extraout_RAX_15;
  undefined8 *extraout_RAX_16;
  uintptr **extraout_RAX_17;
  uintptr **extraout_RAX_18;
  uintptr **ppuVar1;
  undefined2 *extraout_RAX_19;
  undefined8 *extraout_RAX_20;
  undefined8 *extraout_RAX_21;
  undefined8 *puVar2;
  runtime_hmap *extraout_RAX_22;
  undefined8 extraout_RCX;
  void *~r0;
  void *extraout_RBX;
  void *extraout_RBX_00;
  void *extraout_RBX_01;
  void *extraout_RBX_02;
  void *extraout_RBX_03;
  void *extraout_RBX_04;
  void *extraout_RBX_05;
  void *extraout_RBX_06;
  void *extraout_RBX_07;
  void *extraout_RBX_08;
  void *extraout_RBX_09;
  void *extraout_RBX_10;
  void *pvVar3;
  void *~r0_00;
  void *~r0_01;
  void *~r0_02;
  void *~r0_03;
  void *~r0_04;
  void *~r0_05;
  void *extraout_RDI;
  void *extraout_RDI_00;
  void *~r0_06;
  undefined8 *extraout_R11;
  undefined8 *extraout_R11_00;
  undefined8 *extraout_R11_01;
  undefined8 *extraout_R11_02;
  undefined8 *extraout_R11_03;
  undefined8 *extraout_R11_04;
  undefined8 *extraout_R11_05;
  undefined8 *extraout_R11_06;
  int unaff_R14;
  undefined in_XMM15 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RAX = extraout_RAX_22;
  }
  runtime_makemap_small(in_RAX);
  runtime_newobject((internal_abi_Type *)&DAT_0081ccc0,~r0);
  *extraout_RAX = 0x2030;
  *(undefined8 *)(extraout_RAX + 1) = 0x8648862a08060c30;
  *(undefined8 *)(extraout_RAX + 5) = 0x1004000505020df7;
  runtime_mapassign_fast64((internal_abi_MapType *)&DAT_008303a0,(runtime_hmap *)h,2,~r0_00);
  extraout_RAX_00[1] = 0x12;
  extraout_RAX_00[2] = 0x12;
  puVar2 = extraout_RAX_00;
  pvVar3 = extraout_RBX;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RAX;
    extraout_R11[1] = *extraout_RAX_01;
    puVar2 = extraout_RAX_01;
    pvVar3 = extraout_RBX_00;
  }
  *puVar2 = extraout_RAX;
  runtime_newobject((internal_abi_Type *)&DAT_00812ac0,pvVar3);
  *extraout_RAX_02 = 0x30;
  *(undefined2 *)(extraout_RAX_02 + 1) = 0x3021;
  *(undefined4 *)(extraout_RAX_02 + 3) = 0x2b050609;
  *(undefined8 *)(extraout_RAX_02 + 7) = 0x140400051a02030e;
  runtime_mapassign_fast64((internal_abi_MapType *)&DAT_008303a0,(runtime_hmap *)h,3,~r0_01);
  extraout_RAX_03[1] = 0xf;
  extraout_RAX_03[2] = 0xf;
  puVar2 = extraout_RAX_03;
  pvVar3 = extraout_RBX_01;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = extraout_RAX_02;
    extraout_R11_00[1] = *extraout_RAX_04;
    puVar2 = extraout_RAX_04;
    pvVar3 = extraout_RBX_02;
  }
  *puVar2 = extraout_RAX_02;
  runtime_newobject((internal_abi_Type *)&DAT_00815280,pvVar3);
  *extraout_RAX_05 = 0x30;
  *(undefined2 *)(extraout_RAX_05 + 1) = 0x302d;
  *(undefined8 *)(extraout_RAX_05 + 3) = 0x650148866009060d;
  *(undefined8 *)(extraout_RAX_05 + 0xb) = 0x1c04000504020403;
  runtime_mapassign_fast64((internal_abi_MapType *)&DAT_008303a0,(runtime_hmap *)h,4,~r0_02);
  extraout_RAX_06[1] = 0x13;
  extraout_RAX_06[2] = 0x13;
  puVar2 = extraout_RAX_06;
  pvVar3 = extraout_RBX_03;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_01 = extraout_RAX_05;
    extraout_R11_01[1] = *extraout_RAX_07;
    puVar2 = extraout_RAX_07;
    pvVar3 = extraout_RBX_04;
  }
  *puVar2 = extraout_RAX_05;
  runtime_newobject((internal_abi_Type *)&DAT_00815280,pvVar3);
  *extraout_RAX_08 = 0x30;
  *(undefined2 *)(extraout_RAX_08 + 1) = 0x3031;
  *(undefined8 *)(extraout_RAX_08 + 3) = 0x650148866009060d;
  *(undefined8 *)(extraout_RAX_08 + 0xb) = 0x2004000501020403;
  runtime_mapassign_fast64((internal_abi_MapType *)&DAT_008303a0,(runtime_hmap *)h,5,~r0_03);
  extraout_RAX_09[1] = 0x13;
  extraout_RAX_09[2] = 0x13;
  puVar2 = extraout_RAX_09;
  pvVar3 = extraout_RBX_05;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_02 = extraout_RAX_08;
    extraout_R11_02[1] = *extraout_RAX_10;
    puVar2 = extraout_RAX_10;
    pvVar3 = extraout_RBX_06;
  }
  *puVar2 = extraout_RAX_08;
  runtime_newobject((internal_abi_Type *)&DAT_00815280,pvVar3);
  *extraout_RAX_11 = 0x30;
  *(undefined2 *)(extraout_RAX_11 + 1) = 0x3041;
  *(undefined8 *)(extraout_RAX_11 + 3) = 0x650148866009060d;
  *(undefined8 *)(extraout_RAX_11 + 0xb) = 0x3004000502020403;
  runtime_mapassign_fast64((internal_abi_MapType *)&DAT_008303a0,(runtime_hmap *)h,6,~r0_04);
  extraout_RAX_12[1] = 0x13;
  extraout_RAX_12[2] = 0x13;
  puVar2 = extraout_RAX_12;
  pvVar3 = extraout_RBX_07;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_03 = extraout_RAX_11;
    extraout_R11_03[1] = *extraout_RAX_13;
    puVar2 = extraout_RAX_13;
    pvVar3 = extraout_RBX_08;
  }
  *puVar2 = extraout_RAX_11;
  runtime_newobject((internal_abi_Type *)&DAT_00815280,pvVar3);
  *extraout_RAX_14 = 0x30;
  *(undefined2 *)(extraout_RAX_14 + 1) = 0x3051;
  *(undefined8 *)(extraout_RAX_14 + 3) = 0x650148866009060d;
  *(undefined8 *)(extraout_RAX_14 + 0xb) = 0x4004000503020403;
  runtime_mapassign_fast64((internal_abi_MapType *)&DAT_008303a0,(runtime_hmap *)h,7,~r0_05);
  extraout_RAX_15[1] = 0x13;
  extraout_RAX_15[2] = 0x13;
  puVar2 = extraout_RAX_15;
  pvVar3 = extraout_RDI;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_04 = extraout_RAX_14;
    extraout_R11_04[1] = *extraout_RAX_16;
    puVar2 = extraout_RAX_16;
    pvVar3 = extraout_RDI_00;
  }
  *puVar2 = extraout_RAX_14;
  runtime_mapassign_fast64((internal_abi_MapType *)&DAT_008303a0,(runtime_hmap *)h,8,pvVar3);
  *(undefined (*) [16])(extraout_RAX_17 + 1) = in_XMM15;
  ppuVar1 = extraout_RAX_17;
  pvVar3 = extraout_RBX_09;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11_05 = extraout_RCX;
    ppuVar1 = extraout_RAX_18;
    pvVar3 = extraout_RBX_10;
  }
  *ppuVar1 = &runtime_zerobase;
  runtime_newobject((internal_abi_Type *)&DAT_00814ce0,pvVar3);
  *extraout_RAX_19 = 0x2030;
  *(undefined4 *)(extraout_RAX_19 + 1) = 0x6060830;
  *(undefined8 *)(extraout_RAX_19 + 3) = 0x140431000306cf28;
  runtime_mapassign_fast64((internal_abi_MapType *)&DAT_008303a0,(runtime_hmap *)h,9,~r0_06);
  extraout_RAX_20[1] = 0xe;
  extraout_RAX_20[2] = 0xe;
  puVar2 = extraout_RAX_20;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier4();
    *extraout_R11_06 = extraout_RAX_19;
    extraout_R11_06[1] = *extraout_RAX_21;
    extraout_R11_06[2] = h;
    extraout_R11_06[3] = crypto_rsa_hashPrefixes;
    puVar2 = extraout_RAX_21;
  }
  *puVar2 = extraout_RAX_19;
  crypto_rsa_hashPrefixes = h;
  return;
}



// WARNING: Unknown calling convention

void crypto_sha256_init_0(void)

{
  func___hash_Hash ***extraout_RAX;
  func___hash_Hash ***pppfVar1;
  undefined8 extraout_RCX;
  undefined8 extraout_RBX;
  undefined8 *extraout_R11;
  undefined8 *extraout_R11_00;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (4 < (uint)crypto_hashes.len) {
    pppfVar1 = crypto_hashes.array;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11 = extraout_RBX;
    }
    pppfVar1[4] = (func___hash_Hash **)&PTR_crypto_sha256_New224_008ecbc8;
    if (5 < (uint)crypto_hashes.len) {
      pppfVar1 = crypto_hashes.array;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier1();
        *extraout_R11_00 = extraout_RCX;
        pppfVar1 = extraout_RAX;
      }
      pppfVar1[5] = (func___hash_Hash **)&PTR_crypto_sha256_New_008ec910;
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndexU();
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndexU();
}



// WARNING: Removing unreachable block (ram,0x0067879b)
// WARNING: Removing unreachable block (ram,0x006787d4)
// WARNING: Removing unreachable block (ram,0x0067880d)
// WARNING: Removing unreachable block (ram,0x00678846)
// WARNING: Removing unreachable block (ram,0x00678886)
// WARNING: Removing unreachable block (ram,0x006788c6)

void crypto_sha256___digest__MarshalBinary(crypto_sha256_digest *d,__uint8 ~r0,error ~r1)

{
  dword dVar1;
  undefined4 *oldPtr;
  undefined4 *extraout_RAX;
  undefined4 *extraout_RAX_00;
  undefined4 *oldPtr_00;
  uint extraout_RCX;
  uint oldCap;
  int iVar2;
  uint uVar3;
  uint extraout_RBX;
  uint extraout_RBX_00;
  uint uVar4;
  void *in_RDI;
  void *extraout_RDI;
  int unaff_R14;
  runtime_slice in_stack_ffffffffffffff78;
  
  while (&stack0xfffffffffffffff8 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,0,0x6c,in_RDI);
  if (d->is224 == false) {
    *oldPtr = 0x3616873;
  }
  else {
    *oldPtr = 0x2616873;
  }
  dVar1 = d->h[0];
  oldPtr[1] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
  dVar1 = d->h[1];
  oldPtr[2] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
  dVar1 = d->h[2];
  oldPtr[3] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
  dVar1 = d->h[3];
  oldPtr[4] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
  dVar1 = d->h[4];
  oldPtr[5] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
  dVar1 = d->h[5];
  oldPtr[6] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
  dVar1 = d->h[6];
  oldPtr[7] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
  dVar1 = d->h[7];
  oldCap = 0x6c;
  oldPtr[8] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
  uVar4 = d->nx;
  if (0x40 < uVar4) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAlen();
  }
  uVar3 = uVar4 + 0x24;
  oldPtr_00 = oldPtr;
  if (0x6c < uVar3) {
    runtime_growslice(oldPtr,uVar3,0x6c,uVar4,(internal_abi_Type *)&DAT_00807920,
                      in_stack_ffffffffffffff78);
    oldPtr_00 = extraout_RAX;
    oldCap = extraout_RCX;
    uVar3 = extraout_RBX;
  }
  runtime_memmove(oldPtr_00 + 9,d->x,uVar4);
  iVar2 = uVar3 - d->nx;
  if (oldCap < iVar2 + 0x40U) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  uVar4 = iVar2 + 0x48;
  uVar3 = d->len;
  if (oldCap < uVar4) {
    runtime_growslice(oldPtr_00,uVar4,oldCap,8,(internal_abi_Type *)&DAT_00807920,
                      in_stack_ffffffffffffff78);
    oldPtr_00 = extraout_RAX_00;
    uVar4 = extraout_RBX_00;
  }
  *(uint *)((uVar4 - 8) + (int)oldPtr_00) =
