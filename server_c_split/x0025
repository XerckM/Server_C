};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Fields_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Fields_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Fields_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Fields_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/filedesc.Fields }
    uintptr F;
    struct google.golang.org/protobuf/internal/filedesc.Fields *X0;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*log/slog.Value_} noalg.struct_{_F_uintptr;_X0_*log/slog.Value_}, *Pnoalg.struct_{_F_uintptr;_X0_*log/slog.Value_};

struct noalg.struct_{_F_uintptr;_X0_*log/slog.Value_} { // Original name: noalg.struct { F uintptr; X0 *log/slog.Value }
    uintptr F;
    struct log/slog.Value *X0;
};

typedef struct hash<string,*google.golang.org/grpc/grpclog.componentData> *map[string]*google.golang.org/grpc/grpclog.componentData;

typedef struct noalg.struct_{_F_uintptr;_R_*net.ipStackCapabilities_} noalg.struct_{_F_uintptr;_R_*net.ipStackCapabilities_}, *Pnoalg.struct_{_F_uintptr;_R_*net.ipStackCapabilities_};

struct noalg.struct_{_F_uintptr;_R_*net.ipStackCapabilities_} { // Original name: noalg.struct { F uintptr; R *net.ipStackCapabilities }
    uintptr F;
    struct net.ipStackCapabilities *R;
};

typedef struct noalg.map.iter[string]*html/template.Template noalg.map.iter[string]*html/template.Template, *Pnoalg.map.iter[string]*html/template.Template;

struct noalg.map.iter[string]*html/template.Template {
    struct string *key;
    struct html/template.Template **elem;
    void *t;
    struct noalg.map.hdr[string]*html/template.Template *h;
    struct noalg.map.bucket[string]*html/template.Template *buckets;
    struct noalg.map.bucket[string]*html/template.Template *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_int32_} noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_int32_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_int32_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_int32_} { // Original name: noalg.struct { F uintptr; X0 *runtime.g; X1 int32 }
    uintptr F;
    struct runtime.g *X0;
    int32 X1;
};

typedef struct runtime.iface google.golang.org/grpc/balancer.ConfigParser;

typedef struct hchan<net.result[go.shape.[]string].1> *chan_net.result[go.shape.[]string].1;

typedef struct runtime.sweepdata runtime.sweepdata, *Pruntime.sweepdata;

struct runtime.sweepdata {
    struct runtime.mutex lock;
    struct runtime.g *g;
    bool parked;
    uint32 nbgsweep;
    uint32 npausesweep;
    struct runtime.activeSweep active;
    runtime.sweepClass centralIndex;
};

typedef struct hash<reflect.visit,bool> hash<reflect.visit,bool>, *Phash<reflect.visit,bool>;

struct hash<reflect.visit,bool> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<reflect.visit,bool> *buckets;
    struct bucket<reflect.visit,bool> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct vendor/golang.org/x/net/dns/dnsmessage.UnknownResource vendor/golang.org/x/net/dns/dnsmessage.UnknownResource, *Pvendor/golang.org/x/net/dns/dnsmessage.UnknownResource;

struct vendor/golang.org/x/net/dns/dnsmessage.UnknownResource {
    vendor/golang.org/x/net/dns/dnsmessage.Type Type;
    struct []uint8 Data;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/json.Encoder_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/json.Encoder_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/json.Encoder_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/json.Encoder_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/encoding/json.Encoder }
    uintptr F;
    struct google.golang.org/protobuf/internal/encoding/json.Encoder *X0;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*int32;_X1_*uint32;_X2_*runtime.sigactiont;_X3_*runtime.sigactiont_} noalg.struct_{_F_uintptr;_X0_*int32;_X1_*uint32;_X2_*runtime.sigactiont;_X3_*runtime.sigactiont_}, *Pnoalg.struct_{_F_uintptr;_X0_*int32;_X1_*uint32;_X2_*runtime.sigactiont;_X3_*runtime.sigactiont_};

struct noalg.struct_{_F_uintptr;_X0_*int32;_X1_*uint32;_X2_*runtime.sigactiont;_X3_*runtime.sigactiont_} { // Original name: noalg.struct { F uintptr; X0 *int32; X1 *uint32; X2 *runtime.sigactiont; X3 *runtime.sigactiont }
    uintptr F;
    int32 *X0;
    uint32 *X1;
    struct runtime.sigactiont *X2;
    struct runtime.sigactiont *X3;
};

typedef struct noalg.struct_{_F_uintptr;_R_encoding/json.structEncoder_} noalg.struct_{_F_uintptr;_R_encoding/json.structEncoder_}, *Pnoalg.struct_{_F_uintptr;_R_encoding/json.structEncoder_};

typedef struct encoding/json.structEncoder encoding/json.structEncoder, *Pencoding/json.structEncoder;

typedef struct encoding/json.structFields encoding/json.structFields, *Pencoding/json.structFields;

struct encoding/json.structFields {
    struct []encoding/json.field list;
    map[string]*encoding/json.field byExactName;
    map[string]*encoding/json.field byFoldedName;
};

struct encoding/json.structEncoder {
    struct encoding/json.structFields fields;
};

struct noalg.struct_{_F_uintptr;_R_encoding/json.structEncoder_} { // Original name: noalg.struct { F uintptr; R encoding/json.structEncoder }
    uintptr F;
    struct encoding/json.structEncoder R;
};

typedef struct hchan<internal/singleflight.Result> *chan_internal/singleflight.Result;

typedef struct hchan<net.result[go.shape.[]net.IPAddr].1> hchan<net.result[go.shape.[]net.IPAddr].1>, *Phchan<net.result[go.shape.[]net.IPAddr].1>;

typedef struct waitq<net.result[go.shape.[]net.IPAddr].1> waitq<net.result[go.shape.[]net.IPAddr].1>, *Pwaitq<net.result[go.shape.[]net.IPAddr].1>;

struct waitq<net.result[go.shape.[]net.IPAddr].1> { // Original name: waitq<net.result[go.shape.[]net.IPAddr]·1>
    struct sudog<net.result[go.shape.[]net.IPAddr].1> *first;
    struct sudog<net.result[go.shape.[]net.IPAddr].1> *last;
};

struct hchan<net.result[go.shape.[]net.IPAddr].1> { // Original name: hchan<net.result[go.shape.[]net.IPAddr]·1>
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<net.result[go.shape.[]net.IPAddr].1> recvq;
    struct waitq<net.result[go.shape.[]net.IPAddr].1> sendq;
    struct runtime.mutex lock;
};

typedef struct google.golang.org/grpc/internal/transport.ConnectionError google.golang.org/grpc/internal/transport.ConnectionError, *Pgoogle.golang.org/grpc/internal/transport.ConnectionError;

struct google.golang.org/grpc/internal/transport.ConnectionError {
    struct string Desc;
    bool temp;
    error err;
};

typedef struct google.golang.org/grpc/stats.InTrailer google.golang.org/grpc/stats.InTrailer, *Pgoogle.golang.org/grpc/stats.InTrailer;

struct google.golang.org/grpc/stats.InTrailer {
    bool Client;
    int WireLength;
    google.golang.org/grpc/metadata.MD Trailer;
};

typedef struct struct_{_internal/cpu.__internal/cpu.CacheLinePad;_HasAES_bool;_HasADX_bool;_HasAVX_bool;_HasAVX2_bool;_HasBMI1_bool;_HasBMI2_bool;_HasERMS_bool;_HasFMA_bool;_HasOSXSAVE_bool;_HasPCLMULQDQ_bool;_HasPOPCNT_bool;_HasRDTSCP_bool;_HasSHA_bool;_HasSSE3_bool;_HasSSSE3_bool;_HasSSE41_bool;_HasSSE42_bool;_internal/cpu.__internal/cpu.CacheLinePad_} struct_{_internal/cpu.__internal/cpu.CacheLinePad;_HasAES_bool;_HasADX_bool;_HasAVX_bool;_HasAVX2_bool;_HasBMI1_bool;_HasBMI2_bool;_HasERMS_bool;_HasFMA_bool;_HasOSXSAVE_bool;_HasPCLMULQDQ_bool;_HasPOPCNT_bool;_HasRDTSCP_bool;_HasSHA_bool;_HasSSE3_bool;_HasSSSE3_bool;_HasSSE41_bool;_HasSSE42_bool;_internal/cpu.__internal/cpu.CacheLinePad_}, *Pstruct_{_internal/cpu.__internal/cpu.CacheLinePad;_HasAES_bool;_HasADX_bool;_HasAVX_bool;_HasAVX2_bool;_HasBMI1_bool;_HasBMI2_bool;_HasERMS_bool;_HasFMA_bool;_HasOSXSAVE_bool;_HasPCLMULQDQ_bool;_HasPOPCNT_bool;_HasRDTSCP_bool;_HasSHA_bool;_HasSSE3_bool;_HasSSSE3_bool;_HasSSE41_bool;_HasSSE42_bool;_internal/cpu.__internal/cpu.CacheLinePad_};

struct struct_{_internal/cpu.__internal/cpu.CacheLinePad;_HasAES_bool;_HasADX_bool;_HasAVX_bool;_HasAVX2_bool;_HasBMI1_bool;_HasBMI2_bool;_HasERMS_bool;_HasFMA_bool;_HasOSXSAVE_bool;_HasPCLMULQDQ_bool;_HasPOPCNT_bool;_HasRDTSCP_bool;_HasSHA_bool;_HasSSE3_bool;_HasSSSE3_bool;_HasSSE41_bool;_HasSSE42_bool;_internal/cpu.__internal/cpu.CacheLinePad_} { // Original name: struct { internal/cpu._ internal/cpu.CacheLinePad; HasAES bool; HasADX bool; HasAVX bool; HasAVX2 bool; HasBMI1 bool; HasBMI2 bool; HasERMS bool; HasFMA bool; HasOSXSAVE bool; HasPCLMULQDQ bool; HasPOPCNT bool; HasRDTSCP bool; HasSHA bool; HasSSE3 bool; HasSSSE3 bool; HasSSE41 bool; HasSSE42 bool; internal/cpu._ internal/cpu.CacheLinePad }
    struct internal/cpu.CacheLinePad _;
    bool HasAES;
    bool HasADX;
    bool HasAVX;
    bool HasAVX2;
    bool HasBMI1;
    bool HasBMI2;
    bool HasERMS;
    bool HasFMA;
    bool HasOSXSAVE;
    bool HasPCLMULQDQ;
    bool HasPOPCNT;
    bool HasRDTSCP;
    bool HasSHA;
    bool HasSSE3;
    bool HasSSSE3;
    bool HasSSE41;
    bool HasSSE42;
    struct internal/cpu.CacheLinePad _;
};

typedef struct runtime.iface google.golang.org/grpc/internal/binarylog.LogEntryConfig;

typedef struct struct_{_io.Reader;_io.Closer_} struct_{_io.Reader;_io.Closer_}, *Pstruct_{_io.Reader;_io.Closer_};

struct struct_{_io.Reader;_io.Closer_} { // Original name: struct { io.Reader; io.Closer }
    io.Reader Reader;
    io.Closer Closer;
};

typedef struct golang.org/x/net/http2.PushPromiseParam golang.org/x/net/http2.PushPromiseParam, *Pgolang.org/x/net/http2.PushPromiseParam;

struct golang.org/x/net/http2.PushPromiseParam {
    uint32 StreamID;
    uint32 PromiseID;
    struct []uint8 BlockFragment;
    bool EndHeaders;
    uint8 PadLength;
};

typedef struct noalg.struct_{_F_uintptr;_X0_[]*flag.Flag_} noalg.struct_{_F_uintptr;_X0_[]*flag.Flag_}, *Pnoalg.struct_{_F_uintptr;_X0_[]*flag.Flag_};

struct noalg.struct_{_F_uintptr;_X0_[]*flag.Flag_} { // Original name: noalg.struct { F uintptr; X0 []*flag.Flag }
    uintptr F;
    struct []*flag.Flag X0;
};

typedef struct text/template/parse.FieldNode text/template/parse.FieldNode, *Ptext/template/parse.FieldNode;

struct text/template/parse.FieldNode {
    text/template/parse.NodeType NodeType;
    text/template/parse.Pos Pos;
    struct text/template/parse.Tree *tr;
    struct []string Ident;
};

typedef struct runtime.iface otp/seedgen.SeedGenerationServiceServer;

typedef struct []google.golang.org/protobuf/internal/impl.pointer []google.golang.org/protobuf/internal/impl.pointer, *P[]google.golang.org/protobuf/internal/impl.pointer;

struct []google.golang.org/protobuf/internal/impl.pointer {
    struct google.golang.org/protobuf/internal/impl.pointer *array;
    int len;
    int cap;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*bool_} noalg.struct_{_F_uintptr;_X0_*bool_}, *Pnoalg.struct_{_F_uintptr;_X0_*bool_};

struct noalg.struct_{_F_uintptr;_X0_*bool_} { // Original name: noalg.struct { F uintptr; X0 *bool }
    uintptr F;
    bool *X0;
};

typedef struct noalg.struct_{_syscall.started_bool;_syscall.heap_bool;_syscall.openDefer_bool;_syscall.sp_uintptr;_syscall.pc_uintptr;_syscall.fn_uintptr;_syscall._panic_uintptr;_syscall.link_uintptr;_syscall.fd_uintptr;_syscall.varp_uintptr;_syscall.framepc_uintptr_} noalg.struct_{_syscall.started_bool;_syscall.heap_bool;_syscall.openDefer_bool;_syscall.sp_uintptr;_syscall.pc_uintptr;_syscall.fn_uintptr;_syscall._panic_uintptr;_syscall.link_uintptr;_syscall.fd_uintptr;_syscall.varp_uintptr;_syscall.framepc_uintptr_}, *Pnoalg.struct_{_syscall.started_bool;_syscall.heap_bool;_syscall.openDefer_bool;_syscall.sp_uintptr;_syscall.pc_uintptr;_syscall.fn_uintptr;_syscall._panic_uintptr;_syscall.link_uintptr;_syscall.fd_uintptr;_syscall.varp_uintptr;_syscall.framepc_uintptr_};

struct noalg.struct_{_syscall.started_bool;_syscall.heap_bool;_syscall.openDefer_bool;_syscall.sp_uintptr;_syscall.pc_uintptr;_syscall.fn_uintptr;_syscall._panic_uintptr;_syscall.link_uintptr;_syscall.fd_uintptr;_syscall.varp_uintptr;_syscall.framepc_uintptr_} { // Original name: noalg.struct { syscall.started bool; syscall.heap bool; syscall.openDefer bool; syscall.sp uintptr; syscall.pc uintptr; syscall.fn uintptr; syscall._panic uintptr; syscall.link uintptr; syscall.fd uintptr; syscall.varp uintptr; syscall.framepc uintptr }
    bool started;
    bool heap;
    bool openDefer;
    uintptr sp;
    uintptr pc;
    uintptr fn;
    uintptr _panic;
    uintptr link;
    uintptr fd;
    uintptr varp;
    uintptr framepc;
};

typedef struct noalg.map.iter[context.canceler]struct_{} noalg.map.iter[context.canceler]struct_{}, *Pnoalg.map.iter[context.canceler]struct_{};

struct noalg.map.iter[context.canceler]struct_{} { // Original name: noalg.map.iter[context.canceler]struct {}
    context.canceler *key;
    struct struct_{} *elem;
    void *t;
    struct noalg.map.hdr[context.canceler]struct_{} *h;
    struct noalg.map.bucket[context.canceler]struct_{} *buckets;
    struct noalg.map.bucket[context.canceler]struct_{} *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct hash<*reflect.structType,int> hash<*reflect.structType,int>, *Phash<*reflect.structType,int>;

struct hash<*reflect.structType,int> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<*reflect.structType,int> *buckets;
    struct bucket<*reflect.structType,int> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct []internal/abi.Method []internal/abi.Method, *P[]internal/abi.Method;

typedef struct internal/abi.Method internal/abi.Method, *Pinternal/abi.Method;

struct internal/abi.Method {
    internal/abi.NameOff Name;
    internal/abi.TypeOff Mtyp;
    internal/abi.TextOff Ifn;
    internal/abi.TextOff Tfn;
};

struct []internal/abi.Method {
    struct internal/abi.Method *array;
    int len;
    int cap;
};

typedef struct auth/auth_grpc.AuthRequest auth/auth_grpc.AuthRequest, *Pauth/auth_grpc.AuthRequest;

struct auth/auth_grpc.AuthRequest {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    struct string Username;
    struct string Password;
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X1_*google.golang.org/protobuf/reflect/protoreflect.MessageType_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X1_*google.golang.org/protobuf/reflect/protoreflect.MessageType_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X1_*google.golang.org/protobuf/reflect/protoreflect.MessageType_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X1_*google.golang.org/protobuf/reflect/protoreflect.MessageType_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor; X1 *google.golang.org/protobuf/reflect/protoreflect.MessageType }
    uintptr F;
    google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor X0;
    google.golang.org/protobuf/reflect/protoreflect.MessageType *X1;
};

typedef struct google.golang.org/protobuf/internal/filetype.Builder google.golang.org/protobuf/internal/filetype.Builder, *Pgoogle.golang.org/protobuf/internal/filetype.Builder;

typedef struct []google.golang.org/protobuf/internal/impl.EnumInfo []google.golang.org/protobuf/internal/impl.EnumInfo, *P[]google.golang.org/protobuf/internal/impl.EnumInfo;

struct []google.golang.org/protobuf/internal/impl.EnumInfo {
    struct google.golang.org/protobuf/internal/impl.EnumInfo *array;
    int len;
    int cap;
};

struct google.golang.org/protobuf/internal/filetype.Builder {
    struct google.golang.org/protobuf/internal/filedesc.Builder File;
    struct []interface_{} GoTypes;
    struct []int32 DependencyIndexes;
    struct []google.golang.org/protobuf/internal/impl.EnumInfo EnumInfos;
    struct []google.golang.org/protobuf/internal/impl.MessageInfo MessageInfos;
    struct []google.golang.org/protobuf/internal/impl.ExtensionInfo ExtensionInfos;
    interface_{_RegisterEnum(google.golang.org/protobuf/reflect/protoreflect.EnumType)_error;_RegisterExtension(google.golang.org/protobuf/reflect/protoreflect.ExtensionType)_error;_RegisterMessage(google.golang.org/protobuf/reflect/protoreflect.MessageType)_error_} TypeRegistry;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/grpcsync.Event;_X1_context.Context;_X2_context.Context_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/grpcsync.Event;_X1_context.Context;_X2_context.Context_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/grpcsync.Event;_X1_context.Context;_X2_context.Context_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/grpcsync.Event;_X1_context.Context;_X2_context.Context_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc/internal/grpcsync.Event; X1 context.Context; X2 context.Context }
    uintptr F;
    struct google.golang.org/grpc/internal/grpcsync.Event *X0;
    context.Context X1;
    context.Context X2;
};

typedef struct noalg.map.iter[string]*google.golang.org/grpc.StreamDesc noalg.map.iter[string]*google.golang.org/grpc.StreamDesc, *Pnoalg.map.iter[string]*google.golang.org/grpc.StreamDesc;

struct noalg.map.iter[string]*google.golang.org/grpc.StreamDesc {
    struct string *key;
    struct google.golang.org/grpc.StreamDesc **elem;
    void *t;
    struct noalg.map.hdr[string]*google.golang.org/grpc.StreamDesc *h;
    struct noalg.map.bucket[string]*google.golang.org/grpc.StreamDesc *buckets;
    struct noalg.map.bucket[string]*google.golang.org/grpc.StreamDesc *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct vendor/golang.org/x/text/secure/bidirule.ruleTransition vendor/golang.org/x/text/secure/bidirule.ruleTransition, *Pvendor/golang.org/x/text/secure/bidirule.ruleTransition;

struct vendor/golang.org/x/text/secure/bidirule.ruleTransition {
    vendor/golang.org/x/text/secure/bidirule.ruleState next;
    uint16 mask;
};

typedef struct hash<string,int32> *map[string]int32;

typedef struct noalg.map.iter[string]string noalg.map.iter[string]string, *Pnoalg.map.iter[string]string;

struct noalg.map.iter[string]string {
    struct string *key;
    struct string *elem;
    void *t;
    struct noalg.map.hdr[string]string *h;
    struct noalg.map.bucket[string]string *buckets;
    struct noalg.map.bucket[string]string *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct hchan<net.result[go.shape.[]net.IPAddr].1> *chan_net.result[go.shape.[]net.IPAddr].1;

typedef struct hchan<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> *chan_net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1;

typedef struct internal/bisect.parseError internal/bisect.parseError, *Pinternal/bisect.parseError;

struct internal/bisect.parseError {
    struct string text;
};

typedef struct google.golang.org/protobuf/internal/impl.stringConverter google.golang.org/protobuf/internal/impl.stringConverter, *Pgoogle.golang.org/protobuf/internal/impl.stringConverter;

struct google.golang.org/protobuf/internal/impl.stringConverter {
    reflect.Type goType;
    struct google.golang.org/protobuf/reflect/protoreflect.Value def;
};

typedef struct []*sync.Pool []*sync.Pool, *P[]*sync.Pool;

struct []*sync.Pool {
    struct sync.Pool **array;
    int len;
    int cap;
};

typedef struct hash<*reflect.structType,int> *map[*reflect.structType]int;

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/order.KeyOrder;_X1_*[]google.golang.org/protobuf/internal/order.mapEntry_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/order.KeyOrder;_X1_*[]google.golang.org/protobuf/internal/order.mapEntry_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/order.KeyOrder;_X1_*[]google.golang.org/protobuf/internal/order.mapEntry_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/order.KeyOrder;_X1_*[]google.golang.org/protobuf/internal/order.mapEntry_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/internal/order.KeyOrder; X1 *[]google.golang.org/protobuf/internal/order.mapEntry }
    uintptr F;
    void (**X0)(struct google.golang.org/protobuf/reflect/protoreflect.MapKey, struct google.golang.org/protobuf/reflect/protoreflect.MapKey, bool *);
    struct []google.golang.org/protobuf/internal/order.mapEntry *X1;
};

typedef struct []runtime/internal/syscall.EpollEvent []runtime/internal/syscall.EpollEvent, *P[]runtime/internal/syscall.EpollEvent;

struct []runtime/internal/syscall.EpollEvent {
    struct runtime/internal/syscall.EpollEvent *array;
    int len;
    int cap;
};

typedef struct main.seedGenerationServer main.seedGenerationServer, *Pmain.seedGenerationServer;

typedef struct main.SeedgenAuthClient main.SeedgenAuthClient, *Pmain.SeedgenAuthClient;

typedef struct runtime.iface auth/auth_grpc.AuthServiceClient;

struct main.SeedgenAuthClient {
    auth/auth_grpc.AuthServiceClient auth_client;
    int64 currentRand;
    int64 count;
};

struct main.seedGenerationServer {
    struct otp/seedgen.UnimplementedSeedGenerationServiceServer UnimplementedSeedGenerationServiceServer;
    struct main.SeedgenAuthClient auth_service_client;
};

typedef struct runtime.notInHeapSlice runtime.notInHeapSlice, *Pruntime.notInHeapSlice;

struct runtime.notInHeapSlice {
    struct runtime.notInHeap *array;
    int len;
    int cap;
};

typedef struct runtime.iface interface_{_Reset()_};

typedef struct noalg.struct_{_F_uintptr;_X0_*[]error;_X1_*flag.FlagSet_} noalg.struct_{_F_uintptr;_X0_*[]error;_X1_*flag.FlagSet_}, *Pnoalg.struct_{_F_uintptr;_X0_*[]error;_X1_*flag.FlagSet_};

struct noalg.struct_{_F_uintptr;_X0_*[]error;_X1_*flag.FlagSet_} { // Original name: noalg.struct { F uintptr; X0 *[]error; X1 *flag.FlagSet }
    uintptr F;
    struct []error *X0;
    struct flag.FlagSet *X1;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.List;

typedef struct noalg.struct_{_F_uintptr;_X0_func([]uint8)_[]uint8;_X1_[]uint8_} noalg.struct_{_F_uintptr;_X0_func([]uint8)_[]uint8;_X1_[]uint8_}, *Pnoalg.struct_{_F_uintptr;_X0_func([]uint8)_[]uint8;_X1_[]uint8_};

struct noalg.struct_{_F_uintptr;_X0_func([]uint8)_[]uint8;_X1_[]uint8_} { // Original name: noalg.struct { F uintptr; X0 func([]uint8) []uint8; X1 []uint8 }
    uintptr F;
    void (**X0)(struct []uint8, struct []uint8 *);
    struct []uint8 X1;
};

typedef struct google.golang.org/protobuf/internal/filedesc.Out google.golang.org/protobuf/internal/filedesc.Out, *Pgoogle.golang.org/protobuf/internal/filedesc.Out;

struct google.golang.org/protobuf/internal/filedesc.Out {
    google.golang.org/protobuf/reflect/protoreflect.FileDescriptor File;
    struct []google.golang.org/protobuf/internal/filedesc.Enum Enums;
    struct []google.golang.org/protobuf/internal/filedesc.Message Messages;
    struct []google.golang.org/protobuf/internal/filedesc.Extension Extensions;
    struct []google.golang.org/protobuf/internal/filedesc.Service Services;
};

typedef struct [][][]uint8 [][][]uint8, *P[][][]uint8;

struct [][][]uint8 {
    struct [][]uint8 *array;
    int len;
    int cap;
};

typedef struct noalg.struct_{_F_uintptr;_X0_uint32;_X1_uint32_} noalg.struct_{_F_uintptr;_X0_uint32;_X1_uint32_}, *Pnoalg.struct_{_F_uintptr;_X0_uint32;_X1_uint32_};

struct noalg.struct_{_F_uintptr;_X0_uint32;_X1_uint32_} { // Original name: noalg.struct { F uintptr; X0 uint32; X1 uint32 }
    uintptr F;
    uint32 X0;
    uint32 X1;
};

typedef struct encoding/json.unquotedValue encoding/json.unquotedValue, *Pencoding/json.unquotedValue;

struct encoding/json.unquotedValue {
};

typedef struct hash<vendor/golang.org/x/net/dns/dnsmessage.section,string> *map[vendor/golang.org/x/net/dns/dnsmessage.section]string;

typedef struct hchan<net.result[int].1> *chan_net.result[int].1;

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.serverHandlerTransport;_X1_error_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.serverHandlerTransport;_X1_error_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.serverHandlerTransport;_X1_error_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.serverHandlerTransport;_X1_error_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc/internal/transport.serverHandlerTransport; X1 error }
    uintptr F;
    struct google.golang.org/grpc/internal/transport.serverHandlerTransport *X0;
    error X1;
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.MessageDescriptor;_X1_*bool_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.MessageDescriptor;_X1_*bool_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.MessageDescriptor;_X1_*bool_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.MessageDescriptor;_X1_*bool_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/reflect/protoreflect.MessageDescriptor; X1 *bool }
    uintptr F;
    google.golang.org/protobuf/reflect/protoreflect.MessageDescriptor X0;
    bool *X1;
};

typedef struct go.shape.[]uint8 go.shape.[]uint8, *Pgo.shape.[]uint8;

struct go.shape.[]uint8 {
    uint8 *array;
    int len;
    int cap;
};

typedef struct encoding/json.MarshalerError encoding/json.MarshalerError, *Pencoding/json.MarshalerError;

struct encoding/json.MarshalerError {
    reflect.Type Type;
    error Err;
    struct string sourceFunc;
};

typedef struct net.policyTable net.policyTable, *Pnet.policyTable;

struct net.policyTable {
    struct net.policyTableEntry *array;
    int len;
    int cap;
};

typedef struct hash<string,html/template.contentType> hash<string,html/template.contentType>, *Phash<string,html/template.contentType>;

typedef struct hash<string,html/template.contentType> *map[string]html/template.contentType;

struct hash<string,html/template.contentType> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,html/template.contentType> *buckets;
    struct bucket<string,html/template.contentType> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef google.golang.org/protobuf/reflect/protoreflect.EnumNumber google.golang.org/protobuf/internal/filedesc.enumRange[2];

typedef struct noalg.map.hdr[google.golang.org/protobuf/reflect/protoreflect.FullName]interface_{} noalg.map.hdr[google.golang.org/protobuf/reflect/protoreflect.FullName]interface_{}, *Pnoalg.map.hdr[google.golang.org/protobuf/reflect/protoreflect.FullName]interface_{};

struct noalg.map.hdr[google.golang.org/protobuf/reflect/protoreflect.FullName]interface_{} { // Original name: noalg.map.hdr[google.golang.org/protobuf/reflect/protoreflect.FullName]interface {}
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[google.golang.org/protobuf/reflect/protoreflect.FullName]interface_{} *buckets;
    struct noalg.map.bucket[google.golang.org/protobuf/reflect/protoreflect.FullName]interface_{} *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.funcval;_X1_*runtime.g;_X2_uintptr_} noalg.struct_{_F_uintptr;_X0_*runtime.funcval;_X1_*runtime.g;_X2_uintptr_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.funcval;_X1_*runtime.g;_X2_uintptr_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.funcval;_X1_*runtime.g;_X2_uintptr_} { // Original name: noalg.struct { F uintptr; X0 *runtime.funcval; X1 *runtime.g; X2 uintptr }
    uintptr F;
    struct runtime.funcval *X0;
    struct runtime.g *X1;
    uintptr X2;
};

typedef struct runtime.iface crypto.Signer;

typedef struct struct_{_runtime.lock_runtime.mutex;_runtime.free_*runtime.gcBitsArena;_runtime.next_*runtime.gcBitsArena;_runtime.current_*runtime.gcBitsArena;_runtime.previous_*runtime.gcBitsArena_} struct_{_runtime.lock_runtime.mutex;_runtime.free_*runtime.gcBitsArena;_runtime.next_*runtime.gcBitsArena;_runtime.current_*runtime.gcBitsArena;_runtime.previous_*runtime.gcBitsArena_}, *Pstruct_{_runtime.lock_runtime.mutex;_runtime.free_*runtime.gcBitsArena;_runtime.next_*runtime.gcBitsArena;_runtime.current_*runtime.gcBitsArena;_runtime.previous_*runtime.gcBitsArena_};

struct struct_{_runtime.lock_runtime.mutex;_runtime.free_*runtime.gcBitsArena;_runtime.next_*runtime.gcBitsArena;_runtime.current_*runtime.gcBitsArena;_runtime.previous_*runtime.gcBitsArena_} { // Original name: struct { runtime.lock runtime.mutex; runtime.free *runtime.gcBitsArena; runtime.next *runtime.gcBitsArena; runtime.current *runtime.gcBitsArena; runtime.previous *runtime.gcBitsArena }
    struct runtime.mutex lock;
    struct runtime.gcBitsArena *free;
    struct runtime.gcBitsArena *next;
    struct runtime.gcBitsArena *current;
    struct runtime.gcBitsArena *previous;
};

typedef struct noalg.struct_{_F_uintptr;_X0_string;_X1_*net.hostLookupOrder_} noalg.struct_{_F_uintptr;_X0_string;_X1_*net.hostLookupOrder_}, *Pnoalg.struct_{_F_uintptr;_X0_string;_X1_*net.hostLookupOrder_};

struct noalg.struct_{_F_uintptr;_X0_string;_X1_*net.hostLookupOrder_} { // Original name: noalg.struct { F uintptr; X0 string; X1 *net.hostLookupOrder }
    uintptr F;
    struct string X0;
    net.hostLookupOrder *X1;
};

typedef struct noalg.struct_{_net/http.c_unsafe.Pointer;_net/http.elem_unsafe.Pointer_} noalg.[2]struct_{_net/http.c_unsafe.Pointer;_net/http.elem_unsafe.Pointer_}[2];

typedef struct google.golang.org/protobuf/internal/errors.prefixError google.golang.org/protobuf/internal/errors.prefixError, *Pgoogle.golang.org/protobuf/internal/errors.prefixError;

struct google.golang.org/protobuf/internal/errors.prefixError {
    struct string s;
};

typedef struct []unicode.CaseRange []unicode.CaseRange, *P[]unicode.CaseRange;

struct []unicode.CaseRange {
    struct unicode.CaseRange *array;
    int len;
    int cap;
};

typedef struct encoding/pem.Block encoding/pem.Block, *Pencoding/pem.Block;

struct encoding/pem.Block {
    struct string Type;
    map[string]string Headers;
    struct []uint8 Bytes;
};

typedef struct otp/seedgen.GetSeedResponse otp/seedgen.GetSeedResponse, *Potp/seedgen.GetSeedResponse;

struct otp/seedgen.GetSeedResponse {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    int64 Seed;
    int64 Count;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Server;_X1_time.Time_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Server;_X1_time.Time_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Server;_X1_time.Time_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Server;_X1_time.Time_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc/internal/transport.http2Server; X1 time.Time }
    uintptr F;
    struct google.golang.org/grpc/internal/transport.http2Server *X0;
    struct time.Time X1;
};

typedef struct google.golang.org/grpc/credentials.ProtocolInfo google.golang.org/grpc/credentials.ProtocolInfo, *Pgoogle.golang.org/grpc/credentials.ProtocolInfo;

struct google.golang.org/grpc/credentials.ProtocolInfo {
    struct string ProtocolVersion;
    struct string SecurityProtocol;
    struct string SecurityVersion;
    struct string ServerName;
};

typedef struct net/http/internal.chunkedReader net/http/internal.chunkedReader, *Pnet/http/internal.chunkedReader;

struct net/http/internal.chunkedReader {
    struct bufio.Reader *r;
    uint64 n;
    error err;
    uint8 buf[2];
    bool checkEnd;
    int64 excess;
};

typedef struct encoding/asn1.bitStringEncoder encoding/asn1.bitStringEncoder, *Pencoding/asn1.bitStringEncoder;

struct encoding/asn1.bitStringEncoder {
    struct []uint8 Bytes;
    int BitLength;
};

typedef struct hash<int,*sync.Pool> hash<int,*sync.Pool>, *Phash<int,*sync.Pool>;

struct hash<int,*sync.Pool> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<int,*sync.Pool> *buckets;
    struct bucket<int,*sync.Pool> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct hash<string,runtime.metricData> *map[string]runtime.metricData;

typedef struct noalg.struct_{_F_uintptr;_X0_[]int;_X1_int_} noalg.struct_{_F_uintptr;_X0_[]int;_X1_int_}, *Pnoalg.struct_{_F_uintptr;_X0_[]int;_X1_int_};

struct noalg.struct_{_F_uintptr;_X0_[]int;_X1_int_} { // Original name: noalg.struct { F uintptr; X0 []int; X1 int }
    uintptr F;
    struct []int X0;
    int X1;
};

typedef struct noalg.struct_{_F_uintptr;_X0_[]reflect.Value_} noalg.struct_{_F_uintptr;_X0_[]reflect.Value_}, *Pnoalg.struct_{_F_uintptr;_X0_[]reflect.Value_};

struct noalg.struct_{_F_uintptr;_X0_[]reflect.Value_} { // Original name: noalg.struct { F uintptr; X0 []reflect.Value }
    uintptr F;
    struct []reflect.Value X0;
};

typedef struct noalg.map.iter[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType noalg.map.iter[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType, *Pnoalg.map.iter[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType;

struct noalg.map.iter[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType {
    google.golang.org/protobuf/encoding/protowire.Number *key;
    google.golang.org/protobuf/reflect/protoreflect.ExtensionType *elem;
    void *t;
    struct noalg.map.hdr[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType *h;
    struct noalg.map.bucket[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType *buckets;
    struct noalg.map.bucket[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct internal/abi.ChanType internal/abi.ChanType, *Pinternal/abi.ChanType;

struct internal/abi.ChanType {
    struct internal/abi.Type Type;
    struct internal/abi.Type *Elem;
    internal/abi.ChanDir Dir;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*net/http/httptrace.ClientTrace;_X1_*error_} noalg.struct_{_F_uintptr;_X0_*net/http/httptrace.ClientTrace;_X1_*error_}, *Pnoalg.struct_{_F_uintptr;_X0_*net/http/httptrace.ClientTrace;_X1_*error_};

struct noalg.struct_{_F_uintptr;_X0_*net/http/httptrace.ClientTrace;_X1_*error_} { // Original name: noalg.struct { F uintptr; X0 *net/http/httptrace.ClientTrace; X1 *error }
    uintptr F;
    struct net/http/httptrace.ClientTrace *X0;
    error *X1;
};

typedef struct noalg.struct_{_F_uintptr;_X0_uint32_} noalg.struct_{_F_uintptr;_X0_uint32_}, *Pnoalg.struct_{_F_uintptr;_X0_uint32_};

struct noalg.struct_{_F_uintptr;_X0_uint32_} { // Original name: noalg.struct { F uintptr; X0 uint32 }
    uintptr F;
    uint32 X0;
};

typedef struct google.golang.org/grpc/internal/resolver/dns.dnsResolver google.golang.org/grpc/internal/resolver/dns.dnsResolver, *Pgoogle.golang.org/grpc/internal/resolver/dns.dnsResolver;

struct google.golang.org/grpc/internal/resolver/dns.dnsResolver {
    struct string host;
    struct string port;
    google.golang.org/grpc/internal/resolver/dns/internal.NetResolver resolver;
    context.Context ctx;
    void (**cancel)(void);
    google.golang.org/grpc/resolver.ClientConn cc;
    chan_struct_{} rn;
    struct sync.WaitGroup wg;
    bool disableServiceConfig;
};

typedef struct hchan<bool> hchan<bool>, *Phchan<bool>;

struct hchan<bool> {
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<bool> recvq;
    struct waitq<bool> sendq;
    struct runtime.mutex lock;
};

typedef struct hash<golang.org/x/net/http2.SettingID,string> *map[golang.org/x/net/http2.SettingID]string;

typedef struct google.golang.org/grpc/internal/transport.transportReader google.golang.org/grpc/internal/transport.transportReader, *Pgoogle.golang.org/grpc/internal/transport.transportReader;

struct google.golang.org/grpc/internal/transport.transportReader {
    io.Reader reader;
    void (**windowHandler)(int);
    error er;
};

typedef struct []reflect.StructField []reflect.StructField, *P[]reflect.StructField;

struct []reflect.StructField {
    struct reflect.StructField *array;
    int len;
    int cap;
};

typedef struct log/slog.defaultHandler log/slog.defaultHandler, *Plog/slog.defaultHandler;

struct log/slog.defaultHandler {
    struct log/slog.commonHandler *ch;
    void (**output)(uintptr, struct []uint8, error *);
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.OneofFields_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.OneofFields_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.OneofFields_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.OneofFields_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/filedesc.OneofFields }
    uintptr F;
    struct google.golang.org/protobuf/internal/filedesc.OneofFields *X0;
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/internal/impl.offset; X1 reflect.StructField }
    uintptr F;
    google.golang.org/protobuf/internal/impl.offset X0;
    struct reflect.StructField X1;
};

typedef struct struct_{_internal/cpu.__internal/cpu.CacheLinePad;_HasAES_bool;_HasPMULL_bool;_HasSHA1_bool;_HasSHA2_bool;_HasSHA512_bool;_HasCRC32_bool;_HasATOMICS_bool;_HasCPUID_bool;_IsNeoverse_bool;_internal/cpu.__internal/cpu.CacheLinePad_} struct_{_internal/cpu.__internal/cpu.CacheLinePad;_HasAES_bool;_HasPMULL_bool;_HasSHA1_bool;_HasSHA2_bool;_HasSHA512_bool;_HasCRC32_bool;_HasATOMICS_bool;_HasCPUID_bool;_IsNeoverse_bool;_internal/cpu.__internal/cpu.CacheLinePad_}, *Pstruct_{_internal/cpu.__internal/cpu.CacheLinePad;_HasAES_bool;_HasPMULL_bool;_HasSHA1_bool;_HasSHA2_bool;_HasSHA512_bool;_HasCRC32_bool;_HasATOMICS_bool;_HasCPUID_bool;_IsNeoverse_bool;_internal/cpu.__internal/cpu.CacheLinePad_};

struct struct_{_internal/cpu.__internal/cpu.CacheLinePad;_HasAES_bool;_HasPMULL_bool;_HasSHA1_bool;_HasSHA2_bool;_HasSHA512_bool;_HasCRC32_bool;_HasATOMICS_bool;_HasCPUID_bool;_IsNeoverse_bool;_internal/cpu.__internal/cpu.CacheLinePad_} { // Original name: struct { internal/cpu._ internal/cpu.CacheLinePad; HasAES bool; HasPMULL bool; HasSHA1 bool; HasSHA2 bool; HasSHA512 bool; HasCRC32 bool; HasATOMICS bool; HasCPUID bool; IsNeoverse bool; internal/cpu._ internal/cpu.CacheLinePad }
    struct internal/cpu.CacheLinePad _;
    bool HasAES;
    bool HasPMULL;
    bool HasSHA1;
    bool HasSHA2;
    bool HasSHA512;
    bool HasCRC32;
    bool HasATOMICS;
    bool HasCPUID;
    bool IsNeoverse;
    struct internal/cpu.CacheLinePad _;
};

typedef struct hchan<net.result[[]string].1> *chan_net.result[[]string].1;

typedef struct io.nopCloserWriterTo io.nopCloserWriterTo, *Pio.nopCloserWriterTo;

struct io.nopCloserWriterTo {
    io.Reader Reader;
};

typedef struct hchan<*golang.org/x/net/trace.eventLog> *chan_*golang.org/x/net/trace.eventLog;

typedef struct noalg.struct_{_F_uintptr;_X0_*[]uint8_} noalg.struct_{_F_uintptr;_X0_*[]uint8_}, *Pnoalg.struct_{_F_uintptr;_X0_*[]uint8_};

struct noalg.struct_{_F_uintptr;_X0_*[]uint8_} { // Original name: noalg.struct { F uintptr; X0 *[]uint8 }
    uintptr F;
    struct []uint8 *X0;
};

typedef struct runtime.iface internal/testlog.Interface;

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.eface;_X1_*runtime.eface;_X2_uintptr;_X3_*internal/abi.Type;_X4_*internal/abi.PtrType_} noalg.struct_{_F_uintptr;_X0_*runtime.eface;_X1_*runtime.eface;_X2_uintptr;_X3_*internal/abi.Type;_X4_*internal/abi.PtrType_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.eface;_X1_*runtime.eface;_X2_uintptr;_X3_*internal/abi.Type;_X4_*internal/abi.PtrType_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.eface;_X1_*runtime.eface;_X2_uintptr;_X3_*internal/abi.Type;_X4_*internal/abi.PtrType_} { // Original name: noalg.struct { F uintptr; X0 *runtime.eface; X1 *runtime.eface; X2 uintptr; X3 *internal/abi.Type; X4 *internal/abi.PtrType }
    uintptr F;
    struct runtime.eface *X0;
    struct runtime.eface *X1;
    uintptr X2;
    struct internal/abi.Type *X3;
    struct internal/abi.PtrType *X4;
};

typedef struct struct_{_runtime.mutex;_runtime.persistentAlloc_} struct_{_runtime.mutex;_runtime.persistentAlloc_}, *Pstruct_{_runtime.mutex;_runtime.persistentAlloc_};

struct struct_{_runtime.mutex;_runtime.persistentAlloc_} { // Original name: struct { runtime.mutex; runtime.persistentAlloc }
    struct runtime.mutex mutex;
    struct runtime.persistentAlloc persistentAlloc;
};

typedef struct crypto/x509.UnknownAuthorityError crypto/x509.UnknownAuthorityError, *Pcrypto/x509.UnknownAuthorityError;

struct crypto/x509.UnknownAuthorityError {
    struct crypto/x509.Certificate *Cert;
    error hintErr;
    struct crypto/x509.Certificate *hintCert;
};

typedef struct html/template.JS html/template.JS, *Phtml/template.JS;

struct html/template.JS {
    uint8 *str;
    int len;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.hchan_} noalg.struct_{_F_uintptr;_X0_*runtime.hchan_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.hchan_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.hchan_} { // Original name: noalg.struct { F uintptr; X0 *runtime.hchan }
    uintptr F;
    struct runtime.hchan *X0;
};

typedef struct net.conf net.conf, *Pnet.conf;

struct net.conf {
    bool netGo;
    bool netCgo;
    int dnsDebugLevel;
    bool preferCgo;
    struct string goos;
    net.mdnsTest mdnsTest;
};

typedef struct noalg.map.iter[int64]string noalg.map.iter[int64]string, *Pnoalg.map.iter[int64]string;

typedef struct noalg.map.hdr[int64]string noalg.map.hdr[int64]string, *Pnoalg.map.hdr[int64]string;

struct noalg.map.hdr[int64]string {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[int64]string *buckets;
    struct noalg.map.bucket[int64]string *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.iter[int64]string {
    int64 *key;
    struct string *elem;
    void *t;
    struct noalg.map.hdr[int64]string *h;
    struct noalg.map.bucket[int64]string *buckets;
    struct noalg.map.bucket[int64]string *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct reflect.methodValue reflect.methodValue, *Preflect.methodValue;

struct reflect.methodValue {
    struct reflect.makeFuncCtxt makeFuncCtxt;
    int method;
    struct reflect.Value rcvr;
};

typedef struct struct_{_sync.Once;_text/template.v_map[string]reflect.Value_} struct_{_sync.Once;_text/template.v_map[string]reflect.Value_}, *Pstruct_{_sync.Once;_text/template.v_map[string]reflect.Value_};

struct struct_{_sync.Once;_text/template.v_map[string]reflect.Value_} { // Original name: struct { sync.Once; text/template.v map[string]reflect.Value }
    struct sync.Once Once;
    map[string]reflect.Value v;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.FieldRanges_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.FieldRanges_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.FieldRanges_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.FieldRanges_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/filedesc.FieldRanges }
    uintptr F;
    struct google.golang.org/protobuf/internal/filedesc.FieldRanges *X0;
};

typedef struct crypto/internal/edwards25519.Scalar crypto/internal/edwards25519.Scalar, *Pcrypto/internal/edwards25519.Scalar;

struct crypto/internal/edwards25519.Scalar {
    crypto/internal/edwards25519.fiatScalarMontgomeryDomainFieldElement s;
};

typedef struct golang.org/x/net/idna.sparseBlocks golang.org/x/net/idna.sparseBlocks, *Pgolang.org/x/net/idna.sparseBlocks;

struct golang.org/x/net/idna.sparseBlocks {
    struct []golang.org/x/net/idna.valueRange values;
    struct []uint16 offset;
};

