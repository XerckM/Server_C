  void *extraout_RAX_00;
  int n;
  void **extraout_RAX_01;
  void **extraout_RAX_02;
  void **ppvVar2;
  undefined8 *extraout_RAX_03;
  undefined8 *extraout_RAX_04;
  undefined8 *puVar3;
  void *pvVar4;
  void *len;
  undefined8 extraout_RCX;
  void *pvVar5;
  runtime_hmap *h_01;
  void *extraout_RDI;
  void *extraout_RDI_00;
  runtime_hmap *~r0_00;
  void **extraout_R11;
  undefined8 *extraout_R11_00;
  int unaff_R14;
  undefined in_XMM15 [16];
  net_http_Header in_stack_00000008;
  string in_stack_ffffffffffffff20;
  int nv;
  runtime_hiter local_68;
  
  while (&local_68.elem <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = ~r0;
    runtime_morestack_noctxt();
    ~r0 = in_stack_00000008;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((net_http_Header *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffff20;
  }
  if (~r0 == (net_http_Header)0x0) {
                    // WARNING: Subroutine does not return
    runtime_panicwrap();
  }
  h = (runtime_hmap *)~r0->count;
  if (h != (runtime_hmap *)0x0) {
    FUN_0046cdab();
    runtime_mapiterinit((internal_abi_MapType *)&DAT_008909e0,h_01,&local_68);
    len = (void *)0x0;
    pvVar4 = extraout_RDI;
    while ((void **)local_68.key != (void **)0x0) {
      pvVar4 = *(void **)((int)local_68.elem + 8);
      runtime_mapiternext(&local_68);
      len = (void *)((int)len + (int)pvVar4);
      pvVar4 = extraout_RDI_00;
    }
    runtime_makeslice((internal_abi_Type *)&DAT_008075e0,(int)len,(int)len,pvVar4);
    runtime_makemap((internal_abi_MapType *)&DAT_008909e0,h->count,(runtime_hmap *)0x0,~r0_00);
    FUN_0046cdab();
    runtime_mapiterinit((internal_abi_MapType *)&DAT_008909e0,h,&local_68);
    pvVar4 = extraout_RAX;
    while ((void **)local_68.key != (void **)0x0) {
                    // WARNING: Load size is inaccurate
                    // WARNING: Load size is inaccurate
      pvVar5 = *local_68.key;
      if (*local_68.elem == (void *)0x0) {
        runtime_mapassign_faststr
                  ((internal_abi_MapType *)&DAT_008909e0,h_00,in_stack_ffffffffffffff20,pvVar5);
        *(undefined (*) [16])(extraout_RAX_03 + 1) = in_XMM15;
        puVar3 = extraout_RAX_03;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier1();
          *extraout_R11_00 = extraout_RCX;
          puVar3 = extraout_RAX_04;
        }
        *puVar3 = 0;
      }
      else {
        runtime_typedslicecopy
                  ((internal_abi_Type *)&DAT_008075e0,pvVar4,(int)len,*local_68.elem,
                   (int)*(void **)((int)local_68.elem + 8),(int)local_68.elem);
        if (len < extraout_RAX_00) {
                    // WARNING: Subroutine does not return
          runtime_panicSlice3Acap();
        }
        runtime_mapassign_faststr
                  ((internal_abi_MapType *)&DAT_008909e0,h_00,in_stack_ffffffffffffff20,pvVar5);
        extraout_RAX_01[1] = extraout_RAX_00;
        extraout_RAX_01[2] = extraout_RAX_00;
        ppvVar2 = extraout_RAX_01;
        pvVar5 = extraout_RAX_00;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11 = pvVar4;
          extraout_R11[1] = *extraout_RAX_02;
          ppvVar2 = extraout_RAX_02;
        }
        *ppvVar2 = pvVar4;
        if (len < pvVar5) {
                    // WARNING: Subroutine does not return
          runtime_panicSliceB();
        }
        len = (void *)((int)len - (int)pvVar5);
        pvVar4 = (void *)((int)pvVar4 + ((int)pvVar5 << 4 & -(int)len >> 0x3f));
      }
      runtime_mapiternext(&local_68);
    }
  }
  return;
}



void net_http___Header__Del(string key)

{
  string **ppsVar1;
  runtime_hmap *h;
  runtime_hmap **in_RAX;
  int unaff_R14;
  string in_stack_ffffffffffffffd0;
  string in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    key.str = (uint8 *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (runtime_hmap **)key.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &key)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffd0;
  }
  if (in_RAX != (runtime_hmap **)0x0) {
    h = *in_RAX;
    net_textproto_CanonicalMIMEHeaderKey(in_stack_ffffffffffffffd0,in_stack_ffffffffffffffe0);
    runtime_mapdelete_faststr((internal_abi_MapType *)&DAT_00873760,h,in_stack_ffffffffffffffd0);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_http___Header__Get(string key,string ~r0)

{
  string **ppsVar1;
  string ~r0_00;
  net_textproto_MIMEHeader *in_RAX;
  int unaff_RBP;
  int unaff_R14;
  string in_stack_ffffffffffffffe0;
  uint8 *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    key.str = (uint8 *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (net_textproto_MIMEHeader *)key.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &key)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffe0;
  }
  if (in_RAX != (net_textproto_MIMEHeader *)0x0) {
    ~r0_00.len = unaff_RBP;
    ~r0_00.str = in_stack_fffffffffffffff0;
    net_textproto_MIMEHeader_Get(*in_RAX,in_stack_ffffffffffffffe0,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_http___Header__Set(string key,string value)

{
  string **ppsVar1;
  runtime_hmap *h;
  runtime_hmap **in_RAX;
  void *~r0;
  undefined8 *extraout_RAX;
  undefined8 *extraout_RAX_00;
  undefined8 *puVar2;
  int *extraout_RAX_01;
  int *extraout_RAX_02;
  int *piVar3;
  void *~r0_00;
  undefined8 in_RSI;
  undefined8 in_RDI;
  undefined8 *extraout_R11;
  int *extraout_R11_00;
  int unaff_R14;
  string in_stack_ffffffffffffffb8;
  string in_stack_ffffffffffffffc8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    key.str = (uint8 *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (runtime_hmap **)key.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &key)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffb8;
  }
  if (in_RAX == (runtime_hmap **)0x0) {
                    // WARNING: Subroutine does not return
    runtime_panicwrap();
  }
  h = *in_RAX;
  net_textproto_CanonicalMIMEHeaderKey(in_stack_ffffffffffffffb8,in_stack_ffffffffffffffc8);
  runtime_newobject((internal_abi_Type *)&DAT_008117e0,~r0_00);
  extraout_RAX[1] = in_RSI;
  puVar2 = extraout_RAX;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11 = in_RDI;
    puVar2 = extraout_RAX_00;
  }
  *puVar2 = in_RDI;
  runtime_mapassign_faststr((internal_abi_MapType *)&DAT_00873760,h,in_stack_ffffffffffffffb8,~r0);
  extraout_RAX_01[1] = 1;
  extraout_RAX_01[2] = 1;
  piVar3 = extraout_RAX_01;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = (int)puVar2;
    extraout_R11_00[1] = *extraout_RAX_02;
    piVar3 = extraout_RAX_02;
  }
  *piVar3 = (int)puVar2;
  return;
}



void net_http___Header__Values(string key,__string ~r0)

{
  string **ppsVar1;
  runtime_hmap *h;
  runtime_hmap **in_RAX;
  void *~r0_00;
  int unaff_R14;
  string in_stack_ffffffffffffffd0;
  string in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    key.str = (uint8 *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (runtime_hmap **)key.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &key)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffd0;
  }
  if (in_RAX == (runtime_hmap **)0x0) {
                    // WARNING: Subroutine does not return
    runtime_panicwrap();
  }
  h = *in_RAX;
  if (h != (runtime_hmap *)0x0) {
    net_textproto_CanonicalMIMEHeaderKey(in_stack_ffffffffffffffd0,in_stack_ffffffffffffffe0);
    runtime_mapaccess1_faststr
              ((internal_abi_MapType *)&DAT_00873760,h,in_stack_ffffffffffffffd0,~r0_00);
  }
  return;
}



void net_http___Header__Write(io_Writer w,error ~r0)

{
  io_Writer **ppiVar1;
  runtime_itab *in_RAX;
  net_http_httptrace_ClientTrace *in_RCX;
  map_string_bool in_RBX;
  int unaff_R14;
  io_Writer in_stack_ffffffffffffffd0;
  error in_stack_ffffffffffffffe0;
  
  w.data = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    w.tab = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = w.tab;
  }
  ppiVar1 = *(io_Writer ***)(unaff_R14 + 0x20);
  if ((ppiVar1 != (io_Writer **)0x0) && (*ppiVar1 == &w)) {
    *ppiVar1 = (io_Writer *)&stack0xffffffffffffffd0;
  }
  if (in_RAX != (runtime_itab *)0x0) {
    net_http_Header_writeSubset
              ((net_http_Header)in_RAX->inter,in_stack_ffffffffffffffd0,(map_string_bool)w.data,
               in_RCX,in_stack_ffffffffffffffe0);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_http___Header__WriteSubset(io_Writer w,map_string_bool exclude,error ~r0)

{
  io_Writer **ppiVar1;
  net_http_httptrace_ClientTrace *in_RCX;
  map_string_bool in_RBX;
  int unaff_R14;
  io_Writer in_stack_ffffffffffffffd0;
  error in_stack_ffffffffffffffe0;
  
  w.data = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    w.tab = (runtime_itab *)exclude;
    runtime_morestack_noctxt();
    exclude = (map_string_bool)w.tab;
  }
  ppiVar1 = *(io_Writer ***)(unaff_R14 + 0x20);
  if ((ppiVar1 != (io_Writer **)0x0) && (*ppiVar1 == &w)) {
    *ppiVar1 = (io_Writer *)&stack0xffffffffffffffd0;
  }
  if (exclude != (map_string_bool)0x0) {
    net_http_Header_writeSubset
              ((net_http_Header)exclude->count,in_stack_ffffffffffffffd0,(map_string_bool)w.data,
               in_RCX,in_stack_ffffffffffffffe0);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_http___HandlerFunc__ServeHTTP(net_http_ResponseWriter w,net_http_Request *r)

{
  net_http_ResponseWriter **ppnVar1;
  undefined8 in_RCX;
  void *in_RBX;
  undefined8 in_RDI;
  int unaff_R14;
  undefined8 uStack0000000000000018;
  net_http_ResponseWriter nStack_20;
  
  uStack0000000000000018 = in_RCX;
  w.data = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    w.tab = (runtime_itab *)r;
    runtime_morestack_noctxt();
    r = (net_http_Request *)w.tab;
  }
  ppnVar1 = *(net_http_ResponseWriter ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_http_ResponseWriter **)0x0) && (*ppnVar1 == &w)) {
    *ppnVar1 = &nStack_20;
  }
  if (r != (net_http_Request *)0x0) {
    (**(code **)(r->Method).str)(w.data,uStack0000000000000018,in_RDI);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_http___stringWriter__WriteString(string s,int n,error err)

{
  string **ppsVar1;
  int iVar2;
  __uint8 ~r0;
  undefined8 extraout_RAX;
  undefined8 extraout_RCX;
  undefined8 extraout_RBX;
  int unaff_R14;
  string in_stack_ffffffffffffffc8;
  undefined in_stack_ffffffffffffffd8 [16];
  int iVar3;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    s.str = (uint8 *)n;
    runtime_morestack_noctxt();
    n = (int)s.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &s)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffc8;
  }
  if ((int *)n != (int *)0x0) {
    iVar3 = *(int *)n;
    iVar2 = *(int *)(n + 8);
    ~r0.cap = iVar3;
    ~r0.array = (uint8 *)in_stack_ffffffffffffffd8._0_8_;
    ~r0.len = in_stack_ffffffffffffffd8._8_8_;
    runtime_stringtoslicebyte((runtime_tmpBuf *)0x0,in_stack_ffffffffffffffc8,~r0);
    (**(code **)(iVar3 + 0x18))(iVar2,extraout_RAX,extraout_RBX,extraout_RCX);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_http___noBody__Close(error ~r0)

{
  error **ppeVar1;
  int in_RAX;
  int unaff_R14;
  
  ppeVar1 = *(error ***)(unaff_R14 + 0x20);
  if ((ppeVar1 != (error **)0x0) && (*ppeVar1 == &~r0)) {
    *ppeVar1 = (error *)&stack0xfffffffffffffff8;
  }
  if (in_RAX != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_http___noBody__Read(int ~r0,error ~r1)

{
  error **ppeVar1;
  int unaff_R14;
  
  ppeVar1 = *(error ***)(unaff_R14 + 0x20);
  if ((ppeVar1 != (error **)0x0) && (*ppeVar1 == &~r1)) {
    *ppeVar1 = (error *)&stack0xfffffffffffffff8;
  }
  if (~r0 != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_http___noBody__WriteTo(int64 ~r0,error ~r1)

{
  error **ppeVar1;
  int unaff_R14;
  
  ppeVar1 = *(error ***)(unaff_R14 + 0x20);
  if ((ppeVar1 != (error **)0x0) && (*ppeVar1 == &~r1)) {
    *ppeVar1 = (error *)&stack0xfffffffffffffff8;
  }
  if (~r0 != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Unknown calling convention

void net_http_requestBodyReadError_Error(void)

{
  int *piVar1;
  int in_RAX;
  undefined8 in_RBX;
  int unaff_R14;
  int iStack0000000000000008;
  undefined8 uStack0000000000000010;
  undefined auStack_10 [8];
  
  iStack0000000000000008 = in_RAX;
  uStack0000000000000010 = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((int *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  (**(code **)(iStack0000000000000008 + 0x18))(uStack0000000000000010);
  return;
}



// WARNING: Unknown calling convention

void net_http___requestBodyReadError__Error(void)

{
  int *piVar1;
  int *in_RAX;
  int unaff_R14;
  int *piStack0000000000000008;
  undefined auStack_10 [8];
  
  piStack0000000000000008 = in_RAX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((int **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  (**(code **)(*piStack0000000000000008 + 0x18))(piStack0000000000000008[1]);
  return;
}



void net_http___errorReader__Read(__uint8 p,int n,error err)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &p)) {
    *pp_Var1 = (__uint8 *)&stack0xfffffffffffffff8;
  }
  if (n != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_http___bodyLocked__Read(__uint8 p,int n,error err)

{
  __uint8 **pp_Var1;
  error err_00;
  int in_RCX;
  int in_RBX;
  void *unaff_RBP;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd8;
  runtime_itab *in_stack_fffffffffffffff0;
  
  p.len = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    p.array = (uint8 *)n;
    p.cap = in_RCX;
    runtime_morestack_noctxt();
    n = (int)p.array;
    in_RCX = p.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &p)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd8;
  }
  if ((net_http_body **)n == (net_http_body **)0x0) {
                    // WARNING: Subroutine does not return
    runtime_panicwrap();
  }
  if ((*(net_http_body **)n)->closed == false) {
    err_00.data = unaff_RBP;
    err_00.tab = in_stack_fffffffffffffff0;
    net_http___body__readLocked(*(net_http_body **)n,in_stack_ffffffffffffffd8,p.len,err_00);
  }
  return;
}



void net_http___finishAsyncByteRead__Read(__uint8 p,int n,error err)

{
  __uint8 **pp_Var1;
  int in_RCX;
  int in_RBX;
  int unaff_R14;
  __uint8 _Stack_38;
  undefined local_10;
  
  p.len = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    p.array = (uint8 *)n;
    p.cap = in_RCX;
    runtime_morestack_noctxt();
    n = (int)p.array;
    in_RCX = p.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &p)) {
    *pp_Var1 = &_Stack_38;
  }
  if ((int *)n != (int *)0x0) {
    if (in_RCX != 0) {
      _Stack_38.cap = 0;
      local_10 = 0;
      runtime_chanrecv1(*(runtime_hchan **)(*(int *)n + 0x90),&_Stack_38.cap);
      if (_Stack_38.cap == 1) {
        *(undefined *)p.len = local_10;
      }
    }
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// DWARF original name: go:struct { io.Reader; io.WriterTo }.Read

void go_struct___io_Reader__io_WriterTo___Read(__uint8 p,int n,error err)

{
  __uint8 **pp_Var1;
  int in_RBX;
  undefined8 in_RSI;
  undefined8 in_R8;
  undefined8 in_R9;
  int unaff_R14;
  __uint8 _Stack_28;
  
  p.array = (uint8 *)n;
  p.len = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &p)) {
    *pp_Var1 = &_Stack_28;
  }
  (**(code **)(p.array + 0x18))(p.len,in_RSI,in_R8,in_R9);
  return;
}



// DWARF original name: go:(*struct { io.Reader; io.WriterTo }).Read

void go___struct___io_Reader__io_WriterTo____Read(__uint8 p,int n,error err)

{
  __uint8 **pp_Var1;
  int in_RCX;
  int unaff_R14;
  __uint8 _Stack_28;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    p.array = (uint8 *)n;
    p.cap = in_RCX;
    runtime_morestack_noctxt();
    n = (int)p.array;
    in_RCX = p.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &p)) {
    *pp_Var1 = &_Stack_28;
  }
  (**(code **)(*(int *)n + 0x18))(*(int *)(n + 8));
  return;
}



// DWARF original name: go:struct { io.Reader; io.WriterTo }.WriteTo

void go_struct___io_Reader__io_WriterTo___WriteTo(io_Writer w,int64 n,error err)

{
  io_Writer **ppiVar1;
  int in_RCX;
  undefined8 in_RSI;
  undefined8 in_RDI;
  undefined8 in_R8;
  int unaff_R14;
  undefined8 uStack0000000000000028;
  undefined8 uStack0000000000000030;
  io_Writer iStack_20;
  
  w.tab = (runtime_itab *)n;
  uStack0000000000000028 = in_RSI;
  uStack0000000000000030 = in_R8;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ppiVar1 = *(io_Writer ***)(unaff_R14 + 0x20);
  if ((ppiVar1 != (io_Writer **)0x0) && (*ppiVar1 == &w)) {
    *ppiVar1 = &iStack_20;
  }
  (**(code **)(in_RCX + 0x18))(in_RDI,uStack0000000000000028,uStack0000000000000030);
  return;
}



// DWARF original name: go:(*struct { io.Reader; io.WriterTo }).WriteTo

void go___struct___io_Reader__io_WriterTo____WriteTo(io_Writer w,int64 n,error err)

{
  io_Writer **ppiVar1;
  int unaff_R14;
  io_Writer iStack_20;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    w.tab = (runtime_itab *)n;
    runtime_morestack_noctxt();
    n = (int64)w.tab;
  }
  ppiVar1 = *(io_Writer ***)(unaff_R14 + 0x20);
  if ((ppiVar1 != (io_Writer **)0x0) && (*ppiVar1 == &w)) {
    *ppiVar1 = &iStack_20;
  }
  (**(code **)(*(int *)(n + 0x10) + 0x18))(*(uintptr *)(n + 0x18));
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_http___bufioFlushWriter__Write(__uint8 p,int n,error err)

{
  __uint8 **pp_Var1;
  error err_00;
  int in_RCX;
  runtime_itab *unaff_RBP;
  int unaff_R14;
  void *unaff_retaddr;
  io_Writer in_stack_ffffffffffffffd0;
  __uint8 in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    p.array = (uint8 *)n;
    p.cap = in_RCX;
    runtime_morestack_noctxt();
    n = (int)p.array;
    in_RCX = p.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &p)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  if ((int *)n != (int *)0x0) {
    err_00.data = unaff_retaddr;
    err_00.tab = unaff_RBP;
    net_http_bufioFlushWriter_Write
              ((net_http_bufioFlushWriter)in_stack_ffffffffffffffd0,in_stack_ffffffffffffffe0,
               *(int *)n,err_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Unknown calling convention
// DWARF original name: go:struct { io.Reader; io.Closer }.Close

void go_struct___io_Reader__io_Closer___Close(void)

{
  int *piVar1;
  int in_RCX;
  undefined8 in_RDI;
  int unaff_R14;
  int iStack0000000000000018;
  undefined8 uStack0000000000000020;
  undefined auStack_10 [8];
  
  iStack0000000000000018 = in_RCX;
  uStack0000000000000020 = in_RDI;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  (**(code **)(iStack0000000000000018 + 0x18))(uStack0000000000000020);
  return;
}



// WARNING: Unknown calling convention
// DWARF original name: go:(*struct { io.Reader; io.Closer }).Close

void go___struct___io_Reader__io_Closer____Close(void)

{
  int *piVar1;
  int in_RAX;
  int unaff_R14;
  int iStack0000000000000008;
  undefined auStack_10 [8];
  
  iStack0000000000000008 = in_RAX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((int *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  (**(code **)(*(int *)(iStack0000000000000008 + 0x10) + 0x18))
            (*(undefined8 *)(iStack0000000000000008 + 0x18));
  return;
}



// DWARF original name: go:struct { io.Reader; io.Closer }.Read

void go_struct___io_Reader__io_Closer___Read(__uint8 p,int n,error err)

{
  __uint8 **pp_Var1;
  int in_RBX;
  undefined8 in_RSI;
  undefined8 in_R8;
  undefined8 in_R9;
  int unaff_R14;
  __uint8 _Stack_28;
  
  p.array = (uint8 *)n;
  p.len = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &p)) {
    *pp_Var1 = &_Stack_28;
  }
  (**(code **)(p.array + 0x18))(p.len,in_RSI,in_R8,in_R9);
  return;
}



// DWARF original name: go:(*struct { io.Reader; io.Closer }).Read

void go___struct___io_Reader__io_Closer____Read(__uint8 p,int n,error err)

{
  __uint8 **pp_Var1;
  int in_RCX;
  int unaff_R14;
  __uint8 _Stack_28;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    p.array = (uint8 *)n;
    p.cap = in_RCX;
    runtime_morestack_noctxt();
    n = (int)p.array;
    in_RCX = p.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &p)) {
    *pp_Var1 = &_Stack_28;
  }
  (**(code **)(*(int *)n + 0x18))(*(int *)(n + 8));
  return;
}



void net___Dialer__DialContext_fm(context_Context ctx,string network,string address)

{
  context_Context **ppcVar1;
  net_Conn ~r0_1;
  error ~r1;
  error ~r1_1;
  net_Conn ~r0;
  runtime_itab *in_RAX;
  void *in_RCX;
  int in_RDX;
  runtime_itab *in_RBX;
  void *unaff_RBP;
  void *in_RSI;
  int in_RDI;
  int unaff_R14;
  runtime_itab *unaff_retaddr;
  context_Context in_stack_ffffffffffffffc0;
  string in_stack_ffffffffffffffd0;
  string in_stack_ffffffffffffffe0;
  runtime_itab *in_stack_fffffffffffffff0;
  
  ctx.tab = in_RAX;
  ctx.data = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack();
    network.len = in_RDI;
  }
  ppcVar1 = *(context_Context ***)(unaff_R14 + 0x20);
  if ((ppcVar1 != (context_Context **)0x0) && (*ppcVar1 == &ctx)) {
    *ppcVar1 = (context_Context *)&stack0xffffffffffffffc0;
  }
  ~r0.data = unaff_RBP;
  ~r0.tab = in_stack_fffffffffffffff0;
  ~r0_1.data = ctx.tab;
  ~r0_1.tab = unaff_retaddr;
  ~r1.data = in_RCX;
  ~r1.tab = (runtime_itab *)ctx.data;
  ~r1_1.data = in_RSI;
  ~r1_1.tab = (runtime_itab *)network.len;
  net___Dialer__DialContext
            (*(net_Dialer **)(in_RDX + 8),in_stack_ffffffffffffffc0,in_stack_ffffffffffffffd0,
             in_stack_ffffffffffffffe0,~r0,~r0_1,~r1,~r1_1);
  return;
}



void golang_org_x_text_unicode_bidi_LookupRune
               (int32 r,golang_org_x_text_unicode_bidi_Properties p,int size)

{
  uint sz;
  int n;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  undefined4 local_c;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  local_c = 0;
  unicode_utf8_EncodeRune(in_stack_ffffffffffffffd0,(int32)&local_c,4);
  if (sz < 5) {
    golang_org_x_text_unicode_bidi_Lookup(in_stack_ffffffffffffffd0,SUB82(&local_c,0),sz);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceAlen();
}



void golang_org_x_text_unicode_bidi_Lookup
               (__uint8 s,golang_org_x_text_unicode_bidi_Properties p,int sz)

{
  byte bVar1;
  undefined6 in_register_00000002;
  byte *pbVar2;
  uint8 c0;
  uint32 o;
  uint8 c2;
  uint32 o_1;
  uint uVar3;
  uint8 c1;
  uint8 c1_1;
  uint8 c1_2;
  uint8 c2_1;
  uint8 c3;
  
  pbVar2 = (byte *)CONCAT62(in_register_00000002,p);
  if (sz == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  bVar1 = *pbVar2;
  if (bVar1 < 0x80) {
    return;
  }
  if (bVar1 < 0xc2) {
    return;
  }
  if (bVar1 < 0xe0) {
    if (sz < 2) {
      return;
    }
    if ((byte)(pbVar2[1] + 0x80) < 0x40) {
      if ((dword)((dword)pbVar2[1] + (dword)golang_org_x_text_unicode_bidi_bidiIndex[bVar1] * 0x40)
          < 0x40c0) {
        return;
      }
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    return;
  }
  if (bVar1 < 0xf0) {
    if (sz < 3) {
      return;
    }
    if (0x3f < (byte)(pbVar2[1] + 0x80)) {
      return;
    }
    uVar3 = (uint)(dword)((dword)golang_org_x_text_unicode_bidi_bidiIndex[bVar1] * 0x40 +
                         (dword)pbVar2[1]);
    if (0x67f < uVar3) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
