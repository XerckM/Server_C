        pvVar1 = extraout_RAX_02;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11_03 = extraout_RAX_03;
          extraout_R11_03[1] = (pcStack0000000000000008->err).data;
          pvVar1 = extraout_RAX_03;
        }
        (pcStack0000000000000008->err).data = pvVar1;
      }
      return;
    }
    ~r0.data = unaff_RBP;
    ~r0.tab = in_stack_fffffffffffffff0;
    compress_flate___decompressor__moreBits(f,~r0);
    (pcStack0000000000000008->err).tab = extraout_RAX;
    f = pcStack0000000000000008;
    in_RBX = extraout_RBX;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RBX_00;
      extraout_R11[1] = (extraout_RCX->err).data;
      f = extraout_RCX;
      in_RBX = extraout_RBX_00;
    }
    (f->err).data = in_RBX;
  } while ((f->err).tab == (runtime_itab *)0x0);
  return;
}



void compress_flate___decompressor__Read(compress_flate_decompressor *f,__uint8 b,int ~r0,error ~r1)

{
  uint uVar1;
  uint uVar2;
  uint uVar3;
  compress_flate_decompressor *extraout_RAX;
  compress_flate_decompressor *pcVar4;
  compress_flate_decompressor *extraout_RAX_00;
  int n;
  int iVar5;
  uint8 *extraout_RSI;
  uint8 *puVar6;
  uint8 *extraout_RDI;
  int iVar7;
  uint8 **extraout_R11;
  uint8 **extraout_R11_00;
  int unaff_R14;
  undefined in_XMM15 [16];
  
  while (pcVar4 = f, &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  while( true ) {
    do {
      iVar5 = (pcVar4->toRead).len;
      if (iVar5 != 0) {
        puVar6 = (pcVar4->toRead).array;
        if (iVar5 < n) {
          n = iVar5;
        }
        if ((uint8 *)~r0 != puVar6) {
          runtime_memmove((void *)~r0,puVar6,n);
          pcVar4 = f;
        }
        uVar1 = (pcVar4->toRead).len;
        if (uVar1 < (uint)n) {
                    // WARNING: Subroutine does not return
          runtime_panicSliceB();
        }
        iVar5 = uVar1 - n;
        (pcVar4->toRead).len = iVar5;
        iVar7 = (pcVar4->toRead).cap - n;
        (pcVar4->toRead).cap = iVar7;
        puVar6 = (pcVar4->toRead).array + (-iVar7 >> 0x3f & n);
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11_00 = extraout_RSI;
          extraout_R11_00[1] = (extraout_RAX_00->toRead).array;
          pcVar4 = extraout_RAX_00;
          puVar6 = extraout_RSI;
        }
        (pcVar4->toRead).array = puVar6;
        if (iVar5 != 0) {
          return;
        }
        return;
      }
      if ((pcVar4->err).tab != (runtime_itab *)0x0) {
        return;
      }
      (**pcVar4->step)(pcVar4);
      pcVar4 = f;
    } while (((f->err).tab == (runtime_itab *)0x0) || ((f->toRead).len != 0));
    uVar1 = (f->dict).hist.cap;
    uVar2 = (f->dict).wrPos;
    if (uVar1 < uVar2) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAcap();
    }
    uVar3 = (f->dict).rdPos;
    if (uVar2 < uVar3) break;
    puVar6 = (f->dict).hist.array;
    (f->dict).rdPos = uVar2;
    iVar5 = uVar1 - uVar3;
    puVar6 = puVar6 + (-iVar5 >> 0x3f & uVar3);
    if ((f->dict).hist.len == (f->dict).wrPos) {
      (f->dict).wrPos = in_XMM15._0_8_;
      (f->dict).rdPos = in_XMM15._8_8_;
      (f->dict).full = true;
    }
    (f->toRead).len = uVar2 - uVar3;
    (f->toRead).cap = iVar5;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RDI;
      extraout_R11[1] = (extraout_RAX->toRead).array;
      pcVar4 = extraout_RAX;
      puVar6 = extraout_RDI;
    }
    (pcVar4->toRead).array = puVar6;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceB();
}



void compress_flate___decompressor__Close(compress_flate_decompressor *f,error ~r0)

{
  runtime_itab *tab;
  char extraout_AL;
  undefined in_DIL;
  undefined extraout_DIL;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_DIL = extraout_DIL;
  }
  tab = (f->err).tab;
  if ((io_EOF.tab == tab) &&
     (runtime_ifaceeq(tab,(f->err).data,io_EOF.data,(bool)in_DIL), extraout_AL != '\0')) {
    return;
  }
  return;
}



void compress_flate___decompressor__readHuffman(compress_flate_decompressor *f,error ~r0)

{
  compress_flate_huffmanDecoder *h;
  uint uVar1;
  dword dVar2;
  int extraout_RAX;
  int iVar3;
  int extraout_RAX_00;
  int x;
  int extraout_RAX_01;
  int extraout_RAX_02;
  uint uVar4;
  int extraout_RCX;
  int extraout_RCX_00;
  uint nb;
  int j;
  int rep;
  void *in_RBX;
  void *extraout_RBX;
  void *x_00;
  int extraout_RBX_00;
  void *extraout_RBX_01;
  void *extraout_RBX_02;
  void *pvVar5;
  void *extraout_RBX_03;
  void *extraout_RBX_04;
  dword dVar6;
  int nlit;
  int n;
  int b;
  int iVar7;
  uint uVar8;
  int nclen;
  int ndist;
  int iVar9;
  int unaff_R14;
  error in_stack_ffffffffffffff80;
  int i_2;
  int i;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RBX = extraout_RBX_04;
  }
  while (f->nb < 0xe) {
    compress_flate___decompressor__moreBits(f,in_stack_ffffffffffffff80);
    in_RBX = extraout_RBX;
    if (extraout_RAX != 0) {
      return;
    }
  }
  dVar2 = f->b;
  uVar1 = (dVar2 & 0x1f) + 0x101;
  if (0x11e < uVar1) {
    runtime_convT64(f->roffset,in_RBX);
    return;
  }
  f->b = dVar2 >> 5;
  dVar6 = dVar2 >> 5 & 0x1f;
  if (0x1e < (dword)(dVar6 + 1)) {
    runtime_convT64(f->roffset,in_RBX);
    return;
  }
  f->b = dVar2 >> 0xe;
  f->nb = f->nb - 0xe;
  uVar8 = (dVar2 >> 10 & 0xf) + 4;
  uVar4 = 0;
  while( true ) {
    if ((int)uVar8 <= (int)uVar4) {
      while( true ) {
        if (0x12 < (int)uVar8) {
          h = &f->h1;
          iVar3 = compress_flate___huffmanDecoder__init((EVP_PKEY_CTX *)h);
          if ((char)iVar3 == '\0') {
            runtime_convT64(f->roffset,x_00);
            return;
          }
          uVar4 = (uint)dVar6 + (uint)(dVar2 & 0x1f) + 0x102;
          uVar8 = 0;
          iVar3 = extraout_RCX;
          while( true ) {
            while( true ) {
              if ((int)uVar4 <= (int)uVar8) {
                if (0x13c < uVar1) {
                    // WARNING: Subroutine does not return
                  runtime_panicSliceAlen();
                }
                iVar3 = compress_flate___huffmanDecoder__init((EVP_PKEY_CTX *)h);
                pvVar5 = extraout_RBX_01;
                if ((char)iVar3 != '\0') {
                  if (0x13c < uVar4) {
                    // WARNING: Subroutine does not return
                    runtime_panicSliceAlen();
                  }
                  if (uVar4 < uVar1) {
                    // WARNING: Subroutine does not return
                    runtime_panicSliceB();
                  }
                  iVar3 = compress_flate___huffmanDecoder__init((EVP_PKEY_CTX *)&f->h2);
                  pvVar5 = extraout_RBX_02;
                  if ((char)iVar3 != '\0') {
                    iVar3 = (*f->bits)[0x100];
                    if ((f->h1).min < iVar3) {
                      (f->h1).min = iVar3;
                    }
                    return;
                  }
                }
                runtime_convT64(f->roffset,pvVar5);
                return;
              }
              compress_flate___decompressor__huffSym(f,h,iVar3,in_stack_ffffffffffffff80);
              if (extraout_RBX_00 != 0) {
                return;
              }
              if (0xf < extraout_RAX_00) break;
              if (0x13b < uVar8) {
                    // WARNING: Subroutine does not return
                runtime_panicIndex();
              }
              (*f->bits)[uVar8] = extraout_RAX_00;
              uVar8 = uVar8 + 1;
              iVar3 = extraout_RCX_00;
            }
            if (extraout_RAX_00 == 0x10) {
              if (uVar8 == 0) {
                runtime_convT64(f->roffset,(void *)0x0);
                return;
              }
              if (0x13b < uVar8 - 1) {
                    // WARNING: Subroutine does not return
                runtime_panicIndex();
              }
              iVar7 = f->bits[-1][uVar8 + 0x13b];
              nb = 2;
              rep = 3;
            }
            else if (extraout_RAX_00 == 0x11) {
              nb = 3;
              rep = 3;
              iVar7 = 0;
            }
            else {
              if (extraout_RAX_00 != 0x12) {
                return;
              }
              nb = 7;
              rep = 0xb;
              iVar7 = 0;
            }
            pvVar5 = (void *)0x0;
            while (f->nb < nb) {
              compress_flate___decompressor__moreBits(f,in_stack_ffffffffffffff80);
              pvVar5 = extraout_RBX_03;
              if (extraout_RAX_01 != 0) {
                return;
              }
            }
            iVar9 = (uint)((1 << (sbyte)nb) - 1U & f->b) + rep;
            f->b = f->b >> (sbyte)nb;
            f->nb = f->nb - nb;
            if ((int)uVar4 < (int)(uVar8 + iVar9)) break;
            for (iVar3 = 0; iVar3 < iVar9; iVar3 = iVar3 + 1) {
              if (0x13b < uVar8) {
                    // WARNING: Subroutine does not return
                runtime_panicIndex();
              }
              (*f->bits)[uVar8] = iVar7;
              uVar8 = uVar8 + 1;
            }
          }
          runtime_convT64(f->roffset,pvVar5);
          return;
        }
        if (0x12 < uVar8) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        if (0x12 < (uint)compress_flate_codeOrder[uVar8]) break;
        (*f->codebits)[compress_flate_codeOrder[uVar8]] = 0;
        uVar8 = uVar8 + 1;
      }
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    while (f->nb < 3) {
      compress_flate___decompressor__moreBits(f,in_stack_ffffffffffffff80);
      if (extraout_RAX_02 != 0) {
        return;
      }
    }
    if (0x12 < uVar4) break;
    if (0x12 < (uint)compress_flate_codeOrder[uVar4]) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    (*f->codebits)[compress_flate_codeOrder[uVar4]] = (uint)(f->b & 7);
    f->b = f->b >> 3;
    f->nb = f->nb - 3;
    uVar4 = uVar4 + 1;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



// WARNING: Unknown calling convention

void compress_flate___decompressor__huffmanBlock(compress_flate_decompressor *f)

{
  dword dVar1;
  uint uVar2;
  uint uVar3;
  int extraout_RAX;
  int v;
  uint n;
  void *extraout_RAX_00;
  void *extraout_RAX_01;
  void *pvVar4;
  uint8 *extraout_RAX_02;
  undefined8 extraout_RAX_03;
  compress_flate_decompressor *extraout_RAX_04;
  uint extraout_RAX_05;
  int dist;
  compress_flate_decompressor *extraout_RAX_06;
  uint uVar5;
  int extra;
  void *extraout_RAX_07;
  void *extraout_RAX_08;
  runtime_itab *extraout_RAX_09;
  void *extraout_RAX_10;
  void *extraout_RAX_11;
  int extraout_RAX_12;
  compress_flate_decompressor *extraout_RAX_13;
  runtime_itab *extraout_RAX_14;
  runtime_itab *extraout_RAX_15;
  byte bVar6;
  uint in_RCX;
  void *extraout_RCX;
  void *extraout_RCX_00;
  void *extraout_RCX_01;
  void *extraout_RCX_02;
  void *extraout_RCX_03;
  compress_flate_decompressor *extraout_RCX_04;
  int endPos;
  compress_flate_decompressor *extraout_RCX_05;
  compress_flate_decompressor *extraout_RCX_06;
  uint extraout_RCX_07;
  runtime_itab *extraout_RBX;
  int iVar7;
  uint8 *puVar8;
  uint8 *extraout_RBX_00;
  compress_flate_decompressor *extraout_RBX_01;
  compress_flate_decompressor *extraout_RBX_02;
  compress_flate_decompressor *extraout_RBX_03;
  compress_flate_huffmanDecoder *extraout_RBX_04;
  compress_flate_huffmanDecoder *extraout_RBX_05;
  compress_flate_huffmanDecoder *extraout_RBX_06;
  compress_flate_huffmanDecoder *pcVar9;
  compress_flate_huffmanDecoder *extraout_RBX_07;
  compress_flate_huffmanDecoder *extraout_RBX_08;
  void *extraout_RBX_09;
  void *extraout_RBX_10;
  int length;
  uint uVar10;
  int srcPos;
  int iVar11;
  int dstPos;
  uint uVar12;
  uint8 *__dest;
  int cnt;
  uint8 **extraout_R11;
  void **extraout_R11_00;
  uint8 **extraout_R11_01;
  void **extraout_R11_02;
  undefined8 *extraout_R11_03;
  void **extraout_R11_04;
  void **extraout_R11_05;
  void **extraout_R11_06;
  compress_flate_huffmanDecoder **extraout_R11_07;
  void **extraout_R11_08;
  size_t __n;
  uint8 **extraout_R11_09;
  compress_flate_huffmanDecoder **extraout_R11_10;
  void **extraout_R11_11;
  int unaff_R14;
  undefined in_XMM15 [16];
  error in_stack_ffffffffffffff88;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RCX = extraout_RCX_07;
  }
  if ((f->stepState != 0) && (f->stepState == 1)) goto LAB_0056932d;
  while( true ) {
    while( true ) {
      compress_flate___decompressor__huffSym(f,f->hl,in_RCX,in_stack_ffffffffffffff88);
      if (extraout_RBX != (runtime_itab *)0x0) {
        (f->err).tab = extraout_RBX;
        pvVar4 = extraout_RCX;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11_04 = extraout_RCX_01;
          extraout_R11_04[1] = (extraout_RAX_04->err).data;
          f = extraout_RAX_04;
          pvVar4 = extraout_RCX_01;
        }
        (f->err).data = pvVar4;
        return;
      }
      if (0xff < extraout_RAX) break;
      uVar5 = (f->dict).wrPos;
      if ((uint)(f->dict).hist.len <= uVar5) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      (f->dict).hist.array[uVar5] = (uint8)extraout_RAX;
      in_RCX = (f->dict).wrPos;
      uVar5 = in_RCX + 1;
      (f->dict).wrPos = uVar5;
      if ((f->dict).hist.len == uVar5) {
        uVar10 = (f->dict).rdPos;
        if (uVar5 < uVar10) {
                    // WARNING: Subroutine does not return
          runtime_panicSliceB();
        }
        iVar7 = (f->dict).hist.cap;
        puVar8 = (f->dict).hist.array;
        (f->dict).rdPos = uVar5;
        iVar7 = iVar7 - uVar10;
        puVar8 = puVar8 + (-iVar7 >> 0x3f & uVar10);
        if ((f->dict).hist.len == uVar5) {
          (f->dict).wrPos = in_XMM15._0_8_;
          (f->dict).rdPos = in_XMM15._8_8_;
          (f->dict).full = true;
        }
        (f->toRead).len = (in_RCX - uVar10) + 1;
        (f->toRead).cap = iVar7;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier3();
          *extraout_R11 = extraout_RBX_00;
          extraout_R11[1] = (f->toRead).array;
          extraout_R11[2] = (uint8 *)f->step;
          puVar8 = extraout_RBX_00;
        }
        (f->toRead).array = puVar8;
        f->step = (func__compress_flate_decompressor_ **)
                  &PTR_compress_flate___decompressor__huffmanBlock_008ec9b8;
        f->stepState = 0;
        return;
      }
    }
    if (extraout_RAX == 0x100) {
      if (f->final != false) {
        uVar5 = (f->dict).wrPos;
        uVar10 = (f->dict).rdPos;
        if (0 < (int)(uVar5 - uVar10)) {
          uVar2 = (f->dict).hist.cap;
          if (uVar2 < uVar5) {
                    // WARNING: Subroutine does not return
            runtime_panicSliceAcap();
          }
          if (uVar5 < uVar10) {
                    // WARNING: Subroutine does not return
            runtime_panicSliceB();
          }
          puVar8 = (f->dict).hist.array;
          (f->dict).rdPos = uVar5;
          iVar7 = uVar2 - uVar10;
          puVar8 = puVar8 + (uVar10 & -iVar7 >> 0x3f);
          if ((f->dict).hist.len == (f->dict).wrPos) {
            (f->dict).wrPos = in_XMM15._0_8_;
            (f->dict).rdPos = in_XMM15._8_8_;
            (f->dict).full = true;
          }
          (f->toRead).len = uVar5 - uVar10;
          (f->toRead).cap = iVar7;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_01 = extraout_RAX_02;
            extraout_R11_01[1] = (extraout_RBX_01->toRead).array;
            puVar8 = extraout_RAX_02;
            f = extraout_RBX_01;
          }
          (f->toRead).array = puVar8;
        }
        pvVar4 = io_EOF.data;
        (f->err).tab = io_EOF.tab;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11_02 = extraout_RCX_00;
          extraout_R11_02[1] = (extraout_RBX_02->err).data;
          pvVar4 = extraout_RCX_00;
          f = extraout_RBX_02;
        }
        (f->err).data = pvVar4;
      }
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier1();
        *extraout_R11_03 = extraout_RAX_03;
        f = extraout_RBX_03;
      }
      f->step = (func__compress_flate_decompressor_ **)
                &PTR_compress_flate___decompressor__nextBlock_008ec9c0;
      return;
    }
    if (extraout_RAX < 0x109) {
      iVar7 = extraout_RAX + -0xfe;
      n = 0;
    }
    else if (extraout_RAX < 0x10d) {
      iVar7 = extraout_RAX * 2 + -0x207;
      n = 1;
    }
    else if (extraout_RAX < 0x111) {
      iVar7 = extraout_RAX * 4 + -0x421;
      n = 2;
    }
    else if (extraout_RAX < 0x115) {
      iVar7 = extraout_RAX * 8 + -0x865;
      n = 3;
    }
    else if (extraout_RAX < 0x119) {
      iVar7 = extraout_RAX * 0x10 + -0x110d;
      n = 4;
    }
    else if (extraout_RAX < 0x11d) {
      iVar7 = extraout_RAX * 0x20 + -0x229d;
      n = 5;
    }
    else {
      if (0x11d < extraout_RAX) {
        runtime_convT64(f->roffset,(void *)0x0);
        (f->err).tab = (runtime_itab *)go_itab_compress_flate_CorruptInputError_error;
        pvVar4 = extraout_RAX_00;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11_00 = extraout_RAX_01;
          extraout_R11_00[1] = (f->err).data;
          pvVar4 = extraout_RAX_01;
        }
        (f->err).data = pvVar4;
        return;
      }
      n = 0;
      iVar7 = 0x102;
    }
    pvVar4 = extraout_RCX;
    if (n != 0) {
      while (f->nb < n) {
        compress_flate___decompressor__moreBits(f,in_stack_ffffffffffffff88);
        if (extraout_RAX_15 != (runtime_itab *)0x0) {
          (f->err).tab = extraout_RAX_15;
          pvVar4 = extraout_RBX_09;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_11 = extraout_RBX_10;
            extraout_R11_11[1] = (extraout_RCX_06->err).data;
            f = extraout_RCX_06;
            pvVar4 = extraout_RBX_10;
          }
          (f->err).data = pvVar4;
          return;
        }
      }
      dVar1 = f->b;
      f->b = dVar1 >> (sbyte)n;
      f->nb = f->nb - n;
      iVar7 = iVar7 + (uint)((1 << (sbyte)n) - 1U & dVar1);
      pvVar4 = (void *)n;
    }
    pcVar9 = f->hd;
    if (pcVar9 == (compress_flate_huffmanDecoder *)0x0) {
      while (f->nb < 5) {
        compress_flate___decompressor__moreBits(f,in_stack_ffffffffffffff88);
        pcVar9 = extraout_RBX_07;
        if (extraout_RAX_14 != (runtime_itab *)0x0) {
          (f->err).tab = extraout_RAX_14;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_10 = extraout_RBX_08;
            extraout_R11_10[1] = (compress_flate_huffmanDecoder *)(extraout_RCX_05->err).data;
            f = extraout_RCX_05;
            pcVar9 = extraout_RBX_08;
          }
          (f->err).data = pcVar9;
          return;
        }
      }
      uVar5 = (uint)(byte)"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZgrpc: addrConn.createTransport failed to connect to %s. Err: %vHealth check is requested but health check function is not set.malformed GOMEMLIMIT; see `go doc runtime/debug.SetMemoryLimit`attempt to delete an entry (id=%d) that doesn\'t currently existtransport: received per-RPC creds error with illegal status: %vnet/trace: trace used after finish:\nFinished at:\n%s\nUsed at:\n%selementNoneelementScriptelementStyleelementTextareaelementTitleecdsa: internal error: P256OrdInverse produced an invalid valuegrpc: Compressor is not installed for requested grpc-encoding %qgrpc: client streaming protocol violation: get <nil>, want <EOF>runtime.SetFinalizer: first argument was allocated into an arenareflect.StructOf: struct size would exceed virtual address spacethe stream is rejected because server is draining the connectionjson: invalid number literal, trying to unmarshal %q into Numberheader key %q contains value with non-printable ASCII charactersextension %v has mismatching containing message: got %v, want %vABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2964fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5received context error while waiting for new LB policy update: %suser arena chunk size is not a multiple of the physical page sizeruntime.SetFinalizer: pointer not at beginning of allocated blockbinarylogging: message to log is neither proto.message nor []bytex509: inner and outer signature algorithm identifiers don\'t matchx509: issuer name does not match subject from issuing certificatenistec: internal error: p224Table called with out-of-bounds valuenistec: internal error: p384Table called with out-of-bounds valuenistec: internal error: p521Table called with out-of-bounds valuegrpc: credentials.Bundle must return non-nil transport credential..." /* TRUNCATED STRING LITERAL */
                          [(dword)((f->b & 0x1f) << 3) + 0x2d22];
      f->b = f->b >> 5;
      f->nb = f->nb - 5;
    }
    else {
      compress_flate___decompressor__huffSym(f,pcVar9,(int)pvVar4,in_stack_ffffffffffffff88);
      uVar5 = extraout_RAX_05;
      pcVar9 = extraout_RBX_04;
      if (extraout_RBX_04 != (compress_flate_huffmanDecoder *)0x0) {
        (f->err).tab = (runtime_itab *)extraout_RBX_04;
        pvVar4 = extraout_RCX_02;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11_05 = extraout_RCX_03;
          extraout_R11_05[1] = (extraout_RAX_06->err).data;
          f = extraout_RAX_06;
          pvVar4 = extraout_RCX_03;
        }
        (f->err).data = pvVar4;
        return;
      }
    }
    if (3 < (int)uVar5) {
      if (0x1d < (int)uVar5) {
        runtime_convT64(f->roffset,pcVar9);
        (f->err).tab = (runtime_itab *)go_itab_compress_flate_CorruptInputError_error;
        pvVar4 = extraout_RAX_07;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11_06 = extraout_RAX_08;
          extraout_R11_06[1] = (f->err).data;
          pvVar4 = extraout_RAX_08;
        }
        (f->err).data = pvVar4;
        return;
      }
      uVar10 = uVar5 - 2 >> 1;
      bVar6 = (byte)uVar10;
      while (f->nb < uVar10) {
        compress_flate___decompressor__moreBits(f,in_stack_ffffffffffffff88);
        pcVar9 = extraout_RBX_05;
        if (extraout_RAX_09 != (runtime_itab *)0x0) {
          (f->err).tab = extraout_RAX_09;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_07 = extraout_RBX_06;
            extraout_R11_07[1] = (compress_flate_huffmanDecoder *)(extraout_RCX_04->err).data;
            f = extraout_RCX_04;
            pcVar9 = extraout_RBX_06;
          }
          (f->err).data = pcVar9;
          return;
        }
      }
      dVar1 = f->b;
      f->b = dVar1 >> (bVar6 & 0x1f) & -(dword)(uVar10 < 0x20);
      f->nb = f->nb - uVar10;
      uVar5 = ((uint)((dword)uVar5 & 1) << (bVar6 & 0x3f) & -(uint)(uVar10 < 0x40) |
              (uint)((1 << (bVar6 & 0x1f) & -(dword)(uVar10 < 0x20)) - 1 & dVar1)) +
              (1 << ((byte)(uVar10 + 1) & 0x3f) & -(uint)(uVar10 + 1 < 0x40));
    }
    if ((f->dict).full == false) {
      iVar11 = (f->dict).wrPos;
    }
    else {
      iVar11 = (f->dict).hist.len;
    }
    if (iVar11 < (int)(uVar5 + 1)) break;
    f->copyLen = iVar7;
    f->copyDist = uVar5 + 1;
LAB_0056932d:
    uVar10 = f->copyLen;
    uVar2 = (f->dict).wrPos;
    uVar5 = uVar2 + uVar10;
    if (((int)uVar2 < f->copyDist) || ((f->dict).hist.len < (int)uVar5)) {
      cnt = 0;
    }
    else {
      uVar10 = uVar2 - f->copyDist;
      for (uVar12 = uVar2; (int)uVar12 < (int)uVar5; uVar12 = __n + uVar12) {
        uVar3 = (f->dict).hist.cap;
        if (uVar3 < uVar5) {
                    // WARNING: Subroutine does not return
          runtime_panicSliceAcap();
        }
        if (uVar5 < uVar12) {
                    // WARNING: Subroutine does not return
          runtime_panicSliceB();
        }
        puVar8 = (f->dict).hist.array;
        __dest = puVar8 + ((int)(uVar12 - uVar3) >> 0x3f & uVar12);
        if (uVar12 < uVar10) {
                    // WARNING: Subroutine does not return
          runtime_panicSliceB();
        }
        puVar8 = puVar8 + ((int)(uVar10 - uVar3) >> 0x3f & uVar10);
        __n = uVar5 - uVar12;
        if ((int)(uVar12 - uVar10) < (int)(uVar5 - uVar12)) {
          __n = uVar12 - uVar10;
        }
        if (puVar8 != __dest) {
          runtime_memmove(__dest,puVar8,__n);
        }
      }
      (f->dict).wrPos = uVar12;
      cnt = uVar12 - uVar2;
    }
    if (cnt == 0) {
      compress_flate___dictDecoder__writeCopy(&f->dict,f->copyDist,f->copyLen,uVar10);
      cnt = extraout_RAX_12;
    }
    iVar7 = f->copyLen - cnt;
    f->copyLen = iVar7;
    in_RCX = (f->dict).wrPos;
    if (((f->dict).hist.len == in_RCX) || (0 < iVar7)) {
      uVar5 = (f->dict).hist.cap;
      if (uVar5 < in_RCX) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceAcap();
      }
      uVar10 = (f->dict).rdPos;
      if (in_RCX < uVar10) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      puVar8 = (f->dict).hist.array;
      (f->dict).rdPos = in_RCX;
      iVar7 = uVar5 - uVar10;
      puVar8 = puVar8 + (-iVar7 >> 0x3f & uVar10);
      if ((f->dict).wrPos == (f->dict).hist.len) {
        (f->dict).wrPos = in_XMM15._0_8_;
        (f->dict).rdPos = in_XMM15._8_8_;
        (f->dict).full = true;
      }
      (f->toRead).len = in_RCX - uVar10;
      (f->toRead).cap = iVar7;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier3();
        *extraout_R11_09 = puVar8;
        extraout_R11_09[1] = (extraout_RAX_13->toRead).array;
        extraout_R11_09[2] = (uint8 *)extraout_RAX_13->step;
        f = extraout_RAX_13;
      }
      (f->toRead).array = puVar8;
      f->step = (func__compress_flate_decompressor_ **)
                &PTR_compress_flate___decompressor__huffmanBlock_008ec9b8;
      f->stepState = 1;
      return;
    }
  }
  runtime_convT64(f->roffset,pcVar9);
  (f->err).tab = (runtime_itab *)go_itab_compress_flate_CorruptInputError_error;
  pvVar4 = extraout_RAX_10;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_08 = extraout_RAX_11;
    extraout_R11_08[1] = (f->err).data;
    pvVar4 = extraout_RAX_11;
  }
  (f->err).data = pvVar4;
  return;
}



// WARNING: Unknown calling convention

void compress_flate___decompressor__dataBlock(compress_flate_decompressor *f)

{
  uint uVar1;
  uint uVar2;
  error err;
  char extraout_AL;
  int min;
  int extraout_RAX;
  int nr;
  uint64 val;
  uint8 *extraout_RAX_00;
  undefined8 extraout_RAX_01;
  void *extraout_RAX_02;
  void *extraout_RAX_03;
  void *pvVar3;
  void *x;
  void *extraout_RCX;
  void *extraout_RCX_00;
  compress_flate_decompressor *pcVar4;
  runtime_itab *tab;
  runtime_itab *prVar5;
  uint uVar6;
  int iVar7;
  uint8 *puVar8;
  uint8 *extraout_RBX;
  bool ~r0;
  void **extraout_R11;
  uint8 **extraout_R11_00;
  uint8 **extraout_R11_01;
  void **extraout_R11_02;
  undefined8 *extraout_R11_03;
  void **extraout_R11_04;
  int unaff_R14;
  undefined in_XMM15 [16];
  compress_flate_decompressor *pcStack0000000000000008;
  io_Reader in_stack_ffffffffffffffa8;
  __uint8 in_stack_ffffffffffffffb8;
  runtime_itab *in_stack_ffffffffffffffd0;
  void *in_stack_ffffffffffffffd8;
  
  pcStack0000000000000008 = f;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  pcStack0000000000000008->nb = 0;
  pcStack0000000000000008->b = 0;
  pvVar3 = (pcStack0000000000000008->r).data;
  runtime_convI2I((internal_abi_InterfaceType *)&DAT_00834b40,(pcStack0000000000000008->r).tab,
                  (runtime_itab *)pcStack0000000000000008->buf);
  err.data = in_stack_ffffffffffffffd8;
  err.tab = in_stack_ffffffffffffffd0;
  io_ReadAtLeast(in_stack_ffffffffffffffa8,in_stack_ffffffffffffffb8,min,(int)pvVar3,err);
  val = extraout_RAX + pcStack0000000000000008->roffset;
  pcStack0000000000000008->roffset = val;
  if (tab != (runtime_itab *)0x0) {
    pvVar3 = x;
    prVar5 = tab;
    if ((io_EOF.tab == tab) &&
       (prVar5 = tab, runtime_ifaceeq(tab,x,io_EOF.data,~r0), pvVar3 = x, extraout_AL != '\0')) {
      pvVar3 = io_ErrUnexpectedEOF.data;
      prVar5 = io_ErrUnexpectedEOF.tab;
    }
    (pcStack0000000000000008->err).tab = prVar5;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RCX;
      extraout_R11[1] = (pcStack0000000000000008->err).data;
      pvVar3 = extraout_RCX;
    }
    (pcStack0000000000000008->err).data = pvVar3;
    return;
  }
  uVar6 = (uint)*(ushort *)pcStack0000000000000008->buf;
  if (*(short *)(pcStack0000000000000008->buf + 2) != (short)(void *)~uVar6) {
    runtime_convT64(val,(void *)~uVar6);
    (pcStack0000000000000008->err).tab =
         (runtime_itab *)go_itab_compress_flate_CorruptInputError_error;
    pvVar3 = extraout_RAX_02;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_04 = extraout_RAX_03;
      extraout_R11_04[1] = (pcStack0000000000000008->err).data;
      pvVar3 = extraout_RAX_03;
    }
    (pcStack0000000000000008->err).data = pvVar3;
    return;
  }
  if (uVar6 != 0) {
    pcStack0000000000000008->copyLen = uVar6;
    compress_flate___decompressor__copyData(pcStack0000000000000008);
    return;
  }
  uVar6 = (pcStack0000000000000008->dict).hist.cap;
  uVar1 = (pcStack0000000000000008->dict).wrPos;
  if (uVar6 < uVar1) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  uVar2 = (pcStack0000000000000008->dict).rdPos;
  if (uVar1 < uVar2) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  puVar8 = (pcStack0000000000000008->dict).hist.array;
  (pcStack0000000000000008->dict).rdPos = uVar1;
  iVar7 = uVar6 - uVar2;
  puVar8 = puVar8 + (-iVar7 >> 0x3f & uVar2);
  if ((pcStack0000000000000008->dict).hist.len == (pcStack0000000000000008->dict).wrPos) {
    (pcStack0000000000000008->dict).wrPos = in_XMM15._0_8_;
    (pcStack0000000000000008->dict).rdPos = in_XMM15._8_8_;
    (pcStack0000000000000008->dict).full = true;
  }
  (pcStack0000000000000008->toRead).len = uVar1 - uVar2;
  (pcStack0000000000000008->toRead).cap = iVar7;
  pcVar4 = pcStack0000000000000008;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = extraout_RBX;
    extraout_R11_00[1] = (pcVar4->toRead).array;
    puVar8 = extraout_RBX;
  }
  (pcVar4->toRead).array = puVar8;
  if (pcVar4->final != false) {
    uVar6 = (pcVar4->dict).wrPos;
    uVar1 = (pcVar4->dict).rdPos;
    if (0 < (int)(uVar6 - uVar1)) {
      uVar2 = (pcVar4->dict).hist.cap;
      if (uVar2 < uVar6) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceAcap();
      }
      if (uVar6 < uVar1) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      puVar8 = (pcVar4->dict).hist.array;
      (pcVar4->dict).rdPos = uVar6;
      iVar7 = uVar2 - uVar1;
      puVar8 = puVar8 + (uVar1 & -iVar7 >> 0x3f);
      if ((pcVar4->dict).wrPos == (pcVar4->dict).hist.len) {
        (pcVar4->dict).wrPos = in_XMM15._0_8_;
        (pcVar4->dict).rdPos = in_XMM15._8_8_;
        (pcVar4->dict).full = true;
      }
      (pcVar4->toRead).len = uVar6 - uVar1;
      (pcVar4->toRead).cap = iVar7;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_01 = extraout_RAX_00;
        extraout_R11_01[1] = (pcVar4->toRead).array;
        puVar8 = extraout_RAX_00;
      }
      (pcVar4->toRead).array = puVar8;
    }
    pvVar3 = io_EOF.data;
    (pcVar4->err).tab = io_EOF.tab;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_02 = extraout_RCX_00;
      extraout_R11_02[1] = (pcVar4->err).data;
      pvVar3 = extraout_RCX_00;
    }
    (pcVar4->err).data = pvVar3;
  }
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11_03 = extraout_RAX_01;
  }
  pcVar4->step = (func__compress_flate_decompressor_ **)
                 &PTR_compress_flate___decompressor__nextBlock_008ec9c0;
  return;
}



// WARNING: Unknown calling convention

void compress_flate___decompressor__copyData(compress_flate_decompressor *f)

{
  uint uVar1;
  uint uVar2;
  error err;
  char extraout_AL;
  int min;
  int extraout_RAX;
  int cnt;
