  }
  runtime_assertI2I2((internal_abi_InterfaceType *)&DAT_0082c980,in_stack_ffffffffffffffd0,
                     in_stack_ffffffffffffffe0);
  if (extraout_RAX != 0) {
    (**(code **)(extraout_RAX + 0x18))(extraout_RBX);
  }
  return;
}



void net_url___Error__Temporary(net_url_Error *e,bool ~r0)

{
  int extraout_RAX;
  undefined8 extraout_RBX;
  int unaff_R14;
  runtime_iface in_stack_ffffffffffffffd0;
  runtime_iface in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_assertI2I2((internal_abi_InterfaceType *)&DAT_0082b6c0,in_stack_ffffffffffffffd0,
                     in_stack_ffffffffffffffe0);
  if (extraout_RAX != 0) {
    (**(code **)(extraout_RAX + 0x18))(extraout_RBX);
  }
  return;
}



void net_url_EscapeError_Error(net_url_EscapeError e,string ~r0)

{
  __uint8 buf;
  string a1;
  string s;
  string ~r0_00;
  __uint8 ~r0_01;
  uint8 quote;
  uint8 *ptr;
  int cap;
  int in_RBX;
  int n;
  void *in_RDI;
  void *extraout_RDI;
  int unaff_R14;
  string in_stack_ffffffffffffffa0;
  uint8 *in_stack_ffffffffffffffb0;
  uint8 *in_stack_ffffffffffffffb8;
  uint8 *in_stack_ffffffffffffffc0;
  int in_stack_ffffffffffffffc8;
  int in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  cap = (in_RBX * 3) / 2;
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,0,cap,in_RDI);
  buf.cap = (int)in_stack_ffffffffffffffb0;
  buf.array = in_stack_ffffffffffffffa0.str;
  buf.len = in_stack_ffffffffffffffa0.len;
  s.len = (int)in_stack_ffffffffffffffc0;
  s.str = in_stack_ffffffffffffffb8;
  ~r0_01.len = cap;
  ~r0_01.array = (uint8 *)in_stack_ffffffffffffffc8;
  ~r0_01.cap = in_stack_ffffffffffffffd8;
  strconv_appendQuotedWith(buf,s,quote,false,SUB81(cap,0),~r0_01);
  runtime_slicebytetostring
            ((runtime_tmpBuf *)&stack0xffffffffffffffd8,ptr,n,in_stack_ffffffffffffffa0);
  a1.len = (int)in_stack_ffffffffffffffb8;
  a1.str = in_stack_ffffffffffffffb0;
  ~r0_00.len = in_stack_ffffffffffffffc8;
  ~r0_00.str = in_stack_ffffffffffffffc0;
  runtime_concatstring2((runtime_tmpBuf *)0x0,in_stack_ffffffffffffffa0,a1,~r0_00);
  return;
}



void net_url_InvalidHostError_Error(net_url_InvalidHostError e,string ~r0)

{
  __uint8 buf;
  string a1;
  string s;
  string a2;
  __uint8 ~r0_00;
  string ~r0_01;
  uint8 quote;
  uint8 *ptr;
  int cap;
  int in_RBX;
  int n;
  void *in_RDI;
  void *extraout_RDI;
  int unaff_R14;
  string in_stack_ffffffffffffff98;
  uint8 *in_stack_ffffffffffffffa8;
  uint8 *in_stack_ffffffffffffffb0;
  uint8 *in_stack_ffffffffffffffb8;
  int in_stack_ffffffffffffffc0;
  uint8 *in_stack_ffffffffffffffc8;
  uint8 local_28 [32];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  cap = (in_RBX * 3) / 2;
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,0,cap,in_RDI);
  buf.cap = (int)in_stack_ffffffffffffffa8;
  buf.array = in_stack_ffffffffffffff98.str;
  buf.len = in_stack_ffffffffffffff98.len;
  s.len = (int)in_stack_ffffffffffffffb8;
  s.str = in_stack_ffffffffffffffb0;
  ~r0_00.len = (int)in_stack_ffffffffffffffc8;
  ~r0_00.array = (uint8 *)in_stack_ffffffffffffffc0;
  ~r0_00.cap = cap;
  strconv_appendQuotedWith(buf,s,quote,false,SUB81(cap,0),~r0_00);
  runtime_slicebytetostring(&local_28,ptr,n,in_stack_ffffffffffffff98);
  a1.len = (int)in_stack_ffffffffffffffb0;
  a1.str = in_stack_ffffffffffffffa8;
  a2.len = in_stack_ffffffffffffffc0;
  a2.str = in_stack_ffffffffffffffb8;
  ~r0_01.len = cap;
  ~r0_01.str = in_stack_ffffffffffffffc8;
  runtime_concatstring3((runtime_tmpBuf *)0x0,in_stack_ffffffffffffff98,a1,a2,~r0_01);
  return;
}



void net_url_shouldEscape(uint8 c,net_url_encoding mode,bool ~r0)

{
  if ((((byte)(c + 0x9f) < 0x1a) || ((byte)(c + 0xbf) < 0x1a)) || ((byte)(c - 0x30) < 10)) {
    return;
  }
  if ((mode == 3) || (mode == 4)) {
    if (c < 0x2d) {
      if ((((byte)(c - 0x21) < 2) || (c == 0x24)) || (0x25 < c)) {
        return;
      }
    }
    else {
      if ((byte)(c - 0x3a) < 5) {
        return;
      }
      if (c == 0x5b) {
        return;
      }
      if (c == 0x5d) {
        return;
      }
    }
  }
  if (c < 0x30) {
    if (c < 0x27) {
      if ((c != 0x24) && (c != 0x26)) goto LAB_0068030b;
    }
    else if (1 < (byte)(c - 0x2b)) {
      if ((byte)(c - 0x2d) < 2) {
        return;
      }
      if (c != 0x2f) goto LAB_0068030b;
    }
  }
  else if (c < 0x3e) {
    if ((1 < (byte)(c - 0x3a)) && (c != 0x3d)) goto LAB_0068030b;
  }
  else if (1 < (byte)(c - 0x3f)) {
    if (c == 0x5f) {
      return;
    }
    if (c == 0x7e) {
      return;
    }
    goto LAB_0068030b;
  }
  if (mode < 3) {
    if (mode == 1) {
      return;
    }
    if (mode == 2) {
      return;
    }
  }
  else {
    if (mode == 5) {
      return;
    }
    if (mode == 6) {
      return;
    }
    if (mode == 7) {
      return;
    }
  }
LAB_0068030b:
  if ((mode == 7) && ((c == 0x21 || ((byte)(c - 0x28) < 3)))) {
    return;
  }
  return;
}



void net_url_unescape(string s,net_url_encoding mode,string ~r0,error ~r1)

{
  void *x;
  uint8 uVar1;
  runtime_slice ~r0_00;
  runtime_slice ~r0_01;
  runtime_slice ~r0_02;
  runtime_slice ~r0_03;
  char extraout_AL;
  char extraout_AL_00;
  uint8 *extraout_RAX;
  uint8 *puVar2;
  uint8 *extraout_RAX_00;
  uint8 *extraout_RAX_01;
  uint8 *extraout_RAX_02;
  int in_RCX;
  int extraout_RCX;
  int extraout_RCX_00;
  int extraout_RCX_01;
  int extraout_RCX_02;
  uint in_RBX;
  uint extraout_RBX;
  uint extraout_RBX_00;
  uint extraout_RBX_01;
  uint extraout_RBX_02;
  int iVar3;
  char cVar4;
  int i_1;
  uint uVar5;
  byte bVar6;
  byte bVar7;
  byte bVar8;
  sdword sVar9;
  byte bVar10;
  uint8 v;
  int unaff_R14;
  bool bVar11;
  undefined in_XMM15 [16];
  interface___ in_stack_ffffffffffffff68;
  int in_stack_ffffffffffffff78;
  bool hasPlus;
  int n;
  int i;
  strings_Builder t;
  
  while (&t.buf.len <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar5 = 0;
  iVar3 = 0;
  bVar11 = false;
  while( true ) {
    while( true ) {
      if ((int)in_RBX <= (int)uVar5) {
        if ((iVar3 == 0) && (!bVar11)) {
          return;
        }
        t._0_16_ = in_XMM15;
        t.buf._8_16_ = in_XMM15;
        strings___Builder__Grow(&t,in_RBX + iVar3 * -2);
        i_1 = 0;
        do {
          if ((int)in_RBX <= i_1) {
            if ((uint)t.buf.len <= (uint)-(int)t.buf.array) {
              return;
            }
            if (t.buf.array != (uint8 *)0x0) {
                    // WARNING: Subroutine does not return
              runtime_panicunsafestringlen();
            }
                    // WARNING: Subroutine does not return
            runtime_panicunsafestringnilptr();
          }
          if (in_RBX <= (uint)i_1) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          uVar1 = *(uint8 *)(mode + i_1);
          if (uVar1 == 0x25) {
            if (in_RBX <= i_1 + 1U) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            bVar8 = *(byte *)(mode + 1 + i_1);
            sVar9 = bVar8 - 0x30;
            if (9 < (byte)sVar9) {
              if ((byte)(bVar8 + 0x9f) < 6) {
                sVar9 = bVar8 - 0x57;
              }
              else if ((byte)(bVar8 + 0xbf) < 6) {
                sVar9 = bVar8 - 0x37;
              }
              else {
                sVar9 = 0;
              }
            }
            if (in_RBX <= i_1 + 2U) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            cVar4 = *(char *)(mode + 2 + i_1);
            bVar8 = cVar4 - 0x30;
            if (9 < bVar8) {
              if ((byte)(cVar4 + 0x9fU) < 6) {
                bVar8 = cVar4 + 0xa9;
              }
              else if ((byte)(cVar4 + 0xbfU) < 6) {
                bVar8 = cVar4 - 0x37;
              }
              else {
                bVar8 = 0;
              }
            }
            if (t.addr == (strings_Builder *)0x0) {
              t.addr = &t;
            }
            else if (t.addr != &t) {
                    // WARNING: Subroutine does not return
              runtime_gopanic(in_stack_ffffffffffffff68);
            }
            uVar5 = t.buf.len + 1;
            puVar2 = t.buf.array;
            if ((uint)t.buf.cap < uVar5) {
              ~r0_00.cap = in_stack_ffffffffffffff78;
              ~r0_00.array = in_stack_ffffffffffffff68._type;
              ~r0_00.len = (int)in_stack_ffffffffffffff68.data;
              runtime_growslice(t.buf.array,uVar5,t.buf.cap,1,(internal_abi_Type *)&DAT_00807920,
                                ~r0_00);
              t.buf.array = extraout_RAX;
              puVar2 = extraout_RAX;
              uVar5 = extraout_RBX;
              t.buf.cap = extraout_RCX;
            }
            t.buf.len = uVar5;
            puVar2[uVar5 - 1] = bVar8 | (byte)(sVar9 << 4);
            i_1 = i_1 + 2U;
          }
          else if (uVar1 == 0x2b) {
            if (in_RCX == 6) {
              if (t.addr == (strings_Builder *)0x0) {
                t.addr = &t;
              }
              else if (t.addr != &t) {
                    // WARNING: Subroutine does not return
                runtime_gopanic(in_stack_ffffffffffffff68);
              }
              uVar5 = t.buf.len + 1;
              puVar2 = t.buf.array;
              if ((uint)t.buf.cap < uVar5) {
                ~r0_01.cap = in_stack_ffffffffffffff78;
                ~r0_01.array = in_stack_ffffffffffffff68._type;
                ~r0_01.len = (int)in_stack_ffffffffffffff68.data;
                runtime_growslice(t.buf.array,uVar5,t.buf.cap,1,(internal_abi_Type *)&DAT_00807920,
                                  ~r0_01);
                t.buf.array = extraout_RAX_00;
                uVar5 = extraout_RBX_00;
                puVar2 = extraout_RAX_00;
                t.buf.cap = extraout_RCX_00;
              }
              t.buf.len = uVar5;
              puVar2[uVar5 - 1] = 0x20;
            }
            else {
              if (t.addr == (strings_Builder *)0x0) {
                t.addr = &t;
              }
              else if (t.addr != &t) {
                    // WARNING: Subroutine does not return
                runtime_gopanic(in_stack_ffffffffffffff68);
              }
              uVar5 = t.buf.len + 1;
              puVar2 = t.buf.array;
              if ((uint)t.buf.cap < uVar5) {
                ~r0_02.cap = in_stack_ffffffffffffff78;
                ~r0_02.array = in_stack_ffffffffffffff68._type;
                ~r0_02.len = (int)in_stack_ffffffffffffff68.data;
                runtime_growslice(t.buf.array,uVar5,t.buf.cap,1,(internal_abi_Type *)&DAT_00807920,
                                  ~r0_02);
                t.buf.array = extraout_RAX_01;
                uVar5 = extraout_RBX_01;
                puVar2 = extraout_RAX_01;
                t.buf.cap = extraout_RCX_01;
              }
              t.buf.len = uVar5;
              puVar2[uVar5 - 1] = 0x2b;
            }
          }
          else {
            if (t.addr == (strings_Builder *)0x0) {
              t.addr = &t;
            }
            else if (t.addr != &t) {
                    // WARNING: Subroutine does not return
              runtime_gopanic(in_stack_ffffffffffffff68);
            }
            uVar5 = t.buf.len + 1;
            puVar2 = t.buf.array;
            if ((uint)t.buf.cap < uVar5) {
              ~r0_03.cap = in_stack_ffffffffffffff78;
              ~r0_03.array = in_stack_ffffffffffffff68._type;
              ~r0_03.len = (int)in_stack_ffffffffffffff68.data;
              runtime_growslice(t.buf.array,uVar5,t.buf.cap,1,(internal_abi_Type *)&DAT_00807920,
                                ~r0_03);
              t.buf.array = extraout_RAX_02;
              uVar5 = extraout_RBX_02;
              puVar2 = extraout_RAX_02;
              t.buf.cap = extraout_RCX_02;
            }
            t.buf.len = uVar5;
            puVar2[uVar5 - 1] = uVar1;
          }
          i_1 = i_1 + 1;
        } while( true );
      }
      if (in_RBX <= uVar5) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      bVar8 = *(byte *)(mode + uVar5);
      x = (void *)(mode + uVar5);
      if (bVar8 == 0x25) break;
      if (bVar8 == 0x2b) {
        uVar5 = uVar5 + 1;
        bVar11 = in_RCX == 6;
      }
      else {
        if ((in_RCX == 3) || (in_RCX == 4)) {
          if (bVar8 < 0x80) {
            net_url_shouldEscape(bVar8,in_RCX,SUB81(in_RCX,0));
            cVar4 = extraout_AL_00;
          }
          else {
            cVar4 = '\0';
          }
        }
        else {
          cVar4 = '\0';
        }
        if (cVar4 != '\0') {
          if (uVar5 <= uVar5 + 1) {
            runtime_convTstring((string)in_stack_ffffffffffffff68,x);
            return;
          }
                    // WARNING: Subroutine does not return
          runtime_panicSliceB();
        }
        uVar5 = uVar5 + 1;
      }
    }
    if ((int)in_RBX <= (int)(uVar5 + 2)) break;
    if (in_RBX <= uVar5 + 1) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    bVar8 = *(byte *)(mode + 1 + uVar5);
    sVar9 = bVar8 - 0x30;
    bVar6 = (byte)sVar9;
    if (((9 < bVar6) && (5 < (byte)(bVar8 + 0x9f))) && (5 < (byte)(bVar8 + 0xbf))) break;
    if (in_RBX <= uVar5 + 2) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    cVar4 = *(char *)(mode + 2 + uVar5);
    bVar10 = cVar4 - 0x30;
    if (((9 < bVar10) && (5 < (byte)(cVar4 + 0x9fU))) && (5 < (byte)(cVar4 + 0xbfU))) break;
    if (in_RCX == 3) {
      bVar7 = bVar6;
      if (9 < bVar6) {
        if ((byte)(bVar8 + 0x9f) < 6) {
          bVar7 = bVar8 + 0xa9;
        }
        else if ((byte)(bVar8 + 0xbf) < 6) {
          bVar7 = bVar8 - 0x37;
        }
        else {
          bVar7 = 0;
        }
      }
      if (bVar7 < 8) {
        if (in_RBX < uVar5 + 3) {
                    // WARNING: Subroutine does not return
          runtime_panicSliceAlen();
        }
        if (uVar5 + 3 < uVar5) {
                    // WARNING: Subroutine does not return
          runtime_panicSliceB();
        }
        if ((*(short *)(mode + uVar5) != 0x3225) || (cVar4 != '5')) {
          runtime_convTstring((string)in_stack_ffffffffffffff68,x);
          return;
        }
      }
    }
    if (in_RCX == 4) {
      if (9 < bVar6) {
        if ((byte)(bVar8 + 0x9f) < 6) {
          sVar9 = bVar8 - 0x57;
        }
        else if ((byte)(bVar8 + 0xbf) < 6) {
          sVar9 = bVar8 - 0x37;
        }
        else {
          sVar9 = 0;
        }
      }
      if (9 < bVar10) {
        if ((byte)(cVar4 + 0x9fU) < 6) {
          bVar10 = cVar4 + 0xa9;
        }
        else if ((byte)(cVar4 + 0xbfU) < 6) {
          bVar10 = cVar4 - 0x37;
        }
        else {
          bVar10 = 0;
        }
      }
      bVar10 = bVar10 | (byte)(sVar9 << 4);
      if (in_RBX < uVar5 + 3) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceAlen();
      }
      if (uVar5 + 3 < uVar5) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      if ((*(short *)(mode + uVar5) == 0x3225) && (cVar4 == '5')) {
        cVar4 = '\0';
      }
      else if (bVar10 == 0x20) {
        cVar4 = '\0';
      }
      else {
        net_url_shouldEscape(bVar10,3,SUB81(in_RCX,0));
        cVar4 = extraout_AL;
      }
      if (cVar4 != '\0') {
        runtime_convTstring((string)in_stack_ffffffffffffff68,x);
        return;
      }
    }
    iVar3 = iVar3 + 1;
    uVar5 = uVar5 + 3;
  }
  runtime_convTstring((string)in_stack_ffffffffffffff68,
                      (void *)(mode + (uVar5 & (int)-(in_RBX - uVar5) >> 0x3f)));
  return;
}



void net_url_escape(string s,net_url_encoding mode,string ~r0)

{
  uint len;
  uint8 uVar1;
  char extraout_AL;
  char extraout_AL_00;
  uint8 *extraout_RAX;
  net_url_encoding in_RCX;
  int i_1;
  int iVar2;
  uint8 *puVar3;
  size_t in_RBX;
  uint8 c;
  int iVar4;
  int required;
  void *~r0_00;
  uint uVar5;
  uint8 c_1;
  int unaff_R14;
  string in_stack_ffffffffffffff60;
  int spaceCount;
  int j;
  int i_2;
  int i;
  int hexCount;
  uint8 local_50 [48];
  undefined local_20 [16];
  uint8 *local_10;
  
  while (local_20 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar4 = 0;
  ~r0_00 = (void *)0x0;
  for (iVar2 = 0; iVar2 < (int)in_RBX; iVar2 = iVar2 + 1) {
    uVar1 = *(uint8 *)(mode + iVar2);
    net_url_shouldEscape(uVar1,in_RCX,SUB81(in_RCX,0));
    if (extraout_AL != '\0') {
      if ((uVar1 == 0x20) && (in_RCX == 6)) {
        iVar4 = iVar4 + 1;
      }
      else {
        ~r0_00 = (void *)((int)~r0_00 + 1);
      }
    }
  }
  if ((iVar4 == 0) && (~r0_00 == (void *)0x0)) {
    return;
  }
  len = in_RBX + (int)~r0_00 * 2;
  if ((int)len < 0x41) {
    if (0x40 < len) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAlen();
    }
    puVar3 = local_50;
  }
  else {
    runtime_makeslice((internal_abi_Type *)&DAT_00807920,len,len,~r0_00);
    puVar3 = extraout_RAX;
  }
  local_10 = puVar3;
  if (~r0_00 != (void *)0x0) {
    iVar2 = 0;
    uVar5 = 0;
    do {
      if ((int)in_RBX <= iVar2) {
        runtime_slicebytetostring((runtime_tmpBuf *)0x0,puVar3,len,in_stack_ffffffffffffff60);
        return;
      }
      uVar1 = *(uint8 *)(mode + iVar2);
      if ((uVar1 == 0x20) && (in_RCX == 6)) {
        if (len <= uVar5) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        puVar3[uVar5] = 0x2b;
        uVar5 = uVar5 + 1;
      }
      else {
        net_url_shouldEscape(uVar1,in_RCX,SUB81(in_RCX,0));
        puVar3 = local_10;
        if (extraout_AL_00 == '\0') {
          if (len <= uVar5) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          local_10[uVar5] = *(uint8 *)(mode + iVar2);
          uVar5 = uVar5 + 1;
        }
        else {
          if (len <= uVar5) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          local_10[uVar5] = 0x25;
          if (len <= uVar5 + 1) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          local_10[uVar5 + 1] =
               "goal , cons/mark  maxTrigger= pages/byte\n s.sweepgen= allocCount end tracegc\ntimer_deletens} value: {}, want {r1= [recovered]bad recoverybad g statusentersyscallwirep: p->m=) p->status=releasep: m= sysmonwait= preemptoff=cas64 failedGOTRACEBACK= m->gsignal=-byte limit\nruntime: sp=abi mismatchillegal seekinvalid slothost is downnot pollable<unknown:%d>Sfixed32KindSfixed64Kindmessage_typejava_packageoptimize_forswift_prefixruby_packagedebug_redactdouble_valuestring_valueverificationis_extension has no name has no typereflect.CopyOUT_OF_RANGENormalSocketgrpc-messageContent-Typegrpc-timeoutGrpc-MessageAddr: \'%s\', Cookie.Valuemax-forwardshttp2debug=1http2debug=2status code Multi-StatusNot ModifiedUnauthorizedI\'m a teapotNot ExtendedPUSH_PROMISECONTINUATION152587890625762939453125Cypro_MinoanMeetei_MayekPahawh_HmongSora_SompengSyloti_NagriRCodeSuccessRCodeRefusedprotobuf_keyprotobuf_val (sensitive)grpc_config=ECDSA-SHA256ECDSA-SHA384ECDSA-SHA512SSL_CERT_DIRTYPE_UNKNOWNempty objectMime-VersionX-ImforwardsX-Powered-By/dev/urandomautocompleteFieldNumbersSERIALNUMBERinvalid baseInstAltMatchunexpected )altmatch -> anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen..." /* TRUNCATED STRING LITERAL */
               [(uVar1 >> 4) + 0x1f54];
          if (len <= uVar5 + 2) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          local_10[uVar5 + 2] =
               "goal , cons/mark  maxTrigger= pages/byte\n s.sweepgen= allocCount end tracegc\ntimer_deletens} value: {}, want {r1= [recovered]bad recoverybad g statusentersyscallwirep: p->m=) p->status=releasep: m= sysmonwait= preemptoff=cas64 failedGOTRACEBACK= m->gsignal=-byte limit\nruntime: sp=abi mismatchillegal seekinvalid slothost is downnot pollable<unknown:%d>Sfixed32KindSfixed64Kindmessage_typejava_packageoptimize_forswift_prefixruby_packagedebug_redactdouble_valuestring_valueverificationis_extension has no name has no typereflect.CopyOUT_OF_RANGENormalSocketgrpc-messageContent-Typegrpc-timeoutGrpc-MessageAddr: \'%s\', Cookie.Valuemax-forwardshttp2debug=1http2debug=2status code Multi-StatusNot ModifiedUnauthorizedI\'m a teapotNot ExtendedPUSH_PROMISECONTINUATION152587890625762939453125Cypro_MinoanMeetei_MayekPahawh_HmongSora_SompengSyloti_NagriRCodeSuccessRCodeRefusedprotobuf_keyprotobuf_val (sensitive)grpc_config=ECDSA-SHA256ECDSA-SHA384ECDSA-SHA512SSL_CERT_DIRTYPE_UNKNOWNempty objectMime-VersionX-ImforwardsX-Powered-By/dev/urandomautocompleteFieldNumbersSERIALNUMBERinvalid baseInstAltMatchunexpected )altmatch -> anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen..." /* TRUNCATED STRING LITERAL */
               [(uVar1 & 0xf) + 0x1f54];
          uVar5 = uVar5 + 3;
        }
      }
      iVar2 = iVar2 + 1;
    } while( true );
  }
  uVar5 = len;
  if ((int)in_RBX < (int)len) {
    uVar5 = in_RBX;
  }
  if ((uint8 *)mode != puVar3) {
    runtime_memmove(puVar3,(void *)mode,uVar5);
  }
  puVar3 = local_10;
  i_1 = 0;
  do {
    if ((int)in_RBX <= i_1) {
      runtime_slicebytetostring((runtime_tmpBuf *)0x0,puVar3,len,in_stack_ffffffffffffff60);
      return;
    }
    if (*(char *)(mode + i_1) == ' ') {
      if (len <= (uint)i_1) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      puVar3[i_1] = 0x2b;
    }
    i_1 = i_1 + 1;
  } while( true );
}



void net_url___Userinfo__Username(net_url_Userinfo *u,string ~r0)

{
  if (u != (net_url_Userinfo *)0x0) {
    return;
  }
  return;
}



void net_url___Userinfo__Password(net_url_Userinfo *u,string ~r0,bool ~r1)

{
  if (u != (net_url_Userinfo *)0x0) {
    return;
  }
  return;
}



void net_url___Userinfo__String(net_url_Userinfo *u,string ~r0)

{
  string ~r0_00;
  int extraout_RBX;
  int unaff_R14;
  string in_stack_ffffffffffffffb0;
  string in_stack_ffffffffffffffc0;
  string in_stack_ffffffffffffffd0;
  uint8 *in_stack_ffffffffffffffe0;
  int iVar1;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (u != (net_url_Userinfo *)0x0) {
    net_url_escape(in_stack_ffffffffffffffb0,(net_url_encoding)(u->username).str,
                   in_stack_ffffffffffffffc0);
    if (u->passwordSet != false) {
      iVar1 = extraout_RBX;
      net_url_escape(in_stack_ffffffffffffffb0,(net_url_encoding)(u->password).str,
                     in_stack_ffffffffffffffc0);
      ~r0_00.len = iVar1;
      ~r0_00.str = in_stack_ffffffffffffffe0;
      runtime_concatstring3
                ((runtime_tmpBuf *)0x0,in_stack_ffffffffffffffb0,in_stack_ffffffffffffffc0,
                 in_stack_ffffffffffffffd0,~r0_00);
    }
    return;
  }
  return;
}



void net_url_getScheme(string rawURL,string scheme,string path,error err)

{
  char cVar1;
  int in_RAX;
  undefined8 *extraout_RAX;
  int i;
  uint8 c;
  void *in_RBX;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  i = 0;
  do {
    if ((int)in_RBX <= i) {
      return;
    }
    cVar1 = *(char *)(in_RAX + i);
    if ((0x19 < (byte)(cVar1 + 0x9fU)) && (0x19 < (byte)(cVar1 + 0xbfU))) {
      if ((9 < (byte)(cVar1 - 0x30U)) && (((cVar1 != '+' && (cVar1 != '-')) && (cVar1 != '.')))) {
        if (cVar1 != ':') {
          return;
        }
        if (i == 0) {
          runtime_newobject((internal_abi_Type *)&DAT_0083e560,in_RBX);
          extraout_RAX[1] = 0x17;
          *extraout_RAX = &DAT_008babe2;
          return;
        }
        return;
      }
      if (i == 0) {
        return;
      }
    }
    i = i + 1;
  } while( true );
}



void net_url_Parse(string rawURL,net_url_URL *~r0,error ~r1)

{
  string before;
  string after;
  undefined8 extraout_RAX;
  net_url_URL *u;
  net_url_URL *url;
  int extraout_RAX_00;
  undefined8 *extraout_RAX_01;
  undefined8 *extraout_RAX_02;
  undefined8 *extraout_RAX_03;
  undefined8 *puVar1;
  undefined8 *extraout_RAX_04;
  undefined8 *extraout_RAX_05;
  undefined8 *extraout_RAX_06;
  undefined8 extraout_RCX;
  undefined8 in_RBX;
  net_url_URL *~r0_00;
  void *~r0_01;
  void *~r0_02;
  int extraout_RDI;
  net_url_URL **extraout_R11;
  void **extraout_R11_00;
  undefined8 *extraout_R11_01;
  undefined8 *extraout_R11_02;
  int unaff_R14;
  string in_stack_ffffffffffffffa0;
  string in_stack_ffffffffffffffb0;
  uint8 *in_stack_ffffffffffffffc0;
  net_url_URL *pnVar2;
  int in_stack_ffffffffffffffc8;
  int iVar3;
  uint8 *in_stack_ffffffffffffffd0;
  void *pvVar4;
  int in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  before.len = in_stack_ffffffffffffffc8;
  before.str = in_stack_ffffffffffffffc0;
  after.len = in_stack_ffffffffffffffd8;
  after.str = in_stack_ffffffffffffffd0;
  strings_Cut(in_stack_ffffffffffffffa0,in_stack_ffffffffffffffb0,before,after,SUB81(~r0,0));
  pnVar2 = ~r0_00;
  iVar3 = extraout_RDI;
  net_url_parse(in_stack_ffffffffffffffa0,SUB81(extraout_RAX,0),~r0_00,
                (error)in_stack_ffffffffffffffb0);
  if (~r0_01 != (void *)0x0) {
    pvVar4 = ~r0_01;
    runtime_newobject((internal_abi_Type *)&DAT_0085fd40,~r0_01);
    extraout_RAX_04[1] = 5;
    *extraout_RAX_04 = &DAT_008aedfe;
    extraout_RAX_04[3] = pnVar2;
    puVar1 = extraout_RAX_04;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_01 = extraout_RAX;
      puVar1 = extraout_RAX_05;
    }
    puVar1[2] = extraout_RAX;
    puVar1[4] = pvVar4;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_02 = extraout_RCX;
      puVar1 = extraout_RAX_06;
    }
    puVar1[5] = extraout_RCX;
    return;
  }
  if (iVar3 == 0) {
    return;
  }
  net_url___URL__setFragment(u,in_stack_ffffffffffffffa0,(error)in_stack_ffffffffffffffb0);
  if (extraout_RAX_00 == 0) {
    return;
  }
  iVar3 = extraout_RAX_00;
  runtime_newobject((internal_abi_Type *)&DAT_0085fd40,~r0_02);
  extraout_RAX_01[1] = 5;
  *extraout_RAX_01 = &DAT_008aedfe;
  extraout_RAX_01[3] = in_RBX;
  puVar1 = extraout_RAX_01;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11 = ~r0;
    puVar1 = extraout_RAX_02;
  }
  puVar1[2] = ~r0;
  puVar1[4] = iVar3;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11_00 = ~r0_02;
    puVar1 = extraout_RAX_03;
  }
  puVar1[5] = ~r0_02;
  return;
}



void net_url_parse(string rawURL,bool viaRequest,net_url_URL *~r0,error ~r1)

{
  string path;
  string before;
  string before_00;
  error err;
  error err_00;
  string after;
  string after_00;
  undefined7 in_register_00000001;
  undefined8 *extraout_RAX;
  undefined8 *extraout_RAX_00;
  net_url_URL *extraout_RAX_01;
  net_url_URL *url;
  char extraout_AL;
  byte extraout_AL_00;
  internal_abi_InterfaceType *extraout_RAX_02;
  internal_abi_InterfaceType *extraout_RAX_03;
  internal_abi_InterfaceType *extraout_RAX_04;
  internal_abi_InterfaceType *extraout_RAX_05;
  internal_abi_InterfaceType *piVar1;
  int extraout_RAX_06;
  short *extraout_RAX_07;
  short *extraout_RAX_08;
  short *extraout_RAX_09;
  int ~r0_00;
  int extraout_RAX_10;
  short *~r0_01;
  net_url_Userinfo *pnVar2;
  uint8 *extraout_RAX_11;
  int i;
  net_url_Userinfo *extraout_RAX_12;
  net_url_Userinfo *extraout_RAX_13;
  int extraout_RAX_14;
  undefined8 *extraout_RAX_15;
  undefined8 *extraout_RAX_16;
  char in_CL;
  byte bVar3;
  short *extraout_RCX;
  short *extraout_RCX_00;
  net_url_URL *extraout_RCX_01;
  net_url_URL *u;
  uint8 *extraout_RCX_02;
  uint8 *extraout_RCX_03;
  uint8 *puVar4;
  runtime_itab *prVar5;
  int extraout_RCX_04;
  int extraout_RCX_05;
  int iVar6;
  int i_1;
  net_url_URL *pnVar7;
  internal_abi_Type *extraout_RBX;
  internal_abi_Type *extraout_RBX_00;
  uint8 *extraout_RBX_01;
  uint8 *extraout_RBX_02;
  uint8 *~r0_02;
  void *~r0_03;
  uint8 *extraout_RBX_03;
  uint8 *extraout_RBX_04;
  uint8 *extraout_RBX_05;
  uint8 b;
  int extraout_RSI;
  int extraout_RSI_00;
  uint8 *extraout_RDI;
  uint8 *extraout_RDI_00;
  int extraout_RDI_01;
  int extraout_RDI_02;
  int extraout_RDI_03;
  int extraout_RDI_04;
  int iVar8;
  internal_abi_InterfaceType **extraout_R11;
  internal_abi_InterfaceType **extraout_R11_00;
  uint8 **extraout_R11_01;
  short **extraout_R11_02;
  net_url_Userinfo **extraout_R11_03;
  uint8 **extraout_R11_04;
  int unaff_R14;
  bool bVar9;
  string in_stack_ffffffffffffffb0;
  string in_stack_ffffffffffffffc0;
  uint8 *in_stack_ffffffffffffffd0;
  int in_stack_ffffffffffffffd8;
  void *in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  for (i_1 = 0; i_1 < (int)~r0; i_1 = i_1 + 1) {
    bVar3 = ((char *)CONCAT71(in_register_00000001,viaRequest))[i_1];
    if ((bVar3 < 0x20) || (bVar3 == 0x7f)) {
      runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0);
