typedef struct []google.golang.org/grpc/internal/resolver/dns.rawChoice []google.golang.org/grpc/internal/resolver/dns.rawChoice, *P[]google.golang.org/grpc/internal/resolver/dns.rawChoice;

typedef struct google.golang.org/grpc/internal/resolver/dns.rawChoice google.golang.org/grpc/internal/resolver/dns.rawChoice, *Pgoogle.golang.org/grpc/internal/resolver/dns.rawChoice;

struct google.golang.org/grpc/internal/resolver/dns.rawChoice {
    struct []string *ClientLanguage;
    int *Percentage;
    struct []string *ClientHostName;
    struct encoding/json.RawMessage *ServiceConfig;
};

struct []google.golang.org/grpc/internal/resolver/dns.rawChoice {
    struct google.golang.org/grpc/internal/resolver/dns.rawChoice *array;
    int len;
    int cap;
};

typedef uint64 crypto/internal/nistec/fiat.p384NonMontgomeryDomainFieldElement[6];

typedef struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.ServerHeader google.golang.org/grpc/binarylog/grpc_binarylog_v1.ServerHeader, *Pgoogle.golang.org/grpc/binarylog/grpc_binarylog_v1.ServerHeader;

struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.ServerHeader {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.Metadata *Metadata;
};

typedef struct google.golang.org/grpc.payload google.golang.org/grpc.payload, *Pgoogle.golang.org/grpc.payload;

struct google.golang.org/grpc.payload {
    bool sent;
    interface_{} msg;
};

typedef struct noalg.struct_{_F_uintptr;_X0_int64_} noalg.struct_{_F_uintptr;_X0_int64_}, *Pnoalg.struct_{_F_uintptr;_X0_int64_};

struct noalg.struct_{_F_uintptr;_X0_int64_} { // Original name: noalg.struct { F uintptr; X0 int64 }
    uintptr F;
    int64 X0;
};

typedef struct google.golang.org/protobuf/proto.UnmarshalOptions google.golang.org/protobuf/proto.UnmarshalOptions, *Pgoogle.golang.org/protobuf/proto.UnmarshalOptions;

struct google.golang.org/protobuf/proto.UnmarshalOptions {
    struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals NoUnkeyedLiterals;
    bool Merge;
    bool AllowPartial;
    bool DiscardUnknown;
    interface_{_FindExtensionByName(google.golang.org/protobuf/reflect/protoreflect.FullName)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error);_FindExtensionByNumber(google.golang.org/protobuf/reflect/protoreflect.FullName,_google.golang.org/protobuf/encoding/protowire.Number)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error)_} Resolver;
    int RecursionLimit;
};

typedef struct net.timeoutError net.timeoutError, *Pnet.timeoutError;

struct net.timeoutError {
};

typedef struct net.byPref net.byPref, *Pnet.byPref;

struct net.byPref {
    struct net.MX **array;
    int len;
    int cap;
};

typedef struct net/http/internal.FlushAfterChunkWriter net/http/internal.FlushAfterChunkWriter, *Pnet/http/internal.FlushAfterChunkWriter;

struct net/http/internal.FlushAfterChunkWriter {
    struct bufio.Writer *Writer;
};

typedef struct google.golang.org/protobuf/internal/impl.messageState google.golang.org/protobuf/internal/impl.messageState, *Pgoogle.golang.org/protobuf/internal/impl.messageState;

struct google.golang.org/protobuf/internal/impl.messageState {
    google.golang.org/protobuf/internal/pragma.DoNotCopy DoNotCopy;
    google.golang.org/protobuf/internal/pragma.DoNotCompare DoNotCompare;
    struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals NoUnkeyedLiterals;
    struct google.golang.org/protobuf/internal/impl.MessageInfo *atomicMessageInfo;
};

typedef struct golang.org/x/net/http2/hpack.undecodedString golang.org/x/net/http2/hpack.undecodedString, *Pgolang.org/x/net/http2/hpack.undecodedString;

struct golang.org/x/net/http2/hpack.undecodedString {
    bool isHuff;
    struct []uint8 b;
};

typedef struct text/template/parse.NumberNode text/template/parse.NumberNode, *Ptext/template/parse.NumberNode;

struct text/template/parse.NumberNode {
    text/template/parse.NodeType NodeType;
    text/template/parse.Pos Pos;
    struct text/template/parse.Tree *tr;
    bool IsInt;
    bool IsUint;
    bool IsFloat;
    bool IsComplex;
    int64 Int64;
    uint64 Uint64;
    float64 Float64;
    complex128 Complex128;
    struct string Text;
};

typedef struct noalg.map.iter[string]interface_{} noalg.map.iter[string]interface_{}, *Pnoalg.map.iter[string]interface_{};

struct noalg.map.iter[string]interface_{} { // Original name: noalg.map.iter[string]interface {}
    struct string *key;
    interface_{} *elem;
    void *t;
    struct noalg.map.hdr[string]interface_{} *h;
    struct noalg.map.bucket[string]interface_{} *buckets;
    struct noalg.map.bucket[string]interface_{} *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct hash<string,[2]int32> hash<string,[2]int32>, *Phash<string,[2]int32>;

struct hash<string,[2]int32> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,[2]int32> *buckets;
    struct bucket<string,[2]int32> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct struct_{_runtime.mcentral_runtime.mcentral;_runtime.pad_[24]uint8_} struct_{_runtime.mcentral_runtime.mcentral;_runtime.pad_[24]uint8_}, *Pstruct_{_runtime.mcentral_runtime.mcentral;_runtime.pad_[24]uint8_};

typedef struct runtime.mcentral runtime.mcentral, *Pruntime.mcentral;

struct runtime.mcentral {
    struct runtime/internal/sys.NotInHeap _;
    runtime.spanClass spanclass;
    struct runtime.spanSet partial[2];
    struct runtime.spanSet full[2];
};

struct struct_{_runtime.mcentral_runtime.mcentral;_runtime.pad_[24]uint8_} { // Original name: struct { runtime.mcentral runtime.mcentral; runtime.pad [24]uint8 }
    struct runtime.mcentral mcentral;
    uint8 pad[24];
};

typedef struct syscall.SockaddrInet4 syscall.SockaddrInet4, *Psyscall.SockaddrInet4;

struct syscall.SockaddrInet4 {
    int Port;
    uint8 Addr[4];
    struct syscall.RawSockaddrInet4 raw;
};

typedef struct hash<uint32,int32> *map[uint32]int32;

typedef struct runtime.activeSweep runtime.activeSweep, *Pruntime.activeSweep;

struct runtime.activeSweep {
    struct runtime/internal/atomic.Uint32 state;
};

typedef struct sync/atomic.Pointer[go.shape.struct_{_math/rand.src_math/rand.Source;_math/rand.s64_math/rand.Source64;_math/rand.readVal_int64;_math/rand.readPos_int8_}] sync/atomic.Pointer[go.shape.struct_{_math/rand.src_math/rand.Source;_math/rand.s64_math/rand.Source64;_math/rand.readVal_int64;_math/rand.readPos_int8_}], *Psync/atomic.Pointer[go.shape.struct_{_math/rand.src_math/rand.Source;_math/rand.s64_math/rand.Source64;_math/rand.readVal_int64;_math/rand.readPos_int8_}];

typedef struct go.shape.struct_{_math/rand.src_math/rand.Source;_math/rand.s64_math/rand.Source64;_math/rand.readVal_int64;_math/rand.readPos_int8_} go.shape.struct_{_math/rand.src_math/rand.Source;_math/rand.s64_math/rand.Source64;_math/rand.readVal_int64;_math/rand.readPos_int8_}, *Pgo.shape.struct_{_math/rand.src_math/rand.Source;_math/rand.s64_math/rand.Source64;_math/rand.readVal_int64;_math/rand.readPos_int8_};

struct go.shape.struct_{_math/rand.src_math/rand.Source;_math/rand.s64_math/rand.Source64;_math/rand.readVal_int64;_math/rand.readPos_int8_} { // Original name: go.shape.struct { math/rand.src math/rand.Source; math/rand.s64 math/rand.Source64; math/rand.readVal int64; math/rand.readPos int8 }
    math/rand.Source src;
    math/rand.Source64 s64;
    int64 readVal;
    int8 readPos;
};

struct sync/atomic.Pointer[go.shape.struct_{_math/rand.src_math/rand.Source;_math/rand.s64_math/rand.Source64;_math/rand.readVal_int64;_math/rand.readPos_int8_}] { // Original name: sync/atomic.Pointer[go.shape.struct { math/rand.src math/rand.Source; math/rand.s64 math/rand.Source64; math/rand.readVal int64; math/rand.readPos int8 }]
    struct sync/atomic.noCopy _;
    struct go.shape.struct_{_math/rand.src_math/rand.Source;_math/rand.s64_math/rand.Source64;_math/rand.readVal_int64;_math/rand.readPos_int8_} *_[0];
    void *v;
};

typedef struct runtime.iface google.golang.org/grpc/internal/balancerload.Parser;

typedef struct noalg.struct_{_F_uintptr;_X0_map[interface_{}]struct_{};_X1_interface_{}_} noalg.struct_{_F_uintptr;_X0_map[interface_{}]struct_{};_X1_interface_{}_}, *Pnoalg.struct_{_F_uintptr;_X0_map[interface_{}]struct_{};_X1_interface_{}_};

struct noalg.struct_{_F_uintptr;_X0_map[interface_{}]struct_{};_X1_interface_{}_} { // Original name: noalg.struct { F uintptr; X0 map[interface {}]struct {}; X1 interface {} }
    uintptr F;
    map[interface_{}]struct_{} X0;
    interface_{} X1;
};

typedef struct regexp/syntax.charGroup regexp/syntax.charGroup, *Pregexp/syntax.charGroup;

struct regexp/syntax.charGroup {
    int sign;
    struct []int32 class;
};

typedef struct noalg.map.iter[string]*flag.Flag noalg.map.iter[string]*flag.Flag, *Pnoalg.map.iter[string]*flag.Flag;

struct noalg.map.iter[string]*flag.Flag {
    struct string *key;
    struct flag.Flag **elem;
    void *t;
    struct noalg.map.hdr[string]*flag.Flag *h;
    struct noalg.map.bucket[string]*flag.Flag *buckets;
    struct noalg.map.bucket[string]*flag.Flag *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct text/template/parse.ChainNode text/template/parse.ChainNode, *Ptext/template/parse.ChainNode;

struct text/template/parse.ChainNode {
    text/template/parse.NodeType NodeType;
    text/template/parse.Pos Pos;
    struct text/template/parse.Tree *tr;
    text/template/parse.Node Node;
    struct []string Field;
};

typedef struct google.golang.org/protobuf/internal/impl.placeholderExtension google.golang.org/protobuf/internal/impl.placeholderExtension, *Pgoogle.golang.org/protobuf/internal/impl.placeholderExtension;

struct google.golang.org/protobuf/internal/impl.placeholderExtension {
    struct google.golang.org/protobuf/reflect/protoreflect.FullName name;
    google.golang.org/protobuf/encoding/protowire.Number number;
};

typedef struct runtime.forcegcstate runtime.forcegcstate, *Pruntime.forcegcstate;

struct runtime.forcegcstate {
    struct runtime.mutex lock;
    struct runtime.g *g;
    struct runtime/internal/atomic.Bool idle;
};

typedef struct noalg.struct_{_F_uintptr;_X0_reflect.Type;_X1_map[reflect.Type]*google.golang.org/protobuf/internal/impl.coderFieldInfo_} noalg.struct_{_F_uintptr;_X0_reflect.Type;_X1_map[reflect.Type]*google.golang.org/protobuf/internal/impl.coderFieldInfo_}, *Pnoalg.struct_{_F_uintptr;_X0_reflect.Type;_X1_map[reflect.Type]*google.golang.org/protobuf/internal/impl.coderFieldInfo_};

struct noalg.struct_{_F_uintptr;_X0_reflect.Type;_X1_map[reflect.Type]*google.golang.org/protobuf/internal/impl.coderFieldInfo_} { // Original name: noalg.struct { F uintptr; X0 reflect.Type; X1 map[reflect.Type]*google.golang.org/protobuf/internal/impl.coderFieldInfo }
    uintptr F;
    reflect.Type X0;
    map[reflect.Type]*google.golang.org/protobuf/internal/impl.coderFieldInfo X1;
};

typedef struct regexp/syntax.ranges regexp/syntax.ranges, *Pregexp/syntax.ranges;

struct regexp/syntax.ranges {
    struct []int32 *p;
};

typedef struct google.golang.org/grpc/internal/transport.outFlowControlSizeRequest google.golang.org/grpc/internal/transport.outFlowControlSizeRequest, *Pgoogle.golang.org/grpc/internal/transport.outFlowControlSizeRequest;

typedef struct hchan<uint32> *chan_uint32;

struct google.golang.org/grpc/internal/transport.outFlowControlSizeRequest {
    chan_uint32 resp;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Names_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Names_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Names_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Names_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/filedesc.Names }
    uintptr F;
    struct google.golang.org/protobuf/internal/filedesc.Names *X0;
};

typedef struct google.golang.org/grpc.EmptyCallOption google.golang.org/grpc.EmptyCallOption, *Pgoogle.golang.org/grpc.EmptyCallOption;

struct google.golang.org/grpc.EmptyCallOption {
};

typedef struct encoding/json.ptrEncoder encoding/json.ptrEncoder, *Pencoding/json.ptrEncoder;

struct encoding/json.ptrEncoder {
    void (**elemEnc)(struct encoding/json.encodeState *, struct reflect.Value, struct encoding/json.encOpts);
};

typedef struct syscall.SockaddrNetlink syscall.SockaddrNetlink, *Psyscall.SockaddrNetlink;

struct syscall.SockaddrNetlink {
    uint16 Family;
    uint16 Pad;
    uint32 Pid;
    uint32 Groups;
    struct syscall.RawSockaddrNetlink raw;
};

typedef struct encoding/asn1.tagAndLength encoding/asn1.tagAndLength, *Pencoding/asn1.tagAndLength;

struct encoding/asn1.tagAndLength {
    int class;
    int tag;
    int length;
    bool isCompound;
};

typedef struct google.golang.org/grpc.fmtStringer google.golang.org/grpc.fmtStringer, *Pgoogle.golang.org/grpc.fmtStringer;

struct google.golang.org/grpc.fmtStringer {
    struct string format;
    struct []interface_{} a;
};

typedef struct []unicode.foldPair []unicode.foldPair, *P[]unicode.foldPair;

struct []unicode.foldPair {
    struct unicode.foldPair *array;
    int len;
    int cap;
};

typedef struct runtime.consistentHeapStats runtime.consistentHeapStats, *Pruntime.consistentHeapStats;

struct runtime.consistentHeapStats {
    struct runtime.heapStatsDelta stats[3];
    struct runtime/internal/atomic.Uint32 gen;
    struct runtime.mutex noPLock;
};

typedef struct noalg.struct_{_F_uintptr;_R_*sync/atomic.Uint64_} noalg.struct_{_F_uintptr;_R_*sync/atomic.Uint64_}, *Pnoalg.struct_{_F_uintptr;_R_*sync/atomic.Uint64_};

struct noalg.struct_{_F_uintptr;_R_*sync/atomic.Uint64_} { // Original name: noalg.struct { F uintptr; R *sync/atomic.Uint64 }
    uintptr F;
    struct sync/atomic.Uint64 *R;
};

typedef struct google.golang.org/grpc/internal/transport.earlyAbortStream google.golang.org/grpc/internal/transport.earlyAbortStream, *Pgoogle.golang.org/grpc/internal/transport.earlyAbortStream;

struct google.golang.org/grpc/internal/transport.earlyAbortStream {
    uint32 httpStatus;
    uint32 streamID;
    struct string contentSubtype;
    struct google.golang.org/grpc/internal/status.Status *status;
    bool rst;
};

typedef struct runtime.stackObjectBuf runtime.stackObjectBuf, *Pruntime.stackObjectBuf;

typedef struct runtime.stackObjectBufHdr runtime.stackObjectBufHdr, *Pruntime.stackObjectBufHdr;

struct runtime.stackObjectBufHdr {
    struct runtime/internal/sys.NotInHeap _;
    struct runtime.workbufhdr workbufhdr;
    struct runtime.stackObjectBuf *next;
};

struct runtime.stackObjectBuf {
    struct runtime/internal/sys.NotInHeap _;
    struct runtime.stackObjectBufHdr stackObjectBufHdr;
    struct runtime.stackObject obj[63];
};

typedef struct noalg.struct_{_F_uintptr;_X0_*golang.org/x/net/http2/hpack.Decoder;_X1_func(golang.org/x/net/http2/hpack.HeaderField)_} noalg.struct_{_F_uintptr;_X0_*golang.org/x/net/http2/hpack.Decoder;_X1_func(golang.org/x/net/http2/hpack.HeaderField)_}, *Pnoalg.struct_{_F_uintptr;_X0_*golang.org/x/net/http2/hpack.Decoder;_X1_func(golang.org/x/net/http2/hpack.HeaderField)_};

struct noalg.struct_{_F_uintptr;_X0_*golang.org/x/net/http2/hpack.Decoder;_X1_func(golang.org/x/net/http2/hpack.HeaderField)_} { // Original name: noalg.struct { F uintptr; X0 *golang.org/x/net/http2/hpack.Decoder; X1 func(golang.org/x/net/http2/hpack.HeaderField) }
    uintptr F;
    struct golang.org/x/net/http2/hpack.Decoder *X0;
    void (**X1)(struct golang.org/x/net/http2/hpack.HeaderField);
};

typedef struct bucket<int,*sync.Pool> bucket<int,*sync.Pool>, *Pbucket<int,*sync.Pool>;

struct bucket<int,*sync.Pool> {
    uint8 tophash[8];
    int keys[8];
    struct sync.Pool *values[8];
    struct bucket<int,*sync.Pool> *overflow;
};

typedef struct []golang.org/x/text/unicode/norm.valueRange []golang.org/x/text/unicode/norm.valueRange, *P[]golang.org/x/text/unicode/norm.valueRange;

struct []golang.org/x/text/unicode/norm.valueRange {
    struct golang.org/x/text/unicode/norm.valueRange *array;
    int len;
    int cap;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Enums_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Enums_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Enums_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Enums_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/filedesc.Enums }
    uintptr F;
    struct google.golang.org/protobuf/internal/filedesc.Enums *X0;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.serverStream;_X1_*error;_X2_interface_{}_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.serverStream;_X1_*error;_X2_interface_{}_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.serverStream;_X1_*error;_X2_interface_{}_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.serverStream;_X1_*error;_X2_interface_{}_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc.serverStream; X1 *error; X2 interface {} }
    uintptr F;
    struct google.golang.org/grpc.serverStream *X0;
    error *X1;
    interface_{} X2;
};

typedef struct sync/atomic.Pointer[go.shape.struct_{_internal/godebug.text_string;_internal/godebug.bisect_*internal/bisect.Matcher_}] sync/atomic.Pointer[go.shape.struct_{_internal/godebug.text_string;_internal/godebug.bisect_*internal/bisect.Matcher_}], *Psync/atomic.Pointer[go.shape.struct_{_internal/godebug.text_string;_internal/godebug.bisect_*internal/bisect.Matcher_}];

struct sync/atomic.Pointer[go.shape.struct_{_internal/godebug.text_string;_internal/godebug.bisect_*internal/bisect.Matcher_}] { // Original name: sync/atomic.Pointer[go.shape.struct { internal/godebug.text string; internal/godebug.bisect *internal/bisect.Matcher }]
    struct sync/atomic.noCopy _;
    struct go.shape.struct_{_internal/godebug.text_string;_internal/godebug.bisect_*internal/bisect.Matcher_} *_[0];
    void *v;
};

typedef struct internal/fmtsort.SortedMap internal/fmtsort.SortedMap, *Pinternal/fmtsort.SortedMap;

struct internal/fmtsort.SortedMap {
    struct []reflect.Value Key;
    struct []reflect.Value Value;
};

typedef struct runtime.pollCache runtime.pollCache, *Pruntime.pollCache;

typedef struct runtime.pollDesc runtime.pollDesc, *Pruntime.pollDesc;

struct runtime.pollDesc {
    struct runtime/internal/sys.NotInHeap _;
    struct runtime.pollDesc *link;
    uintptr fd;
    struct runtime/internal/atomic.Uintptr fdseq;
    struct runtime/internal/atomic.Uint32 atomicInfo;
    struct runtime/internal/atomic.Uintptr rg;
    struct runtime/internal/atomic.Uintptr wg;
    struct runtime.mutex lock;
    bool closing;
    uint32 user;
    uintptr rseq;
    struct runtime.timer rt;
    int64 rd;
    uintptr wseq;
    struct runtime.timer wt;
    int64 wd;
    struct runtime.pollDesc *self;
};

struct runtime.pollCache {
    struct runtime.mutex lock;
    struct runtime.pollDesc *first;
};

typedef struct google.golang.org/protobuf/internal/impl.enumConverter google.golang.org/protobuf/internal/impl.enumConverter, *Pgoogle.golang.org/protobuf/internal/impl.enumConverter;

struct google.golang.org/protobuf/internal/impl.enumConverter {
    reflect.Type goType;
    struct google.golang.org/protobuf/reflect/protoreflect.Value def;
};

typedef struct google.golang.org/grpc/metadata.mdIncomingKey google.golang.org/grpc/metadata.mdIncomingKey, *Pgoogle.golang.org/grpc/metadata.mdIncomingKey;

struct google.golang.org/grpc/metadata.mdIncomingKey {
};

typedef struct bucket<string,regexp/syntax.charGroup> bucket<string,regexp/syntax.charGroup>, *Pbucket<string,regexp/syntax.charGroup>;

struct bucket<string,regexp/syntax.charGroup> {
    uint8 tophash[8];
    struct string keys[8];
    struct regexp/syntax.charGroup values[8];
    struct bucket<string,regexp/syntax.charGroup> *overflow;
};

typedef struct encoding/json.byIndex encoding/json.byIndex, *Pencoding/json.byIndex;

struct encoding/json.byIndex {
    struct encoding/json.field *array;
    int len;
    int cap;
};

typedef struct hash<vendor/golang.org/x/net/dns/dnsmessage.Type,string> hash<vendor/golang.org/x/net/dns/dnsmessage.Type,string>, *Phash<vendor/golang.org/x/net/dns/dnsmessage.Type,string>;

typedef struct hash<vendor/golang.org/x/net/dns/dnsmessage.Type,string> *map[vendor/golang.org/x/net/dns/dnsmessage.Type]string;

struct hash<vendor/golang.org/x/net/dns/dnsmessage.Type,string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<vendor/golang.org/x/net/dns/dnsmessage.Type,string> *buckets;
    struct bucket<vendor/golang.org/x/net/dns/dnsmessage.Type,string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct vendor/golang.org/x/net/idna.Profile vendor/golang.org/x/net/idna.Profile, *Pvendor/golang.org/x/net/idna.Profile;

typedef struct vendor/golang.org/x/net/idna.options vendor/golang.org/x/net/idna.options, *Pvendor/golang.org/x/net/idna.options;

struct vendor/golang.org/x/net/idna.options {
    bool transitional;
    bool useSTD3Rules;
    bool checkHyphens;
    bool checkJoiners;
    bool verifyDNSLength;
    bool removeLeadingDots;
    struct vendor/golang.org/x/net/idna.idnaTrie *trie;
    void (**fromPuny)(struct vendor/golang.org/x/net/idna.Profile *, struct string, error *);
    void (**mapping)(struct vendor/golang.org/x/net/idna.Profile *, struct string, struct string *, bool *, error *);
    void (**bidirule)(struct string, bool *);
};

struct vendor/golang.org/x/net/idna.Profile {
    struct vendor/golang.org/x/net/idna.options options;
};

typedef struct net.ipStackCapabilities net.ipStackCapabilities, *Pnet.ipStackCapabilities;

struct net.ipStackCapabilities {
    struct sync.Once Once;
    bool ipv4Enabled;
    bool ipv6Enabled;
    bool ipv4MappedIPv6Enabled;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*error;_X1_google.golang.org/protobuf/encoding/prototext.encoder_} noalg.struct_{_F_uintptr;_X0_*error;_X1_google.golang.org/protobuf/encoding/prototext.encoder_}, *Pnoalg.struct_{_F_uintptr;_X0_*error;_X1_google.golang.org/protobuf/encoding/prototext.encoder_};

struct noalg.struct_{_F_uintptr;_X0_*error;_X1_google.golang.org/protobuf/encoding/prototext.encoder_} { // Original name: noalg.struct { F uintptr; X0 *error; X1 google.golang.org/protobuf/encoding/prototext.encoder }
    uintptr F;
    error *X0;
    struct google.golang.org/protobuf/encoding/prototext.encoder X1;
};

typedef struct crypto/elliptic.nistCurve[*crypto/internal/nistec.P384Point] crypto/elliptic.nistCurve[*crypto/internal/nistec.P384Point], *Pcrypto/elliptic.nistCurve[*crypto/internal/nistec.P384Point];

struct crypto/elliptic.nistCurve[*crypto/internal/nistec.P384Point] {
    void (**newPoint)(struct crypto/internal/nistec.P384Point **);
    struct crypto/elliptic.CurveParams *params;
};

typedef struct runtime.eface crypto.PrivateKey;

typedef struct time.ParseError time.ParseError, *Ptime.ParseError;

struct time.ParseError {
    struct string Layout;
    struct string Value;
    struct string LayoutElem;
    struct string ValueElem;
    struct string Message;
};

typedef struct runtime.iface google.golang.org/grpc/internal/channelz.entry;

typedef struct runtime.iface context.stringer;

typedef struct hash<golang.org/x/net/http2.SettingID,bool> hash<golang.org/x/net/http2.SettingID,bool>, *Phash<golang.org/x/net/http2.SettingID,bool>;

typedef struct bucket<golang.org/x/net/http2.SettingID,bool> bucket<golang.org/x/net/http2.SettingID,bool>, *Pbucket<golang.org/x/net/http2.SettingID,bool>;

struct bucket<golang.org/x/net/http2.SettingID,bool> {
    uint8 tophash[8];
    golang.org/x/net/http2.SettingID keys[8];
    bool values[8];
    struct bucket<golang.org/x/net/http2.SettingID,bool> *overflow;
};

struct hash<golang.org/x/net/http2.SettingID,bool> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<golang.org/x/net/http2.SettingID,bool> *buckets;
    struct bucket<golang.org/x/net/http2.SettingID,bool> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct []syscall.NetlinkMessage []syscall.NetlinkMessage, *P[]syscall.NetlinkMessage;

typedef struct syscall.NetlinkMessage syscall.NetlinkMessage, *Psyscall.NetlinkMessage;

struct syscall.NetlinkMessage {
    struct syscall.NlMsghdr Header;
    struct []uint8 Data;
};

struct []syscall.NetlinkMessage {
    struct syscall.NetlinkMessage *array;
    int len;
    int cap;
};

typedef struct sync/atomic.efaceWords sync/atomic.efaceWords, *Psync/atomic.efaceWords;

struct sync/atomic.efaceWords {
    void *typ;
    void *data;
};

typedef struct []*text/template.Template []*text/template.Template, *P[]*text/template.Template;

struct []*text/template.Template {
    struct text/template.Template **array;
    int len;
    int cap;
};

typedef struct noalg.map.iter[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor noalg.map.iter[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor, *Pnoalg.map.iter[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor;

struct noalg.map.iter[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor {
    struct string *key;
    struct []google.golang.org/protobuf/reflect/protoreflect.FileDescriptor *elem;
    void *t;
    struct noalg.map.hdr[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor *h;
    struct noalg.map.bucket[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor *buckets;
    struct noalg.map.bucket[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct context.backgroundCtx context.backgroundCtx, *Pcontext.backgroundCtx;

typedef struct context.emptyCtx context.emptyCtx, *Pcontext.emptyCtx;

struct context.emptyCtx {
};

struct context.backgroundCtx {
    struct context.emptyCtx emptyCtx;
};

typedef struct runtime.TypeAssertionError runtime.TypeAssertionError, *Pruntime.TypeAssertionError;

struct runtime.TypeAssertionError {
    struct internal/abi.Type *_interface;
    struct internal/abi.Type *concrete;
    struct internal/abi.Type *asserted;
    struct string missingMethod;
};

typedef struct google.golang.org/grpc/internal/channelz.IDGenerator google.golang.org/grpc/internal/channelz.IDGenerator, *Pgoogle.golang.org/grpc/internal/channelz.IDGenerator;

struct google.golang.org/grpc/internal/channelz.IDGenerator {
    int64 id;
};

typedef struct runtime.stringStruct runtime.stringStruct, *Pruntime.stringStruct;

struct runtime.stringStruct {
    void *str;
    int len;
};

typedef struct google.golang.org/grpc.joinServerOption google.golang.org/grpc.joinServerOption, *Pgoogle.golang.org/grpc.joinServerOption;

struct google.golang.org/grpc.joinServerOption {
    struct []google.golang.org/grpc.ServerOption opts;
};

typedef struct runtime.iface google.golang.org/grpc/internal/resolver.ClientStream;

typedef struct []google.golang.org/protobuf/internal/impl.coderFieldInfo []google.golang.org/protobuf/internal/impl.coderFieldInfo, *P[]google.golang.org/protobuf/internal/impl.coderFieldInfo;

struct []google.golang.org/protobuf/internal/impl.coderFieldInfo {
    struct google.golang.org/protobuf/internal/impl.coderFieldInfo *array;
    int len;
    int cap;
};

typedef struct runtime.inlineFrame runtime.inlineFrame, *Pruntime.inlineFrame;

struct runtime.inlineFrame {
    uintptr pc;
    int32 index;
};

typedef struct hash<string,*golang.org/x/net/trace.eventFamily> hash<string,*golang.org/x/net/trace.eventFamily>, *Phash<string,*golang.org/x/net/trace.eventFamily>;

struct hash<string,*golang.org/x/net/trace.eventFamily> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,*golang.org/x/net/trace.eventFamily> *buckets;
    struct bucket<string,*golang.org/x/net/trace.eventFamily> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct sort.lessSwap sort.lessSwap, *Psort.lessSwap;

struct sort.lessSwap {
    void (**Less)(int, int, bool *);
    void (**Swap)(int, int);
};

typedef struct runtime.gcCPULimiterState runtime.gcCPULimiterState, *Pruntime.gcCPULimiterState;

struct runtime.gcCPULimiterState {
    struct runtime/internal/atomic.Uint32 lock;
    struct runtime/internal/atomic.Bool enabled;
    struct struct_{_runtime.fill_uint64;_runtime.capacity_uint64_} bucket;
    uint64 overflow;
    bool gcEnabled;
    bool transitioning;
    struct runtime/internal/atomic.Int64 assistTimePool;
    struct runtime/internal/atomic.Int64 idleMarkTimePool;
    struct runtime/internal/atomic.Int64 idleTimePool;
    struct runtime/internal/atomic.Int64 lastUpdate;
    struct runtime/internal/atomic.Uint32 lastEnabledCycle;
    int32 nprocs;
    bool test;
};

typedef struct hchan<net.result[go.shape.int].1> *chan_net.result[go.shape.int].1;

typedef struct auth/auth_grpc.VerifyOTPResponse auth/auth_grpc.VerifyOTPResponse, *Pauth/auth_grpc.VerifyOTPResponse;

struct auth/auth_grpc.VerifyOTPResponse {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    bool Success;
    struct string Token;
};

typedef struct text/template/parse.CommentNode text/template/parse.CommentNode, *Ptext/template/parse.CommentNode;

struct text/template/parse.CommentNode {
    text/template/parse.NodeType NodeType;
    text/template/parse.Pos Pos;
    struct text/template/parse.Tree *tr;
    struct string Text;
};

typedef struct struct_{_io.Reader;_io.WriterTo_} struct_{_io.Reader;_io.WriterTo_}, *Pstruct_{_io.Reader;_io.WriterTo_};

struct struct_{_io.Reader;_io.WriterTo_} { // Original name: struct { io.Reader; io.WriterTo }
    io.Reader Reader;
    io.WriterTo WriterTo;
};

typedef struct google.golang.org/protobuf/internal/encoding/text.Decoder google.golang.org/protobuf/internal/encoding/text.Decoder, *Pgoogle.golang.org/protobuf/internal/encoding/text.Decoder;

struct google.golang.org/protobuf/internal/encoding/text.Decoder {
    google.golang.org/protobuf/internal/encoding/text.call lastCall;
    struct google.golang.org/protobuf/internal/encoding/text.Token lastToken;
    error lastErr;
    struct []uint8 openStack;
    struct []uint8 orig;
    struct []uint8 in;
};

typedef struct runtime.iface google.golang.org/grpc/internal/grpclog.LoggerV2;

typedef struct math/rand.fastSource math/rand.fastSource, *Pmath/rand.fastSource;

struct math/rand.fastSource {
    struct sync.Mutex mu;
};

typedef struct hash<golang.org/x/net/http2.FrameType,golang.org/x/net/http2.frameParser> *map[golang.org/x/net/http2.FrameType]golang.org/x/net/http2.frameParser;

typedef struct runtime.iface log/slog.Handler;

typedef struct noalg.struct_{_F_uintptr;_X0_*string;_X1_[]uint8;_X2_*regexp.Regexp;_X3_[]uint8_} noalg.struct_{_F_uintptr;_X0_*string;_X1_[]uint8;_X2_*regexp.Regexp;_X3_[]uint8_}, *Pnoalg.struct_{_F_uintptr;_X0_*string;_X1_[]uint8;_X2_*regexp.Regexp;_X3_[]uint8_};

struct noalg.struct_{_F_uintptr;_X0_*string;_X1_[]uint8;_X2_*regexp.Regexp;_X3_[]uint8_} { // Original name: noalg.struct { F uintptr; X0 *string; X1 []uint8; X2 *regexp.Regexp; X3 []uint8 }
    uintptr F;
    struct string *X0;
    struct []uint8 X1;
    struct regexp.Regexp *X2;
    struct []uint8 X3;
};

typedef struct runtime.sigactiont runtime.sigactiont, *Pruntime.sigactiont;

struct runtime.sigactiont {
    uintptr sa_handler;
    uint64 sa_flags;
    uintptr sa_restorer;
    uint64 sa_mask;
};

typedef struct log/slog.Source log/slog.Source, *Plog/slog.Source;

struct log/slog.Source {
    struct string Function;
    struct string File;
    int Line;
};

typedef struct google.golang.org/grpc/internal/grpcutil.mdExtraKey google.golang.org/grpc/internal/grpcutil.mdExtraKey, *Pgoogle.golang.org/grpc/internal/grpcutil.mdExtraKey;

struct google.golang.org/grpc/internal/grpcutil.mdExtraKey {
};

typedef struct hchan<net.result[int].1> hchan<net.result[int].1>, *Phchan<net.result[int].1>;

typedef struct waitq<net.result[int].1> waitq<net.result[int].1>, *Pwaitq<net.result[int].1>;

struct waitq<net.result[int].1> { // Original name: waitq<net.result[int]·1>
    struct sudog<net.result[int].1> *first;
    struct sudog<net.result[int].1> *last;
};

struct hchan<net.result[int].1> { // Original name: hchan<net.result[int]·1>
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<net.result[int].1> recvq;
    struct waitq<net.result[int].1> sendq;
    struct runtime.mutex lock;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*[][]string;_X1_string_} noalg.struct_{_F_uintptr;_X0_*[][]string;_X1_string_}, *Pnoalg.struct_{_F_uintptr;_X0_*[][]string;_X1_string_};

struct noalg.struct_{_F_uintptr;_X0_*[][]string;_X1_string_} { // Original name: noalg.struct { F uintptr; X0 *[][]string; X1 string }
    uintptr F;
    struct [][]string *X0;
    struct string X1;
};

typedef struct []*runtime.dbgVar []*runtime.dbgVar, *P[]*runtime.dbgVar;

struct []*runtime.dbgVar {
    struct runtime.dbgVar **array;
    int len;
    int cap;
};

typedef struct crypto/elliptic.p256Curve crypto/elliptic.p256Curve, *Pcrypto/elliptic.p256Curve;

struct crypto/elliptic.p256Curve {
    struct crypto/elliptic.nistCurve[*crypto/internal/nistec.P256Point] nistCurve;
};

typedef struct google.golang.org/grpc/balancer/base.baseBuilder google.golang.org/grpc/balancer/base.baseBuilder, *Pgoogle.golang.org/grpc/balancer/base.baseBuilder;

struct google.golang.org/grpc/balancer/base.baseBuilder {
    struct string name;
    google.golang.org/grpc/balancer/base.PickerBuilder pickerBuilder;
    struct google.golang.org/grpc/balancer/base.Config config;
};

typedef struct noalg.map.hdr[uint32][]*internal/abi.Type noalg.map.hdr[uint32][]*internal/abi.Type, *Pnoalg.map.hdr[uint32][]*internal/abi.Type;

struct noalg.map.hdr[uint32][]*internal/abi.Type {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[uint32][]*internal/abi.Type *buckets;
    struct noalg.map.bucket[uint32][]*internal/abi.Type *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct hchan<time.Time> *chan_time.Time;

typedef struct net.sysListener net.sysListener, *Pnet.sysListener;

struct net.sysListener {
    struct net.ListenConfig ListenConfig;
    struct string network;
    struct string address;
};

typedef struct syscall.Rlimit syscall.Rlimit, *Psyscall.Rlimit;

struct syscall.Rlimit {
    uint64 Cur;
    uint64 Max;
};

typedef struct text/template/parse.WithNode text/template/parse.WithNode, *Ptext/template/parse.WithNode;

struct text/template/parse.WithNode {
    struct text/template/parse.BranchNode BranchNode;
};

typedef struct vendor/golang.org/x/net/http/httpproxy.ipMatch vendor/golang.org/x/net/http/httpproxy.ipMatch, *Pvendor/golang.org/x/net/http/httpproxy.ipMatch;

struct vendor/golang.org/x/net/http/httpproxy.ipMatch {
    struct net.IP ip;
    struct string port;
};

typedef struct runtime.iface hash.Hash64;

typedef struct bucket<reflect.visit,bool> bucket<reflect.visit,bool>, *Pbucket<reflect.visit,bool>;

struct bucket<reflect.visit,bool> {
    uint8 tophash[8];
    struct reflect.visit keys[8];
    bool values[8];
    struct bucket<reflect.visit,bool> *overflow;
};

typedef struct google.golang.org/grpc/internal/resolver/dns.dnsBuilder google.golang.org/grpc/internal/resolver/dns.dnsBuilder, *Pgoogle.golang.org/grpc/internal/resolver/dns.dnsBuilder;

struct google.golang.org/grpc/internal/resolver/dns.dnsBuilder {
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.EnumValues_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.EnumValues_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.EnumValues_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.EnumValues_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/filedesc.EnumValues }
    uintptr F;
    struct google.golang.org/protobuf/internal/filedesc.EnumValues *X0;
};

typedef struct crypto/ecdh.nistCurve[*crypto/internal/nistec.P256Point] crypto/ecdh.nistCurve[*crypto/internal/nistec.P256Point], *Pcrypto/ecdh.nistCurve[*crypto/internal/nistec.P256Point];

struct crypto/ecdh.nistCurve[*crypto/internal/nistec.P256Point] {
    struct string name;
    void (**newPoint)(struct crypto/internal/nistec.P256Point **);
    struct []uint8 scalarOrder;
};

typedef struct runtime.specialReachable runtime.specialReachable, *Pruntime.specialReachable;

struct runtime.specialReachable {
    struct runtime.special special;
    bool done;
    bool reachable;
};

typedef struct log/slog.Logger log/slog.Logger, *Plog/slog.Logger;

struct log/slog.Logger {
    log/slog.Handler handler;
};

typedef struct sync.poolLocal sync.poolLocal, *Psync.poolLocal;

typedef struct sync.poolLocalInternal sync.poolLocalInternal, *Psync.poolLocalInternal;

struct sync.poolLocalInternal {
    interface_{} private;
    struct sync.poolChain shared;
};

struct sync.poolLocal {
    struct sync.poolLocalInternal poolLocalInternal;
    uint8 pad[96];
};

typedef struct strconv.decimalSlice strconv.decimalSlice, *Pstrconv.decimalSlice;

struct strconv.decimalSlice {
    struct []uint8 d;
    int nd;
    int dp;
};

typedef struct runtime.mstats runtime.mstats, *Pruntime.mstats;

struct runtime.mstats {
    struct runtime.consistentHeapStats heapStats;
    runtime.sysMemStat stacks_sys;
    runtime.sysMemStat mspan_sys;
    runtime.sysMemStat mcache_sys;
    runtime.sysMemStat buckhash_sys;
    runtime.sysMemStat gcMiscSys;
    runtime.sysMemStat other_sys;
    uint64 last_gc_unix;
    uint64 pause_total_ns;
    uint64 pause_ns[256];
    uint64 pause_end[256];
    uint32 numgc;
    uint32 numforcedgc;
    float64 gc_cpu_fraction;
    uint64 last_gc_nanotime;
    uint64 lastHeapInUse;
    bool enablegc;
    struct runtime.timeHistogram gcPauseDist;
};

typedef struct log/slog.Record log/slog.Record, *Plog/slog.Record;

struct log/slog.Record {
    struct time.Time Time;
    struct string Message;
    log/slog.Level Level;
