     (runtime_ifaceeq(tab,(void *)tagNumber,encoding_asn1_enumeratedType.data,(bool)~r0),
     ~r0 = extraout_DIL_03, extraout_AL_03 != '\0')) {
    return;
  }
  if ((encoding_asn1_bigIntType.tab == tab) &&
     (runtime_ifaceeq(tab,(void *)tagNumber,encoding_asn1_bigIntType.data,(bool)~r0),
     extraout_AL_04 != '\0')) {
    return;
  }
  uVar1 = (*(code *)tab[4].fun[0])(tagNumber);
  if (uVar1 < 7) {
    if (uVar1 == 1) {
      return;
    }
    if (1 < uVar1) {
      return;
    }
  }
  else {
    if (uVar1 == 0x17) {
      auVar3 = (*(code *)tab[2]._type)(tagNumber);
      iVar2 = (**(code **)(auVar3._0_8_ + 0x98))(auVar3._8_8_);
      if (iVar2 == 8) {
        return;
      }
      (*(code *)tab[5].fun[0])(tagNumber);
      if ((2 < extraout_RBX) && (runtime_memequal(), extraout_AL_05 != '\0')) {
        return;
      }
      return;
    }
    if (uVar1 == 0x18) {
      return;
    }
    if (uVar1 == 0x19) {
      return;
    }
  }
  return;
}



void encoding_asn1_byteEncoder_Len(encoding_asn1_byteEncoder c,int ~r0)

{
  return;
}



void encoding_asn1_byteEncoder_Encode(encoding_asn1_byteEncoder c,__uint8 dst)

{
  int in_RCX;
  encoding_asn1_byteEncoder *in_RBX;
  
  if (in_RCX != 0) {
    *in_RBX = c;
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void encoding_asn1_bytesEncoder_Len(encoding_asn1_bytesEncoder b,int ~r0)

{
  return;
}



void encoding_asn1_bytesEncoder_Encode(encoding_asn1_bytesEncoder b,__uint8 dst)

{
  void *in_RAX;
  size_t in_RBX;
  size_t in_RSI;
  void *in_RDI;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((int)in_RBX < (int)in_RSI) {
    in_RSI = in_RBX;
  }
  if (in_RDI != in_RAX) {
    runtime_memmove(in_RDI,in_RAX,in_RSI);
  }
  if (in_RBX == in_RSI) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffd8);
}



void encoding_asn1_stringEncoder_Len(encoding_asn1_stringEncoder s,int ~r0)

{
  return;
}



void encoding_asn1_stringEncoder_Encode(encoding_asn1_stringEncoder s,__uint8 dst)

{
  void *in_RAX;
  void *in_RCX;
  size_t in_RBX;
  size_t in_RDI;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((int)in_RBX < (int)in_RDI) {
    in_RDI = in_RBX;
  }
  if (in_RCX != in_RAX) {
    runtime_memmove(in_RCX,in_RAX,in_RDI);
  }
  if (in_RBX == in_RDI) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffd8);
}



void encoding_asn1_multiEncoder_Len(encoding_asn1_multiEncoder m,int ~r0)

{
  int iVar1;
  int in_RBX;
  int unaff_R14;
  int size;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  for (iVar1 = 0; iVar1 < in_RBX; iVar1 = iVar1 + 1) {
    (**(code **)(*(int *)~r0 + 0x20))(*(int *)(~r0 + 8));
    ~r0 = ~r0 + 0x10;
  }
  return;
}



void encoding_asn1_multiEncoder_Encode(encoding_asn1_multiEncoder m,__uint8 dst)

{
  int iVar1;
  int *in_RAX;
  int iVar2;
  int iVar3;
  int in_RBX;
  uint in_RSI;
  uint uVar4;
  int in_RDI;
  int in_R8;
  int unaff_R14;
  int off;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar3 = 0;
  uVar4 = 0;
  while( true ) {
    if (in_RBX <= iVar3) {
      return;
    }
    if (in_RSI < uVar4) break;
    iVar2 = *in_RAX;
    iVar1 = in_RAX[1];
    (**(code **)(iVar2 + 0x18))
              (iVar1,in_RDI + ((int)-(in_R8 - uVar4) >> 0x3f & uVar4),in_RSI - uVar4,in_R8 - uVar4);
    iVar2 = (**(code **)(iVar2 + 0x20))(iVar1);
    in_RAX = in_RAX + 2;
    iVar3 = iVar3 + 1;
    uVar4 = uVar4 + iVar2;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceB();
}



void encoding_asn1_setEncoder_Len(encoding_asn1_setEncoder s,int ~r0)

{
  int iVar1;
  int in_RBX;
  int unaff_R14;
  int size;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  for (iVar1 = 0; iVar1 < in_RBX; iVar1 = iVar1 + 1) {
    (**(code **)(*(int *)~r0 + 0x20))(*(int *)(~r0 + 8));
    ~r0 = ~r0 + 0x10;
  }
  return;
}



void encoding_asn1_setEncoder_Encode(encoding_asn1_setEncoder s,__uint8 dst)

{
  int iVar1;
  int iVar2;
  __uint8 val;
  int *in_RAX;
  void **x;
  void *pvVar3;
  void *pvVar4;
  void *extraout_RAX;
  void *extraout_RAX_00;
  int iVar5;
  int iVar6;
  int extraout_RCX;
  void **ppvVar7;
  int in_RBX;
  uint uVar8;
  int off;
  uint in_RSI;
  void *in_RDI;
  void *~r0;
  void *extraout_RDI;
  int in_R8;
  void *__n;
  void **extraout_R11;
  int unaff_R14;
  interface___ in_stack_ffffffffffffff78;
  int in_stack_ffffffffffffff88;
  int i;
  
  while (&stack0xfffffffffffffff8 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_makeslice((internal_abi_Type *)&DAT_00801a20,in_RBX,in_RBX,in_RDI);
  for (iVar6 = 0; iVar6 < in_RBX; iVar6 = iVar6 + 1) {
    iVar1 = *in_RAX;
    iVar2 = in_RAX[1];
    iVar5 = iVar6 * 3;
    pvVar4 = (void *)(**(code **)(iVar1 + 0x20))();
    runtime_makeslice((internal_abi_Type *)&DAT_00807920,(int)pvVar4,(int)pvVar4,~r0);
    x[iVar6 * 3 + 1] = pvVar4;
    x[iVar6 * 3 + 2] = pvVar4;
    pvVar3 = extraout_RAX;
    ppvVar7 = x;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RAX_00;
      extraout_R11[1] = ppvVar7[extraout_RCX];
      pvVar3 = extraout_RAX_00;
      iVar5 = extraout_RCX;
      pvVar4 = extraout_RDI;
    }
    ppvVar7[iVar5] = pvVar3;
    (**(code **)(iVar1 + 0x18))(iVar2,ppvVar7[iVar5],pvVar4);
    in_RAX = in_RAX + 2;
  }
  val.cap = in_stack_ffffffffffffff88;
  val.array = (uint8 *)in_stack_ffffffffffffff78._type;
  val.len = (int)in_stack_ffffffffffffff78.data;
  runtime_convTslice(val,x);
  sort_Slice(in_stack_ffffffffffffff78,(func_int__int__bool **)&DAT_00801560);
  iVar6 = 0;
  uVar8 = 0;
  ppvVar7 = x;
  while( true ) {
    if (in_RBX <= iVar6) {
      return;
    }
    if (in_RSI < uVar8) break;
    pvVar4 = ppvVar7[1];
    pvVar3 = (void *)((int)in_RDI + ((int)(uVar8 - in_R8) >> 0x3f & uVar8));
    __n = (void *)(in_RSI - uVar8);
    if ((int)pvVar4 < (int)(void *)(in_RSI - uVar8)) {
      __n = pvVar4;
    }
    if (*ppvVar7 != pvVar3) {
      runtime_memmove(pvVar3,*ppvVar7,(size_t)__n);
    }
    ppvVar7 = ppvVar7 + 3;
    iVar6 = iVar6 + 1;
    uVar8 = uVar8 + (int)pvVar4;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceB();
}



void encoding_asn1_setEncoder_Encode_func1(int i,int j,bool ~r0)

{
  int in_RDX;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack();
  }
  if ((uint)i < *(uint *)(in_RDX + 0x10)) {
    if ((uint)j < *(uint *)(in_RDX + 0x10)) {
      internal_bytealg_Compare();
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void encoding_asn1___taggedEncoder__Len(encoding_asn1_taggedEncoder *t,int ~r0)

{
  int unaff_R14;
  encoding_asn1_taggedEncoder *peStack0000000000000008;
  
  peStack0000000000000008 = t;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  (*(code *)(peStack0000000000000008->tag).tab[1].inter)((peStack0000000000000008->tag).data);
  (*(code *)(peStack0000000000000008->body).tab[1].inter)((peStack0000000000000008->body).data);
  return;
}



void encoding_asn1___taggedEncoder__Encode(encoding_asn1_taggedEncoder *t,__uint8 dst)

{
  uint uVar1;
  uint in_RCX;
  int in_RBX;
  int in_RDI;
  int unaff_R14;
  int iStack0000000000000020;
  
  iStack0000000000000020 = in_RDI;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  (*(code *)((t->tag).tab)->fun[0])((t->tag).data);
  uVar1 = (*(code *)(t->tag).tab[1].inter)((t->tag).data);
  if (uVar1 <= in_RCX) {
    (*(code *)((t->body).tab)->fun[0])
              ((t->body).data,in_RBX + (uVar1 & (int)-(iStack0000000000000020 - uVar1) >> 0x3f),
               in_RCX - uVar1);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceB();
}



void encoding_asn1_int64Encoder_Len(encoding_asn1_int64Encoder i,int ~r0)

{
  int n;
  
  for (; 0x7f < i; i = i >> 8) {
  }
  for (; i < -0x80; i = i >> 8) {
  }
  return;
}



void encoding_asn1_int64Encoder_Encode(encoding_asn1_int64Encoder i,__uint8 dst)

{
  encoding_asn1_int64Encoder eVar1;
  uint uVar2;
  int j;
  uint in_RCX;
  int in_RBX;
  int n_1;
  int n;
  uint uVar3;
  
  n = 1;
  for (eVar1 = i; 0x7f < eVar1; eVar1 = eVar1 >> 8) {
    n = n + 1;
  }
  for (; eVar1 < -0x80; eVar1 = eVar1 >> 8) {
    n = n + 1;
  }
  uVar2 = 0;
  while( true ) {
    if (n <= (int)uVar2) {
      return;
    }
    uVar3 = ((n - uVar2) + -1) * 8;
    if (in_RCX <= uVar2) break;
    *(char *)(in_RBX + uVar2) = (char)(i >> (((byte)uVar3 | ~-(uVar3 < 0x40)) & 0x3f));
    uVar2 = uVar2 + 1;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void encoding_asn1_makeBigInt(math_big_Int *n,encoding_asn1_encoder ~r0,error ~r1)

{
  math_big_Int *__src;
  __uint8 ~r0_00;
  __uint8 ~r0_01;
  __uint8 val;
  __uint8 val_00;
  __uint8 val_01;
  __uint8 val_02;
  __uint8 val_03;
  __uint8 val_04;
  math_big_Int *extraout_RAX;
  math_big_Int *extraout_RAX_00;
  byte *x;
  byte *x_00;
  runtime_itab **extraout_RAX_01;
  runtime_itab **extraout_RAX_02;
  runtime_itab *extraout_RAX_03;
  runtime_itab *extraout_RAX_04;
  runtime_itab **extraout_RAX_05;
  runtime_itab **extraout_RAX_06;
  runtime_itab **x_01;
  runtime_itab *extraout_RAX_07;
  runtime_itab *extraout_RAX_08;
  runtime_itab *prVar1;
  int iVar2;
  int iVar3;
  int i;
  void *~r0_02;
  void *~r0_03;
  runtime_itab **extraout_RSI;
  runtime_itab **extraout_RSI_00;
  math_big_Int *in_RDI;
  math_big_Int *extraout_RDI;
  int cap;
  int iVar4;
  runtime_itab **extraout_R11;
  runtime_itab **extraout_R11_00;
  runtime_itab **extraout_R11_01;
  runtime_itab **extraout_R11_02;
  int unaff_R14;
  undefined in_XMM15 [16];
  string in_stack_ffffffffffffff40;
  int in_stack_ffffffffffffff50;
  runtime_itab **local_40;
  char *local_38;
  undefined8 local_30;
  undefined local_28 [24];
  undefined8 uStack_10;
  
  while (&local_40 <= *(runtime_itab ****)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  if (n == (math_big_Int *)0x0) {
    local_38 = 
    "empty integerunsupported: invalid UTF-8unexpected %sdefine clauseempty commandDownArrowBar;DownTeeArrow;ExponentialE;GreaterEqual;GreaterTilde;HilbertSpace;HumpDownHump;Intersection;LeftArrowBar;LeftTeeArrow;LeftTriangle;LeftUpVector;NotCongruent;NotLessEqual;NotLessTilde;Proportional;RightCeiling;RoundImplies;ShortUpArrow;SquareSubset;UnderBracket;VerticalLine;blacklozenge;exponentiale;risingdotseq;triangledown;triangleleft;NotHumpEqual;varsubsetneq;varsupsetneq;Authenticating.WithDeadline(<not Stringer>/proc/self/exeSubConn(id:%d)grpc-go/1.64.0Server createdunexpected EOF: extra text: internal error.in-addr.arpa./etc/protocolsunknown mode:  on zero Valueunknown methoduserArenaStateread mem statsallocfreetracegcstoptheworldGC assist waitfinalizer waitsync.Cond.WaitSIGABRT: aborts.allocCount= key size wrongruntime: mmap(nil elem type! to finalizer GC worker initruntime: full=runtime: want=MB; allocated bad restart PC-thread limit\nstopm spinning nmidlelocked= needspinning=store64 failedsemaRoot queuebad allocCountbad span statestack overflow untyped args  out of range no module data in goroutine no such deviceis a directorytext file busyfile too largetoo many linkslevel 3 haltedlevel 2 haltedprotocol errortoo many usersunreachable:  reserved_rangefield_presenceunsafe.PointerALREADY_EXISTS\"OUT_OF_RANGE\"%s Channel #%dgrpc-trace-binunknown ID: %vAuthInfo: \'%s\'Content-Lengthaccept-charsetcontent-lengthNot AcceptableMAX_FRAME_SIZEPROTOCOL_ERRORINTERNAL_ERRORREFUSED_STREAMinvalid syntax1907348632812595367431640625show_sensitiveprefix length not an ip:portinvalid PrefixResourceHeaderRCodeNameErrormime/multipartinvalid kind: protobuf_oneofXXX_OneofFuncsneed more data/etc/ssl/certs\\.+*?()|[]{}^$LOGGER_UNKNOWNAccept-CharsetDkim-SignatureREQUEST_METHOD$htmltemplate_ /* %s */null formnovalidateprotobuf errorReservedRangesdata truncatedInstEmptyWidthunknown node: ApplyFunction;DifferentialD;DoubleLeftTee;DoubleUpArrow;LeftTeeVector;LeftVectorBar;LessFullEqual;LongLeftArrow;Longleftarrow;NotTildeEqual;NotTildeTilde;Poincareplan..." /* TRUNCATED STRING LITERAL */
    ;
    local_30 = 0xd;
    runtime_convTstring(in_stack_ffffffffffffff40,
                        "empty integerunsupported: invalid UTF-8unexpected %sdefine clauseempty commandDownArrowBar;DownTeeArrow;ExponentialE;GreaterEqual;GreaterTilde;HilbertSpace;HumpDownHump;Intersection;LeftArrowBar;LeftTeeArrow;LeftTriangle;LeftUpVector;NotCongruent;NotLessEqual;NotLessTilde;Proportional;RightCeiling;RoundImplies;ShortUpArrow;SquareSubset;UnderBracket;VerticalLine;blacklozenge;exponentiale;risingdotseq;triangledown;triangleleft;NotHumpEqual;varsubsetneq;varsupsetneq;Authenticating.WithDeadline(<not Stringer>/proc/self/exeSubConn(id:%d)grpc-go/1.64.0Server createdunexpected EOF: extra text: internal error.in-addr.arpa./etc/protocolsunknown mode:  on zero Valueunknown methoduserArenaStateread mem statsallocfreetracegcstoptheworldGC assist waitfinalizer waitsync.Cond.WaitSIGABRT: aborts.allocCount= key size wrongruntime: mmap(nil elem type! to finalizer GC worker initruntime: full=runtime: want=MB; allocated bad restart PC-thread limit\nstopm spinning nmidlelocked= needspinning=store64 failedsemaRoot queuebad allocCountbad span statestack overflow untyped args  out of range no module data in goroutine no such deviceis a directorytext file busyfile too largetoo many linkslevel 3 haltedlevel 2 haltedprotocol errortoo many usersunreachable:  reserved_rangefield_presenceunsafe.PointerALREADY_EXISTS\"OUT_OF_RANGE\"%s Channel #%dgrpc-trace-binunknown ID: %vAuthInfo: \'%s\'Content-Lengthaccept-charsetcontent-lengthNot AcceptableMAX_FRAME_SIZEPROTOCOL_ERRORINTERNAL_ERRORREFUSED_STREAMinvalid syntax1907348632812595367431640625show_sensitiveprefix length not an ip:portinvalid PrefixResourceHeaderRCodeNameErrormime/multipartinvalid kind: protobuf_oneofXXX_OneofFuncsneed more data/etc/ssl/certs\\.+*?()|[]{}^$LOGGER_UNKNOWNAccept-CharsetDkim-SignatureREQUEST_METHOD$htmltemplate_ /* %s */null formnovalidateprotobuf errorReservedRangesdata truncatedInstEmptyWidthunknown node: ApplyFunction;DifferentialD;DoubleLeftTee;DoubleUpArrow;LeftTeeVector;LeftVectorBar;LessFullEqual;LongLeftArrow;Longleftarrow;NotTildeEqual;NotTildeTilde;Poincareplan..." /* TRUNCATED STRING LITERAL */
                       );
    return;
  }
  iVar3 = (n->abs).len;
  if (iVar3 == 0) {
    iVar2 = 0;
  }
  else if (n->neg == false) {
    iVar2 = 1;
  }
  else {
    iVar2 = -1;
  }
  if (iVar2 < 0) {
    local_28[0] = false;
    local_28._8_8_ = (math_big_Int *)0x0;
    unique0x1000052b = in_XMM15;
    if (n != (math_big_Int *)local_28) {
      iVar3 = (n->abs).len;
      __src = (math_big_Int *)(n->abs).array;
      iVar2 = iVar3;
      if (iVar3 < 1) {
        in_RDI = (math_big_Int *)0x0;
        cap = 0;
      }
      else if (iVar3 == 1) {
        runtime_makeslice((internal_abi_Type *)&DAT_00808860,1,1,in_RDI);
        cap = 1;
        iVar2 = 1;
        in_RDI = extraout_RAX;
      }
      else {
        cap = iVar3 + 4;
        runtime_makeslice((internal_abi_Type *)&DAT_00808860,iVar3,cap,in_RDI);
        in_RDI = extraout_RAX_00;
      }
      iVar4 = iVar2;
      if (iVar3 < iVar2) {
        iVar4 = iVar3;
      }
      if (in_RDI != __src) {
        runtime_memmove(in_RDI,__src,iVar4 << 3);
      }
      uStack_10 = cap;
      local_28._16_8_ = iVar2;
      local_28[0] = n->neg;
      local_28._8_8_ = in_RDI;
    }
    if (local_28._16_8_ == 0) {
      local_28[0] = 0;
    }
    else {
      local_28[0] = local_28[0] ^ 1;
    }
    math_big___Int__Sub((math_big_Int *)local_28,(math_big_Int *)local_28,encoding_asn1_bigOne,
                        in_RDI);
    ~r0_00.cap = in_stack_ffffffffffffff50;
    ~r0_00.array = in_stack_ffffffffffffff40.str;
    ~r0_00.len = in_stack_ffffffffffffff40.len;
    math_big___Int__Bytes((math_big_Int *)local_28,~r0_00);
    for (i = 0; i < (int)~r0_02; i = i + 1) {
      x[i] = ~x[i];
    }
    if ((~r0_02 != (void *)0x0) && ((*x & 0x80) != 0)) {
      val_04.cap = in_stack_ffffffffffffff50;
      val_04.array = in_stack_ffffffffffffff40.str;
      val_04.len = in_stack_ffffffffffffff40.len;
      runtime_convTslice(val_04,x);
      return;
    }
    runtime_newobject((internal_abi_Type *)&DAT_0081ce40,~r0_02);
    prVar1 = (runtime_itab *)encoding_asn1_byteFFEncoder.data;
    *extraout_RAX_05 = encoding_asn1_byteFFEncoder.tab;
    x_01 = extraout_RAX_05;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_01 = prVar1;
      x_01 = extraout_RAX_06;
    }
    x_01[1] = prVar1;
    val_02.cap = in_stack_ffffffffffffff50;
    val_02.array = in_stack_ffffffffffffff40.str;
    val_02.len = in_stack_ffffffffffffff40.len;
    runtime_convTslice(val_02,x);
    x_01[2] = (runtime_itab *)go_itab_encoding_asn1_bytesEncoder_encoding_asn1_encoder;
    prVar1 = extraout_RAX_07;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_02 = extraout_RAX_08;
      extraout_R11_02[1] = extraout_RSI_00[3];
      prVar1 = extraout_RAX_08;
      x_01 = extraout_RSI_00;
    }
    x_01[3] = prVar1;
    val_03.cap = in_stack_ffffffffffffff50;
    val_03.array = in_stack_ffffffffffffff40.str;
    val_03.len = in_stack_ffffffffffffff40.len;
    runtime_convTslice(val_03,x_01);
    return;
  }
  if (iVar3 == 0) {
    iVar3 = 0;
  }
  else if (n->neg == false) {
    iVar3 = 1;
  }
  else {
    iVar3 = -1;
  }
  if (iVar3 != 0) {
    ~r0_01.cap = in_stack_ffffffffffffff50;
    ~r0_01.array = in_stack_ffffffffffffff40.str;
    ~r0_01.len = in_stack_ffffffffffffff40.len;
    math_big___Int__Bytes(n,~r0_01);
    if ((~r0_03 != (void *)0x0) && ((*x_00 & 0x80) != 0)) {
      runtime_newobject((internal_abi_Type *)&DAT_0081ce40,~r0_03);
      prVar1 = (runtime_itab *)encoding_asn1_byte00Encoder.data;
      *extraout_RAX_01 = encoding_asn1_byte00Encoder.tab;
      local_40 = extraout_RAX_01;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier1();
        *extraout_R11 = prVar1;
        local_40 = extraout_RAX_02;
      }
      local_40[1] = prVar1;
      val.cap = in_stack_ffffffffffffff50;
      val.array = in_stack_ffffffffffffff40.str;
      val.len = in_stack_ffffffffffffff40.len;
      runtime_convTslice(val,x_00);
      local_40[2] = (runtime_itab *)go_itab_encoding_asn1_bytesEncoder_encoding_asn1_encoder;
      prVar1 = extraout_RAX_03;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_00 = extraout_RAX_04;
        extraout_R11_00[1] = extraout_RSI[3];
        prVar1 = extraout_RAX_04;
        local_40 = extraout_RSI;
      }
      local_40[3] = prVar1;
      val_00.cap = in_stack_ffffffffffffff50;
      val_00.array = in_stack_ffffffffffffff40.str;
      val_00.len = in_stack_ffffffffffffff40.len;
      runtime_convTslice(val_00,local_40);
      return;
    }
    val_01.cap = in_stack_ffffffffffffff50;
    val_01.array = in_stack_ffffffffffffff40.str;
    val_01.len = in_stack_ffffffffffffff40.len;
    runtime_convTslice(val_01,x_00);
    return;
  }
  return;
}



void encoding_asn1_appendTagAndLength(__uint8 dst,encoding_asn1_tagAndLength t,__uint8 ~r0)

{
  byte bVar1;
  void *in_RAX;
  void *extraout_RAX;
  void *extraout_RAX_00;
  void *extraout_RAX_01;
  void *extraout_RAX_02;
  void *extraout_RAX_03;
  void *extraout_RAX_04;
  uint in_RCX;
  uint extraout_RCX;
  uint extraout_RCX_00;
  uint extraout_RCX_01;
  uint extraout_RCX_02;
  uint extraout_RCX_03;
  byte bVar2;
  uint8 o;
  int iVar3;
  int in_RBX;
  uint uVar4;
  uint extraout_RBX;
  uint extraout_RBX_00;
  uint extraout_RBX_01;
  uint extraout_RBX_02;
  uint extraout_RBX_03;
  uint extraout_RBX_04;
  int in_RSI;
  int l;
  int64 i_1;
  uint8 b;
  sdword in_EDI;
  int n;
  int l_1;
  int in_R8;
  char in_R9B;
  int i;
  int unaff_R14;
  runtime_slice in_stack_ffffffffffffff88;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  b = (uint8)(in_EDI << 6);
  if (in_R9B != '\0') {
    b = b | 0x20;
  }
  if (in_RSI < 0x1f) {
    uVar4 = in_RBX + 1;
    if (in_RCX < uVar4) {
      runtime_growslice(in_RAX,uVar4,in_RCX,1,(internal_abi_Type *)&DAT_00807920,
                        in_stack_ffffffffffffff88);
      in_RAX = extraout_RAX_00;
      in_RCX = extraout_RCX_00;
      uVar4 = extraout_RBX_00;
    }
    *(uint8 *)((uVar4 - 1) + (int)in_RAX) = b | (byte)in_RSI;
  }
  else {
    uVar4 = in_RBX + 1;
    if (in_RCX < uVar4) {
      runtime_growslice(in_RAX,uVar4,in_RCX,1,(internal_abi_Type *)&DAT_00807920,
                        in_stack_ffffffffffffff88);
      in_RAX = extraout_RAX;
      in_RCX = extraout_RCX;
      uVar4 = extraout_RBX;
    }
    *(uint8 *)((uVar4 - 1) + (int)in_RAX) = b | 0x1f;
    l_1 = 0;
    for (iVar3 = in_RSI; 0 < iVar3; iVar3 = iVar3 >> 7) {
      l_1 = l_1 + 1;
    }
    while (l_1 = l_1 + -1, -1 < l_1) {
      bVar1 = (byte)(in_RSI >> (((byte)(l_1 * 7) | ~-((uint)(l_1 * 7) < 0x40)) & 0x3f));
      bVar2 = bVar1 & 0x7f;
      if (l_1 != 0) {
        bVar2 = bVar1 | 0x80;
      }
      uVar4 = uVar4 + 1;
      if (in_RCX < uVar4) {
        runtime_growslice(in_RAX,uVar4,in_RCX,1,(internal_abi_Type *)&DAT_00807920,
                          in_stack_ffffffffffffff88);
        in_RAX = extraout_RAX_04;
        uVar4 = extraout_RBX_04;
        in_RCX = extraout_RCX_03;
      }
      *(byte *)((uVar4 - 1) + (int)in_RAX) = bVar2;
    }
  }
  if (in_R8 < 0x80) {
    uVar4 = uVar4 + 1;
    if (in_RCX < uVar4) {
      runtime_growslice(in_RAX,uVar4,in_RCX,1,(internal_abi_Type *)&DAT_00807920,
                        in_stack_ffffffffffffff88);
      in_RAX = extraout_RAX_01;
      uVar4 = extraout_RBX_01;
    }
    *(char *)((uVar4 - 1) + (int)in_RAX) = (char)in_R8;
  }
  else {
    l = 1;
    for (iVar3 = in_R8; 0xff < iVar3; iVar3 = iVar3 >> 8) {
      l = l + 1;
    }
    uVar4 = uVar4 + 1;
    if (in_RCX < uVar4) {
      runtime_growslice(in_RAX,uVar4,in_RCX,1,(internal_abi_Type *)&DAT_00807920,
                        in_stack_ffffffffffffff88);
      in_RAX = extraout_RAX_02;
      in_RCX = extraout_RCX_01;
      uVar4 = extraout_RBX_02;
    }
    *(byte *)((uVar4 - 1) + (int)in_RAX) = (byte)l | 0x80;
    n = 1;
    for (iVar3 = in_R8; 0xff < iVar3; iVar3 = iVar3 >> 8) {
      n = n + 1;
    }
    while (0 < n) {
      uVar4 = uVar4 + 1;
      n = n + -1;
      if (in_RCX < uVar4) {
        runtime_growslice(in_RAX,uVar4,in_RCX,1,(internal_abi_Type *)&DAT_00807920,
                          in_stack_ffffffffffffff88);
        in_RAX = extraout_RAX_03;
        uVar4 = extraout_RBX_03;
        in_RCX = extraout_RCX_02;
      }
      *(char *)((uVar4 - 1) + (int)in_RAX) =
           (char)(in_R8 >> (((byte)(n * 8) | ~-((uint)(n * 8) < 0x40)) & 0x3f));
    }
  }
  return;
}



void encoding_asn1_bitStringEncoder_Len(encoding_asn1_bitStringEncoder b,int ~r0)

{
  return;
}



void encoding_asn1_bitStringEncoder_Encode(encoding_asn1_bitStringEncoder b,__uint8 dst)

{
  char cVar1;
  char *in_RAX;
  size_t __n;
  size_t in_RBX;
  char *in_RSI;
  int in_RDI;
  int in_R8;
  int in_R9;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffd0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  cVar1 = (char)(in_RDI % 8);
  if (in_R8 == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  *in_RSI = -(cVar1 + ((((byte)(-(in_RDI % 8 + -8) >> 0x3f) >> 5) - cVar1) + 8 & 0xf8) + -8);
  __n = in_R8 - 1U;
  if ((int)in_RBX < (int)(in_R8 - 1U)) {
    __n = in_RBX;
  }
  if (in_RAX != in_RSI + ((dword)(-(in_R9 + -1) >> 0x3f) & 1)) {
    runtime_memmove(in_RSI + ((dword)(-(in_R9 + -1) >> 0x3f) & 1),in_RAX,__n);
  }
  if (in_RBX == __n) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffd0);
}



void encoding_asn1_oidEncoder_Len(encoding_asn1_oidEncoder oid,int ~r0)

{
  int l_1;
  int l;
  int iVar1;
  int64 i_1;
  int i;
  uint in_RBX;
  int64 i_2;
  int iVar2;
  int l_2;
  
  if (in_RBX == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if (in_RBX < 2) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  iVar1 = *(int *)~r0 * 0x28 + *(int *)(~r0 + 8);
  if (iVar1 != 0) {
    for (; 0 < iVar1; iVar1 = iVar1 >> 7) {
    }
  }
  for (iVar1 = 2; iVar1 < (int)in_RBX; iVar1 = iVar1 + 1) {
    iVar2 = *(int *)(~r0 + iVar1 * 8);
    if (iVar2 != 0) {
      for (; 0 < iVar2; iVar2 = iVar2 >> 7) {
      }
    }
  }
  return;
}



void encoding_asn1_oidEncoder_Encode(encoding_asn1_oidEncoder oid,__uint8 dst)

{
  byte bVar4;
  uint8 o_1;
  byte bVar1;
  uint8 o;
  int *in_RAX;
  void *extraout_RAX;
  void *extraout_RAX_00;
  uint newLen;
  uint extraout_RCX;
  uint extraout_RCX_00;
  int iVar2;
  int64 i_2;
  int iVar3;
  uint in_RBX;
  uint extraout_RBX;
  uint extraout_RBX_00;
  int l_1;
  int l;
  void *in_RDI;
  uint in_R8;
  int i_1;
  int64 i_4;
  int iVar5;
  int l_2;
  int i_3;
  int l_3;
  int unaff_R14;
  runtime_slice in_stack_ffffffffffffff88;
  int i;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RBX == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if (in_RBX < 2) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  iVar2 = *in_RAX * 0x28 + in_RAX[1];
  if (iVar2 == 0) {
    l = 1;
  }
  else {
    l_1 = 0;
    for (iVar3 = iVar2; l = l_1, 0 < iVar3; iVar3 = iVar3 >> 7) {
      l_1 = l_1 + 1;
    }
  }
  newLen = 0;
  while (l = l + -1, -1 < l) {
    bVar4 = (byte)(iVar2 >> (((byte)(l * 7) | ~-((uint)(l * 7) < 0x40)) & 0x3f));
    bVar1 = bVar4 & 0x7f;
    if (l != 0) {
      bVar1 = bVar4 | 0x80;
    }
    newLen = newLen + 1;
    if (in_R8 < newLen) {
      runtime_growslice(in_RDI,newLen,in_R8,1,(internal_abi_Type *)&DAT_00807920,
                        in_stack_ffffffffffffff88);
      newLen = extraout_RBX;
      in_RDI = extraout_RAX;
      in_R8 = extraout_RCX;
    }
    *(byte *)((newLen - 1) + (int)in_RDI) = bVar1;
  }
  for (iVar2 = 2; iVar2 < (int)in_RBX; iVar2 = iVar2 + 1) {
    iVar3 = in_RAX[iVar2];
    if (iVar3 == 0) {
      l_3 = 1;
    }
    else {
      l_3 = 0;
      for (iVar5 = iVar3; 0 < iVar5; iVar5 = iVar5 >> 7) {
        l_3 = l_3 + 1;
      }
    }
    while (l_3 = l_3 + -1, -1 < l_3) {
      bVar1 = (byte)(iVar3 >> (((byte)(l_3 * 7) | ~-((uint)(l_3 * 7) < 0x40)) & 0x3f));
      bVar4 = bVar1 & 0x7f;
      if (l_3 != 0) {
        bVar4 = bVar1 | 0x80;
      }
      newLen = newLen + 1;
      if (in_R8 < newLen) {
        runtime_growslice(in_RDI,newLen,in_R8,1,(internal_abi_Type *)&DAT_00807920,
                          in_stack_ffffffffffffff88);
        in_RDI = extraout_RAX_00;
        in_R8 = extraout_RCX_00;
        newLen = extraout_RBX_00;
      }
      *(byte *)((newLen - 1) + (int)in_RDI) = bVar4;
    }
  }
  return;
}



void encoding_asn1_makePrintableString(string s,encoding_asn1_encoder e,error err)

{
  char cVar1;
  void *in_RAX;
  int i;
  int in_RBX;
  int unaff_R14;
  string in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  i = 0;
  while( true ) {
    if (in_RBX <= i) {
      runtime_convTstring(in_stack_ffffffffffffffd8,in_RAX);
      return;
    }
    cVar1 = *(char *)((int)in_RAX + i);
    if ((((((0x19 < (byte)(cVar1 + 0x9fU)) && (0x19 < (byte)(cVar1 + 0xbfU))) &&
          (9 < (byte)(cVar1 - 0x30U))) &&
         ((2 < (byte)(cVar1 - 0x27U) && (4 < (byte)(cVar1 - 0x2bU))))) &&
        ((cVar1 != ' ' && ((cVar1 != ':' && (cVar1 != '=')))))) &&
       ((cVar1 != '?' && (cVar1 != '*')))) break;
    i = i + 1;
  }
  runtime_convTstring(in_stack_ffffffffffffffd8,&DAT_008c5c19);
  return;
}

