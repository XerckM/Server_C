        puVar31 = go_itab__reflect_rtype_reflect_Type;
      }
      cVar10 = (**(code **)(puVar31 + 0x20))(piVar13,puVar19,iVar16);
      if (cVar10 == '\0') {
        (**(code **)(puVar31 + 0xf8))(piVar13);
        (**(code **)(puVar19 + 0xf8))(iVar16);
        FUN_0046cdab();
        a.len = (int)in_stack_fffffffffffffa00;
        a.array = (string *)in_stack_fffffffffffff9f8;
        a.cap = (int)in_stack_fffffffffffffa08;
        ~r0_07.len = (int)in_stack_fffffffffffffa18;
        ~r0_07.str = (uint8 *)in_stack_fffffffffffffa10;
        runtime_concatstrings((runtime_tmpBuf *)0x0,a,~r0_07);
        val.len = (int)in_stack_fffffffffffffa00;
        val.str = (uint8 *)in_stack_fffffffffffff9f8;
        runtime_convTstring(val,x_01);
        e_09.data = in_stack_fffffffffffffa00;
        e_09._type = in_stack_fffffffffffff9f8;
                    // WARNING: Subroutine does not return
        runtime_gopanic(e_09);
      }
      v_03.ptr = in_stack_fffffffffffffa00;
      v_03.typ_ = in_stack_fffffffffffff9f8;
      v_03.flag = (reflect_flag)in_stack_fffffffffffffa08;
      ~r0_09.ptr = in_stack_fffffffffffffa18;
      ~r0_09.typ_ = (internal_abi_Type *)in_stack_fffffffffffffa10;
      ~r0_09.flag = (reflect_flag)in_stack_fffffffffffffa20;
      reflect_Value_Index(v_03,(int)i_00,~r0_09);
      v_04.ptr = in_stack_fffffffffffffa00;
      v_04.typ_ = in_stack_fffffffffffff9f8;
      v_04.flag = (reflect_flag)in_stack_fffffffffffffa08;
      x_00.ptr = in_stack_fffffffffffffa18;
      x_00.typ_ = (internal_abi_Type *)in_stack_fffffffffffffa10;
      x_00.flag = (reflect_flag)in_stack_fffffffffffffa20;
      reflect_Value_Set(v_04,x_00);
    }
    pvVar29 = (void *)(n + 1);
    runtime_makeslice((internal_abi_Type *)&DAT_008ada60,(int)pvVar29,(int)pvVar29,in_R9);
    if (pvVar29 < (uint)n) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAcap();
    }
    runtime_typedslicecopy((internal_abi_Type *)&DAT_008ada60,dstPtr,n,in_R8,(int)in_R9,~r0_12);
    if (pvVar29 <= (uint)n) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    iVar16 = n * 3;
    dstPtr[n * 3 + 2] = extraout_RCX_00;
    in_R8 = dstPtr;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier4();
      *extraout_R11_08 = i_00;
      extraout_R11_08[1] = extraout_R8_03[iVar16];
      extraout_R11_08[2] = ~r0_11;
      extraout_R11_08[3] = extraout_R8_03[iVar16 + 1];
      in_R8 = extraout_R8_03;
    }
    in_R8[iVar16] = i_00;
    in_R8[iVar16 + 1] = ~r0_11;
  }
  if (pvVar29 != (void *)(uint)piVar11->InCount) {
    e_08.data = in_stack_fffffffffffffa00;
    e_08._type = in_stack_fffffffffffff9f8;
                    // WARNING: Subroutine does not return
    runtime_gopanic(e_08);
  }
  uVar21 = piVar11->OutCount;
  FUN_0046cd6b();
  piVar12 = (internal_abi_FuncType *)FUN_0046cd8f();
  abid_00.call.steps.len = (int)in_stack_fffffffffffffa00;
  abid_00.call.steps.array = (reflect_abiStep *)in_stack_fffffffffffff9f8;
  abid_00.call.steps.cap = (int)in_stack_fffffffffffffa08;
  abid_00.call.valueStart.array = (int *)in_stack_fffffffffffffa10;
  abid_00.call.valueStart.len = (int)in_stack_fffffffffffffa18;
  abid_00.call.valueStart.cap = (int)in_stack_fffffffffffffa20;
  abid_00.call.stackBytes = (uintptr)in_stack_fffffffffffffa28.str;
  abid_00.call.iregs = in_stack_fffffffffffffa28.len;
  auVar36 = in_stack_fffffffffffffa38._8_72_;
  abid_00.call.fregs = in_stack_fffffffffffffa38._0_8_;
  auVar35 = auVar36._0_24_;
  auVar37 = auVar36._24_24_;
  abid_00.ret.steps.array = (reflect_abiStep *)auVar35._0_8_;
  abid_00.ret.steps.len = auVar35._8_8_;
  abid_00.ret.steps.cap = auVar35._16_8_;
  abid_00.ret.valueStart.array = (int *)auVar37._0_8_;
  abid_00.ret.valueStart.len = auVar37._8_8_;
  abid_00.ret.valueStart.cap = auVar37._16_8_;
  abid_00.ret.stackBytes = auVar36._48_8_;
  abid_00.ret.iregs = auVar36._56_8_;
  abid_00.ret.fregs = auVar36._64_8_;
  abid_00.stackCallArgsSize = in_stack_fffffffffffffa38._80_8_;
  abid_00.retOffset = in_stack_fffffffffffffa38._88_8_;
  abid_00.spill = in_stack_fffffffffffffa38._96_8_;
  abid_00.stackPtrs = (reflect_bitVector *)in_stack_fffffffffffffa38._104_8_;
  abid_00.inRegPtrs[0] = in_stack_fffffffffffffa38[112];
  abid_00.inRegPtrs[1] = in_stack_fffffffffffffa38[113];
  abid_00.outRegPtrs[0] = in_stack_fffffffffffffa38[114];
  abid_00.outRegPtrs[1] = in_stack_fffffffffffffa38[115];
  abid_00._180_4_ = in_stack_fffffffffffffa38._116_4_;
  reflect_funcLayout(piVar12,rcvr,rcvr,framePool_00,abid_00);
  piVar34 = in_stack_fffffffffffff9f8;
  FUN_0046d0c6();
  auVar33 = FUN_0046d0c6();
  piVar13 = auVar33._0_8_;
  len = (uint)(uVar21 & 0x7fff);
  if (piVar13->Size_ == 0) {
    ptr = (void **)0x0;
  }
  else if (len == 0) {
    ~r0_00.data = in_stack_fffffffffffffa00;
    ~r0_00._type = piVar34;
    sync___Pool__Get(auVar33._8_8_,~r0_00);
    piVar13 = typ_01;
    ptr = extraout_RBX_01;
    if (have != (internal_abi_Type *)&DAT_008079a0) {
                    // WARNING: Subroutine does not return
      runtime_panicdottypeE
                (have,(internal_abi_Type *)&DAT_008079a0,(internal_abi_Type *)&DAT_00821120);
    }
  }
  else {
    reflect_unsafe_New(piVar13,auVar33._8_8_);
    piVar13 = typ_01;
    ptr = extraout_RAX_02;
  }
  sVar23 = (sdword)piVar13->Size_;
  if (iVar14 == 0) {
    inStart = 0;
    goto LAB_004d5b21;
  }
  if (abid.call.steps.len == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  piVar4 = (internal_abi_InterfaceType *)in_stack_fffffffffffff9f8->Size_;
  puVar9 = in_stack_fffffffffffff9f8->GCData;
  puVar5 = in_stack_fffffffffffff9f8->GCData;
  uVar17 = *(uint *)&in_stack_fffffffffffff9f8->Str;
  if ((int)piVar4 < 3) {
    if (piVar4 == (internal_abi_InterfaceType *)0x1) {
      bVar2 = (in_RAX->Type).Kind_;
      if ((bVar2 & 0x1f) == 0x14) {
        pvVar22 = in_RBX[1];
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11 = extraout_R10;
          extraout_R11[1] = *ptr;
          piVar13 = extraout_RAX_03;
          pvVar22 = extraout_R10;
          sVar23 = extraout_R8D;
        }
        *ptr = pvVar22;
      }
      else if (((in_ECX >> 7 & 1) == 0) || ((bVar2 & 0x20) == 0)) {
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11_01 = in_RBX;
          extraout_R11_01[1] = *ptr;
          piVar13 = extraout_RAX_05;
          sVar23 = extraout_R8D_01;
        }
        *ptr = in_RBX;
      }
      else {
        pvVar22 = *in_RBX;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11_00 = extraout_R10_00;
          extraout_R11_00[1] = *ptr;
          piVar13 = extraout_RAX_04;
          pvVar22 = extraout_R10_00;
          sVar23 = extraout_R8D_00;
        }
        *ptr = pvVar22;
      }
    }
    else {
      if (piVar4 != (internal_abi_InterfaceType *)0x2) {
LAB_004d6856:
        e_07.data = in_stack_fffffffffffffa00;
        e_07._type = piVar34;
                    // WARNING: Subroutine does not return
        runtime_gopanic(e_07);
      }
LAB_004d5a2c:
      if ((uint8 *)0x8 < puVar9) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      bVar2 = (in_RAX->Type).Kind_;
      if ((bVar2 & 0x1f) == 0x14) {
        regArgs.Ints[(int)puVar9] = (uintptr)in_RBX[1];
      }
      else if (((in_ECX >> 7 & 1) == 0) || ((bVar2 & 0x20) == 0)) {
        regArgs.Ints[(int)puVar9] = (uintptr)in_RBX;
      }
      else {
        regArgs.Ints[(int)puVar9] = (uintptr)*in_RBX;
      }
    }
  }
  else {
    if (piVar4 == (internal_abi_InterfaceType *)0x3) {
      if ((uint8 *)0x8 < puVar5) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      bVar2 = (in_RAX->Type).Kind_;
      if ((bVar2 & 0x1f) == 0x14) {
        regArgs.Ptrs[(int)puVar5] = in_RBX[1];
      }
      else if (((in_ECX >> 7 & 1) == 0) || ((bVar2 & 0x20) == 0)) {
        regArgs.Ptrs[(int)puVar5] = in_RBX;
      }
      else {
        regArgs.Ptrs[(int)puVar5] = *in_RBX;
      }
      goto LAB_004d5a2c;
    }
    if (piVar4 != (internal_abi_InterfaceType *)0x4) goto LAB_004d6856;
    if (0xe < uVar17) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    bVar2 = (in_RAX->Type).Kind_;
    if ((bVar2 & 0x1f) == 0x14) {
      regArgs.Floats[uVar17] = (uint64)in_RBX[1];
    }
    else if (((in_ECX >> 7 & 1) == 0) || ((bVar2 & 0x20) == 0)) {
      regArgs.Floats[uVar17] = (uint64)in_RBX;
    }
    else {
      regArgs.Floats[uVar17] = (uint64)*in_RBX;
    }
  }
  inStart = 1;
LAB_004d5b21:
  i_2 = 0;
  stackArgs_00 = ptr;
  iVar14 = inStart;
  do {
    if ((int)pvVar29 <= i_2) {
      if (reflect_callGC != false) {
        runtime_GC();
        piVar13 = typ_01;
        stackArgs_00 = ptr;
      }
      runtime_reflectcall(piVar13,fn,stackArgs_00,(uint32)piVar13->Size_,(uint32)abid.retOffset,
                          (sVar23 + 7U & 0xfffffff8) + (sdword)abid.spill,&regArgs);
      pvVar29 = extraout_RDI;
      if (reflect_callGC != false) {
        runtime_GC();
        pvVar29 = extraout_RDI_00;
      }
      if (len == 0) {
        if (ptr != (void **)0x0) {
          reflect_typedmemclr(typ_01,ptr);
          x.data = in_stack_fffffffffffffa00;
          x._type = piVar34;
          sync___Pool__Put(p,x);
        }
      }
      else {
        if (ptr != (void **)0x0) {
          reflect_typedmemclrpartial(typ_01,ptr,0,abid.retOffset);
          pvVar29 = extraout_RDI_01;
        }
        runtime_makeslice((internal_abi_Type *)&DAT_008ada60,len,len,pvVar29);
        iVar14 = extraout_RAX_07;
        uVar17 = len;
        piVar12 = piVar11;
        for (pvVar29 = (void *)0x0; (int)pvVar29 < (int)uVar17; pvVar29 = (void *)((int)pvVar29 + 1)
            ) {
          uVar21 = piVar12->OutCount & 0x7fff;
          if (uVar21 == 0) {
            pvVar22 = (void *)0x0;
            iVar16 = 0;
          }
          else {
            if (((piVar12->Type).TFlag & 1) == 0) {
              uadd_4 = 0x38;
            }
            else {
              uadd_4 = 0x48;
            }
            uVar25 = (uint)piVar12->InCount;
            uVar30 = (uint)(ushort)(uVar21 + piVar12->InCount);
            if (uVar30 < uVar25) {
                    // WARNING: Subroutine does not return
              runtime_panicSlice3C();
            }
            pvVar22 = (void *)(uVar30 - uVar25);
            iVar16 = (int)&(piVar12->Type).Size_ + (uVar25 << 3 & -(int)pvVar22 >> 0x3f) + uadd_4;
          }
          if (pvVar22 <= pvVar29) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          piVar13 = *(internal_abi_Type **)(iVar16 + (int)pvVar29 * 8);
          if (piVar13->Size_ == 0) {
            typ_00.data = in_stack_fffffffffffffa00;
            typ_00.tab = (runtime_itab *)piVar34;
            ~r0_04.ptr = in_stack_fffffffffffffa10;
            ~r0_04.typ_ = (internal_abi_Type *)in_stack_fffffffffffffa08;
            ~r0_04.flag = (reflect_flag)in_stack_fffffffffffffa18;
            reflect_Zero(typ_00,~r0_04);
            iVar16 = (int)pvVar29 * 3;
            *(undefined8 *)(extraout_RAX_07 + 0x10 + (int)pvVar29 * 0x18) = extraout_RCX_03;
            uVar15 = extraout_RAX_11;
            uVar20 = extraout_RBX_05;
            iVar14 = extraout_RAX_07;
            if (runtime_writeBarrier._0_4_ != 0) {
              runtime_gcWriteBarrier4();
              *extraout_R11_05 = extraout_RAX_12;
              extraout_R11_05[1] = *(undefined8 *)(extraout_RDI_04 + extraout_RSI_01 * 8);
              extraout_R11_05[2] = extraout_RBX_06;
              extraout_R11_05[3] = *(undefined8 *)(extraout_RDI_04 + 8 + extraout_RSI_01 * 8);
              uVar15 = extraout_RAX_12;
              uVar20 = extraout_RBX_06;
              iVar16 = extraout_RSI_01;
              iVar14 = extraout_RDI_04;
            }
            *(undefined8 *)(iVar14 + iVar16 * 8) = uVar15;
            *(undefined8 *)(iVar14 + 8 + iVar16 * 8) = uVar20;
            uVar17 = len;
            piVar12 = piVar11;
          }
          else {
            if ((uint)abid.ret.valueStart.len <= pvVar29) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            uVar30 = abid.ret.valueStart.array[(int)pvVar29];
            e_1 = abid.ret.steps.len;
            if (pvVar29 != (void *)(abid.ret.valueStart.len + -1)) {
              if ((uint)abid.ret.valueStart.len <= (int)pvVar29 + 1U) {
                    // WARNING: Subroutine does not return
                runtime_panicIndex();
              }
              e_1 = abid.ret.valueStart.array[(int)pvVar29 + 1];
            }
            if ((uint)abid.ret.steps.cap < (uint)e_1) {
                    // WARNING: Subroutine does not return
              runtime_panicSliceAcap();
            }
            if ((uint)e_1 < uVar30) {
                    // WARNING: Subroutine does not return
              runtime_panicSliceB();
            }
            iVar16 = e_1 - uVar30;
            uVar30 = (int)(uVar30 - abid.ret.steps.cap) >> 0x3f & uVar30 * 0x30;
            piVar18 = (int *)((int)&(abid.ret.steps.array)->kind + uVar30);
            if (iVar16 == 0) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            iVar28 = *(int *)((int)&(abid.ret.steps.array)->stkOff + uVar30);
            if (*piVar18 == 1) {
              iVar16 = (int)pvVar29 * 3;
              *(uint *)(iVar14 + 0x10 + (int)pvVar29 * 0x18) = piVar13->Kind_ & 0x1f | 0x80;
              piVar26 = (internal_abi_Type *)(iVar28 + (int)ptr);
              if (runtime_writeBarrier._0_4_ != 0) {
                runtime_gcWriteBarrier4();
                *extraout_R11_03 = extraout_RSI;
                extraout_R11_03[1] = *(internal_abi_Type **)(extraout_RAX_08 + extraout_RDI_02 * 8);
                extraout_R11_03[2] = extraout_R8;
                extraout_R11_03[3] =
                     *(internal_abi_Type **)(extraout_RAX_08 + 8 + extraout_RDI_02 * 8);
                iVar14 = extraout_RAX_08;
                uVar17 = extraout_RCX_01;
                pvVar29 = extraout_RBX_03;
                piVar13 = extraout_RSI;
                iVar16 = extraout_RDI_02;
                piVar26 = extraout_R8;
              }
              *(internal_abi_Type **)(iVar14 + iVar16 * 8) = piVar13;
              *(internal_abi_Type **)(iVar14 + 8 + iVar16 * 8) = piVar26;
            }
            else if ((piVar13->Kind_ & 0x20) == 0) {
              reflect_unsafe_New(piVar13,pvVar29);
              piVar26 = extraout_RAX_10;
              iVar14 = iVar16;
              for (iVar28 = 0; iVar28 < iVar14; iVar28 = iVar28 + 1) {
                iVar6 = *piVar18;
                piVar3 = piVar18 + 1;
                iVar27 = *piVar3;
                uVar7 = piVar18[2];
                uVar17 = piVar18[4];
                uVar30 = piVar18[5];
                if (iVar6 < 3) {
                  if (iVar6 == 1) {
                    e_01.data = in_stack_fffffffffffffa00;
                    e_01._type = piVar34;
                    // WARNING: Subroutine does not return
                    runtime_gopanic(e_01);
                  }
                  if (iVar6 != 2) {
LAB_004d6473:
                    e_00.data = in_stack_fffffffffffffa00;
                    e_00._type = piVar34;
                    // WARNING: Subroutine does not return
                    runtime_gopanic(e_00);
                  }
                  reflect_intFromReg(&regArgs,piVar18[4],piVar18[2],
                                     (void *)((int)&piVar26->Size_ + *piVar3));
                  piVar26 = extraout_RAX_10;
                  iVar14 = iVar16;
                }
                else if (iVar6 == 3) {
                  if (8 < uVar17) {
                    // WARNING: Subroutine does not return
                    runtime_panicIndex();
                  }
                  pvVar22 = regArgs.Ptrs[uVar17];
                  if (runtime_writeBarrier._0_4_ != 0) {
                    runtime_gcWriteBarrier2();
                    *extraout_R11_06 = extraout_RSI_02;
                    extraout_R11_06[1] = *(void **)((int)&extraout_RAX_13->Size_ + extraout_R8_01);
                    piVar26 = extraout_RAX_13;
                    piVar18 = extraout_RCX_04;
                    iVar28 = extraout_RBX_07;
                    pvVar22 = extraout_RSI_02;
                    iVar27 = extraout_R8_01;
                  }
                  *(void **)((int)&piVar26->Size_ + iVar27) = pvVar22;
                }
                else {
                  if (iVar6 != 4) goto LAB_004d6473;
                  if (uVar7 == 4) {
                    if (0xe < uVar30) {
                    // WARNING: Subroutine does not return
                      runtime_panicIndex();
                    }
                    *(sdword *)((int)&piVar26->Size_ + *piVar3) = (sdword)regArgs.Floats[uVar30];
                  }
                  else {
                    if (uVar7 != 8) {
                      e_02.data = in_stack_fffffffffffffa00;
                      e_02._type = piVar34;
                    // WARNING: Subroutine does not return
                      runtime_gopanic(e_02);
                    }
                    if (0xe < uVar30) {
                    // WARNING: Subroutine does not return
                      runtime_panicIndex();
                    }
                    *(uint64 *)((int)&piVar26->Size_ + *piVar3) = regArgs.Floats[uVar30];
                  }
                }
                piVar18 = piVar18 + 6;
              }
              iVar16 = (int)pvVar29 * 3;
              *(uint *)(extraout_RAX_07 + 0x10 + (int)pvVar29 * 0x18) = piVar13->Kind_ & 0x1f | 0x80
              ;
              iVar14 = extraout_RAX_07;
              if (runtime_writeBarrier._0_4_ != 0) {
                runtime_gcWriteBarrier4();
                *extraout_R11_07 = extraout_R8_02;
                extraout_R11_07[1] = *(internal_abi_Type **)(extraout_R10_02 + extraout_RDI_05 * 8);
                extraout_R11_07[2] = extraout_RAX_14;
                extraout_R11_07[3] =
                     *(internal_abi_Type **)(extraout_R10_02 + 8 + extraout_RDI_05 * 8);
                piVar26 = extraout_RAX_14;
                pvVar29 = extraout_RSI_03;
                iVar16 = extraout_RDI_05;
                piVar13 = extraout_R8_02;
                iVar14 = extraout_R10_02;
              }
              *(internal_abi_Type **)(iVar14 + iVar16 * 8) = piVar13;
              *(internal_abi_Type **)(iVar14 + 8 + iVar16 * 8) = piVar26;
              uVar17 = len;
              piVar12 = piVar11;
            }
            else {
              if (*(int *)((int)&(abid.ret.steps.array)->kind + uVar30) != 3) {
                ~r0_01.len = (int)in_stack_fffffffffffffa00;
                ~r0_01.str = (uint8 *)piVar34;
                reflect___rtype__String((reflect_rtype *)piVar13,~r0_01);
                v_00 = *(int64 *)((int)&(abid.ret.steps.array)->kind + uVar30);
                runtime_printlock();
                s_00.len = (int)in_stack_fffffffffffffa00;
                s_00.str = (uint8 *)piVar34;
                runtime_printstring(s_00);
                runtime_printint(v_00);
                s_01.len = (int)in_stack_fffffffffffffa00;
                s_01.str = (uint8 *)piVar34;
                runtime_printstring(s_01);
                s_02.len = (int)in_stack_fffffffffffffa00;
                s_02.str = (uint8 *)piVar34;
                runtime_printstring(s_02);
                runtime_printnl();
                runtime_printunlock();
                e_03.data = in_stack_fffffffffffffa00;
                e_03._type = piVar34;
                    // WARNING: Subroutine does not return
                runtime_gopanic(e_03);
              }
              uVar30 = *(uint *)((int)&(abid.ret.steps.array)->ireg + uVar30);
              if (8 < uVar30) {
                    // WARNING: Subroutine does not return
                runtime_panicIndex();
              }
              iVar16 = (int)pvVar29 * 3;
              piVar26 = (internal_abi_Type *)regArgs.Ptrs[uVar30];
              *(uint *)(iVar14 + 0x10 + (int)pvVar29 * 0x18) = (uint)(piVar13->Kind_ & 0x1f);
              if (runtime_writeBarrier._0_4_ != 0) {
                runtime_gcWriteBarrier4();
                *extraout_R11_04 = extraout_RSI_00;
                extraout_R11_04[1] = *(internal_abi_Type **)(extraout_RAX_09 + extraout_R8_00 * 8);
                extraout_R11_04[2] = extraout_RDI_03;
                extraout_R11_04[3] =
                     *(internal_abi_Type **)(extraout_RAX_09 + 8 + extraout_R8_00 * 8);
                iVar14 = extraout_RAX_09;
                uVar17 = extraout_RCX_02;
                pvVar29 = extraout_RBX_04;
                piVar13 = extraout_RSI_00;
                piVar26 = extraout_RDI_03;
                iVar16 = extraout_R8_00;
              }
              *(internal_abi_Type **)(iVar14 + iVar16 * 8) = piVar13;
              *(internal_abi_Type **)(iVar14 + 8 + iVar16 * 8) = piVar26;
            }
          }
        }
      }
      return;
    }
    piVar13 = in_R8[2];
    piVar26 = *in_R8;
    target = in_R8[1];
    if ((piVar13 == (internal_abi_Type *)0x0) || (((uint)piVar13 & 0x60) != 0)) {
      reflect_flag_mustBeExportedSlow((reflect_flag)piVar13);
      iVar14 = inStart;
    }
    if (((piVar11->Type).TFlag & 1) == 0) {
      uadd_3 = 0x38;
    }
    else {
      uadd_3 = 0x48;
    }
    uVar17 = (uint)piVar11->InCount;
    if (piVar11->InCount == 0) {
      uVar17 = 0;
      iVar16 = 0;
    }
    else {
      iVar16 = (int)&(piVar11->Type).Size_ + uadd_3;
      if (0x10000 < uVar17) {
                    // WARNING: Subroutine does not return
        runtime_panicSlice3Alen();
      }
    }
    if (uVar17 <= (uint)i_2) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    uVar17 = iVar14 + i_2;
    piVar13 = *(internal_abi_Type **)(iVar16 + i_2 * 8);
    v_02.ptr = in_stack_fffffffffffffa00;
    v_02.typ_ = piVar34;
    v_02.flag = (reflect_flag)in_stack_fffffffffffffa08;
    context.len = (int)in_stack_fffffffffffffa18;
    context.str = (uint8 *)in_stack_fffffffffffffa10;
    ~r0_10.ptr = in_stack_fffffffffffffa28.str;
    ~r0_10.flag = in_stack_fffffffffffffa28.len;
    ~r0_10.typ_ = in_stack_fffffffffffffa20;
    reflect_Value_assignTo(v_02,context,piVar26,target,~r0_10);
    if ((uint)abid.call.valueStart.len <= uVar17) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    uVar30 = abid.call.valueStart.array[uVar17];
    e = abid.call.steps.len;
    if (abid.call.valueStart.len - 1U != uVar17) {
      uVar17 = inStart + i_2 + 1;
      if ((uint)abid.call.valueStart.len <= uVar17) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      e = abid.call.valueStart.array[uVar17];
    }
    if ((uint)abid.call.steps.cap < (uint)e) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAcap();
    }
    if ((uint)e < uVar30) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    piVar18 = (int *)((int)&in_stack_fffffffffffff9f8->Size_ +
                     ((int)(uVar30 - abid.call.steps.cap) >> 0x3f & uVar30 * 0x30));
    for (iVar16 = 0; stackArgs_00 = ptr, iVar14 = inStart, iVar16 < (int)(e - uVar30);
        iVar16 = iVar16 + 1) {
      iVar14 = *piVar18;
      iVar27 = piVar18[1];
      iVar6 = piVar18[1];
      uVar8 = piVar18[2];
      uVar7 = piVar18[2];
      iVar28 = piVar18[3];
      puVar1 = (uint *)(piVar18 + 4);
      reg = *puVar1;
      uVar25 = *puVar1;
      uVar17 = piVar18[5];
      if (iVar14 == 1) {
        if ((extraout_ECX >> 7 & 1) == 0) {
          pvVar22 = src;
          iVar14 = inStart;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_02 = extraout_RBX_02;
            extraout_R11_02[1] = *(void **)((int)stackArgs_00 + extraout_R10_01);
            pvVar22 = extraout_RBX_02;
            iVar28 = extraout_R10_01;
            i_2 = extraout_RAX_06;
          }
          *(void **)((int)stackArgs_00 + iVar28) = pvVar22;
        }
        else {
          reflect_typedmemmove(piVar13,(void *)((int)ptr + iVar28),src);
          iVar14 = inStart;
        }
        break;
      }
      if (iVar14 - 2U < 2) {
        if ((extraout_ECX >> 7 & 1) == 0) {
          if (iVar14 == 3) {
            if (8 < *puVar1) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            regArgs.Ptrs[*puVar1] = src;
          }
          if (8 < uVar25) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          regArgs.Ints[uVar25] = (uintptr)src;
        }
        else {
          if (iVar14 == 3) {
            if (8 < *puVar1) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            regArgs.Ptrs[*puVar1] = *(void **)((int)src + iVar6);
          }
          reflect_intToReg(&regArgs,reg,uVar7,(void *)(iVar6 + (int)src));
        }
      }
      else {
        if (iVar14 != 4) {
          e_06.data = in_stack_fffffffffffffa00;
          e_06._type = piVar34;
                    // WARNING: Subroutine does not return
          runtime_gopanic(e_06);
        }
        if ((extraout_ECX >> 7 & 1) == 0) {
          e_05.data = in_stack_fffffffffffffa00;
          e_05._type = piVar34;
                    // WARNING: Subroutine does not return
          runtime_gopanic(e_05);
        }
        if (uVar8 == 4) {
          if (0xe < uVar17) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          regArgs.Floats[uVar17] = (uint)*(dword *)((int)src + iVar27);
        }
        else {
          if (uVar8 != 8) {
            e_04.data = in_stack_fffffffffffffa00;
            e_04._type = piVar34;
                    // WARNING: Subroutine does not return
            runtime_gopanic(e_04);
          }
          if (0xe < uVar17) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          regArgs.Floats[uVar17] = *(uint64 *)(iVar27 + (int)src);
        }
      }
      piVar18 = piVar18 + 6;
    }
    in_R8 = in_R8 + 3;
    i_2 = i_2 + 1;
    piVar13 = typ_01;
  } while( true );
}



// WARNING: Unknown calling convention
// Local variable ptr:void *[RBX:8] conflicts with parameter, skipped.

void reflect_callReflect(reflect_makeFuncImpl *ctxt,void *frame,bool *retValid,
                        internal_abi_RegArgs *regs)

{
  size_t *psVar1;
  ushort uVar2;
  internal_abi_FuncType *piVar3;
  func___reflect_Value____reflect_Value **f_00;
  int64 v;
  int *piVar4;
  reflect_Type typ_00;
  interface___ e_00;
  interface___ e_01;
  interface___ e_02;
  string ~r0;
  string a0;
  string val;
  interface___ e_03;
  string ~r0_00;
  string a0_00;
  string val_00;
  interface___ e_04;
  interface___ e_05;
  interface___ e_06;
  interface___ e_07;
  interface___ e_08;
  string ~r0_01;
  string s_00;
  string s_01;
  string s_02;
  interface___ e_09;
  runtime_slice ~r0_02;
  __reflect_Value _Var5;
  reflect_Value v_00;
  runtime_slice ~r0_03;
  reflect_abiDesc abid_00;
  string a1;
  string a1_00;
  reflect_Value ~r0_04;
  string context;
  string a2;
  string a2_00;
  reflect_Value ~r0_05;
  int iVar6;
  uintptr uVar7;
  uint uVar8;
  __reflect_Value *extraout_RAX;
  internal_abi_Type *dst;
  internal_abi_Type *extraout_RAX_00;
  reflect_Value *extraout_RAX_01;
  __reflect_Value *extraout_RAX_02;
  reflect_Value *extraout_RAX_03;
  reflect_Value *prVar9;
  void *x;
  void *x_00;
  internal_abi_Type *extraout_RAX_04;
  internal_abi_Type *piVar10;
  __reflect_Value *extraout_RAX_05;
  __reflect_Value *extraout_RAX_06;
  __reflect_Value *oldPtr;
  dword extraout_ECX;
  internal_abi_FuncType *ftyp;
  internal_abi_FuncType *t;
  int s;
  uint uVar11;
  int extraout_RCX;
  uint extraout_RCX_00;
  int *extraout_RCX_01;
  int *piVar12;
  uint extraout_RCX_02;
  int extraout_RCX_03;
  func___reflect_Value____reflect_Value **f;
  uintptr uadd;
  uint uVar13;
  uint uVar14;
  uintptr uadd_1;
  internal_abi_RegArgs *piVar15;
  void *~r0_06;
  reflect_Value *extraout_RBX;
  uint extraout_RBX_00;
  reflect_Value *extraout_RBX_01;
  reflect_Value *prVar16;
  void *__src;
  int extraout_RBX_02;
  uint extraout_RBX_03;
  uint extraout_RSI;
  int i_1;
  int iVar17;
  int iVar18;
  int extraout_RSI_00;
  sync_Pool *framePool;
  void *~r0_07;
  __reflect_Value *extraout_RDI;
  uint uVar19;
  int numOut;
  void *offset_1;
  void *offset;
  int extraout_R8;
  internal_abi_Type *typ_1;
  void *extraout_R8_00;
  void *pvVar20;
  int iVar21;
  uint uVar22;
  int extraout_R9;
  int iVar23;
  int e_1;
  reflect_Value **extraout_R11;
  void **extraout_R11_00;
  internal_abi_Type **extraout_R11_01;
  internal_abi_Type *typ;
  int s_1;
  void *addr;
  internal_abi_Type *piVar24;
  int e;
  int iVar25;
  int unaff_R14;
  undefined auVar26 [16];
  reflect_makeFuncImpl *prStack0000000000000008;
  void *pvStack0000000000000010;
  bool *pbStack0000000000000018;
  internal_abi_RegArgs *piStack0000000000000020;
  internal_abi_Type *in_stack_fffffffffffffc20;
  internal_abi_Type *piVar27;
  void *in_stack_fffffffffffffc28;
  uint8 *in_stack_fffffffffffffc30;
  uint8 *in_stack_fffffffffffffc38;
  uint8 *in_stack_fffffffffffffc40;
  internal_abi_Type *in_stack_fffffffffffffc48;
  string in_stack_fffffffffffffc50;
  undefined auVar28 [24];
  undefined auVar30 [24];
  undefined in_stack_fffffffffffffc60 [120];
  int i;
  reflect_abiDesc abid;
  undefined auVar29 [72];
  
  prStack0000000000000008 = ctxt;
  pbStack0000000000000018 = retValid;
  pvStack0000000000000010 = frame;
  piStack0000000000000020 = regs;
  while (&stack0xfffffffffffffca0 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar12 = *(int **)(unaff_R14 + 0x20);
  if ((piVar12 != (int *)0x0) && ((reflect_makeFuncImpl **)*piVar12 == &stack0x00000008)) {
    *piVar12 = (int)&stack0xfffffffffffffc20;
  }
  if (reflect_callGC != false) {
    runtime_GC();
  }
  piVar3 = prStack0000000000000008->ftyp;
  f_00 = prStack0000000000000008->fn;
  FUN_0046cd8f();
  abid_00.call.steps.len = (int)in_stack_fffffffffffffc28;
  abid_00.call.steps.array = (reflect_abiStep *)in_stack_fffffffffffffc20;
  abid_00.call.steps.cap = (int)in_stack_fffffffffffffc30;
  abid_00.call.valueStart.array = (int *)in_stack_fffffffffffffc38;
  abid_00.call.valueStart.len = (int)in_stack_fffffffffffffc40;
  abid_00.call.valueStart.cap = (int)in_stack_fffffffffffffc48;
  abid_00.call.stackBytes = (uintptr)in_stack_fffffffffffffc50.str;
  abid_00.call.iregs = in_stack_fffffffffffffc50.len;
  auVar29 = in_stack_fffffffffffffc60._8_72_;
  abid_00.call.fregs = in_stack_fffffffffffffc60._0_8_;
  auVar28 = auVar29._0_24_;
  auVar30 = auVar29._24_24_;
  abid_00.ret.steps.array = (reflect_abiStep *)auVar28._0_8_;
  abid_00.ret.steps.len = auVar28._8_8_;
  abid_00.ret.steps.cap = auVar28._16_8_;
  abid_00.ret.valueStart.array = (int *)auVar30._0_8_;
  abid_00.ret.valueStart.len = auVar30._8_8_;
  abid_00.ret.valueStart.cap = auVar30._16_8_;
  abid_00.ret.stackBytes = auVar29._48_8_;
  abid_00.ret.iregs = auVar29._56_8_;
  abid_00.ret.fregs = auVar29._64_8_;
  abid_00.stackCallArgsSize = in_stack_fffffffffffffc60._80_8_;
  abid_00.retOffset = in_stack_fffffffffffffc60._88_8_;
  abid_00.spill = in_stack_fffffffffffffc60._96_8_;
  abid_00.stackPtrs = (reflect_bitVector *)in_stack_fffffffffffffc60._104_8_;
  abid_00.inRegPtrs[0] = in_stack_fffffffffffffc60[112];
  abid_00.inRegPtrs[1] = in_stack_fffffffffffffc60[113];
  abid_00.outRegPtrs[0] = in_stack_fffffffffffffc60[114];
  abid_00.outRegPtrs[1] = in_stack_fffffffffffffc60[115];
  abid_00._180_4_ = in_stack_fffffffffffffc60._116_4_;
  reflect_funcLayout(t,(internal_abi_Type *)0x0,&t->Type,framePool,abid_00);
  piVar27 = in_stack_fffffffffffffc20;
  FUN_0046d0c6();
  FUN_0046d0c6();
  runtime_makeslice((internal_abi_Type *)&DAT_008ada60,0,(uint)piVar3->InCount,~r0_07);
  if (((piVar3->Type).TFlag & 1) == 0) {
    uadd = 0x38;
  }
  else {
    uadd = 0x48;
  }
  uVar2 = piVar3->InCount;
  uVar19 = (uint)uVar2;
  if (uVar2 == 0) {
    uVar19 = 0;
    iVar21 = 0;
  }
  else {
    iVar21 = (int)&(piVar3->Type).Size_ + uadd;
    if (0x10000 < uVar19) {
                    // WARNING: Subroutine does not return
      runtime_panicSlice3Alen();
    }
  }
  uVar13 = (uint)uVar2;
  ~r0_06 = (void *)0x0;
  uVar14 = 0;
  oldPtr = extraout_RAX;
  do {
    if ((int)uVar19 <= (int)~r0_06) {
      _Var5.len = (int)in_stack_fffffffffffffc28;
      _Var5.array = (reflect_Value *)piVar27;
      _Var5.cap = (int)in_stack_fffffffffffffc30;
      auVar26 = (**f_00)(_Var5,oldPtr);
      iVar21 = auVar26._0_8_;
      uVar19 = (uint)(piVar3->OutCount & 0x7fff);
      if (auVar26._8_8_ != uVar19) {
        e_05.data = in_stack_fffffffffffffc28;
        e_05._type = piVar27;
                    // WARNING: Subroutine does not return
        runtime_gopanic(e_05);
      }
      if (uVar19 != 0) {
        if (((piVar3->Type).TFlag & 1) == 0) {
          uadd_1 = 0x38;
        }
        else {
          uadd_1 = 0x48;
        }
        uVar19 = (uint)piVar3->InCount;
        uVar14 = (uint)((piVar3->OutCount & 0x7fff) + (dword)piVar3->InCount & 0xffff);
        if (uVar14 < uVar19) {
                    // WARNING: Subroutine does not return
          runtime_panicSlice3C();
        }
        iVar25 = uVar14 - uVar19;
        for (i_1 = 0; i_1 < iVar25; i_1 = i_1 + 1) {
          if (auVar26._8_8_ <= (uint)i_1) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          piVar24 = *(internal_abi_Type **)(iVar21 + i_1 * 0x18);
          if (piVar24 == (internal_abi_Type *)0x0) {
            ~r0_00.len = (int)in_stack_fffffffffffffc28;
            ~r0_00.str = (uint8 *)piVar27;
            reflect_funcName(f_00,~r0_00);
            a0_00.len = (int)in_stack_fffffffffffffc28;
            a0_00.str = (uint8 *)piVar27;
            a1_00.len = (int)in_stack_fffffffffffffc38;
            a1_00.str = in_stack_fffffffffffffc30;
            a2_00.len = (int)in_stack_fffffffffffffc48;
            a2_00.str = in_stack_fffffffffffffc40;
            runtime_concatstring3((runtime_tmpBuf *)0x0,a0_00,a1_00,a2_00,in_stack_fffffffffffffc50)
            ;
            val_00.len = (int)in_stack_fffffffffffffc28;
            val_00.str = (uint8 *)piVar27;
            runtime_convTstring(val_00,x_00);
            e_04.data = in_stack_fffffffffffffc28;
            e_04._type = piVar27;
                    // WARNING: Subroutine does not return
            runtime_gopanic(e_04);
          }
          if ((*(uint *)(iVar21 + 0x10 + i_1 * 0x18) & 0x60) != 0) {
            ~r0.len = (int)in_stack_fffffffffffffc28;
            ~r0.str = (uint8 *)piVar27;
            reflect_funcName(f_00,~r0);
            a0.len = (int)in_stack_fffffffffffffc28;
            a0.str = (uint8 *)piVar27;
            a1.len = (int)in_stack_fffffffffffffc38;
            a1.str = in_stack_fffffffffffffc30;
            a2.len = (int)in_stack_fffffffffffffc48;
            a2.str = in_stack_fffffffffffffc40;
            runtime_concatstring3((runtime_tmpBuf *)0x0,a0,a1,a2,in_stack_fffffffffffffc50);
            val.len = (int)in_stack_fffffffffffffc28;
            val.str = (uint8 *)piVar27;
            runtime_convTstring(val,x);
            e_03.data = in_stack_fffffffffffffc28;
            e_03._type = piVar27;
                    // WARNING: Subroutine does not return
            runtime_gopanic(e_03);
          }
          if (**(int **)((int)&(piVar3->Type).Size_ +
                        i_1 * 8 + (uVar19 << 3 & -iVar25 >> 0x3f) + uadd_1) != 0) {
            v_00.ptr = in_stack_fffffffffffffc28;
            v_00.typ_ = piVar27;
            v_00.flag = (reflect_flag)in_stack_fffffffffffffc30;
            context.len = (int)in_stack_fffffffffffffc40;
            context.str = in_stack_fffffffffffffc38;
            ~r0_05.ptr = in_stack_fffffffffffffc50.str;
            ~r0_05.flag = in_stack_fffffffffffffc50.len;
            ~r0_05.typ_ = in_stack_fffffffffffffc48;
            reflect_Value_assignTo(v_00,context,piVar24,*(void **)(iVar21 + 8 + i_1 * 0x18),~r0_05);
            if ((uint)abid.ret.valueStart.len <= (uint)i_1) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            uVar14 = abid.ret.valueStart.array[i_1];
            e_1 = abid.ret.steps.len;
            if (i_1 != abid.ret.valueStart.len + -1) {
              if ((uint)abid.ret.valueStart.len <= i_1 + 1U) {
