      dVar6 = dVar6 + 0xe6db99e5 + in_stack_00000010[0xc] + (dVar8 ^ dVar5 ^ dVar2);
      dVar6 = (dVar6 * 0x800 | dVar6 >> 0x15) + dVar2;
      dVar5 = dVar5 + 0x1fa27cf8 + in_stack_00000010[0xf] + (dVar2 ^ dVar8 ^ dVar6);
      dVar5 = (dVar5 * 0x10000 | dVar5 >> 0x10) + dVar6;
      dVar8 = dVar8 + 0xc4ac5665 + in_stack_00000010[2] + (dVar6 ^ dVar2 ^ dVar5);
      dVar8 = (dVar8 * 0x800000 | dVar8 >> 9) + dVar5;
      dVar2 = dVar2 + 0xf4292244 + *in_stack_00000010 + ((dVar6 ^ 0xffffffff | dVar8) ^ dVar5);
      dVar2 = (dVar2 * 0x40 | dVar2 >> 0x1a) + dVar8;
      dVar6 = dVar6 + 0x432aff97 + in_stack_00000010[7] + ((dVar5 ^ 0xffffffff | dVar2) ^ dVar8);
      dVar6 = (dVar6 * 0x400 | dVar6 >> 0x16) + dVar2;
      dVar5 = dVar5 + 0xab9423a7 + in_stack_00000010[0xe] + ((dVar8 ^ 0xffffffff | dVar6) ^ dVar2);
      dVar5 = (dVar5 * 0x8000 | dVar5 >> 0x11) + dVar6;
      dVar8 = dVar8 + 0xfc93a039 + in_stack_00000010[5] + ((dVar2 ^ 0xffffffff | dVar5) ^ dVar6);
      dVar8 = (dVar8 * 0x200000 | dVar8 >> 0xb) + dVar5;
      dVar2 = dVar2 + 0x655b59c3 + in_stack_00000010[0xc] + ((dVar6 ^ 0xffffffff | dVar8) ^ dVar5);
      dVar2 = (dVar2 * 0x40 | dVar2 >> 0x1a) + dVar8;
      dVar6 = dVar6 + 0x8f0ccc92 + in_stack_00000010[3] + ((dVar5 ^ 0xffffffff | dVar2) ^ dVar8);
      dVar6 = (dVar6 * 0x400 | dVar6 >> 0x16) + dVar2;
      dVar5 = (dVar5 - 0x100b83) + in_stack_00000010[10] + ((dVar8 ^ 0xffffffff | dVar6) ^ dVar2);
      dVar5 = (dVar5 * 0x8000 | dVar5 >> 0x11) + dVar6;
      dVar8 = dVar8 + 0x85845dd1 + in_stack_00000010[1] + ((dVar2 ^ 0xffffffff | dVar5) ^ dVar6);
      dVar8 = (dVar8 * 0x200000 | dVar8 >> 0xb) + dVar5;
      dVar2 = dVar2 + 0x6fa87e4f + in_stack_00000010[8] + ((dVar6 ^ 0xffffffff | dVar8) ^ dVar5);
      dVar2 = (dVar2 * 0x40 | dVar2 >> 0x1a) + dVar8;
      dVar6 = dVar6 + 0xfe2ce6e0 + in_stack_00000010[0xf] + ((dVar5 ^ 0xffffffff | dVar2) ^ dVar8);
      dVar6 = (dVar6 * 0x400 | dVar6 >> 0x16) + dVar2;
      dVar5 = dVar5 + 0xa3014314 + in_stack_00000010[6] + ((dVar8 ^ 0xffffffff | dVar6) ^ dVar2);
      dVar5 = (dVar5 * 0x8000 | dVar5 >> 0x11) + dVar6;
      dVar8 = dVar8 + 0x4e0811a1 + in_stack_00000010[0xd] + ((dVar2 ^ 0xffffffff | dVar5) ^ dVar6);
      dVar8 = (dVar8 * 0x200000 | dVar8 >> 0xb) + dVar5;
      dVar2 = dVar2 + 0xf7537e82 + in_stack_00000010[4] + ((dVar6 ^ 0xffffffff | dVar8) ^ dVar5);
      dVar2 = (dVar2 * 0x40 | dVar2 >> 0x1a) + dVar8;
      dVar6 = dVar6 + 0xbd3af235 + in_stack_00000010[0xb] + ((dVar5 ^ 0xffffffff | dVar2) ^ dVar8);
      dVar6 = (dVar6 * 0x400 | dVar6 >> 0x16) + dVar2;
      dVar5 = dVar5 + 0x2ad7d2bb + in_stack_00000010[2] + ((dVar8 ^ 0xffffffff | dVar6) ^ dVar2);
      dVar5 = (dVar5 * 0x8000 | dVar5 >> 0x11) + dVar6;
      dVar8 = dVar8 + 0xeb86d391 + in_stack_00000010[9] + ((dVar2 ^ 0xffffffff | dVar5) ^ dVar6);
      sVar3 = dVar2 + sVar3;
      dVar9 = (dVar8 * 0x200000 | dVar8 >> 0xb) + dVar5 + dVar9;
      dVar4 = dVar5 + dVar4;
      dVar7 = dVar6 + dVar7;
      in_stack_00000010 = in_stack_00000010 + 0x10;
    } while (in_stack_00000010 < psVar1);
  }
  *in_stack_00000008 = sVar3;
  in_stack_00000008[1] = dVar9;
  in_stack_00000008[2] = dVar4;
  in_stack_00000008[3] = dVar7;
  return;
}



// WARNING: Removing unreachable block (ram,0x00687751)

void path_filepath_Clean(string path,string ~r0)

{
  uint8 *puVar1;
  string ~r0_00;
  string ~r0_01;
  uint8 *in_RAX;
  uint8 *__dest;
  uint8 *__dest_00;
  uint8 *__dest_01;
  uint8 *__dest_02;
  uint8 *__dest_03;
  uint8 *__dest_04;
  uint8 *__dest_05;
  int dotdot;
  size_t sVar2;
  uint8 *puVar3;
  uint8 *puVar4;
  uint8 *in_RBX;
  uint8 uVar5;
  uint8 *puVar6;
  int r;
  uint8 uVar7;
  int unaff_R14;
  undefined in_XMM15 [16];
  string in_stack_ffffffffffffff30;
  string in_stack_ffffffffffffff40;
  undefined in_stack_ffffffffffffff50 [14];
  byte in_stack_ffffffffffffff5e;
  byte bVar8;
  undefined in_stack_ffffffffffffff5f;
  uint8 uVar9;
  uint8 local_78 [32];
  uint8 *local_58;
  path_filepath_lazybuf out;
  
  while (&out <= *(path_filepath_lazybuf **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RBX == (uint8 *)0x0) {
    ~r0_00.len._6_1_ = in_stack_ffffffffffffff5e;
    ~r0_00._0_14_ = in_stack_ffffffffffffff50;
    ~r0_00.len._7_1_ = in_stack_ffffffffffffff5f;
    runtime_concatstring2
              ((runtime_tmpBuf *)0x0,in_stack_ffffffffffffff30,in_stack_ffffffffffffff40,~r0_00);
    return;
  }
  uVar5 = *in_RAX;
  out.buf.array = in_XMM15._8_8_;
  out.w = in_XMM15._0_8_;
  out.volLen = (int)out.buf.array;
  out.volAndPath.len = (int)in_RBX;
  puVar6 = out.buf.array;
  out.path.str = in_RAX;
  out.path.len = (int)in_RBX;
  out.buf._8_16_ = in_XMM15;
  out.volAndPath.str = in_RAX;
  if (uVar5 != 0x2f) {
    puVar1 = (uint8 *)0x0;
    puVar4 = (uint8 *)0x0;
    uVar9 = uVar5;
    goto LAB_00687371;
  }
  if (out.buf.array == (uint8 *)0x0) {
    if (((int)in_RBX < 1) || (*in_RAX != 0x2f)) {
      runtime_makeslice((internal_abi_Type *)&DAT_00807920,(int)in_RBX,(int)in_RBX,(void *)0x0);
      out.buf.cap = (int)in_RBX;
      out.buf.len = (int)in_RBX;
      if ((uint)out.path.len < (uint)out.w) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceAlen();
      }
      puVar6 = in_RBX;
      if (out.w < (int)in_RBX) {
        puVar6 = (uint8 *)out.w;
      }
      out.buf.array = __dest;
      if (__dest != out.path.str) {
        runtime_memmove(__dest,out.path.str,(size_t)puVar6);
      }
      goto LAB_0068730d;
    }
    out.w = 1;
  }
  else {
LAB_0068730d:
    if ((uint)out.buf.len <= (uint)out.w) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    out.buf.array[out.w] = 0x2f;
    puVar6 = (uint8 *)out.w;
    out.w = out.w + 1;
  }
  puVar1 = &DAT_00000001;
  puVar4 = &DAT_00000001;
  uVar9 = uVar5;
LAB_00687371:
  do {
    puVar3 = puVar1;
    sVar2 = out.path.len;
    if ((int)in_RBX <= (int)puVar3) break;
    if (in_RBX <= puVar3) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    bVar8 = in_RAX[(int)puVar3];
    puVar6 = (uint8 *)(uint)bVar8;
    if (bVar8 != 0x2f) {
      if (bVar8 == 0x2e) {
        puVar1 = puVar3 + 1;
        if (in_RBX == puVar1) goto LAB_00687371;
        if (in_RBX <= puVar1) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        if ((in_RAX + 1)[(int)puVar3] == 0x2f) goto LAB_00687371;
        if (in_RBX <= puVar1) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        if ((in_RAX + 1)[(int)puVar3] == 0x2e) {
          puVar6 = puVar3 + 2;
          if (in_RBX != puVar6) {
            if (in_RBX <= puVar6) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            if ((puVar3 + 2)[(int)in_RAX] != 0x2f) goto LAB_0068775b;
          }
          puVar1 = puVar6;
          if ((int)puVar4 < out.w) {
            do {
              out.w = out.w + -1;
              if (out.w <= (int)puVar4) break;
              if (out.buf.array == (uint8 *)0x0) {
                if ((uint)out.path.len <= (uint)out.w) {
                    // WARNING: Subroutine does not return
                  runtime_panicIndex();
                }
                uVar7 = out.path.str[out.w];
              }
              else {
                if ((uint)out.buf.len <= (uint)out.w) {
                    // WARNING: Subroutine does not return
                  runtime_panicIndex();
                }
                uVar7 = out.buf.array[out.w];
              }
            } while (uVar7 != 0x2f);
          }
          else if (uVar5 != 0x2f) {
            if (0 < out.w) {
              if (out.buf.array == (uint8 *)0x0) {
                if (out.w < out.path.len) {
                  if ((uint)out.path.len <= (uint)out.w) {
                    // WARNING: Subroutine does not return
                    runtime_panicIndex();
                  }
                  if (out.path.str[out.w] == 0x2f) {
                    out.w = out.w + 1;
                    goto LAB_00687534;
                  }
                }
                uVar5 = uVar9;
                runtime_makeslice((internal_abi_Type *)&DAT_00807920,out.path.len,out.path.len,
                                  puVar6);
                out.buf.cap = sVar2;
                out.buf.len = sVar2;
                if ((uint)out.path.len < (uint)out.w) {
                    // WARNING: Subroutine does not return
                  runtime_panicSliceAlen();
                }
                if (out.w < (int)sVar2) {
                  sVar2 = out.w;
                }
                uVar9 = uVar5;
                out.buf.array = __dest_00;
                if (__dest_00 != out.path.str) {
                  runtime_memmove(__dest_00,out.path.str,sVar2);
                  uVar9 = uVar5;
                }
              }
              if ((uint)out.buf.len <= (uint)out.w) {
                    // WARNING: Subroutine does not return
                runtime_panicIndex();
              }
              out.buf.array[out.w] = 0x2f;
              out.w = out.w + 1;
            }
LAB_00687534:
            sVar2 = out.path.len;
            if (out.buf.array == (uint8 *)0x0) {
              if (out.path.len <= out.w) {
LAB_00687589:
                uVar5 = uVar9;
                runtime_makeslice((internal_abi_Type *)&DAT_00807920,out.path.len,out.path.len,
                                  puVar6);
                out.buf.cap = sVar2;
                out.buf.len = sVar2;
                if ((uint)out.path.len < (uint)out.w) {
                    // WARNING: Subroutine does not return
                  runtime_panicSliceAlen();
                }
                if (out.w < (int)sVar2) {
                  sVar2 = out.w;
                }
                uVar9 = uVar5;
                out.buf.array = __dest_01;
                if (__dest_01 != out.path.str) {
                  runtime_memmove(__dest_01,out.path.str,sVar2);
                  uVar9 = uVar5;
                }
                goto LAB_00687606;
              }
              if ((uint)out.path.len <= (uint)out.w) {
                    // WARNING: Subroutine does not return
                runtime_panicIndex();
              }
              if (out.path.str[out.w] != 0x2e) goto LAB_00687589;
            }
            else {
LAB_00687606:
              if ((uint)out.buf.len <= (uint)out.w) {
                    // WARNING: Subroutine does not return
                runtime_panicIndex();
              }
              out.buf.array[out.w] = 0x2e;
            }
            sVar2 = out.path.len;
            out.w = out.w + 1;
            if (out.buf.array == (uint8 *)0x0) {
              if (out.path.len <= out.w) {
LAB_00687689:
                uVar5 = uVar9;
                runtime_makeslice((internal_abi_Type *)&DAT_00807920,out.path.len,out.path.len,
                                  puVar6);
                out.buf.cap = sVar2;
                out.buf.len = sVar2;
                if ((uint)out.path.len < (uint)out.w) {
                    // WARNING: Subroutine does not return
                  runtime_panicSliceAlen();
                }
                if (out.w < (int)sVar2) {
                  sVar2 = out.w;
                }
                uVar9 = uVar5;
                out.buf.array = __dest_02;
                if (__dest_02 != out.path.str) {
                  runtime_memmove(__dest_02,out.path.str,sVar2);
                  uVar9 = uVar5;
                }
                goto LAB_00687706;
              }
              if ((uint)out.path.len <= (uint)out.w) {
                    // WARNING: Subroutine does not return
                runtime_panicIndex();
              }
              if (out.path.str[out.w] != 0x2e) goto LAB_00687689;
            }
            else {
LAB_00687706:
              if ((uint)out.buf.len <= (uint)out.w) {
                    // WARNING: Subroutine does not return
                runtime_panicIndex();
              }
              out.buf.array[out.w] = 0x2e;
            }
            out.w = out.w + 1;
            puVar4 = (uint8 *)out.w;
          }
          goto LAB_00687371;
        }
      }
LAB_0068775b:
      if (uVar5 == 0x2f) {
        if (out.w != 1) {
LAB_00687786:
          if (out.buf.array == (uint8 *)0x0) {
            if (out.w < out.path.len) {
              if ((uint)out.path.len <= (uint)out.w) {
                    // WARNING: Subroutine does not return
                runtime_panicIndex();
              }
              if (out.path.str[out.w] == 0x2f) {
                out.w = out.w + 1;
                puVar6 = (uint8 *)out.w;
                goto LAB_00687a60;
              }
            }
            uVar5 = uVar9;
            runtime_makeslice((internal_abi_Type *)&DAT_00807920,out.path.len,out.path.len,
                              (void *)out.w);
            out.buf.cap = sVar2;
            out.buf.len = sVar2;
            if ((uint)out.path.len < (uint)out.w) {
                    // WARNING: Subroutine does not return
              runtime_panicSliceAlen();
            }
            if (out.w < (int)sVar2) {
              sVar2 = out.w;
            }
            uVar9 = uVar5;
            out.buf.array = __dest_03;
            if (__dest_03 != out.path.str) {
              runtime_memmove(__dest_03,out.path.str,sVar2);
              uVar9 = uVar5;
            }
          }
          if ((uint)out.buf.len <= (uint)out.w) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          out.buf.array[out.w] = 0x2f;
          out.w = out.w + 1;
          puVar6 = out.buf.array;
        }
      }
      else if (out.w != 0) goto LAB_00687786;
LAB_00687a60:
      for (; sVar2 = out.path.len, puVar1 = puVar3, (int)puVar3 < (int)in_RBX; puVar3 = puVar3 + 1)
      {
        bVar8 = in_RAX[(int)puVar3];
        puVar6 = (uint8 *)(uint)bVar8;
        if (bVar8 == 0x2f) break;
        if (out.buf.array == (uint8 *)0x0) {
          if (out.path.len <= out.w) {
LAB_00687acb:
            runtime_makeslice((internal_abi_Type *)&DAT_00807920,out.path.len,out.path.len,puVar6);
            out.buf.cap = sVar2;
            out.buf.len = sVar2;
            if ((uint)out.path.len < (uint)out.w) {
                    // WARNING: Subroutine does not return
              runtime_panicSliceAlen();
            }
            if (out.w < (int)sVar2) {
              sVar2 = out.w;
            }
            uVar5 = uVar9;
            out.buf.array = __dest_05;
            if (__dest_05 != out.path.str) {
              runtime_memmove(__dest_05,out.path.str,sVar2);
              uVar5 = uVar9;
            }
            puVar6 = (uint8 *)(uint)bVar8;
            in_stack_ffffffffffffff5e = bVar8;
            uVar9 = uVar5;
            goto LAB_00687b54;
          }
          if ((uint)out.path.len <= (uint)out.w) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          if (out.path.str[out.w] != bVar8) goto LAB_00687acb;
          puVar6 = (uint8 *)(out.w + 1);
          in_stack_ffffffffffffff5e = bVar8;
          out.w = (int)puVar6;
        }
        else {
LAB_00687b54:
          if ((uint)out.buf.len <= (uint)out.w) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          out.buf.array[out.w] = (uint8)puVar6;
          out.w = out.w + 1;
        }
      }
      goto LAB_00687371;
    }
    puVar6 = puVar3 + 1;
    puVar1 = puVar6;
  } while( true );
  if (out.w == 0) {
    if (out.buf.array == (uint8 *)0x0) {
      if (0 < out.path.len) {
        if (out.path.len == 0) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        if (*out.path.str == 0x2e) {
          out.w = 1;
          goto LAB_00687992;
        }
      }
      runtime_makeslice((internal_abi_Type *)&DAT_00807920,out.path.len,out.path.len,puVar6);
      out.buf.cap = sVar2;
      out.buf.len = sVar2;
      if ((uint)out.path.len < (uint)out.w) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceAlen();
      }
      if (out.w < (int)sVar2) {
        sVar2 = out.w;
      }
      out.buf.array = __dest_04;
      if (__dest_04 != out.path.str) {
        runtime_memmove(__dest_04,out.path.str,sVar2);
      }
    }
    if ((uint)out.buf.len <= (uint)out.w) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    out.buf.array[out.w] = 0x2e;
    out.w = out.w + 1;
  }
LAB_00687992:
  if (out.buf.array == (uint8 *)0x0) {
    if ((uint)out.volAndPath.len < (uint)(out.volLen + out.w)) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAlen();
    }
  }
  else {
    if ((uint)out.volAndPath.len < (uint)out.volLen) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAlen();
    }
    if ((uint)out.buf.cap < (uint)out.w) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAcap();
    }
    local_58 = out.volAndPath.str;
    runtime_slicebytetostring(&local_78,out.buf.array,out.w,in_stack_ffffffffffffff30);
    ~r0_01.len._6_1_ = in_stack_ffffffffffffff5e;
    ~r0_01._0_14_ = in_stack_ffffffffffffff50;
    ~r0_01.len._7_1_ = uVar9;
    runtime_concatstring2
              ((runtime_tmpBuf *)0x0,in_stack_ffffffffffffff30,in_stack_ffffffffffffff40,~r0_01);
  }
  return;
}



void path_filepath_Base(string path,string ~r0)

{
  uint uVar1;
  int in_RAX;
  uint uVar2;
  int i;
  uint in_RBX;
  
  if (in_RBX == 0) {
    return;
  }
  for (; (uVar2 = in_RBX, in_RBX != 0 && (*(char *)((in_RBX - 1) + in_RAX) == '/'));
      in_RBX = in_RBX - 1) {
  }
  do {
    uVar1 = uVar2;
    uVar2 = uVar1 - 1;
    if ((int)uVar2 < 0) goto LAB_00687d73;
  } while (*(char *)(in_RAX + uVar2) != '/');
  if (-1 < (int)uVar2) {
    if (in_RBX < uVar1) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    in_RBX = (in_RBX - uVar2) - 1;
  }
LAB_00687d73:
  if (in_RBX != 0) {
    return;
  }
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void path_filepath_join(__string elem,string ~r0)

{
  __string elems;
  string ~r0_00;
  string sep;
  string ~r0_01;
  int in_RAX;
  int in_RBX;
  uint8 *unaff_RBP;
  int i;
  int unaff_R14;
  int unaff_retaddr;
  string in_stack_ffffffffffffffd0;
  uint8 *in_stack_ffffffffffffffe0;
  uint8 *in_stack_ffffffffffffffe8;
  int in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  i = 0;
  while( true ) {
    if (in_RBX <= i) {
      return;
    }
    if (*(int *)(in_RAX + 8) != 0) break;
    in_RAX = in_RAX + 0x10;
    i = i + 1;
  }
  elems.cap = (int)in_stack_ffffffffffffffe0;
  elems.array = (string *)in_stack_ffffffffffffffd0.str;
  elems.len = in_stack_ffffffffffffffd0.len;
  sep.len = in_stack_fffffffffffffff0;
  sep.str = in_stack_ffffffffffffffe8;
  ~r0_01.len = unaff_retaddr;
  ~r0_01.str = unaff_RBP;
  strings_Join(elems,sep,~r0_01);
  ~r0_00.len = (int)in_stack_ffffffffffffffe8;
  ~r0_00.str = in_stack_ffffffffffffffe0;
  path_filepath_Clean(in_stack_ffffffffffffffd0,~r0_00);
  return;
}



int path_filepath_init(EVP_PKEY_CTX *ctx)

{
  runtime_itab *prVar1;
  void *extraout_RCX;
  void *pvVar2;
  void *extraout_RCX_00;
  void *pvVar3;
  void **extraout_R11;
  void **extraout_R11_00;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  path_filepath_SkipDir.tab = io_fs_SkipDir.tab;
  pvVar2 = io_fs_SkipDir.data;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RCX;
    extraout_R11[1] = path_filepath_SkipDir.data;
    pvVar2 = extraout_RCX;
  }
  path_filepath_SkipAll.tab = io_fs_SkipAll.tab;
  prVar1 = io_fs_SkipAll.tab;
  pvVar3 = io_fs_SkipAll.data;
  path_filepath_SkipDir.data = pvVar2;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = extraout_RCX_00;
    extraout_R11_00[1] = path_filepath_SkipAll.data;
    prVar1 = (runtime_itab *)path_filepath_SkipAll.data;
    pvVar3 = extraout_RCX_00;
  }
  path_filepath_SkipAll.data = pvVar3;
  return (int)prVar1;
}



// WARNING: Unknown calling convention

void crypto_sha1_init_0(void)

{
  func___hash_Hash ***extraout_RAX;
  func___hash_Hash ***pppfVar1;
  undefined8 extraout_RCX;
  undefined8 *extraout_R11;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (3 < (uint)crypto_hashes.len) {
    pppfVar1 = crypto_hashes.array;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11 = extraout_RCX;
      pppfVar1 = extraout_RAX;
    }
    pppfVar1[3] = (func___hash_Hash **)&PTR_crypto_sha1_New_008ec908;
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndexU();
}



// WARNING: Removing unreachable block (ram,0x00687fa3)
// WARNING: Removing unreachable block (ram,0x00687fdc)
// WARNING: Removing unreachable block (ram,0x00688015)

void crypto_sha1___digest__MarshalBinary(crypto_sha1_digest *d,__uint8 ~r0,error ~r1)

{
  dword dVar1;
  undefined4 *oldPtr;
  undefined4 *extraout_RAX;
  undefined4 *extraout_RAX_00;
  undefined4 *oldPtr_00;
  uint extraout_RCX;
  uint oldCap;
  int iVar2;
  uint uVar3;
  uint extraout_RBX;
  uint extraout_RBX_00;
  uint uVar4;
  void *in_RDI;
  void *extraout_RDI;
  int unaff_R14;
  runtime_slice in_stack_ffffffffffffff80;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,0,0x60,in_RDI);
  *oldPtr = 0x1616873;
  dVar1 = d->h[0];
  oldPtr[1] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
  dVar1 = d->h[1];
  oldPtr[2] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
  dVar1 = d->h[2];
  oldPtr[3] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
  dVar1 = d->h[3];
  oldPtr[4] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
  dVar1 = d->h[4];
  oldCap = 0x60;
  oldPtr[5] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
  uVar4 = d->nx;
  if (uVar4 < 0x41) {
    uVar3 = uVar4 + 0x18;
    oldPtr_00 = oldPtr;
    if (0x60 < uVar3) {
      runtime_growslice(oldPtr,uVar3,0x60,uVar4,(internal_abi_Type *)&DAT_00807920,
                        in_stack_ffffffffffffff80);
      oldPtr_00 = extraout_RAX;
      oldCap = extraout_RCX;
      uVar3 = extraout_RBX;
    }
    runtime_memmove(oldPtr_00 + 6,d->x,uVar4);
    iVar2 = uVar3 - d->nx;
    if (iVar2 + 0x40U <= oldCap) {
      uVar4 = iVar2 + 0x48;
      uVar3 = d->len;
      if (oldCap < uVar4) {
        runtime_growslice(oldPtr_00,uVar4,oldCap,8,(internal_abi_Type *)&DAT_00807920,
                          in_stack_ffffffffffffff80);
        oldPtr_00 = extraout_RAX_00;
        uVar4 = extraout_RBX_00;
      }
      *(uint *)((uVar4 - 8) + (int)oldPtr_00) =
           uVar3 >> 0x38 | (uVar3 & 0xff000000000000) >> 0x28 | (uVar3 & 0xff0000000000) >> 0x18 |
           (uVar3 & 0xff00000000) >> 8 | (uVar3 & 0xff000000) << 8 | (uVar3 & 0xff0000) << 0x18 |
           (uVar3 & 0xff00) << 0x28 | uVar3 << 0x38;
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceAlen();
}



void crypto_sha1___digest__UnmarshalBinary(crypto_sha1_digest *d,__uint8 b,error ~r0)

{
  dword dVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  undefined8 *extraout_RAX;
  undefined8 *extraout_RAX_00;
  int in_RCX;
  sdword *in_RBX;
  int in_RDI;
  undefined *__src;
  uint uVar5;
  uint uVar6;
  uint uVar7;
  int unaff_R14;
  uint uVar8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((3 < in_RCX) && (*in_RBX == 0x1616873)) {
    if (in_RCX == 0x60) {
      dVar1 = in_RBX[1];
      uVar5 = (uint)((dword)(-(in_RDI + -8) >> 0x3f) & 4);
      iVar2 = uVar5 + 4;
      uVar6 = (uint)((dword)(-(in_RDI + -0xc) >> 0x3f) & 4);
      iVar3 = uVar6 + iVar2;
      uVar7 = (uint)((dword)(-(in_RDI + -0x10) >> 0x3f) & 4);
      iVar4 = uVar7 + iVar3;
      uVar8 = (uint)((dword)(-(in_RDI + -0x14) >> 0x3f) & 4);
      __src = (undefined *)
              ((int)in_RBX + (uint)((dword)(-(in_RDI + -0x18) >> 0x3f) & 4) + uVar8 + iVar4);
      d->h[0] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
      dVar1 = *(dword *)((int)in_RBX + uVar5 + 4);
      d->h[1] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
      dVar1 = *(dword *)((int)in_RBX + uVar6 + iVar2);
      d->h[2] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
      dVar1 = *(dword *)((int)in_RBX + uVar7 + iVar3);
      d->h[3] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
      dVar1 = *(dword *)((int)in_RBX + uVar8 + iVar4);
      d->h[4] = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
      if (d->x != __src) {
        runtime_memmove(d->x,__src,0x40);
      }
      uVar5 = *(uint *)(__src + ((dword)(-(in_RDI + -0x58) >> 0x3f) & 0x40));
      uVar6 = uVar5 >> 0x38 | (uVar5 & 0xff000000000000) >> 0x28 | (uVar5 & 0xff0000000000) >> 0x18
              | (uVar5 & 0xff00000000) >> 8;
      d->len = uVar6 | (uVar5 & 0xff000000) << 8 | (uVar5 & 0xff0000) << 0x18 |
               (uVar5 & 0xff00) << 0x28 | uVar5 << 0x38;
      d->nx = (uint)((dword)uVar6 & 0x3f);
      return;
    }
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,in_RBX);
    extraout_RAX_00[1] = 0x24;
    *extraout_RAX_00 = &DAT_008c2b43;
    return;
  }
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,in_RBX);
  extraout_RAX[1] = 0x2a;
  *extraout_RAX = &DAT_008c5bef;
  return;
}



// WARNING: Unknown calling convention

void crypto_sha1___digest__Reset(crypto_sha1_digest *d)

{
  undefined4 in_XMM15_Da;
  undefined4 in_XMM15_Db;
  undefined4 in_XMM15_Dc;
  undefined4 in_XMM15_Dd;
  
  d->h[0] = 0x67452301;
  *(undefined8 *)(d->h + 1) = 0x98badcfeefcdab89;
  *(undefined8 *)(d->h + 3) = 0xc3d2e1f010325476;
  *(undefined4 *)&d->nx = in_XMM15_Da;
  *(undefined4 *)((int)&d->nx + 4) = in_XMM15_Db;
  *(undefined4 *)&d->len = in_XMM15_Dc;
  *(undefined4 *)((int)&d->len + 4) = in_XMM15_Dd;
  return;
}



void crypto_sha1_New(hash_Hash ~r0)

{
  undefined4 *extraout_RAX;
  crypto_sha1_digest *d;
  void *in_RBX;
  void *extraout_RBX;
  int unaff_R14;
  undefined in_XMM15 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RBX = extraout_RBX;
  }
  runtime_newobject((internal_abi_Type *)&DAT_00878860,in_RBX);
  *extraout_RAX = 0x67452301;
  *(undefined8 *)(extraout_RAX + 1) = 0x98badcfeefcdab89;
  *(undefined8 *)(extraout_RAX + 3) = 0xc3d2e1f010325476;
  *(undefined (*) [16])(extraout_RAX + 0x16) = in_XMM15;
  return;
}



void crypto_sha1___digest__Size(crypto_sha1_digest *d,int ~r0)

{
  return;
}



void crypto_sha1___digest__BlockSize(crypto_sha1_digest *d,int ~r0)

{
  return;
}



void crypto_sha1___digest__Write(crypto_sha1_digest *d,__uint8 p,int nn,error err)

{
  uint uVar1;
  uint in_RCX;
  int n;
  int iVar2;
  int n_1;
  int in_RDI;
  size_t __n;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffb0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  crypto_internal_boring_sig_StandardCrypto();
  d->len = d->len + in_RCX;
  uVar1 = d->nx;
  if (0 < (int)uVar1) {
    if (0x40 < uVar1) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    iVar2 = uVar1 - 0x40;
    n = -iVar2;
    if (SBORROW8(in_RCX,-iVar2) != (int)(in_RCX + iVar2) < 0) {
      n = in_RCX;
    }
    if ((uint8 *)nn != d->x + (iVar2 >> 0x3f & uVar1)) {
      runtime_memmove(d->x + (iVar2 >> 0x3f & uVar1),(void *)nn,n);
    }
    iVar2 = d->nx + n;
    d->nx = iVar2;
    if (iVar2 == 0x40) {
      crypto_sha1_block(d,in_stack_ffffffffffffffb0);
      d->nx = 0;
    }
    if (in_RCX < (uint)n) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    in_RDI = in_RDI - n;
    in_RCX = in_RCX - n;
    nn = nn + (-in_RDI >> 0x3f & n);
  }
  if (0x3f < (int)in_RCX) {
    crypto_sha1_block(d,in_stack_ffffffffffffffb0);
    nn = nn + ((int)((in_RCX & 0xffffffffffffffc0) - in_RDI) >> 0x3f & in_RCX & 0xffffffffffffffc0);
    in_RCX = in_RCX - (in_RCX & 0xffffffffffffffc0);
  }
  if (in_RCX != 0) {
    __n = 0x40;
    if ((int)in_RCX < 0x40) {
      __n = in_RCX;
    }
    if ((uint8 *)nn != d->x) {
      runtime_memmove(d->x,(void *)nn,__n);
    }
    d->nx = __n;
  }
  return;
}



void crypto_sha1___digest__Sum(crypto_sha1_digest *d,__uint8 in,__uint8 ~r0)

{
  uint8 ~r0_00 [20];
  runtime_slice ~r0_01;
  void *extraout_RAX;
  int in_RCX;
  void *in_RBX;
  uint in_RDI;
  int unaff_R14;
  undefined4 in_stack_ffffffffffffff38;
  undefined4 in_stack_ffffffffffffff3c;
  undefined4 in_stack_ffffffffffffff40;
  undefined4 in_stack_ffffffffffffff44;
  undefined4 in_stack_ffffffffffffff48;
  undefined4 in_stack_ffffffffffffff4c;
  undefined local_8c [20];
  crypto_sha1_digest local_78;
  
  while (local_78.x + 0x1c <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  crypto_internal_boring_sig_StandardCrypto();
  local_78.h._0_8_ = *(undefined8 *)d->h;
  FUN_0046d10c();
  ~r0_00[4] = (char)in_stack_ffffffffffffff3c;
  ~r0_00[5] = (char)((dword)in_stack_ffffffffffffff3c >> 8);
  ~r0_00[6] = (char)((dword)in_stack_ffffffffffffff3c >> 0x10);
  ~r0_00[7] = (char)((dword)in_stack_ffffffffffffff3c >> 0x18);
  ~r0_00[0] = (char)in_stack_ffffffffffffff38;
  ~r0_00[1] = (char)((dword)in_stack_ffffffffffffff38 >> 8);
  ~r0_00[2] = (char)((dword)in_stack_ffffffffffffff38 >> 0x10);
  ~r0_00[3] = (char)((dword)in_stack_ffffffffffffff38 >> 0x18);
  ~r0_00[8] = (char)in_stack_ffffffffffffff40;
  ~r0_00[9] = (char)((dword)in_stack_ffffffffffffff40 >> 8);
  ~r0_00[10] = (char)((dword)in_stack_ffffffffffffff40 >> 0x10);
  ~r0_00[11] = (char)((dword)in_stack_ffffffffffffff40 >> 0x18);
  ~r0_00[12] = (char)in_stack_ffffffffffffff44;
  ~r0_00[13] = (char)((dword)in_stack_ffffffffffffff44 >> 8);
  ~r0_00[14] = (char)((dword)in_stack_ffffffffffffff44 >> 0x10);
  ~r0_00[15] = (char)((dword)in_stack_ffffffffffffff44 >> 0x18);
  ~r0_00[16] = (char)in_stack_ffffffffffffff48;
  ~r0_00[17] = (char)((dword)in_stack_ffffffffffffff48 >> 8);
  ~r0_00[18] = (char)((dword)in_stack_ffffffffffffff48 >> 0x10);
  ~r0_00[19] = (char)((dword)in_stack_ffffffffffffff48 >> 0x18);
  crypto_sha1___digest__checkSum(&local_78,~r0_00);
  if (in_RDI < in_RCX + 0x14U) {
    ~r0_01.array._4_4_ = in_stack_ffffffffffffff3c;
    ~r0_01.array._0_4_ = in_stack_ffffffffffffff38;
    ~r0_01.len._0_4_ = in_stack_ffffffffffffff40;
    ~r0_01.len._4_4_ = in_stack_ffffffffffffff44;
    ~r0_01.cap._0_4_ = in_stack_ffffffffffffff48;
    ~r0_01.cap._4_4_ = in_stack_ffffffffffffff4c;
    runtime_growslice(in_RBX,in_RCX + 0x14U,in_RDI,0x14,(internal_abi_Type *)&DAT_00807920,~r0_01);
    in_RBX = extraout_RAX;
  }
  runtime_memmove((void *)(in_RCX + (int)in_RBX),local_8c,0x14);
  return;
}



// WARNING: Type propagation algorithm not settling

void crypto_sha1___digest__checkSum(crypto_sha1_digest *d,uint8 ~r0 [20])

{
  int iVar1;
  uint64 uVar2;
  __uint8 p;
  error err;
  uint64 len;
  uint uVar3;
  uint64 t;
  uint uVar4;
  int unaff_R14;
  undefined in_XMM15 [16];
  interface___ in_stack_ffffffffffffff78;
  int in_stack_ffffffffffffff88;
  undefined in_stack_ffffffffffffff90 [12];
  undefined4 in_stack_ffffffffffffff9c;
  undefined8 local_50;
