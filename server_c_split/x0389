  void *~r0;
  uint uVar4;
  uint extraout_RBX;
  uint extraout_RBX_00;
  uint extraout_RBX_01;
  uint extraout_RBX_02;
  uint uVar5;
  undefined8 extraout_RSI;
  int extraout_RDI;
  undefined8 *extraout_R11;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffff90;
  __uint8 in_stack_ffffffffffffffa8;
  error in_stack_ffffffffffffffc0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  vendor_golang_org_x_net_dns_dnsmessage___Name__pack
            (&h->Name,in_stack_ffffffffffffff90,compression,compressionOff,in_stack_ffffffffffffffa8
             ,in_stack_ffffffffffffffc0);
  if (extraout_RDI != 0) {
    runtime_newobject((internal_abi_Type *)&DAT_008531c0,~r0);
    extraout_RAX_03[1] = 4;
    *extraout_RAX_03 = &DAT_008ae78b;
    extraout_RAX_03[2] = extraout_RDI;
    puVar3 = extraout_RAX_03;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11 = extraout_RSI;
      puVar3 = extraout_RAX_04;
    }
    puVar3[3] = extraout_RSI;
    return;
  }
  uVar4 = (int)~r0 + 2;
  uVar1 = h->Type;
  oldPtr_00 = oldPtr;
  oldCap_00 = oldCap;
  if (oldCap < uVar4) {
    runtime_growslice(oldPtr,uVar4,oldCap,2,(internal_abi_Type *)&DAT_00807920,
                      (runtime_slice)in_stack_ffffffffffffff90);
    oldPtr_00 = extraout_RAX;
    oldCap_00 = extraout_RCX;
    uVar4 = extraout_RBX;
  }
  *(ushort *)((uVar4 - 2) + (int)oldPtr_00) = uVar1 << 8 | uVar1 >> 8;
  uVar4 = uVar4 + 2;
  uVar1 = h->Class;
  if (oldCap_00 < uVar4) {
    runtime_growslice(oldPtr_00,uVar4,oldCap_00,2,(internal_abi_Type *)&DAT_00807920,
                      (runtime_slice)in_stack_ffffffffffffff90);
    oldPtr_00 = extraout_RAX_00;
    oldCap_00 = extraout_RCX_00;
    uVar4 = extraout_RBX_00;
  }
  uVar5 = uVar4 + 4;
  *(ushort *)((uVar4 - 2) + (int)oldPtr_00) = uVar1 << 8 | uVar1 >> 8;
  dVar2 = h->TTL;
  if (oldCap_00 < uVar5) {
    runtime_growslice(oldPtr_00,uVar5,oldCap_00,4,(internal_abi_Type *)&DAT_00807920,
                      (runtime_slice)in_stack_ffffffffffffff90);
    oldPtr_00 = extraout_RAX_01;
    oldCap_00 = extraout_RCX_01;
    uVar5 = extraout_RBX_01;
  }
  *(dword *)((uVar5 - 4) + (int)oldPtr_00) =
       dVar2 >> 0x18 | (dVar2 & 0xff0000) >> 8 | (dVar2 & 0xff00) << 8 | dVar2 << 0x18;
  uVar5 = uVar5 + 2;
  uVar1 = h->Length;
  if (oldCap_00 < uVar5) {
    runtime_growslice(oldPtr_00,uVar5,oldCap_00,2,(internal_abi_Type *)&DAT_00807920,
                      (runtime_slice)in_stack_ffffffffffffff90);
    oldPtr_00 = extraout_RAX_02;
    uVar5 = extraout_RBX_02;
  }
  *(ushort *)((uVar5 - 2) + (int)oldPtr_00) = uVar1 << 8 | uVar1 >> 8;
  return;
}



void vendor_golang_org_x_net_dns_dnsmessage___ResourceHeader__unpack
               (vendor_golang_org_x_net_dns_dnsmessage_ResourceHeader *h,__uint8 msg,int off,int ~r0
               ,error ~r1)

{
  dword dVar1;
  void *extraout_RAX;
  int newOff;
  runtime_itab *prVar2;
  undefined8 *extraout_RAX_00;
  undefined8 *extraout_RAX_01;
  undefined8 *puVar3;
  undefined8 *extraout_RAX_02;
  undefined8 *extraout_RAX_03;
  undefined8 *extraout_RAX_04;
  undefined8 *extraout_RAX_05;
  undefined8 *extraout_RAX_06;
  undefined8 *extraout_RAX_07;
  undefined8 *extraout_RAX_08;
  undefined8 *extraout_RAX_09;
  undefined8 extraout_RCX;
  int o;
  uint uVar4;
  void *~r0_00;
  void *~r0_01;
  void *pvVar5;
  int o_1;
  int in_RDI;
  uint16 t;
  uint16 uVar6;
  uint16 c;
  uint32 uVar7;
  void **extraout_R11;
  void **extraout_R11_00;
  void **extraout_R11_01;
  void **extraout_R11_02;
  undefined8 *extraout_R11_03;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffb0;
  error in_stack_ffffffffffffffc8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  vendor_golang_org_x_net_dns_dnsmessage___Name__unpackCompressed
            (&h->Name,in_stack_ffffffffffffffb0,off,SUB81(~r0,0),in_RDI,in_stack_ffffffffffffffc8);
  if (~r0_00 != (void *)0x0) {
    runtime_newobject((internal_abi_Type *)&DAT_008531c0,~r0_00);
    extraout_RAX_08[1] = 4;
    *extraout_RAX_08 = &DAT_008ae78b;
    extraout_RAX_08[2] = ~r0_00;
    puVar3 = extraout_RAX_08;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_03 = extraout_RCX;
      puVar3 = extraout_RAX_09;
    }
    puVar3[3] = extraout_RCX;
    return;
  }
  o = (int)extraout_RAX + 2;
  if (~r0 < o) {
    t = 0;
    prVar2 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.tab;
    o = (int)extraout_RAX;
    ~r0_01 = extraout_RAX;
    pvVar5 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.data;
  }
  else {
    if ((uint)~r0 <= extraout_RAX) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    if ((uint)~r0 <= (int)extraout_RAX + 1U) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    t = *(ushort *)(off + (int)extraout_RAX) << 8 | *(ushort *)(off + (int)extraout_RAX) >> 8;
    prVar2 = (runtime_itab *)0x0;
    pvVar5 = (void *)0x0;
    ~r0_01 = (void *)0x0;
  }
  h->Type = t;
  if (prVar2 != (runtime_itab *)0x0) {
    runtime_newobject((internal_abi_Type *)&DAT_008531c0,~r0_01);
    extraout_RAX_06[1] = 4;
    *extraout_RAX_06 = &DAT_008ae78f;
    extraout_RAX_06[2] = prVar2;
    puVar3 = extraout_RAX_06;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_02 = pvVar5;
      puVar3 = extraout_RAX_07;
    }
    puVar3[3] = pvVar5;
    return;
  }
  o_1 = o + 2;
  if (~r0 < o_1) {
    c = 0;
    prVar2 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.tab;
    o_1 = o;
    pvVar5 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.data;
  }
  else {
    if ((uint)~r0 <= (uint)o) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    if ((uint)~r0 <= o + 1U) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    c = *(ushort *)(off + o) << 8 | *(ushort *)(off + o) >> 8;
    prVar2 = (runtime_itab *)0x0;
    pvVar5 = (void *)0x0;
  }
  h->Class = c;
  if (prVar2 != (runtime_itab *)0x0) {
    runtime_newobject((internal_abi_Type *)&DAT_008531c0,~r0_01);
    extraout_RAX_04[1] = 5;
    *extraout_RAX_04 = &DAT_008aeeb7;
    extraout_RAX_04[2] = prVar2;
    puVar3 = extraout_RAX_04;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_01 = pvVar5;
      puVar3 = extraout_RAX_05;
    }
    puVar3[3] = pvVar5;
    return;
  }
  uVar4 = o_1 + 4;
  if (~r0 < (int)uVar4) {
    uVar7 = 0;
    prVar2 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.tab;
    uVar4 = o_1;
    pvVar5 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.data;
  }
  else {
    if ((uint)~r0 <= (uint)o_1) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    if ((uint)~r0 <= o_1 + 1U) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    if ((uint)~r0 <= o_1 + 2U) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    if ((uint)~r0 <= o_1 + 3U) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    dVar1 = *(dword *)(off + o_1);
    uVar7 = dVar1 >> 0x18 | (dVar1 & 0xff0000) >> 8 | (dVar1 & 0xff00) << 8 | dVar1 << 0x18;
    prVar2 = (runtime_itab *)0x0;
    pvVar5 = (void *)0x0;
  }
  h->TTL = uVar7;
  if (prVar2 != (runtime_itab *)0x0) {
    runtime_newobject((internal_abi_Type *)&DAT_008531c0,~r0_01);
    extraout_RAX_02[1] = 3;
    *extraout_RAX_02 = &DAT_008ae3ea;
    extraout_RAX_02[2] = prVar2;
    puVar3 = extraout_RAX_02;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_00 = pvVar5;
      puVar3 = extraout_RAX_03;
    }
    puVar3[3] = pvVar5;
    return;
  }
  if (~r0 < (int)(uVar4 + 2)) {
    uVar6 = 0;
    prVar2 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.tab;
    pvVar5 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.data;
  }
  else {
    if ((uint)~r0 <= uVar4) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    if ((uint)~r0 <= uVar4 + 1) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    uVar6 = *(ushort *)(off + uVar4) << 8 | *(ushort *)(off + uVar4) >> 8;
    prVar2 = (runtime_itab *)0x0;
    pvVar5 = (void *)0x0;
  }
  h->Length = uVar6;
  if (prVar2 == (runtime_itab *)0x0) {
    return;
  }
  runtime_newobject((internal_abi_Type *)&DAT_008531c0,~r0_01);
  extraout_RAX_00[1] = 6;
  *extraout_RAX_00 = &DAT_008afb08;
  extraout_RAX_00[2] = prVar2;
  puVar3 = extraout_RAX_00;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11 = pvVar5;
    puVar3 = extraout_RAX_01;
  }
  puVar3[3] = pvVar5;
  return;
}



void vendor_golang_org_x_net_dns_dnsmessage___ResourceHeader__SetEDNS0
               (vendor_golang_org_x_net_dns_dnsmessage_ResourceHeader *h,int udpPayloadLen,
               vendor_golang_org_x_net_dns_dnsmessage_RCode extRCode,bool dnssecOK,error ~r0)

{
  int iVar1;
  dword extraout_ECX;
  dword dVar2;
  unkbyte10 Var3;
  
  Var3 = FUN_0046d080();
  iVar1 = (int)Var3;
  *(undefined2 *)(iVar1 + 0x100) = 0x29;
  *(short *)(iVar1 + 0x102) = (short)((unkuint10)Var3 >> 0x40);
  dVar2 = (extraout_ECX >> 4) << 0x18;
  *(dword *)(iVar1 + 0x104) = dVar2;
  if (dnssecOK != false) {
    *(dword *)(iVar1 + 0x104) = dVar2 | 0x8000;
  }
  return;
}



void vendor_golang_org_x_net_dns_dnsmessage___ResourceHeader__DNSSECAllowed
               (vendor_golang_org_x_net_dns_dnsmessage_ResourceHeader *h,bool ~r0)

{
  return;
}



void vendor_golang_org_x_net_dns_dnsmessage___ResourceHeader__ExtendedRCode
               (vendor_golang_org_x_net_dns_dnsmessage_ResourceHeader *h,
               vendor_golang_org_x_net_dns_dnsmessage_RCode rcode,
               vendor_golang_org_x_net_dns_dnsmessage_RCode ~r0)

{
  if ((h->TTL & 0xff0000) == 0) {
    return;
  }
  return;
}



// Local variable newOff_1:int[RDI:8] conflicts with parameter, skipped.

void vendor_golang_org_x_net_dns_dnsmessage_skipResource(__uint8 msg,int off,int ~r0,error ~r1)

{
  byte bVar1;
  runtime_itab *prVar2;
  undefined8 *extraout_RAX;
  undefined8 *extraout_RAX_00;
  undefined8 *puVar3;
  undefined8 *extraout_RAX_01;
  undefined8 *extraout_RAX_02;
  undefined8 *extraout_RAX_03;
  undefined8 *extraout_RAX_04;
  undefined8 *extraout_RAX_05;
  undefined8 *extraout_RAX_06;
  undefined8 *extraout_RAX_07;
  undefined8 *extraout_RAX_08;
  int newOff;
  uint uVar4;
  void *pvVar5;
  uint16 length;
  void **extraout_R11;
  void **extraout_R11_00;
  void **extraout_R11_01;
  void **extraout_R11_02;
  void **extraout_R11_03;
  int unaff_R14;
  
  while (uVar4 = newOff, &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  while (prVar2 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.tab,
        pvVar5 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.data, (int)uVar4 < ~r0) {
    if ((uint)~r0 <= uVar4) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    bVar1 = *(byte *)(off + uVar4);
    if ((bVar1 & 0xc0) != 0) {
      prVar2 = vendor_golang_org_x_net_dns_dnsmessage_errReserved.tab;
      pvVar5 = vendor_golang_org_x_net_dns_dnsmessage_errReserved.data;
      if ((bVar1 & 0xc0) == 0xc0) {
        newOff = uVar4 + 2;
LAB_005cd61e:
        prVar2 = (runtime_itab *)0x0;
        pvVar5 = (void *)0x0;
      }
      break;
    }
    if (bVar1 == 0) {
      newOff = uVar4 + 1;
      goto LAB_005cd61e;
    }
    uVar4 = uVar4 + bVar1 + 1;
    prVar2 = vendor_golang_org_x_net_dns_dnsmessage_errCalcLen.tab;
    pvVar5 = vendor_golang_org_x_net_dns_dnsmessage_errCalcLen.data;
    if (~r0 < (int)uVar4) break;
  }
  if (prVar2 != (runtime_itab *)0x0) {
    runtime_newobject((internal_abi_Type *)&DAT_008531c0,(void *)~r0);
    extraout_RAX_07[1] = 4;
    *extraout_RAX_07 = &DAT_008ae78b;
    extraout_RAX_07[2] = prVar2;
    puVar3 = extraout_RAX_07;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_03 = pvVar5;
      puVar3 = extraout_RAX_08;
    }
    puVar3[3] = pvVar5;
    return;
  }
  prVar2 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.tab;
  pvVar5 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.data;
  if ((int)(newOff + 2U) <= ~r0) {
    newOff = newOff + 2U;
    prVar2 = (runtime_itab *)0x0;
    pvVar5 = (void *)0x0;
  }
  if (prVar2 != (runtime_itab *)0x0) {
    runtime_newobject((internal_abi_Type *)&DAT_008531c0,(void *)~r0);
    extraout_RAX_05[1] = 4;
    *extraout_RAX_05 = &DAT_008ae78f;
    extraout_RAX_05[2] = prVar2;
    puVar3 = extraout_RAX_05;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_02 = pvVar5;
      puVar3 = extraout_RAX_06;
    }
    puVar3[3] = pvVar5;
    return;
  }
  prVar2 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.tab;
  pvVar5 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.data;
  if ((int)(newOff + 2U) <= ~r0) {
    newOff = newOff + 2U;
    prVar2 = (runtime_itab *)0x0;
    pvVar5 = (void *)0x0;
  }
  if (prVar2 != (runtime_itab *)0x0) {
    runtime_newobject((internal_abi_Type *)&DAT_008531c0,(void *)~r0);
    extraout_RAX_03[1] = 5;
    *extraout_RAX_03 = &DAT_008aeeb7;
    extraout_RAX_03[2] = prVar2;
    puVar3 = extraout_RAX_03;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_01 = pvVar5;
      puVar3 = extraout_RAX_04;
    }
    puVar3[3] = pvVar5;
    return;
  }
  prVar2 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.tab;
  pvVar5 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.data;
  if ((int)(newOff + 4U) <= ~r0) {
    newOff = newOff + 4U;
    prVar2 = (runtime_itab *)0x0;
    pvVar5 = (void *)0x0;
  }
  if (prVar2 != (runtime_itab *)0x0) {
    runtime_newobject((internal_abi_Type *)&DAT_008531c0,(void *)~r0);
    extraout_RAX_01[1] = 3;
    *extraout_RAX_01 = &DAT_008ae3ea;
    extraout_RAX_01[2] = prVar2;
    puVar3 = extraout_RAX_01;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_00 = pvVar5;
      puVar3 = extraout_RAX_02;
    }
    puVar3[3] = pvVar5;
    return;
  }
  uVar4 = newOff + 2;
  if (~r0 < (int)uVar4) {
    length = 0;
    prVar2 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.tab;
    uVar4 = newOff;
    pvVar5 = vendor_golang_org_x_net_dns_dnsmessage_errBaseLen.data;
  }
  else {
    if ((uint)~r0 <= (uint)newOff) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    if ((uint)~r0 <= newOff + 1U) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    length = *(ushort *)(off + newOff) << 8 | *(ushort *)(off + newOff) >> 8;
    prVar2 = (runtime_itab *)0x0;
    pvVar5 = (void *)0x0;
  }
  if (prVar2 != (runtime_itab *)0x0) {
    runtime_newobject((internal_abi_Type *)&DAT_008531c0,(void *)~r0);
    extraout_RAX[1] = 6;
    *extraout_RAX = &DAT_008afb08;
    extraout_RAX[2] = prVar2;
    puVar3 = extraout_RAX;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11 = pvVar5;
      puVar3 = extraout_RAX_00;
    }
    puVar3[3] = pvVar5;
    return;
  }
  if ((int)(length + uVar4) <= ~r0) {
    return;
  }
  return;
}



void vendor_golang_org_x_net_dns_dnsmessage_Name_String
               (vendor_golang_org_x_net_dns_dnsmessage_Name n,string ~r0)

{
  int unaff_R14;
  string in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (n.Length < 0x100) {
    runtime_slicebytetostring((runtime_tmpBuf *)0x0,n.Data,(uint)n.Length,in_stack_ffffffffffffffe0)
    ;
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceAlen();
}



// WARNING: Removing unreachable block (ram,0x005cda97)

void vendor_golang_org_x_net_dns_dnsmessage___Name__GoString
               (vendor_golang_org_x_net_dns_dnsmessage_Name *n,string ~r0)

{
  __uint8 str;
  string a1;
  string ~r0_00;
  string a2;
  string ~r0_01;
  int unaff_RBP;
  int unaff_R14;
  string in_stack_ffffffffffffffc0;
  uint8 *in_stack_ffffffffffffffd0;
  uint8 *in_stack_ffffffffffffffd8;
  uint8 *in_stack_ffffffffffffffe0;
  int in_stack_ffffffffffffffe8;
  uint8 *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  str.cap = (int)in_stack_ffffffffffffffd0;
  str.array = in_stack_ffffffffffffffc0.str;
  str.len = in_stack_ffffffffffffffc0.len;
  ~r0_00.len = (int)in_stack_ffffffffffffffe0;
  ~r0_00.str = in_stack_ffffffffffffffd8;
  vendor_golang_org_x_net_dns_dnsmessage_printString(str,~r0_00);
  a1.len = (int)in_stack_ffffffffffffffd8;
  a1.str = in_stack_ffffffffffffffd0;
  a2.len = in_stack_ffffffffffffffe8;
  a2.str = in_stack_ffffffffffffffe0;
  ~r0_01.len = unaff_RBP;
  ~r0_01.str = in_stack_fffffffffffffff0;
  runtime_concatstring3((runtime_tmpBuf *)0x0,in_stack_ffffffffffffffc0,a1,a2,~r0_01);
  return;
}



void vendor_golang_org_x_net_dns_dnsmessage___Name__pack
               (vendor_golang_org_x_net_dns_dnsmessage_Name *n,__uint8 msg,
               map_string_int compression,int compressionOff,__uint8 ~r0,error ~r1)

{
  uint8 uVar1;
  undefined8 uVar2;
  runtime_slice ~r0_00;
  runtime_slice ~r0_01;
  runtime_slice ~r0_02;
  runtime_slice ~r0_03;
  runtime_slice ~r0_04;
  map_string_int extraout_RAX;
  map_string_int extraout_RAX_00;
  undefined8 *extraout_RAX_01;
  void *~r0_05;
  int *extraout_RAX_02;
  map_string_int extraout_RAX_03;
  map_string_int extraout_RAX_04;
  map_string_int extraout_RAX_05;
  uint extraout_RCX;
  uint extraout_RCX_00;
  int ptr;
  char extraout_BL;
  bool ok;
  uint extraout_RBX;
  uint extraout_RBX_00;
  uint extraout_RBX_01;
  uint extraout_RBX_02;
  uint extraout_RBX_03;
  runtime_hmap *in_RSI;
  uint in_RDI;
  int n_00;
  int in_R8;
  uint uVar3;
  int j;
  int unaff_R14;
  string in_stack_ffffffffffffff68;
  int in_stack_ffffffffffffff78;
  int i;
  int begin;
  uint8 *local_18;
  map_string_int local_10;
  
  while (&local_18 <= *(uint8 ***)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar1 = n->Length;
  if (uVar1 == 0xff) {
    return;
  }
  if ((uVar1 == 0) || (n->Data[(byte)(uVar1 - 1)] != 0x2e)) {
    return;
  }
  if ((n->Data[0] == 0x2e) && (uVar1 == 1)) {
    uVar3 = compressionOff + 1;
    if (in_RDI < uVar3) {
      ~r0_00.cap = in_stack_ffffffffffffff78;
      ~r0_00.array = in_stack_ffffffffffffff68.str;
      ~r0_00.len = in_stack_ffffffffffffff68.len;
      runtime_growslice(compression,uVar3,in_RDI,1,(internal_abi_Type *)&DAT_00807920,~r0_00);
      uVar3 = extraout_RBX;
      compression = extraout_RAX;
    }
    *(undefined *)((uVar3 - 1) + (int)compression) = 0;
    return;
  }
  uVar3 = 0;
  j = 0;
  do {
    if ((int)(uint)n->Length <= (int)uVar3) {
      uVar3 = compressionOff + 1;
      if (in_RDI < uVar3) {
        ~r0_03.cap = in_stack_ffffffffffffff78;
        ~r0_03.array = in_stack_ffffffffffffff68.str;
        ~r0_03.len = in_stack_ffffffffffffff68.len;
        runtime_growslice(compression,uVar3,in_RDI,1,(internal_abi_Type *)&DAT_00807920,~r0_03);
        uVar3 = extraout_RBX_02;
        compression = extraout_RAX_04;
      }
      *(undefined *)((uVar3 - 1) + (int)compression) = 0;
      return;
    }
    if (0xfe < uVar3) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    if (n->Data[uVar3] == 0x2e) {
      if (0x3f < (int)(uVar3 - j)) {
        return;
      }
      if (j == uVar3) {
        return;
      }
      compressionOff = compressionOff + 1;
      if (in_RDI < (uint)compressionOff) {
        ~r0_01.cap = in_stack_ffffffffffffff78;
        ~r0_01.array = in_stack_ffffffffffffff68.str;
        ~r0_01.len = in_stack_ffffffffffffff68.len;
        runtime_growslice(compression,compressionOff,in_RDI,1,(internal_abi_Type *)&DAT_00807920,
                          ~r0_01);
        compression = extraout_RAX_00;
        in_RDI = extraout_RCX;
        compressionOff = extraout_RBX_00;
      }
      *(char *)((compressionOff - 1U) + (int)compression) = (char)(uVar3 - j);
      for (; j < (int)uVar3; j = j + 1) {
        if (0xfe < (uint)j) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        compressionOff = compressionOff + 1;
        uVar1 = n->Data[j];
        if (in_RDI < (uint)compressionOff) {
          ~r0_04.cap = in_stack_ffffffffffffff78;
          ~r0_04.array = in_stack_ffffffffffffff68.str;
          ~r0_04.len = in_stack_ffffffffffffff68.len;
          runtime_growslice(compression,compressionOff,in_RDI,1,(internal_abi_Type *)&DAT_00807920,
                            ~r0_04);
          compression = extraout_RAX_05;
          in_RDI = extraout_RCX_00;
          compressionOff = extraout_RBX_03;
        }
        *(uint8 *)((compressionOff - 1U) + (int)compression) = uVar1;
      }
      j = uVar3 + 1;
    }
    else if (((uVar3 == 0) || (n->Data[uVar3 - 1] == 0x2e)) && (in_RSI != (runtime_hmap *)0x0)) {
      local_18 = n->Data + ((int)(uVar3 - 0xff) >> 0x3f & uVar3);
      n_00 = -(uVar3 - 0xff);
      local_10 = compression;
      runtime_mapaccess2_faststr
                ((internal_abi_MapType *)&DAT_0082c560,in_RSI,in_stack_ffffffffffffff68,local_18,
                 SUB81(n_00,0));
      if (extraout_BL != '\0') {
        uVar3 = compressionOff + 2;
        uVar2 = *extraout_RAX_01;
        if (in_RDI < uVar3) {
          ~r0_02.cap = in_stack_ffffffffffffff78;
          ~r0_02.array = in_stack_ffffffffffffff68.str;
          ~r0_02.len = in_stack_ffffffffffffff68.len;
          runtime_growslice(local_10,uVar3,in_RDI,2,(internal_abi_Type *)&DAT_00807920,~r0_02);
          local_10 = extraout_RAX_03;
          uVar3 = extraout_RBX_01;
        }
        *(byte *)((uVar3 - 2) + (int)local_10) = (byte)((uint)uVar2 >> 8) | 0xc0;
        *(char *)((uVar3 - 1) + (int)local_10) = (char)uVar2;
        return;
      }
      compression = local_10;
      if (compressionOff < 0x4000) {
        runtime_slicebytetostring((runtime_tmpBuf *)0x0,local_18,n_00,in_stack_ffffffffffffff68);
        runtime_mapassign_faststr
                  ((internal_abi_MapType *)&DAT_0082c560,in_RSI,in_stack_ffffffffffffff68,~r0_05);
        *extraout_RAX_02 = compressionOff - in_R8;
        compression = local_10;
      }
    }
    uVar3 = uVar3 + 1;
  } while( true );
}



// Local variable currOff:int[RSI:8] conflicts with parameter, skipped.
// Local variable newOff:int[RSI:8] conflicts with parameter, skipped.

void vendor_golang_org_x_net_dns_dnsmessage___Name__unpackCompressed
               (vendor_golang_org_x_net_dns_dnsmessage_Name *n,__uint8 msg,int off,
               bool allowCompression,int ~r0,error ~r1)

{
  uint uVar1;
  byte bVar2;
  vendor_golang_org_x_net_dns_dnsmessage_Name *extraout_RAX;
  vendor_golang_org_x_net_dns_dnsmessage_Name *extraout_RAX_00;
  vendor_golang_org_x_net_dns_dnsmessage_Name *extraout_RAX_01;
  vendor_golang_org_x_net_dns_dnsmessage_Name *oldPtr;
  undefined7 in_register_00000009;
  uint uVar3;
  uint extraout_RCX;
  uint extraout_RCX_00;
  uint extraout_RBX;
  uint newLen;
  uint extraout_RBX_00;
  uint in_RSI;
  int iVar4;
  uint uVar5;
  char in_R8B;
  char cVar6;
  int endOff;
  void *__src;
  uint oldCap;
  int iVar7;
  int unaff_R14;
  int ptr;
  uint __n;
  char cStack0000000000000030;
  runtime_slice in_stack_ffffffffffffff78;
  
  uVar3 = CONCAT71(in_register_00000009,allowCompression);
  cStack0000000000000030 = in_R8B;
  while (&stack0xfffffffffffffff8 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  oldCap = 0xff;
  newLen = 0;
  iVar7 = 0;
  oldPtr = n;
  cVar6 = cStack0000000000000030;
  while( true ) {
    while( true ) {
      if ((int)uVar3 <= (int)in_RSI) {
        return;
      }
      if (uVar3 <= in_RSI) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      bVar2 = *(byte *)(off + in_RSI);
      __n = (uint)bVar2;
      uVar5 = in_RSI + 1;
      if ((bVar2 & 0xc0) != 0) break;
      if (__n == 0) {
        if (newLen == 0) {
          if (oldCap == 0) {
            runtime_growslice(oldPtr,1,0,1,(internal_abi_Type *)&DAT_00807920,
                              in_stack_ffffffffffffff78);
            oldPtr = extraout_RAX;
          }
          oldPtr->Data[0] = 0x2e;
          newLen = 1;
        }
        if (0xfe < (int)newLen) {
          return;
        }
        n->Length = (uint8)newLen;
        return;
      }
      uVar1 = in_RSI + __n + 1;
      if ((int)uVar3 < (int)uVar1) {
        return;
      }
      if ((uint)~r0 < uVar1) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceAcap();
      }
      if (uVar1 < uVar5) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      __src = (void *)((uVar5 & (int)-((~r0 - in_RSI) + -1) >> 0x3f) + off);
      for (iVar4 = 0; iVar4 < (int)__n; iVar4 = iVar4 + 1) {
        if (*(char *)((int)__src + iVar4) == '.') {
          return;
        }
      }
      uVar5 = newLen + __n;
      if (oldCap < uVar5) {
        runtime_growslice(oldPtr,uVar5,oldCap,__n,(internal_abi_Type *)&DAT_00807920,
                          in_stack_ffffffffffffff78);
        oldPtr = extraout_RAX_00;
        uVar5 = extraout_RBX;
        oldCap = extraout_RCX;
      }
      runtime_memmove(oldPtr->Data + newLen,__src,__n);
      newLen = uVar5 + 1;
      if (oldCap < newLen) {
        runtime_growslice(oldPtr,newLen,oldCap,1,(internal_abi_Type *)&DAT_00807920,
                          in_stack_ffffffffffffff78);
        oldPtr = extraout_RAX_01;
        oldCap = extraout_RCX_00;
        newLen = extraout_RBX_00;
      }
      oldPtr->Data[newLen - 1] = 0x2e;
      in_RSI = uVar1;
      cVar6 = cStack0000000000000030;
    }
    if ((bVar2 & 0xc0) != 0xc0) {
      return;
    }
    if (cVar6 == '\0') {
      return;
    }
    if ((int)uVar3 <= (int)uVar5) {
      return;
    }
    if (uVar3 <= uVar5) break;
    iVar7 = iVar7 + 1;
    if (10 < iVar7) {
      return;
    }
    in_RSI = (__n ^ 0xc0) << 8 | (uint)*(byte *)(in_RSI + 1 + off);
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void vendor_golang_org_x_net_dns_dnsmessage___Question__pack
               (vendor_golang_org_x_net_dns_dnsmessage_Question *q,__uint8 msg,
               map_string_int compression,int compressionOff,__uint8 ~r0,error ~r1)

{
  ushort uVar1;
  void *oldPtr;
  void *extraout_RAX;
  void *extraout_RAX_00;
  void *oldPtr_00;
  undefined8 *extraout_RAX_01;
  undefined8 *extraout_RAX_02;
  undefined8 *puVar2;
  uint oldCap;
  uint extraout_RCX;
  uint oldCap_00;
  void *~r0_00;
  uint uVar3;
  uint extraout_RBX;
  uint extraout_RBX_00;
  undefined8 extraout_RSI;
  int extraout_RDI;
  undefined8 *extraout_R11;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffff88;
  __uint8 in_stack_ffffffffffffffa0;
  error in_stack_ffffffffffffffb8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  vendor_golang_org_x_net_dns_dnsmessage___Name__pack
            (&q->Name,in_stack_ffffffffffffff88,compression,compressionOff,in_stack_ffffffffffffffa0
             ,in_stack_ffffffffffffffb8);
  if (extraout_RDI != 0) {
    runtime_newobject((internal_abi_Type *)&DAT_008531c0,~r0_00);
    extraout_RAX_01[1] = 4;
    *extraout_RAX_01 = &DAT_008ae78b;
    extraout_RAX_01[2] = extraout_RDI;
    puVar2 = extraout_RAX_01;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11 = extraout_RSI;
      puVar2 = extraout_RAX_02;
    }
    puVar2[3] = extraout_RSI;
    return;
  }
  uVar3 = (int)~r0_00 + 2;
  uVar1 = q->Type;
  oldPtr_00 = oldPtr;
  oldCap_00 = oldCap;
  if (oldCap < uVar3) {
    runtime_growslice(oldPtr,uVar3,oldCap,2,(internal_abi_Type *)&DAT_00807920,
                      (runtime_slice)in_stack_ffffffffffffff88);
    oldPtr_00 = extraout_RAX;
    oldCap_00 = extraout_RCX;
    uVar3 = extraout_RBX;
  }
  *(ushort *)((uVar3 - 2) + (int)oldPtr_00) = uVar1 << 8 | uVar1 >> 8;
  uVar3 = uVar3 + 2;
  uVar1 = q->Class;
  if (oldCap_00 < uVar3) {
    runtime_growslice(oldPtr_00,uVar3,oldCap_00,2,(internal_abi_Type *)&DAT_00807920,
                      (runtime_slice)in_stack_ffffffffffffff88);
    oldPtr_00 = extraout_RAX_00;
    uVar3 = extraout_RBX_00;
  }
  *(ushort *)((uVar3 - 2) + (int)oldPtr_00) = uVar1 << 8 | uVar1 >> 8;
  return;
}



void vendor_golang_org_x_net_dns_dnsmessage_unpackResourceBody
               (__uint8 msg,int off,vendor_golang_org_x_net_dns_dnsmessage_ResourceHeader hdr,
               vendor_golang_org_x_net_dns_dnsmessage_ResourceBody ~r0,int ~r1,error ~r2)

{
  undefined auVar1 [16];
  string a0;
  __uint8 msg_00;
  __uint8 msg_01;
  __uint8 msg_02;
  __uint8 msg_03;
  __uint8 msg_04;
  __uint8 msg_05;
  __uint8 msg_06;
  string a1;
  vendor_golang_org_x_net_dns_dnsmessage_TXTResource ~r0_00;
  vendor_golang_org_x_net_dns_dnsmessage_OPTResource ~r0_01;
  vendor_golang_org_x_net_dns_dnsmessage_NSResource ~r0_02;
  vendor_golang_org_x_net_dns_dnsmessage_PTRResource ~r0_03;
  vendor_golang_org_x_net_dns_dnsmessage_CNAMEResource ~r0_04;
  vendor_golang_org_x_net_dns_dnsmessage_MXResource ~r0_05;
  vendor_golang_org_x_net_dns_dnsmessage_SRVResource ~r0_06;
  error ~r1_00;
  error ~r1_01;
  error ~r1_02;
  error ~r1_03;
  error ~r1_04;
  vendor_golang_org_x_net_dns_dnsmessage_NSResource *_rb_1;
  undefined4 *extraout_RAX;
  vendor_golang_org_x_net_dns_dnsmessage_AResource *_rb;
  vendor_golang_org_x_net_dns_dnsmessage_PTRResource *_rb_4;
  uint8 **extraout_RAX_00;
  vendor_golang_org_x_net_dns_dnsmessage_SOAResource *_rb_3;
  vendor_golang_org_x_net_dns_dnsmessage_CNAMEResource *_rb_2;
  undefined8 *extraout_RAX_01;
  vendor_golang_org_x_net_dns_dnsmessage_TXTResource *_rb_6;
  undefined8 extraout_RAX_02;
  undefined8 extraout_RAX_03;
  vendor_golang_org_x_net_dns_dnsmessage_MXResource *_rb_5;
  undefined2 *extraout_RAX_04;
  vendor_golang_org_x_net_dns_dnsmessage_UnknownResource *_rb_10;
  void *__dest;
  size_t sVar2;
