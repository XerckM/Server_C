  int in_R11;
  int unaff_R14;
  undefined8 uStack0000000000000038;
  __uint8 in_stack_ffffffffffffffc0;
  
  uStack0000000000000038 = in_R9;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    s1.array = (uint8 *)curve;
    s1.len = (int)Px;
    s1.cap = (int)Py;
    runtime_morestack_noctxt();
    curve = (crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *)s1.array;
    Py = (math_big_Int *)s1.cap;
    Px = (math_big_Int *)s1.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &s1)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffa8;
  }
  s1_00.len = in_R10;
  s1_00.array = (uint8 *)uStack0000000000000038;
  s1_00.cap = in_R11;
  crypto_elliptic___nistCurve_go_shape__uint8___CombinedMult
            ((_param28)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,Px,
             s1_00,in_stack_ffffffffffffffc0,Py,x);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P256Point___ScalarBaseMult
               (crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *curve,__uint8 scalar,
               math_big_Int *~r0,math_big_Int *~r1)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  scalar.len = (int)~r0;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    scalar.array = (uint8 *)curve;
    scalar.cap = (int)~r1;
    runtime_morestack_noctxt();
    curve = (crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *)scalar.array;
    ~r1 = (math_big_Int *)scalar.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &scalar)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___ScalarBaseMult
            ((_param26)curve,in_stack_ffffffffffffffd0,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,
             (math_big_Int *)scalar.len);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P256Point___ScalarMult
               (crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *curve,math_big_Int *Bx
               ,math_big_Int *By,__uint8 scalar,math_big_Int *~r0,math_big_Int *~r1)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  math_big_Int *pmStack0000000000000020;
  __uint8 in_stack_ffffffffffffffc0;
  
  pmStack0000000000000020 = ~r0;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    scalar.array = (uint8 *)curve;
    scalar.len = (int)Bx;
    scalar.cap = (int)By;
    runtime_morestack_noctxt();
    curve = (crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *)scalar.array;
    By = (math_big_Int *)scalar.cap;
    Bx = (math_big_Int *)scalar.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &scalar)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffc0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___ScalarMult
            ((_param24)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,Bx,
             in_stack_ffffffffffffffc0,By,pmStack0000000000000020);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P256Point___Double
               (crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *curve,math_big_Int *x1
               ,math_big_Int *y1,math_big_Int *~r0,math_big_Int *~r1)

{
  int *piVar1;
  math_big_Int *extraout_RSI;
  int unaff_R14;
  crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *in_stack_00000008;
  math_big_Int *in_stack_00000010;
  math_big_Int *in_stack_00000018;
  undefined auStack_28 [32];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = curve;
    in_stack_00000010 = x1;
    in_stack_00000018 = y1;
    runtime_morestack_noctxt();
    curve = in_stack_00000008;
    y1 = in_stack_00000018;
    x1 = in_stack_00000010;
    ~r1 = extraout_RSI;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) &&
     ((crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ **)*piVar1 == &stack0x00000008))
  {
    *piVar1 = (int)auStack_28;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___Double
            ((_param21)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,x1,
             y1,~r1);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P256Point___Add
               (crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *curve,math_big_Int *x1
               ,math_big_Int *y1,math_big_Int *x2,math_big_Int *y2,math_big_Int *~r0,
               math_big_Int *~r1)

{
  int *piVar1;
  math_big_Int *extraout_R9;
  int unaff_R14;
  crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *in_stack_00000008;
  math_big_Int *in_stack_00000010;
  math_big_Int *in_stack_00000018;
  math_big_Int *in_stack_00000020;
  math_big_Int *in_stack_00000028;
  undefined auStack_38 [48];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = curve;
    in_stack_00000010 = x1;
    in_stack_00000018 = y1;
    in_stack_00000020 = x2;
    in_stack_00000028 = y2;
    runtime_morestack_noctxt();
    curve = in_stack_00000008;
    y1 = in_stack_00000018;
    x1 = in_stack_00000010;
    y2 = in_stack_00000028;
    x2 = in_stack_00000020;
    ~r1 = extraout_R9;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) &&
     ((crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ **)*piVar1 == &stack0x00000008))
  {
    *piVar1 = (int)auStack_38;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___Add
            ((_param19)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,x1,
             y1,x2,y2,~r1);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P256Point___IsOnCurve
               (crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *curve,math_big_Int *x,
               math_big_Int *y,bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *in_stack_00000008;
  math_big_Int *in_stack_00000010;
  math_big_Int *in_stack_00000018;
  undefined auStack_28 [32];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = curve;
    in_stack_00000010 = x;
    in_stack_00000018 = y;
    runtime_morestack_noctxt();
    curve = in_stack_00000008;
    y = in_stack_00000018;
    x = in_stack_00000010;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) &&
     ((crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ **)*piVar1 == &stack0x00000008))
  {
    *piVar1 = (int)auStack_28;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___IsOnCurve
            ((_param14)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,x,
             SUB81(y,0));
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P256Point___Params
               (crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *curve,
               crypto_elliptic_CurveParams *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P224Point___UnmarshalCompressed
               (_param31 curve,__uint8 data,math_big_Int *x,math_big_Int *y)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  data.len = (int)x;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    data.array = (uint8 *)curve;
    data.cap = (int)y;
    runtime_morestack_noctxt();
    curve = (_param31)data.array;
    y = (math_big_Int *)data.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &data)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___UnmarshalCompressed
            ((_param31)curve,in_stack_ffffffffffffffd0,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P224Point_,
             (math_big_Int *)data.len);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P224Point___Unmarshal
               (_param30 curve,__uint8 data,math_big_Int *x,math_big_Int *y)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  data.len = (int)x;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    data.array = (uint8 *)curve;
    data.cap = (int)y;
    runtime_morestack_noctxt();
    curve = (_param30)data.array;
    y = (math_big_Int *)data.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &data)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___Unmarshal
            ((_param30)curve,in_stack_ffffffffffffffd0,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P224Point_,
             (math_big_Int *)data.len);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P224Point___CombinedMult
               (_param28 curve,math_big_Int *Px,math_big_Int *Py,__uint8 s1,__uint8 s2,
               math_big_Int *x,math_big_Int *y)

{
  __uint8 **pp_Var1;
  __uint8 s1_00;
  undefined8 in_R9;
  undefined8 in_R10;
  int in_R11;
  int unaff_R14;
  undefined8 uStack0000000000000038;
  __uint8 in_stack_ffffffffffffffc0;
  
  uStack0000000000000038 = in_R9;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    s1.array = (uint8 *)curve;
    s1.len = (int)Px;
    s1.cap = (int)Py;
    runtime_morestack_noctxt();
    curve = (_param28)s1.array;
    Py = (math_big_Int *)s1.cap;
    Px = (math_big_Int *)s1.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &s1)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffa8;
  }
  s1_00.len = in_R10;
  s1_00.array = (uint8 *)uStack0000000000000038;
  s1_00.cap = in_R11;
  crypto_elliptic___nistCurve_go_shape__uint8___CombinedMult
            ((_param28)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P224Point_,Px,
             s1_00,in_stack_ffffffffffffffc0,Py,x);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P224Point___ScalarBaseMult
               (_param26 curve,__uint8 scalar,math_big_Int *~r0,math_big_Int *~r1)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  scalar.len = (int)~r0;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    scalar.array = (uint8 *)curve;
    scalar.cap = (int)~r1;
    runtime_morestack_noctxt();
    curve = (_param26)scalar.array;
    ~r1 = (math_big_Int *)scalar.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &scalar)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___ScalarBaseMult
            ((_param26)curve,in_stack_ffffffffffffffd0,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P224Point_,
             (math_big_Int *)scalar.len);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P224Point___ScalarMult
               (_param24 curve,math_big_Int *Bx,math_big_Int *By,__uint8 scalar,math_big_Int *~r0,
               math_big_Int *~r1)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  math_big_Int *pmStack0000000000000020;
  __uint8 in_stack_ffffffffffffffc0;
  
  pmStack0000000000000020 = ~r0;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    scalar.array = (uint8 *)curve;
    scalar.len = (int)Bx;
    scalar.cap = (int)By;
    runtime_morestack_noctxt();
    curve = (_param24)scalar.array;
    By = (math_big_Int *)scalar.cap;
    Bx = (math_big_Int *)scalar.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &scalar)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffc0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___ScalarMult
            ((_param24)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P224Point_,Bx,
             in_stack_ffffffffffffffc0,By,pmStack0000000000000020);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P224Point___Double
               (_param21 curve,math_big_Int *x1,math_big_Int *y1,math_big_Int *~r0,math_big_Int *~r1
               )

{
  int *piVar1;
  math_big_Int *extraout_RSI;
  int unaff_R14;
  _param21 in_stack_00000008;
  math_big_Int *in_stack_00000010;
  math_big_Int *in_stack_00000018;
  undefined auStack_28 [32];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = curve;
    in_stack_00000010 = x1;
    in_stack_00000018 = y1;
    runtime_morestack_noctxt();
    curve = in_stack_00000008;
    y1 = in_stack_00000018;
    x1 = in_stack_00000010;
    ~r1 = extraout_RSI;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((_param21 *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_28;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___Double
            ((_param21)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P224Point_,x1,
             y1,~r1);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P224Point___Add
               (_param19 curve,math_big_Int *x1,math_big_Int *y1,math_big_Int *x2,math_big_Int *y2,
               math_big_Int *~r0,math_big_Int *~r1)

{
  int *piVar1;
  math_big_Int *extraout_R9;
  int unaff_R14;
  _param19 in_stack_00000008;
  math_big_Int *in_stack_00000010;
  math_big_Int *in_stack_00000018;
  math_big_Int *in_stack_00000020;
  math_big_Int *in_stack_00000028;
  undefined auStack_38 [48];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = curve;
    in_stack_00000010 = x1;
    in_stack_00000018 = y1;
    in_stack_00000020 = x2;
    in_stack_00000028 = y2;
    runtime_morestack_noctxt();
    curve = in_stack_00000008;
    y1 = in_stack_00000018;
    x1 = in_stack_00000010;
    y2 = in_stack_00000028;
    x2 = in_stack_00000020;
    ~r1 = extraout_R9;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((_param19 *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_38;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___Add
            ((_param19)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P224Point_,x1,
             y1,x2,y2,~r1);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P224Point___IsOnCurve
               (_param14 curve,math_big_Int *x,math_big_Int *y,bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  _param14 in_stack_00000008;
  math_big_Int *in_stack_00000010;
  math_big_Int *in_stack_00000018;
  undefined auStack_28 [32];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = curve;
    in_stack_00000010 = x;
    in_stack_00000018 = y;
    runtime_morestack_noctxt();
    curve = in_stack_00000008;
    y = in_stack_00000018;
    x = in_stack_00000010;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((_param14 *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_28;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___IsOnCurve
            ((_param14)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P224Point_,x,
             SUB81(y,0));
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P224Point___Params
               (_param13 curve,crypto_elliptic_CurveParams *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void crypto_elliptic___p256Curve__Add
               (math_big_Int *x1,math_big_Int *y1,math_big_Int *x2,math_big_Int *y2,
               math_big_Int *~r0,math_big_Int *~r1)

{
  int *piVar1;
  math_big_Int *in_R9;
  math_big_Int *extraout_R9;
  int unaff_R14;
  math_big_Int *in_stack_00000008;
  math_big_Int *in_stack_00000010;
  math_big_Int *in_stack_00000018;
  math_big_Int *in_stack_00000020;
  math_big_Int *in_stack_00000028;
  undefined auStack_38 [48];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = x1;
    in_stack_00000010 = y1;
    in_stack_00000018 = x2;
    in_stack_00000020 = y2;
    in_stack_00000028 = ~r0;
    runtime_morestack_noctxt();
    x1 = in_stack_00000008;
    x2 = in_stack_00000018;
    y1 = in_stack_00000010;
    ~r0 = in_stack_00000028;
    y2 = in_stack_00000020;
    in_R9 = extraout_R9;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((math_big_Int **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_38;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___Add
            ((_param19)x1,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,y1,
             x2,y2,~r0,in_R9);
  return;
}



void crypto_elliptic___p256Curve__CombinedMult
               (math_big_Int *Px,math_big_Int *Py,__uint8 s1,__uint8 s2,math_big_Int *x,
               math_big_Int *y)

{
  __uint8 **pp_Var1;
  __uint8 s1_00;
  undefined8 in_R9;
  undefined8 in_R10;
  int in_R11;
  int unaff_R14;
  undefined8 uStack0000000000000038;
  __uint8 in_stack_ffffffffffffffc0;
  
  uStack0000000000000038 = in_R9;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    s1.array = &Px->neg;
    s1.len = (int)Py;
    s1.cap = (int)x;
    runtime_morestack_noctxt();
    Px = (math_big_Int *)s1.array;
    x = (math_big_Int *)s1.cap;
    Py = (math_big_Int *)s1.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &s1)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffa8;
  }
  s1_00.len = in_R10;
  s1_00.array = (uint8 *)uStack0000000000000038;
  s1_00.cap = in_R11;
  crypto_elliptic___nistCurve_go_shape__uint8___CombinedMult
            ((_param28)Px,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,Py,
             s1_00,in_stack_ffffffffffffffc0,x,y);
  return;
}



void crypto_elliptic___p256Curve__Double
               (math_big_Int *x1,math_big_Int *y1,math_big_Int *~r0,math_big_Int *~r1)

{
  int *piVar1;
  math_big_Int *in_RSI;
  math_big_Int *extraout_RSI;
  int unaff_R14;
  math_big_Int *in_stack_00000008;
  math_big_Int *in_stack_00000010;
  math_big_Int *in_stack_00000018;
  undefined auStack_28 [32];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = x1;
    in_stack_00000010 = y1;
    in_stack_00000018 = ~r0;
    runtime_morestack_noctxt();
    x1 = in_stack_00000008;
    ~r0 = in_stack_00000018;
    y1 = in_stack_00000010;
    in_RSI = extraout_RSI;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((math_big_Int **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_28;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___Double
            ((_param21)x1,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,y1,
             ~r0,in_RSI);
  return;
}



void crypto_elliptic___p256Curve__Inverse(math_big_Int *k,math_big_Int *~r0)

{
  int *piVar1;
  int unaff_R14;
  math_big_Int *in_stack_00000008;
  math_big_Int *in_stack_00000010;
  crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = k;
    in_stack_00000010 = ~r0;
    runtime_morestack_noctxt();
    k = in_stack_00000008;
    ~r0 = in_stack_00000010;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((math_big_Int **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe0;
  }
  if (k != (math_big_Int *)0x0) {
    crypto_elliptic_p256Curve_Inverse
              ((crypto_elliptic_p256Curve)in_stack_ffffffffffffffe0,*(math_big_Int **)k,
               (math_big_Int *)(k->abs).array);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void crypto_elliptic___p256Curve__IsOnCurve(math_big_Int *x,math_big_Int *y,bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000009;
  undefined8 uVar2;
  int unaff_R14;
  math_big_Int *in_stack_00000008;
  math_big_Int *in_stack_00000010;
  undefined8 in_stack_00000018;
  undefined auStack_28 [32];
  
  uVar2 = CONCAT71(in_register_00000009,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = x;
    in_stack_00000010 = y;
    in_stack_00000018 = uVar2;
    runtime_morestack_noctxt();
    x = in_stack_00000008;
    uVar2 = in_stack_00000018;
    y = in_stack_00000010;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((math_big_Int **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_28;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___IsOnCurve
            ((_param14)x,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,y,
             SUB81(uVar2,0));
  return;
}



void crypto_elliptic___p256Curve__Params(crypto_elliptic_CurveParams *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void crypto_elliptic___p256Curve__ScalarBaseMult(__uint8 scalar,math_big_Int *~r0,math_big_Int *~r1)

{
  __uint8 **pp_Var1;
  int in_RCX;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  scalar.len = (int)~r1;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    scalar.array = &~r0->neg;
    scalar.cap = in_RCX;
    runtime_morestack_noctxt();
    ~r0 = (math_big_Int *)scalar.array;
    in_RCX = scalar.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &scalar)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___ScalarBaseMult
            ((_param26)~r0,in_stack_ffffffffffffffd0,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,
             (math_big_Int *)scalar.len);
  return;
}



void crypto_elliptic___p256Curve__ScalarMult
               (math_big_Int *Bx,math_big_Int *By,__uint8 scalar,math_big_Int *~r0,math_big_Int *~r1
               )

{
  __uint8 **pp_Var1;
  int unaff_R14;
  math_big_Int *pmStack0000000000000020;
  __uint8 in_stack_ffffffffffffffc0;
  
  pmStack0000000000000020 = ~r1;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    scalar.array = &Bx->neg;
    scalar.len = (int)By;
    scalar.cap = (int)~r0;
    runtime_morestack_noctxt();
    Bx = (math_big_Int *)scalar.array;
    ~r0 = (math_big_Int *)scalar.cap;
    By = (math_big_Int *)scalar.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &scalar)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffc0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___ScalarMult
            ((_param24)Bx,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,By,
             in_stack_ffffffffffffffc0,~r0,pmStack0000000000000020);
  return;
}



void crypto_elliptic___p256Curve__Unmarshal(__uint8 data,math_big_Int *x,math_big_Int *y)

{
  __uint8 **pp_Var1;
  int in_RCX;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  data.len = (int)y;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    data.array = &x->neg;
    data.cap = in_RCX;
    runtime_morestack_noctxt();
    x = (math_big_Int *)data.array;
    in_RCX = data.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &data)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___Unmarshal
            ((_param30)x,in_stack_ffffffffffffffd0,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,
             (math_big_Int *)data.len);
  return;
}



void crypto_elliptic___p256Curve__UnmarshalCompressed(__uint8 data,math_big_Int *x,math_big_Int *y)

{
  __uint8 **pp_Var1;
  int in_RCX;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  data.len = (int)y;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    data.array = &x->neg;
    data.cap = in_RCX;
    runtime_morestack_noctxt();
    x = (math_big_Int *)data.array;
    in_RCX = data.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &data)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___UnmarshalCompressed
            ((_param31)x,in_stack_ffffffffffffffd0,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,
             (math_big_Int *)data.len);
  return;
}



void crypto_internal_bigmod___Nat__Bytes
               (crypto_internal_bigmod_Nat *x,crypto_internal_bigmod_Modulus *m,__uint8 ~r0)

{
  uint uVar1;
  uint *puVar2;
  int extraout_RAX;
  uint len;
  int i;
  int iVar3;
  int iVar4;
  void *in_RDI;
  uint uVar5;
  void *extraout_RDI;
  uint limb;
  uint uVar6;
  int iVar7;
  int j;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  iVar3 = (m->nat->limbs).len * 0x40 - m->leading;
  len = (int)(((uint)(iVar3 + 7 >> 0x3f) >> 0x3d) + iVar3 + 7) >> 3;
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,len,len,in_RDI);
  puVar2 = (x->limbs).array;
  iVar3 = (x->limbs).len;
  iVar4 = 0;
  uVar5 = len;
  do {
    if (iVar3 <= iVar4) {
      return;
    }
    uVar6 = puVar2[iVar4];
    for (iVar7 = 0; iVar7 < 8; iVar7 = iVar7 + 1) {
      uVar1 = uVar5 - 1;
      if ((int)uVar1 < 0) {
        uVar5 = uVar1;
        if (uVar6 != 0) {
                    // WARNING: Subroutine does not return
          runtime_gopanic(in_stack_ffffffffffffffd8);
        }
        break;
      }
      if (len <= uVar1) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      *(char *)((uVar5 - 1) + extraout_RAX) = (char)uVar6;
      uVar6 = uVar6 >> 8;
      uVar5 = uVar1;
    }
    iVar4 = iVar4 + 1;
  } while( true );
}



void crypto_internal_bigmod___Nat__SetBytes
               (crypto_internal_bigmod_Nat *x,__uint8 b,crypto_internal_bigmod_Modulus *m,
               crypto_internal_bigmod_Nat *~r0,error ~r1)

{
  uint uVar1;
  uint uVar2;
  uint uVar3;
  int extraout_RAX;
  undefined8 *extraout_RAX_00;
  int size;
  void *~r0_00;
  int i;
  int **in_RSI;
  uint c;
  int unaff_R14;
  bool bVar4;
  __uint8 in_stack_ffffffffffffffd0;
  error in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  crypto_internal_bigmod___Nat__setBytes(x,in_stack_ffffffffffffffd0,m,in_stack_ffffffffffffffe8);
  if (extraout_RAX != 0) {
    return;
  }
  uVar1 = (x->limbs).len;
  if ((uint)(*in_RSI)[2] < uVar1) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  bVar4 = false;
  for (~r0_00 = (void *)0x0; (int)~r0_00 < (int)uVar1; ~r0_00 = (void *)((int)~r0_00 + 1)) {
    uVar2 = (x->limbs).array[(int)~r0_00];
    uVar3 = *(uint *)(**in_RSI + (int)~r0_00 * 8);
    bVar4 = uVar2 < uVar3 || uVar2 - uVar3 < (uint)bVar4;
  }
  if (!bVar4) {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_00);
    extraout_RAX_00[1] = 0x1b;
    *extraout_RAX_00 = &DAT_008bd54f;
    return;
  }
  return;
}



void crypto_internal_bigmod___Nat__SetOverflowingBytes
               (crypto_internal_bigmod_Nat *x,__uint8 b,crypto_internal_bigmod_Modulus *m,
               crypto_internal_bigmod_Nat *~r0,error ~r1)

{
  uint uVar1;
  int iVar2;
  int extraout_RAX;
  undefined8 *extraout_RAX_00;
  int iVar3;
  int len;
  uint uVar4;
  int iVar5;
  int leading;
  void *~r0_00;
  crypto_internal_bigmod_Modulus *in_RSI;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  error in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  crypto_internal_bigmod___Nat__setBytes(x,in_stack_ffffffffffffffd0,m,in_stack_ffffffffffffffe8);
  if (extraout_RAX != 0) {
    return;
  }
  uVar1 = (x->limbs).len;
  if (uVar1 <= uVar1 - 1) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  iVar3 = 0;
  for (uVar4 = (x->limbs).array[uVar1 - 1]; uVar4 != 0; uVar4 = uVar4 >> 1) {
    iVar3 = iVar3 + 1;
  }
  iVar5 = -(iVar3 + -0x40);
  iVar2 = in_RSI->leading;
  if (iVar2 != iVar5 && SBORROW8(iVar2,iVar5) == iVar2 + iVar3 + -0x40 < 0) {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_00);
    extraout_RAX_00[1] = 0x20;
    *extraout_RAX_00 = &DAT_008c07b3;
    return;
  }
  crypto_internal_bigmod___Nat__maybeSubtractModulus(x,0,in_RSI);
  return;
}



void crypto_internal_bigmod___Nat__setBytes
               (crypto_internal_bigmod_Nat *x,__uint8 b,crypto_internal_bigmod_Modulus *m,error ~r0)
