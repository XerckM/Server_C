  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_DIL = extraout_DIL;
  }
  if ((((q->headerMaxLen == p->headerMaxLen) && (q->messageMaxLen == p->messageMaxLen)) &&
      (q->callID == p->callID)) &&
     ((q->idWithinCallGen == p->idWithinCallGen && (tab = (p->sink).tab, (q->sink).tab == tab)))) {
    runtime_ifaceeq(tab,(p->sink).data,(q->sink).data,(bool)in_DIL);
  }
  return;
}



void type__eq_google_golang_org_grpc_internal_binarylog_ClientMessage
               (google_golang_org_grpc_internal_binarylog_ClientMessage *p,
               google_golang_org_grpc_internal_binarylog_ClientMessage *q,bool r)

{
  internal_abi_Type *t;
  undefined in_DIL;
  undefined extraout_DIL;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_DIL = extraout_DIL;
  }
  if ((q->OnClientSide == p->OnClientSide) && (t = (p->Message)._type, (q->Message)._type == t)) {
    runtime_efaceeq(t,(p->Message).data,(q->Message).data,(bool)in_DIL);
  }
  return;
}



void type__eq_google_golang_org_grpc_internal_binarylog_ServerMessage
               (google_golang_org_grpc_internal_binarylog_ServerMessage *p,
               google_golang_org_grpc_internal_binarylog_ServerMessage *q,bool r)

{
  internal_abi_Type *t;
  undefined in_DIL;
  undefined extraout_DIL;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_DIL = extraout_DIL;
  }
  if ((q->OnClientSide == p->OnClientSide) && (t = (p->Message)._type, (q->Message)._type == t)) {
    runtime_efaceeq(t,(p->Message).data,(q->Message).data,(bool)in_DIL);
  }
  return;
}



void text_template_parse_item_String(text_template_parse_item i,string ~r0)

{
  int in_RAX;
  int extraout_RAX;
  int extraout_RAX_00;
  int extraout_RAX_01;
  void *in_RCX;
  int in_RDI;
  int unaff_R14;
  string in_stack_ffffffffffffffc0;
  __interface___ in_stack_ffffffffffffffd0;
  string ~r0_00;
  string ~r0_01;
  string ~r0_02;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RAX == 8) {
    return;
  }
  if (in_RAX == 0) {
    return;
  }
  if (in_RAX < 0x17) {
    if (10 < in_RDI) {
      runtime_convTstring(in_stack_ffffffffffffffc0,in_RCX);
      ~r0_00.len = extraout_RAX;
      ~r0_00.str = &DAT_008075e0;
      fmt_Sprintf(in_stack_ffffffffffffffc0,in_stack_ffffffffffffffd0,~r0_00);
      return;
    }
    runtime_convTstring(in_stack_ffffffffffffffc0,in_RCX);
    ~r0_01.len = extraout_RAX_00;
    ~r0_01.str = &DAT_008075e0;
    fmt_Sprintf(in_stack_ffffffffffffffc0,in_stack_ffffffffffffffd0,~r0_01);
    return;
  }
  runtime_convTstring(in_stack_ffffffffffffffc0,in_RCX);
  ~r0_02.len = extraout_RAX_01;
  ~r0_02.str = &DAT_008075e0;
  fmt_Sprintf(in_stack_ffffffffffffffc0,in_stack_ffffffffffffffd0,~r0_02);
  return;
}



void text_template_parse___lexer__next(text_template_parse_lexer *l,int32 ~r0)

{
  uint uVar1;
  uint uVar2;
  sdword extraout_EAX;
  int32 r;
  int extraout_RBX;
  int w;
  int unaff_R14;
  string in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar1 = (l->input).len;
  uVar2 = l->pos;
  if ((int)uVar2 < (int)uVar1) {
    if (uVar2 <= uVar1) {
      unicode_utf8_DecodeRuneInString
                (in_stack_ffffffffffffffe8,
                 (sdword)(l->input).str + ((dword)uVar2 & (dword)((int)-(uVar1 - uVar2) >> 0x3f)),
                 uVar1 - uVar2);
      l->pos = l->pos + extraout_RBX;
      if (extraout_EAX == 10) {
        l->line = l->line + 1;
      }
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  l->atEOF = true;
  return;
}



void text_template_parse___lexer__peek(text_template_parse_lexer *l,int32 ~r0)

{
  int32 r;
  int32 extraout_EBX;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    ~r0 = extraout_EBX;
  }
  text_template_parse___lexer__next(l,~r0);
  text_template_parse___lexer__backup(l);
  return;
}



// WARNING: Unknown calling convention

void text_template_parse___lexer__backup(text_template_parse_lexer *l)

{
  uint size;
  sdword extraout_EAX;
  int32 r;
  int extraout_RBX;
  int w;
  int unaff_R14;
  string in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((l->atEOF == false) && (size = l->pos, 0 < (int)size)) {
    if ((uint)(l->input).len < size) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAlen();
    }
    unicode_utf8_DecodeLastRuneInString(in_stack_ffffffffffffffe8,(int32)(l->input).str,size);
    l->pos = l->pos - extraout_RBX;
    if (extraout_EAX == 10) {
      l->line = l->line + -1;
    }
  }
  return;
}



int text_template_parse___lexer__accept(int __fd,sockaddr *__addr,socklen_t *__addr_len)

{
  int extraout_RAX;
  int unaff_R14;
  sockaddr *psStack0000000000000010;
  socklen_t *psStack0000000000000018;
  string in_stack_ffffffffffffffd8;
  
  psStack0000000000000018 = __addr_len;
  psStack0000000000000010 = __addr;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  text_template_parse___lexer__next
            ((text_template_parse_lexer *)__fd,(int32)psStack0000000000000010);
  strings_IndexRune(in_stack_ffffffffffffffd8,(int32)psStack0000000000000010,
                    (int)psStack0000000000000018);
  if (-1 < extraout_RAX) {
    return 1;
  }
  text_template_parse___lexer__backup((text_template_parse_lexer *)__fd);
  return 0;
}



void text_template_parse___lexer__acceptRun(text_template_parse_lexer *l,string valid)

{
  int extraout_RAX;
  int in_RCX;
  undefined8 in_RBX;
  undefined8 uVar1;
  undefined8 extraout_RBX;
  int unaff_R14;
  int iStack0000000000000018;
  string in_stack_ffffffffffffffd8;
  
  iStack0000000000000018 = in_RCX;
  while (uVar1 = in_RBX, &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  do {
    text_template_parse___lexer__next(l,(int32)uVar1);
    strings_IndexRune(in_stack_ffffffffffffffd8,(int32)in_RBX,iStack0000000000000018);
    uVar1 = extraout_RBX;
  } while (-1 < extraout_RAX);
  text_template_parse___lexer__backup(l);
  return;
}



void text_template_parse___lexer__errorf
               (text_template_parse_lexer *l,string format,__interface___ args,
               text_template_parse_stateFn **~r0)

{
  text_template_parse_Pos tVar1;
  string ~r0_00;
  uint8 *extraout_RAX;
  uint8 *extraout_RAX_00;
  uint8 *puVar2;
  int extraout_RBX;
  int extraout_RBX_00;
  int iVar3;
  int extraout_R9;
  int iVar4;
  uint8 **extraout_R11;
  int unaff_R14;
  undefined in_XMM15 [16];
  string in_stack_ffffffffffffffb0;
  __interface___ in_stack_ffffffffffffffc0;
  uint8 *in_stack_ffffffffffffffd8;
  int in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ~r0_00.len = in_stack_ffffffffffffffe0;
  ~r0_00.str = in_stack_ffffffffffffffd8;
  fmt_Sprintf(in_stack_ffffffffffffffb0,in_stack_ffffffffffffffc0,~r0_00);
  tVar1 = l->start;
  iVar4 = l->startLine;
  iVar3 = extraout_RBX;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_wbZero((internal_abi_Type *)&DAT_0087c840,&l->item);
  }
  (l->item).typ = in_XMM15._0_8_;
  (l->item).pos = in_XMM15._8_8_;
  (l->item).pos = in_XMM15._0_8_;
  (l->item).val.str = (uint8 *)in_XMM15._8_8_;
  *(undefined (*) [16])&(l->item).val.len = in_XMM15;
  (l->item).pos = tVar1;
  puVar2 = extraout_RAX;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RAX_00;
    extraout_R11[1] = (l->item).val.str;
    puVar2 = extraout_RAX_00;
    iVar3 = extraout_RBX_00;
    iVar4 = extraout_R9;
  }
  (l->item).val.str = puVar2;
  (l->item).val.len = iVar3;
  (l->item).line = iVar4;
  l->pos = in_XMM15._0_8_;
  l->start = in_XMM15._8_8_;
  (l->input).len = 0;
  return;
}



// DWARF original prototype: void text/template/parse.(*lexer).nextItem(text/template/parse.lexer *
// l, text/template/parse.item ~r0, text/template/parse.item ~r0)

void text_template_parse___lexer__nextItem
               (text_template_parse_lexer *l,text_template_parse_item ~r0,
               text_template_parse_item ~r0_1)

{
  undefined **ppuVar1;
  func__text_template_parse_lexer__text_template_parse_stateFn **state;
  int unaff_R14;
  text_template_parse_itemType local_30;
  undefined4 uStack_28;
  undefined4 uStack_24;
  undefined4 local_20;
  undefined4 uStack_1c;
  undefined local_18 [8];
  undefined8 uStack_10;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  local_30 = 8;
  uStack_28 = (undefined4)l->pos;
  uStack_24 = (undefined4)((uint)l->pos >> 0x20);
  local_20 = 0x8ae2dc;
  uStack_1c = 0;
  uStack_10 = l->startLine;
  local_18 = (undefined  [8])0x3;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_wbMove((internal_abi_Type *)&DAT_0087c840,&l->item,&local_30);
  }
  (l->item).typ = local_30;
  *(undefined4 *)&(l->item).pos = uStack_28;
  *(undefined4 *)((int)&(l->item).pos + 4) = uStack_24;
  *(undefined4 *)&(l->item).val.str = local_20;
  *(undefined4 *)((int)&(l->item).val.str + 4) = uStack_1c;
  *(undefined4 *)&(l->item).val.len = local_18._0_4_;
  *(undefined4 *)((int)&(l->item).val.len + 4) = local_18._4_4_;
  *(undefined4 *)&(l->item).line = (undefined4)uStack_10;
  *(undefined4 *)((int)&(l->item).line + 4) = uStack_10._4_4_;
  ppuVar1 = &PTR_text_template_parse_lexText_008eccb8;
  if (l->insideAction != false) {
    ppuVar1 = &PTR_text_template_parse_lexInsideAction_008ecc80;
  }
  do {
    ppuVar1 = (undefined **)(*(code *)*ppuVar1)(l);
  } while ((code **)ppuVar1 != (code **)0x0);
  return;
}



void text_template_parse_lexText(text_template_parse_lexer *l,text_template_parse_stateFn **~r0)

{
  uint8 uVar1;
  uint uVar2;
  uint uVar3;
  uint8 *puVar4;
  string sVar5;
  int extraout_RAX;
  int x;
  text_template_parse_Pos delimEnd;
  uint uVar6;
  int extraout_RAX_00;
  int extraout_RAX_01;
  int extraout_RAX_02;
  int iVar7;
  uint uVar8;
  text_template_parse_Pos trimLength;
  int extraout_RBX;
  int unaff_R14;
  string in_stack_ffffffffffffff28;
  string in_stack_ffffffffffffff38;
  uint8 *in_stack_ffffffffffffff48;
  text_template_parse_item i_3;
  text_template_parse_item i_2;
  text_template_parse_item i_1;
  text_template_parse_item i;
  
  while (&i_1 <= *(text_template_parse_item **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar8 = l->pos;
  uVar2 = (l->input).len;
  if (uVar2 < uVar8) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  strings_Index(in_stack_ffffffffffffff28,in_stack_ffffffffffffff38,
                (int)((l->input).str + (uVar8 & (int)-(uVar2 - uVar8) >> 0x3f)));
  if (extraout_RAX < 0) {
    uVar8 = (l->input).len;
    l->pos = uVar8;
    uVar2 = l->start;
    if ((int)uVar8 <= (int)uVar2) {
      if ((uint)(l->input).len < uVar8) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceAlen();
      }
      if (uVar2 <= uVar8) {
        i_3.typ = 8;
        i_3.pos._0_4_ = (undefined4)l->start;
        i_3.pos._4_4_ = (undefined4)((uint)l->start >> 0x20);
        i_3.val.str = (l->input).str + (uVar2 & -(int)(uint8 *)(uVar8 - uVar2) >> 0x3f);
        i_3.line = l->startLine;
        i_3.val.len = (int)(uint8 *)(uVar8 - uVar2);
        l->start = l->pos;
        l->startLine = l->line;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_wbMove((internal_abi_Type *)&DAT_0087c840,&l->item,&i_3);
        }
        (l->item).typ = i_3.typ;
        *(undefined4 *)&(l->item).pos = (undefined4)i_3.pos;
        *(undefined4 *)((int)&(l->item).pos + 4) = i_3.pos._4_4_;
        (l->item).val.str = i_3.val.str;
        *(undefined4 *)&(l->item).val.len = (undefined4)i_3.val.len;
        *(undefined4 *)((int)&(l->item).val.len + 4) = i_3.val.len._4_4_;
        *(undefined4 *)&(l->item).line = (undefined4)i_3.line;
        *(undefined4 *)((int)&(l->item).line + 4) = i_3.line._4_4_;
        return;
      }
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    if ((uint)(l->input).len < uVar8) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAlen();
    }
    if (uVar2 <= uVar8) {
      strings_Count(in_stack_ffffffffffffff28,in_stack_ffffffffffffff38,
                    (int)((l->input).str + (uVar2 & (int)-(uVar8 - uVar2) >> 0x3f)));
      l->line = l->line + extraout_RAX_02;
      uVar8 = l->pos;
      if ((uint)(l->input).len < uVar8) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceAlen();
      }
      uVar2 = l->start;
      if (uVar2 <= uVar8) {
        i_2.typ = 0x14;
        i_2.pos._0_4_ = (undefined4)l->start;
        i_2.pos._4_4_ = (undefined4)((uint)l->start >> 0x20);
        i_2.val.str = (l->input).str + (uVar2 & -(int)(uint8 *)(uVar8 - uVar2) >> 0x3f);
        i_2.line = l->startLine;
        i_2.val.len = (int)(uint8 *)(uVar8 - uVar2);
        l->start = l->pos;
        l->startLine = l->line;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_wbMove((internal_abi_Type *)&DAT_0087c840,&l->item,&i_2);
        }
        (l->item).typ = i_2.typ;
        *(undefined4 *)&(l->item).pos = (undefined4)i_2.pos;
        *(undefined4 *)((int)&(l->item).pos + 4) = i_2.pos._4_4_;
        (l->item).val.str = i_2.val.str;
        *(undefined4 *)&(l->item).val.len = (undefined4)i_2.val.len;
        *(undefined4 *)((int)&(l->item).val.len + 4) = i_2.val.len._4_4_;
        *(undefined4 *)&(l->item).line = (undefined4)i_2.line;
        *(undefined4 *)((int)&(l->item).line + 4) = i_2.line._4_4_;
        return;
      }
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  if (0 < extraout_RAX) {
    uVar8 = l->pos + extraout_RAX;
    l->pos = uVar8;
    uVar2 = uVar8 + (l->leftDelim).len;
    uVar3 = (l->input).len;
    if (uVar3 < uVar2) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    uVar6 = uVar2 & (int)-(uVar3 - uVar2) >> 0x3f;
    if ((int)(uVar3 - uVar2) < 2) {
      iVar7 = 0;
    }
    else {
      puVar4 = (l->input).str;
      if (puVar4[uVar6] == 0x2d) {
        uVar1 = puVar4[uVar6 + 1];
        if ((((uVar1 == 0x20) || (uVar1 == 9)) || (uVar1 == 0xd)) || (uVar1 == 10)) {
          if (uVar3 < uVar8) {
                    // WARNING: Subroutine does not return
            runtime_panicSliceAlen();
          }
          if (uVar8 < (uint)l->start) {
                    // WARNING: Subroutine does not return
            runtime_panicSliceB();
          }
          iVar7 = uVar8 - l->start;
          sVar5.len = iVar7;
          sVar5.str = in_stack_ffffffffffffff48;
          strings_TrimRight(in_stack_ffffffffffffff28,in_stack_ffffffffffffff38,sVar5);
          iVar7 = iVar7 - extraout_RBX;
        }
        else {
          iVar7 = 0;
        }
      }
      else {
        iVar7 = 0;
      }
    }
    uVar8 = l->pos - iVar7;
    l->pos = uVar8;
    if ((uint)(l->input).len < uVar8) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAlen();
    }
    uVar2 = l->start;
    if (uVar8 < uVar2) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    strings_Count(in_stack_ffffffffffffff28,in_stack_ffffffffffffff38,
                  (int)((l->input).str + (uVar2 & (int)-(uVar8 - uVar2) >> 0x3f)));
    l->line = l->line + extraout_RAX_00;
    uVar8 = l->pos;
    if ((uint)(l->input).len < uVar8) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAlen();
    }
    uVar2 = l->start;
    if (uVar8 < uVar2) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    i_1.typ = 0x14;
    i_1.pos._0_4_ = (undefined4)l->start;
    i_1.pos._4_4_ = (undefined4)((uint)l->start >> 0x20);
    i.val.len = uVar8 - uVar2;
    i_1.val.str = (l->input).str + (uVar2 & -i.val.len >> 0x3f);
    i_1.line = l->startLine;
    i_1.val.len = i.val.len;
    sVar5 = i_1._24_16_;
    l->start = l->pos;
    l->startLine = l->line;
    i.typ = 0x14;
    i.pos._0_4_ = (undefined4)i_1.pos;
    i.pos._4_4_ = i_1.pos._4_4_;
    i_1.line._4_4_ = (undefined4)((uint)i_1.line >> 0x20);
    i.line._0_4_ = (undefined4)i_1.line;
    i.line._4_4_ = i_1.line._4_4_;
    uVar8 = iVar7 + l->pos;
    l->pos = uVar8;
    i_1._24_16_ = sVar5;
    i.val.str = i_1.val.str;
    if ((uint)(l->input).len < uVar8) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAlen();
    }
    uVar2 = l->start;
    if (uVar8 < uVar2) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    strings_Count(in_stack_ffffffffffffff28,in_stack_ffffffffffffff38,
                  (int)((l->input).str + (uVar2 & (int)-(uVar8 - uVar2) >> 0x3f)));
    iVar7 = extraout_RAX_01 + l->line;
    l->line = iVar7;
    l->start = l->pos;
    l->startLine = iVar7;
    if (i.val.len != 0) {
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_wbMove((internal_abi_Type *)&DAT_0087c840,&l->item,&i);
      }
      (l->item).typ = i.typ;
      *(undefined4 *)&(l->item).pos = (undefined4)i.pos;
      *(undefined4 *)((int)&(l->item).pos + 4) = i.pos._4_4_;
      (l->item).val.str = i.val.str;
      (l->item).val.len = i.val.len;
      *(undefined4 *)&(l->item).line = (undefined4)i.line;
      *(undefined4 *)((int)&(l->item).line + 4) = i.line._4_4_;
      return;
    }
  }
  return;
}



void text_template_parse___lexer__atRightDelim
               (text_template_parse_lexer *l,bool delim,bool trimSpaces)

{
  uint8 uVar1;
  uint uVar2;
  uint uVar3;
  uint8 *puVar4;
  char extraout_AL;
  char extraout_AL_00;
  char cVar5;
  uint uVar6;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar2 = l->pos;
  uVar3 = (l->input).len;
  if (uVar3 < uVar2) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  uVar6 = (int)-(uVar3 - uVar2) >> 0x3f & uVar2;
  if (1 < (int)(uVar3 - uVar2)) {
    puVar4 = (l->input).str;
    uVar1 = puVar4[uVar6];
    if (((((uVar1 == 0x20) || (uVar1 == 9)) || (uVar1 == 0xd)) || (uVar1 == 10)) &&
       (puVar4[uVar6 + 1] == 0x2d)) {
      if (uVar3 < uVar2 + 2) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      if ((int)((uVar3 - uVar2) + -2) < (l->rightDelim).len) {
        cVar5 = '\0';
      }
      else {
        runtime_memequal();
        cVar5 = extraout_AL;
      }
      if (cVar5 != '\0') {
        return;
      }
    }
  }
  uVar2 = (l->input).len;
  if (uVar2 < (uint)l->pos) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  if ((l->rightDelim).len <= (int)(uVar2 - l->pos)) {
    runtime_memequal();
    if (extraout_AL_00 != '\0') {
      return;
    }
  }
  return;
}



void text_template_parse_lexLeftDelim
               (text_template_parse_lexer *l,text_template_parse_stateFn **~r0)

{
  uint8 uVar1;
  uint uVar2;
  uint8 *puVar3;
  int extraout_RAX;
  int iVar4;
  int extraout_RAX_00;
  uint uVar5;
  text_template_parse_Pos afterMarker;
  uint uVar6;
  int unaff_R14;
  bool bVar7;
  string in_stack_ffffffffffffff88;
  string in_stack_ffffffffffffff98;
  text_template_parse_item i_1;
  text_template_parse_item i;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar5 = l->pos + (l->leftDelim).len;
  l->pos = uVar5;
  uVar2 = (l->input).len;
  if (uVar2 < uVar5) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  puVar3 = (l->input).str;
  uVar6 = (int)-(uVar2 - uVar5) >> 0x3f & uVar5;
  if ((1 < (int)(uVar2 - uVar5)) && (puVar3[uVar6] == 0x2d)) {
    uVar1 = puVar3[uVar6 + 1];
    if ((uVar1 == 0x20) || (((uVar1 == 9 || (uVar1 == 0xd)) || (uVar1 == 10)))) {
      afterMarker = 2;
      goto LAB_0074a3d8;
    }
  }
  afterMarker = 0;
LAB_0074a3d8:
  uVar6 = afterMarker + uVar5;
  if (uVar2 < uVar6) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  if ((int)(uVar2 - uVar6) < 2) {
    bVar7 = false;
  }
  else {
    bVar7 = *(short *)(puVar3 + ((int)-(uVar2 - uVar6) >> 0x3f & uVar6)) == 0x2a2f;
  }
  if (!bVar7) {
    uVar2 = l->start;
    if (uVar5 < uVar2) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    i_1.pos._0_4_ = (undefined4)l->start;
    i_1.pos._4_4_ = (undefined4)((uint)l->start >> 0x20);
    i.val.len = uVar5 - uVar2;
    i.val.str = puVar3 + (uVar2 & -i.val.len >> 0x3f);
    iVar4 = l->startLine;
    l->start = l->pos;
    l->startLine = l->line;
    i.typ = 0xb;
    i.pos._0_4_ = (undefined4)i_1.pos;
    i.pos._4_4_ = i_1.pos._4_4_;
    i_1.line._0_4_ = (undefined4)iVar4;
    i_1.line._4_4_ = (undefined4)((uint)iVar4 >> 0x20);
    i.line._0_4_ = (undefined4)i_1.line;
    i.line._4_4_ = i_1.line._4_4_;
    l->insideAction = true;
    uVar2 = afterMarker + l->pos;
    l->pos = uVar2;
    if (uVar2 <= (uint)(l->input).len) {
      uVar5 = l->start;
      if (uVar5 <= uVar2) {
        strings_Count(in_stack_ffffffffffffff88,in_stack_ffffffffffffff98,
                      (int)((l->input).str + (uVar5 & (int)-(uVar2 - uVar5) >> 0x3f)));
        iVar4 = extraout_RAX_00 + l->line;
        l->line = iVar4;
        l->start = l->pos;
        l->startLine = iVar4;
        l->parenDepth = 0;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_wbMove((internal_abi_Type *)&DAT_0087c840,&l->item,&i);
        }
        (l->item).typ = i.typ;
        *(undefined4 *)&(l->item).pos = (undefined4)i.pos;
        *(undefined4 *)((int)&(l->item).pos + 4) = i.pos._4_4_;
        (l->item).val.str = i.val.str;
        (l->item).val.len = i.val.len;
        *(undefined4 *)&(l->item).line = (undefined4)i.line;
        *(undefined4 *)((int)&(l->item).line + 4) = i.line._4_4_;
        return;
      }
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
                    // WARNING: Subroutine does not return
    runtime_panicSliceAlen();
  }
  l->pos = uVar6;
  if ((uint)(l->input).len < uVar6) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAlen();
  }
  uVar2 = l->start;
  if (uVar2 <= uVar6) {
    strings_Count(in_stack_ffffffffffffff88,in_stack_ffffffffffffff98,
                  (int)((l->input).str + (uVar2 & (int)-(uVar6 - uVar2) >> 0x3f)));
    iVar4 = extraout_RAX + l->line;
    l->line = iVar4;
    l->start = l->pos;
    l->startLine = iVar4;
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceB();
}



void text_template_parse_lexComment(text_template_parse_lexer *l,text_template_parse_stateFn **~r0)

{
  uint uVar1;
  __interface___ args;
  __interface___ args_00;
  string ~r0_00;
  char extraout_AL;
  bool delim;
  int extraout_RAX;
  int x;
  bool delim_00;
  char extraout_BL;
  bool trimSpace;
  uint uVar2;
  int extraout_RAX_00;
  int iVar3;
  int extraout_RBX;
  int unaff_R14;
  string in_stack_ffffffffffffff70;
  string in_stack_ffffffffffffff80;
  uint8 *in_stack_ffffffffffffff90;
  int in_stack_ffffffffffffff98;
  text_template_parse_item i_1;
  text_template_parse_item i;
  
  while (&i.line <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar3 = l->pos;
  uVar2 = iVar3 + 2;
  l->pos = uVar2;
  uVar1 = (l->input).len;
  if (uVar1 < uVar2) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  strings_Index(in_stack_ffffffffffffff70,in_stack_ffffffffffffff80,
                (int)((l->input).str + (uVar2 & (int)-((uVar1 - iVar3) + -2) >> 0x3f)));
  if (extraout_RAX < 0) {
    args_00.cap = (int)in_stack_ffffffffffffff90;
    args_00.array = (interface___ *)in_stack_ffffffffffffff80.str;
    args_00.len = in_stack_ffffffffffffff80.len;
    text_template_parse___lexer__errorf
              (l,in_stack_ffffffffffffff70,args_00,(text_template_parse_stateFn **)&DAT_008b6b04);
    return;
  }
  l->pos = l->pos + extraout_RAX + 2;
  text_template_parse___lexer__atRightDelim(l,delim_00,SUB81(l,0));
  if (extraout_AL == '\0') {
    args.cap = (int)in_stack_ffffffffffffff90;
    args.array = (interface___ *)in_stack_ffffffffffffff80.str;
    args.len = in_stack_ffffffffffffff80.len;
    text_template_parse___lexer__errorf
              (l,in_stack_ffffffffffffff70,args,(text_template_parse_stateFn **)&DAT_008c34e9);
    return;
  }
  uVar2 = l->pos;
  if ((uint)(l->input).len < uVar2) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAlen();
  }
  uVar1 = l->start;
  if (uVar2 < uVar1) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  i_1.pos._0_4_ = (undefined4)l->start;
  i_1.pos._4_4_ = (undefined4)((uint)l->start >> 0x20);
  i.val.len = uVar2 - uVar1;
  i.val.str = (l->input).str + (uVar1 & -i.val.len >> 0x3f);
  iVar3 = l->startLine;
  l->start = l->pos;
  l->startLine = l->line;
  i.typ = 4;
  i.pos._0_4_ = (undefined4)i_1.pos;
  i.pos._4_4_ = i_1.pos._4_4_;
  i_1.line._0_4_ = (undefined4)iVar3;
  i_1.line._4_4_ = (undefined4)((uint)iVar3 >> 0x20);
  i.line._0_4_ = (undefined4)i_1.line;
  i.line._4_4_ = i_1.line._4_4_;
  if (extraout_BL != '\0') {
    l->pos = l->pos + 2;
  }
  uVar2 = l->pos + (l->rightDelim).len;
  l->pos = uVar2;
  if (extraout_BL != '\0') {
    uVar1 = (l->input).len;
    if (uVar1 < uVar2) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    ~r0_00.len = in_stack_ffffffffffffff98;
    ~r0_00.str = in_stack_ffffffffffffff90;
    strings_TrimLeft(in_stack_ffffffffffffff70,in_stack_ffffffffffffff80,~r0_00);
    l->pos = l->pos + ((uVar1 - uVar2) - extraout_RBX);
  }
  uVar2 = l->pos;
  if (uVar2 <= (uint)(l->input).len) {
    uVar1 = l->start;
    if (uVar2 < uVar1) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    strings_Count(in_stack_ffffffffffffff70,in_stack_ffffffffffffff80,
                  (int)((l->input).str + (uVar1 & (int)-(uVar2 - uVar1) >> 0x3f)));
    iVar3 = extraout_RAX_00 + l->line;
    l->line = iVar3;
    l->start = l->pos;
    l->startLine = iVar3;
    if ((l->options).emitComment != false) {
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_wbMove((internal_abi_Type *)&DAT_0087c840,&l->item,&i);
      }
      (l->item).typ = i.typ;
      *(undefined4 *)&(l->item).pos = (undefined4)i.pos;
      *(undefined4 *)((int)&(l->item).pos + 4) = i.pos._4_4_;
      (l->item).val.str = i.val.str;
      (l->item).val.len = i.val.len;
      *(undefined4 *)&(l->item).line = (undefined4)i.line;
      *(undefined4 *)((int)&(l->item).line + 4) = i.line._4_4_;
      return;
    }
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceAlen();
}



void text_template_parse_lexRightDelim
               (text_template_parse_lexer *l,text_template_parse_stateFn **~r0)

{
  uint uVar1;
  string ~r0_00;
  char extraout_BL;
  bool trimSpace;
  int extraout_RAX;
  int iVar2;
  int extraout_RAX_00;
  undefined8 in_RCX;
  uint uVar3;
  undefined8 extraout_RCX;
  int extraout_RBX;
  text_template_parse_stateFn **extraout_RBX_00;
  int unaff_R14;
  text_template_parse_lexer *ptStack0000000000000008;
  string in_stack_ffffffffffffff78;
  string in_stack_ffffffffffffff88;
  undefined7 in_stack_ffffffffffffff98;
  char cVar4;
  text_template_parse_item i_1;
  text_template_parse_item i;
  
  ptStack0000000000000008 = l;
  while (&stack0xfffffffffffffff8 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RCX = extraout_RCX;
    ~r0 = extraout_RBX_00;
  }
  text_template_parse___lexer__atRightDelim(ptStack0000000000000008,SUB81(~r0,0),SUB81(in_RCX,0));
  cVar4 = extraout_BL;
  if (extraout_BL != '\0') {
    iVar2 = ptStack0000000000000008->pos;
    uVar3 = iVar2 + 2;
    ptStack0000000000000008->pos = uVar3;
    if ((uint)(ptStack0000000000000008->input).len < uVar3) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAlen();
    }
    uVar1 = ptStack0000000000000008->start;
    if (uVar3 < uVar1) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    strings_Count(in_stack_ffffffffffffff78,in_stack_ffffffffffffff88,
                  (int)((ptStack0000000000000008->input).str +
                       ((int)-((iVar2 - uVar1) + 2) >> 0x3f & uVar1)));
    iVar2 = extraout_RAX + ptStack0000000000000008->line;
    ptStack0000000000000008->line = iVar2;
    ptStack0000000000000008->start = ptStack0000000000000008->pos;
    ptStack0000000000000008->startLine = iVar2;
  }
  uVar3 = ptStack0000000000000008->pos + (ptStack0000000000000008->rightDelim).len;
  ptStack0000000000000008->pos = uVar3;
  if ((uint)(ptStack0000000000000008->input).len < uVar3) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAlen();
  }
  uVar1 = ptStack0000000000000008->start;
  if (uVar3 < uVar1) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  i_1.pos._0_4_ = (undefined4)ptStack0000000000000008->start;
  i_1.pos._4_4_ = (undefined4)((uint)ptStack0000000000000008->start >> 0x20);
  i.val.len = uVar3 - uVar1;
  i.val.str = (ptStack0000000000000008->input).str + (-i.val.len >> 0x3f & uVar1);
  iVar2 = ptStack0000000000000008->startLine;
  ptStack0000000000000008->start = ptStack0000000000000008->pos;
  ptStack0000000000000008->startLine = ptStack0000000000000008->line;
  i.typ = 0x10;
  i.pos._0_4_ = (undefined4)i_1.pos;
  i.pos._4_4_ = i_1.pos._4_4_;
  i_1.line._0_4_ = (undefined4)iVar2;
  i_1.line._4_4_ = (undefined4)((uint)iVar2 >> 0x20);
  i.line._0_4_ = (undefined4)i_1.line;
  i.line._4_4_ = i_1.line._4_4_;
  if (cVar4 != '\0') {
    uVar3 = (ptStack0000000000000008->input).len;
    if (uVar3 < (uint)ptStack0000000000000008->pos) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    iVar2 = uVar3 - ptStack0000000000000008->pos;
    ~r0_00.str._7_1_ = cVar4;
