                    ~r0_00);
  }
  return;
}



void context___deadlineExceededError__Error(string ~r0)

{
  string **ppsVar1;
  int in_RAX;
  int unaff_R14;
  
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &~r0)) {
    *ppsVar1 = (string *)&stack0xfffffffffffffff8;
  }
  if (in_RAX != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void context___deadlineExceededError__Temporary(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void context___deadlineExceededError__Timeout(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void context___emptyCtx__Deadline(time_Time deadline,bool ok)

{
  time_Time **pptVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  pptVar1 = *(time_Time ***)(unaff_R14 + 0x20);
  if ((pptVar1 != (time_Time **)0x0) && (*pptVar1 == &deadline)) {
    *pptVar1 = (time_Time *)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,ok) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void context___emptyCtx__Done(<_chan_struct___ ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (~r0 != (<_chan_struct___)0x0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void context___emptyCtx__Err(error ~r0)

{
  error **ppeVar1;
  int in_RAX;
  int unaff_R14;
  
  ppeVar1 = *(error ***)(unaff_R14 + 0x20);
  if ((ppeVar1 != (error **)0x0) && (*ppeVar1 == &~r0)) {
    *ppeVar1 = (error *)&stack0xfffffffffffffff8;
  }
  if (in_RAX != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void context___emptyCtx__Value(interface___ key,interface___ ~r0)

{
  interface___ **ppiVar1;
  int in_RAX;
  int unaff_R14;
  
  ppiVar1 = *(interface___ ***)(unaff_R14 + 0x20);
  if ((ppiVar1 != (interface___ **)0x0) && (*ppiVar1 == &key)) {
    *ppiVar1 = (interface___ *)&stack0xfffffffffffffff8;
  }
  if (in_RAX != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void context_backgroundCtx_Deadline(time_Time deadline,bool ok)

{
  time_Time **pptVar1;
  int unaff_R14;
  
  pptVar1 = *(time_Time ***)(unaff_R14 + 0x20);
  if ((pptVar1 != (time_Time **)0x0) && (*pptVar1 == &deadline)) {
    *pptVar1 = (time_Time *)register0x00000020;
  }
  return;
}



void context___backgroundCtx__Deadline(time_Time deadline,bool ok)

{
  time_Time **pptVar1;
  int unaff_R14;
  
  pptVar1 = *(time_Time ***)(unaff_R14 + 0x20);
  if ((pptVar1 != (time_Time **)0x0) && (*pptVar1 == &deadline)) {
    *pptVar1 = (time_Time *)register0x00000020;
  }
  return;
}



void context_backgroundCtx_Done(<_chan_struct___ ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void context___backgroundCtx__Done(<_chan_struct___ ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void context_backgroundCtx_Err(error ~r0)

{
  error **ppeVar1;
  int unaff_R14;
  
  ppeVar1 = *(error ***)(unaff_R14 + 0x20);
  if ((ppeVar1 != (error **)0x0) && (*ppeVar1 == &~r0)) {
    *ppeVar1 = (error *)register0x00000020;
  }
  return;
}



void context___backgroundCtx__Err(error ~r0)

{
  error **ppeVar1;
  int unaff_R14;
  
  ppeVar1 = *(error ***)(unaff_R14 + 0x20);
  if ((ppeVar1 != (error **)0x0) && (*ppeVar1 == &~r0)) {
    *ppeVar1 = (error *)register0x00000020;
  }
  return;
}



void context___backgroundCtx__String(string ~r0)

{
  string **ppsVar1;
  int in_RAX;
  int unaff_R14;
  
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &~r0)) {
    *ppsVar1 = (string *)&stack0xfffffffffffffff8;
  }
  if (in_RAX != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void context_backgroundCtx_Value(interface___ key,interface___ ~r0)

{
  interface___ **ppiVar1;
  int unaff_R14;
  
  ppiVar1 = *(interface___ ***)(unaff_R14 + 0x20);
  if ((ppiVar1 != (interface___ **)0x0) && (*ppiVar1 == &key)) {
    *ppiVar1 = (interface___ *)register0x00000020;
  }
  return;
}



void context___backgroundCtx__Value(interface___ key,interface___ ~r0)

{
  interface___ **ppiVar1;
  int unaff_R14;
  
  ppiVar1 = *(interface___ ***)(unaff_R14 + 0x20);
  if ((ppiVar1 != (interface___ **)0x0) && (*ppiVar1 == &key)) {
    *ppiVar1 = (interface___ *)register0x00000020;
  }
  return;
}



void context_cancelCtx_Deadline(time_Time deadline,bool ok)

{
  time_Time **pptVar1;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  pptVar1 = *(time_Time ***)(unaff_R14 + 0x20);
  if ((pptVar1 != (time_Time **)0x0) && (*pptVar1 == &deadline)) {
    *pptVar1 = (time_Time *)&stack0xfffffffffffffff0;
  }
  (**(code **)(deadline.wall + 0x18))(deadline.ext);
  return;
}



void context___cancelCtx__Deadline(time_Time deadline,bool ok)

{
  time_Time **pptVar1;
  undefined7 in_register_00000001;
  int *piVar2;
  int unaff_R14;
  
  piVar2 = (int *)CONCAT71(in_register_00000001,ok);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    deadline.wall = (uint64)piVar2;
    runtime_morestack_noctxt();
    piVar2 = (int *)deadline.wall;
  }
  pptVar1 = *(time_Time ***)(unaff_R14 + 0x20);
  if ((pptVar1 != (time_Time **)0x0) && (*pptVar1 == &deadline)) {
    *pptVar1 = (time_Time *)&stack0xfffffffffffffff0;
  }
  (**(code **)(*piVar2 + 0x18))(piVar2[1]);
  return;
}



void context_stopCtx_Deadline(time_Time deadline,bool ok)

{
  time_Time **pptVar1;
  undefined7 in_register_00000001;
  int64 in_RBX;
  int unaff_R14;
  
  deadline.wall = CONCAT71(in_register_00000001,ok);
  deadline.ext = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  pptVar1 = *(time_Time ***)(unaff_R14 + 0x20);
  if ((pptVar1 != (time_Time **)0x0) && (*pptVar1 == &deadline)) {
    *pptVar1 = (time_Time *)&stack0xfffffffffffffff0;
  }
  (**(code **)(deadline.wall + 0x18))(deadline.ext);
  return;
}



void context___stopCtx__Deadline(time_Time deadline,bool ok)

{
  time_Time **pptVar1;
  undefined7 in_register_00000001;
  int *piVar2;
  int unaff_R14;
  
  piVar2 = (int *)CONCAT71(in_register_00000001,ok);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    deadline.wall = (uint64)piVar2;
    runtime_morestack_noctxt();
    piVar2 = (int *)deadline.wall;
  }
  pptVar1 = *(time_Time ***)(unaff_R14 + 0x20);
  if ((pptVar1 != (time_Time **)0x0) && (*pptVar1 == &deadline)) {
    *pptVar1 = (time_Time *)&stack0xfffffffffffffff0;
  }
  (**(code **)(*piVar2 + 0x18))(piVar2[1]);
  return;
}



// WARNING: Unknown calling convention

void context_stopCtx_Done(void)

{
  int *piVar1;
  int in_RAX;
  undefined8 in_RBX;
  int unaff_R14;
  int iStack0000000000000008;
  undefined8 uStack0000000000000010;
  undefined auStack_10 [8];
  
  iStack0000000000000008 = in_RAX;
  uStack0000000000000010 = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((int *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  (**(code **)(iStack0000000000000008 + 0x20))(uStack0000000000000010);
  return;
}



// WARNING: Unknown calling convention

void context___stopCtx__Done(void)

{
  int *piVar1;
  int *in_RAX;
  int unaff_R14;
  int *piStack0000000000000008;
  undefined auStack_10 [8];
  
  piStack0000000000000008 = in_RAX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((int **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  (**(code **)(*piStack0000000000000008 + 0x20))(piStack0000000000000008[1]);
  return;
}



// WARNING: Unknown calling convention

void context_stopCtx_Err(void)

{
  int *piVar1;
  int in_RAX;
  undefined8 in_RBX;
  int unaff_R14;
  int iStack0000000000000008;
  undefined8 uStack0000000000000010;
  undefined auStack_10 [8];
  
  iStack0000000000000008 = in_RAX;
  uStack0000000000000010 = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((int *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  (**(code **)(iStack0000000000000008 + 0x28))(uStack0000000000000010);
  return;
}



// WARNING: Unknown calling convention

void context___stopCtx__Err(void)

{
  int *piVar1;
  int *in_RAX;
  int unaff_R14;
  int *piStack0000000000000008;
  undefined auStack_10 [8];
  
  piStack0000000000000008 = in_RAX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((int **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  (**(code **)(*piStack0000000000000008 + 0x28))(piStack0000000000000008[1]);
  return;
}



void context_stopCtx_Value(interface___ key)

{
  interface___ **ppiVar1;
  internal_abi_Type *in_RAX;
  void *in_RBX;
  undefined8 in_RSI;
  undefined8 in_RDI;
  int unaff_R14;
  undefined8 uStack0000000000000020;
  undefined8 uStack0000000000000028;
  interface___ iStack_20;
  
  key._type = in_RAX;
  key.data = in_RBX;
  uStack0000000000000028 = in_RSI;
  uStack0000000000000020 = in_RDI;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ppiVar1 = *(interface___ ***)(unaff_R14 + 0x20);
  if ((ppiVar1 != (interface___ **)0x0) && (*ppiVar1 == &key)) {
    *ppiVar1 = &iStack_20;
  }
  (*(code *)key._type[1].Size_)(key.data,uStack0000000000000020,uStack0000000000000028);
  return;
}



void context___stopCtx__Value(interface___ key)

{
  interface___ **ppiVar1;
  internal_abi_Type *in_RAX;
  int unaff_R14;
  interface___ iStack_20;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    key._type = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = key._type;
  }
  ppiVar1 = *(interface___ ***)(unaff_R14 + 0x20);
  if ((ppiVar1 != (interface___ **)0x0) && (*ppiVar1 == &key)) {
    *ppiVar1 = &iStack_20;
  }
  (**(code **)(in_RAX->Size_ + 0x30))(in_RAX->PtrBytes);
  return;
}



void context___timerCtx__Done(<_chan_struct___ ~r0)

{
  int *piVar1;
  <_chan_struct___ in_RCX;
  <_chan_struct___ extraout_RCX;
  <_chan_struct___ in_RBX;
  <_chan_struct___ extraout_RBX;
  int unaff_R14;
  <_chan_struct___ in_stack_00000008;
  undefined auStack_10 [8];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = ~r0;
    runtime_morestack_noctxt();
    ~r0 = in_stack_00000008;
    in_RCX = extraout_RCX;
    in_RBX = extraout_RBX;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((<_chan_struct___ *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  context___cancelCtx__Done((context_cancelCtx *)~r0,in_RBX,in_RCX);
  return;
}



void context___timerCtx__Err(error ~r0)

{
  error **ppeVar1;
  error ~r0_00;
  context_cancelCtx *in_RAX;
  void *unaff_RBP;
  int unaff_R14;
  runtime_itab *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.tab = (runtime_itab *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (context_cancelCtx *)~r0.tab;
  }
  ppeVar1 = *(error ***)(unaff_R14 + 0x20);
  if ((ppeVar1 != (error **)0x0) && (*ppeVar1 == &~r0)) {
    *ppeVar1 = (error *)&stack0xfffffffffffffff0;
  }
  ~r0_00.data = unaff_RBP;
  ~r0_00.tab = in_stack_fffffffffffffff0;
  context___cancelCtx__Err(in_RAX,~r0_00);
  return;
}



void context___timerCtx__Value(interface___ key,interface___ ~r0)

{
  interface___ **ppiVar1;
  interface___ ~r0_00;
  char extraout_AL;
  internal_abi_Type *in_RAX;
  void *in_RCX;
  internal_abi_Type *in_RBX;
  void *unaff_RBP;
  undefined8 in_RDI;
  undefined8 extraout_RDI;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffd0;
  interface___ in_stack_ffffffffffffffe0;
  internal_abi_Type *in_stack_fffffffffffffff0;
  
  key.data = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    key._type = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = key._type;
    in_RDI = extraout_RDI;
  }
  ppiVar1 = *(interface___ ***)(unaff_R14 + 0x20);
  if ((ppiVar1 != (interface___ **)0x0) && (*ppiVar1 == &key)) {
    *ppiVar1 = (interface___ *)&stack0xffffffffffffffd0;
  }
  if (((internal_abi_Type *)key.data != (internal_abi_Type *)&DAT_007f83e0) ||
     (key._type = in_RAX,
     runtime_efaceeq((internal_abi_Type *)&DAT_007f83e0,in_RCX,&context_cancelCtxKey,SUB81(in_RDI,0)
                    ), in_stack_fffffffffffffff0 = (internal_abi_Type *)key.data,
     extraout_AL == '\0')) {
    ~r0_00.data = unaff_RBP;
    ~r0_00._type = in_stack_fffffffffffffff0;
    context_value((context_Context)in_stack_ffffffffffffffd0,in_stack_ffffffffffffffe0,~r0_00);
  }
  return;
}



void context_valueCtx_Deadline(time_Time deadline,bool ok)

{
  time_Time **pptVar1;
  undefined7 in_register_00000001;
  int64 in_RBX;
  int unaff_R14;
  
  deadline.wall = CONCAT71(in_register_00000001,ok);
  deadline.ext = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  pptVar1 = *(time_Time ***)(unaff_R14 + 0x20);
  if ((pptVar1 != (time_Time **)0x0) && (*pptVar1 == &deadline)) {
    *pptVar1 = (time_Time *)&stack0xfffffffffffffff0;
  }
  (**(code **)(deadline.wall + 0x18))(deadline.ext);
  return;
}



void context___valueCtx__Deadline(time_Time deadline,bool ok)

{
  time_Time **pptVar1;
  undefined7 in_register_00000001;
  int *piVar2;
  int unaff_R14;
  
  piVar2 = (int *)CONCAT71(in_register_00000001,ok);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    deadline.wall = (uint64)piVar2;
    runtime_morestack_noctxt();
    piVar2 = (int *)deadline.wall;
  }
  pptVar1 = *(time_Time ***)(unaff_R14 + 0x20);
  if ((pptVar1 != (time_Time **)0x0) && (*pptVar1 == &deadline)) {
    *pptVar1 = (time_Time *)&stack0xfffffffffffffff0;
  }
  (**(code **)(*piVar2 + 0x18))(piVar2[1]);
  return;
}



// WARNING: Unknown calling convention

void context_valueCtx_Done(void)

{
  int *piVar1;
  int in_RAX;
  undefined8 in_RBX;
  int unaff_R14;
  int iStack0000000000000008;
  undefined8 uStack0000000000000010;
  undefined auStack_10 [8];
  
  iStack0000000000000008 = in_RAX;
  uStack0000000000000010 = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((int *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  (**(code **)(iStack0000000000000008 + 0x20))(uStack0000000000000010);
  return;
}



// WARNING: Unknown calling convention

void context___valueCtx__Done(void)

{
  int *piVar1;
  int *in_RAX;
  int unaff_R14;
  int *piStack0000000000000008;
  undefined auStack_10 [8];
  
  piStack0000000000000008 = in_RAX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((int **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  (**(code **)(*piStack0000000000000008 + 0x20))(piStack0000000000000008[1]);
  return;
}



// WARNING: Unknown calling convention

void context_valueCtx_Err(void)

{
  int *piVar1;
  int in_RAX;
  undefined8 in_RBX;
  int unaff_R14;
  int iStack0000000000000008;
  undefined8 uStack0000000000000010;
  undefined auStack_10 [8];
  
  iStack0000000000000008 = in_RAX;
  uStack0000000000000010 = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((int *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  (**(code **)(iStack0000000000000008 + 0x28))(uStack0000000000000010);
  return;
}



// WARNING: Unknown calling convention

void context___valueCtx__Err(void)

{
  int *piVar1;
  int *in_RAX;
  int unaff_R14;
  int *piStack0000000000000008;
  undefined auStack_10 [8];
  
  piStack0000000000000008 = in_RAX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((int **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  (**(code **)(*piStack0000000000000008 + 0x28))(piStack0000000000000008[1]);
  return;
}



void math_bits_OnesCount64(uint64 x,int ~r0)

{
  return;
}



void math_Floor(float64 x,float64 ~r0)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  math_archFloor();
  return;
}



double math_frexp(double __x,int *__exponent)

{
  uint64 x;
  
  if ((__x == 0.0) && (!NAN(__x))) {
    return __x;
  }
  if (((__x <= 1.797693134862316e+308) && (-1.797693134862316e+308 <= __x)) && (!NAN(__x))) {
    if ((double)((uint)__x & 0x7fffffffffffffff) < 2.225073858507201e-308) {
      __x = __x * 4503599627370496.0;
    }
    return (double)((uint)__x & 0x800fffffffffffff | 0x3fe0000000000000);
  }
  return __x;
}



double math_ldexp(double __x,int __exponent)

{
  int e;
  uint64 x;
  uint uVar1;
  int iVar2;
  float64 m;
  
  if ((__x == 0.0) && (!NAN(__x))) {
    return __x;
  }
  if (((1.797693134862316e+308 < __x) || (__x < -1.797693134862316e+308)) || (NAN(__x))) {
    return __x;
  }
  if (2.225073858507201e-308 <= (double)((uint)__x & 0x7fffffffffffffff)) {
    e = 0;
  }
  else {
    __x = __x * 4503599627370496.0;
    e = -0x34;
  }
  uVar1 = (uint)((dword)((uint)__x >> 0x34) & 0x7ff);
  iVar2 = uVar1 + __exponent + e + -0x3ff;
  if (iVar2 < -0x433) {
    return (double)((uint)__x & 0x8000000000000000);
  }
  if (iVar2 < 0x400) {
    if (iVar2 < -0x3fe) {
      iVar2 = uVar1 + __exponent + e + -0x3ca;
      m = 1.110223024625157e-16;
    }
    else {
      m = 1.0;
    }
    return (double)m * (double)(iVar2 + 0x3ff << 0x34 | (uint)__x & 0x800fffffffffffff);
  }
  if (0.0 <= __x) {
    return INFINITY;
  }
  return -INFINITY;
}



double math_log2(double __x)

{
  int *in_RAX;
  int extraout_RAX;
  int exp;
  int *extraout_RAX_00;
  int unaff_R14;
  double dVar1;
  float64 frac;
  double local_18;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RAX = extraout_RAX_00;
  }
  dVar1 = math_frexp(__x,in_RAX);
  if ((dVar1 == 0.5) && (!NAN(dVar1))) {
    return (double)(extraout_RAX + -1);
  }
  math_archLog();
  return local_18 * 1.442695040888963 + (double)extraout_RAX;
}



double math_modf(double __x,double *__iptr)

{
  uint uVar1;
  double *extraout_RAX;
  uint64 x;
  uint e;
  int unaff_R14;
  undefined8 in_XMM0_Qb;
  undefined auVar2 [16];
  
  auVar2._8_8_ = in_XMM0_Qb;
  auVar2._0_8_ = __x;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    auVar2._8_8_ = 0;
    __iptr = extraout_RAX;
  }
  if (1.0 <= auVar2._0_8_) {
    uVar1 = (uint)(auVar2._4_4_ >> 0x14 & 0x7ff);
    if (uVar1 - 0x3ff < 0x34) {
      uVar1 = -(uVar1 - 0x433);
      auVar2._0_8_ = (double)(-(-(uint)(uVar1 < 0x40) & 1 << ((byte)uVar1 & 0x3f)) &
                             (uint)auVar2._0_8_);
    }
    return auVar2._0_8_;
  }
  if (auVar2._0_8_ < 0.0) {
    auVar2._0_8_ = math_modf((double)((uint)auVar2._0_8_ ^ 0x8000000000000000),__iptr);
    return (double)((uint)auVar2._0_8_ ^ 0x8000000000000000);
  }
  if ((auVar2._0_8_ == 0.0) && (!NAN(auVar2._0_8_))) {
    return auVar2._0_8_;
  }
  return 0.0;
}



void math_isOddInt(float64 x,bool ~r0)

{
  undefined7 in_register_00000001;
  double *__iptr;
  double *extraout_RAX;
  int unaff_R14;
  float64 xi;
  float64 xf;
  
  __iptr = (double *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    __iptr = extraout_RAX;
  }
  if (9007199254740992.0 <= (double)((uint)x & 0x7fffffffffffffff)) {
    return;
  }
  math_modf((double)x,__iptr);
  return;
}



double math_pow(double __x,double __y)

{
  char extraout_AL;
  char cVar1;
  char extraout_AL_00;
  int *extraout_RAX;
  int *extraout_RAX_00;
  int *__exponent;
  int extraout_RAX_01;
  int xe;
  int iVar2;
  int iVar3;
  uint uVar4;
  int64 i;
  int ae;
  int unaff_R14;
  double dVar5;
  float64 yi;
  float64 a1;
  double dVar6;
  float64 x1;
  undefined8 in_XMM0_Qb;
  undefined auVar7 [16];
  float64 yf;
  undefined auVar8 [16];
  undefined4 uVar9;
  undefined4 uVar10;
  double dStack0000000000000008;
  uint local_28;
  
  auVar7._8_8_ = in_XMM0_Qb;
  auVar7._0_8_ = __x;
  while (dStack0000000000000008 = auVar7._0_8_,
        &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    auVar7._8_8_ = 0;
    auVar7._0_8_ = dStack0000000000000008;
  }
