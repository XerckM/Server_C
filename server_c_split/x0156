  int j;
  int unaff_R14;
  int iStack0000000000000018;
  int iStack0000000000000020;
  
  iStack0000000000000018 = pivot;
  iStack0000000000000020 = newpivot;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  (**(code **)b)(iStack0000000000000018,CONCAT71(in_register_00000031,alreadyPartitioned));
  iVar5 = iStack0000000000000020 + -1;
  iVar4 = iStack0000000000000018;
  iVar3 = iStack0000000000000018;
  do {
    iVar3 = iVar3 + 1;
    if (iVar5 < iVar3) {
      cVar1 = '\0';
    }
    else {
      cVar1 = (**(code **)a)(iVar3,iVar4);
      iVar4 = iStack0000000000000018;
    }
  } while (cVar1 != '\0');
  while( true ) {
    if (iVar5 < iVar3) {
      bVar2 = 0;
    }
    else {
      bVar2 = (**(code **)a)(iVar5,iVar4);
      bVar2 = bVar2 ^ 1;
      iVar4 = iStack0000000000000018;
    }
    if (bVar2 == 0) break;
    iVar5 = iVar5 + -1;
  }
  if (iVar5 < iVar3) {
    (**(code **)b)(iVar5);
    return;
  }
  (**(code **)b)(iVar3,iVar5);
  while( true ) {
    iVar5 = iVar5 + -1;
    do {
      iVar3 = iVar3 + 1;
      if (iVar5 < iVar3) {
        cVar1 = '\0';
      }
      else {
        cVar1 = (**(code **)a)(iVar3,iStack0000000000000018);
      }
    } while (cVar1 != '\0');
    while( true ) {
      if (iVar5 < iVar3) {
        bVar2 = 0;
      }
      else {
        bVar2 = (**(code **)a)(iVar5,iStack0000000000000018);
        bVar2 = bVar2 ^ 1;
      }
      if (bVar2 == 0) break;
      iVar5 = iVar5 + -1;
    }
    if (iVar5 < iVar3) break;
    (**(code **)b)(iVar3,iVar5);
  }
  (**(code **)b)(iVar5,iStack0000000000000018);
  return;
}



void sort_partitionEqual_func(sort_lessSwap data,int a,int b,int pivot,int newpivot)

{
  byte bVar1;
  char cVar2;
  int iVar3;
  int iVar4;
  int i;
  undefined8 in_RSI;
  int iVar5;
  int j;
  int unaff_R14;
  int iStack0000000000000018;
  int iStack0000000000000020;
  
  iStack0000000000000018 = pivot;
  iStack0000000000000020 = newpivot;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  (**(code **)b)(iStack0000000000000018,in_RSI);
  iVar4 = iStack0000000000000018;
  iVar5 = iStack0000000000000020;
  while( true ) {
    iVar5 = iVar5 + -1;
    iVar3 = iStack0000000000000018;
    do {
      iVar4 = iVar4 + 1;
      if (iVar5 < iVar4) {
        bVar1 = 0;
      }
      else {
        bVar1 = (**(code **)a)(iVar3,iVar4);
        bVar1 = bVar1 ^ 1;
        iVar3 = iStack0000000000000018;
      }
    } while (bVar1 != 0);
    while( true ) {
      if (iVar5 < iVar4) {
        cVar2 = '\0';
      }
      else {
        cVar2 = (**(code **)a)(iVar3,iVar5);
        iVar3 = iStack0000000000000018;
      }
      if (cVar2 == '\0') break;
      iVar5 = iVar5 + -1;
    }
    if (iVar5 < iVar4) break;
    (**(code **)b)(iVar4,iVar5);
  }
  return;
}



void sort_partialInsertionSort_func(sort_lessSwap data,int a,int b,bool ~r0)

{
  byte bVar1;
  char cVar2;
  int iVar3;
  undefined7 in_register_00000009;
  int iVar4;
  int j_2;
  int iVar5;
  int i;
  int iVar6;
  int in_RDI;
  int unaff_R14;
  int iStack0000000000000018;
  int iStack0000000000000020;
  int j_1;
  int j;
  
  iStack0000000000000018 = CONCAT71(in_register_00000009,~r0);
  iStack0000000000000020 = in_RDI;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar6 = iStack0000000000000018 + 1;
  iVar5 = 0;
  do {
    iVar3 = iStack0000000000000018;
    iVar4 = iStack0000000000000020;
    if (4 < iVar5) {
      return;
    }
    while( true ) {
      if (iVar6 < iVar4) {
        bVar1 = (**(code **)a)(iVar6,iVar6 + -1);
        bVar1 = bVar1 ^ 1;
        iVar3 = iStack0000000000000018;
        iVar4 = iStack0000000000000020;
      }
      else {
        bVar1 = 0;
      }
      if (bVar1 == 0) break;
      iVar6 = iVar6 + 1;
    }
    if (iVar4 == iVar6) {
      return;
    }
    if (iVar4 - iVar3 < 0x32) {
      return;
    }
    iVar3 = iVar6 + -1;
    (**(code **)b)(iVar6,iVar3);
    if (1 < iVar6 - iStack0000000000000018) {
      while (0 < iVar3) {
        cVar2 = (**(code **)a)();
        if (cVar2 == '\0') break;
        (**(code **)b)(iVar3,iVar3 + -1);
        iVar3 = iVar3 + -1;
      }
    }
    iVar3 = iVar6;
    if (1 < iStack0000000000000020 - iVar6) {
      while ((iVar4 = iVar3 + 1, iVar4 < iStack0000000000000020 &&
             (cVar2 = (**(code **)a)(iVar4,iVar3,iVar4,iVar6), cVar2 != '\0'))) {
        (**(code **)b)(iVar4,iVar3);
        iVar3 = iVar4;
      }
    }
    iVar5 = iVar5 + 1;
  } while( true );
}



void sort_breakPatterns_func(sort_lessSwap data,int a,int b)

{
  int in_RCX;
  uint uVar1;
  int other;
  int in_RDI;
  uint uVar2;
  int length;
  int idx;
  int iVar3;
  int iVar4;
  uint shift;
  uint modulus;
  int unaff_R14;
  int iStack0000000000000018;
  uint local_30;
  
  iStack0000000000000018 = in_RCX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar2 = in_RDI - iStack0000000000000018;
  if (7 < (int)uVar2) {
    iVar4 = 0x3f;
    if (uVar2 != 0) {
      for (; uVar2 >> iVar4 == 0; iVar4 = iVar4 + -1) {
      }
    }
    if (uVar2 == 0) {
      iVar4 = -1;
    }
    iVar3 = iStack0000000000000018 + ((int)uVar2 >> 2) * 2 + -1;
    local_30 = uVar2;
    while (iVar3 <= iStack0000000000000018 + ((int)uVar2 >> 2) * 2 + 1) {
      local_30 = local_30 << 0xd ^ local_30;
      local_30 = local_30 >> 0x11 ^ local_30;
      local_30 = local_30 << 5 ^ local_30;
      uVar1 = (1 << ((byte)(iVar4 + 1U) & 0x3f) & -(uint)(iVar4 + 1U < 0x40)) - 1 & local_30;
      if ((int)uVar2 <= (int)uVar1) {
        uVar1 = uVar1 - uVar2;
      }
      (**(code **)b)(iVar3,uVar1 + iStack0000000000000018);
      iVar3 = iVar3 + 1;
    }
  }
  return;
}



// WARNING: Removing unreachable block (ram,0x004a0c27)
// WARNING: Removing unreachable block (ram,0x004a0c38)
// WARNING: Removing unreachable block (ram,0x004a0c2d)

void sort_choosePivot_func(sort_lessSwap data,int a,int b,int pivot,sort_sortedHint hint)

{
  int iVar1;
  int *extraout_RAX;
  int *extraout_RAX_00;
  int *extraout_RAX_01;
  int iVar2;
  int l;
  int i;
  int *swaps;
  int iVar3;
  int j;
  int *swaps_00;
  int k;
  int *swaps_01;
  int unaff_R14;
  sort_lessSwap in_stack_ffffffffffffff78;
  
  while (&stack0xfffffffffffffff8 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar2 = hint - pivot;
  iVar3 = (int)(((uint)(iVar2 >> 0x3f) >> 0x3e) + iVar2) >> 2;
  iVar1 = iVar3 * 3;
  swaps = (int *)(iVar3 + pivot);
  swaps_00 = (int *)(pivot + iVar3 * 2);
  swaps_01 = (int *)(pivot + iVar1);
  if (7 < iVar2) {
    if (0x31 < iVar2) {
      sort_median_func(in_stack_ffffffffffffff78,a,b,iVar3 + pivot + -1,swaps,iVar3 + pivot + 1);
      sort_median_func(in_stack_ffffffffffffff78,a,b,pivot + iVar3 * 2 + -1,swaps_00,
                       pivot + iVar3 * 2 + 1);
      sort_median_func(in_stack_ffffffffffffff78,a,b,iVar1 + pivot + -1,swaps_01,iVar1 + pivot + 1);
      swaps = extraout_RAX;
      swaps_00 = extraout_RAX_00;
      swaps_01 = extraout_RAX_01;
    }
    sort_median_func(in_stack_ffffffffffffff78,a,b,(int)swaps,swaps_00,(int)swaps_01);
  }
  return;
}



void sort_median_func(sort_lessSwap data,int a,int b,int c,int *swaps,int ~r0)

{
  char cVar1;
  int *piVar2;
  int *piVar3;
  int *in_R8;
  int unaff_R14;
  int *piStack0000000000000018;
  int *piStack0000000000000020;
  int *piStack0000000000000028;
  int *piStack0000000000000030;
  
  piStack0000000000000018 = (int *)c;
  piStack0000000000000028 = (int *)~r0;
  piStack0000000000000020 = swaps;
  piStack0000000000000030 = in_R8;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  cVar1 = (**(code **)a)(piStack0000000000000020,piStack0000000000000018);
  piVar2 = piStack0000000000000020;
  piVar3 = piStack0000000000000018;
  if (cVar1 != '\0') {
    *piStack0000000000000030 = *piStack0000000000000030 + 1;
    piVar2 = piStack0000000000000018;
    piVar3 = piStack0000000000000020;
  }
  cVar1 = (**(code **)a)(piStack0000000000000028,piVar2);
  if (cVar1 != '\0') {
    *piStack0000000000000030 = *piStack0000000000000030 + 1;
    piVar2 = piStack0000000000000028;
  }
  cVar1 = (**(code **)a)(piVar2,piVar3);
  if (cVar1 != '\0') {
    *piStack0000000000000030 = *piStack0000000000000030 + 1;
  }
  return;
}



// Local variable i:int[RCX:8] conflicts with parameter, skipped.

void sort_reverseRange_func(sort_lessSwap data,int a,int b)

{
  int in_RCX;
  int j;
  int in_RDI;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  for (; in_RDI = in_RDI + -1, in_RCX < in_RDI; in_RCX = in_RCX + 1) {
    (**(code **)b)(in_RCX,in_RDI);
  }
  return;
}



void sort_insertionSort(sort_Interface data,int a,int b)

{
  char cVar1;
  int in_RCX;
  int i;
  int j;
  int iVar2;
  int in_RDI;
  int unaff_R14;
  int iStack0000000000000018;
  int iStack0000000000000020;
  
  while (j = in_RCX, iStack0000000000000018 = in_RCX, iStack0000000000000020 = in_RDI,
        &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RCX = iStack0000000000000018;
    in_RDI = iStack0000000000000020;
  }
  while (j = j + 1, iVar2 = j, j < in_RDI) {
    while( true ) {
      if (in_RCX < iVar2) {
        cVar1 = (**(code **)(a + 0x20))(b,iVar2,iVar2 + -1);
        in_RCX = iStack0000000000000018;
        in_RDI = iStack0000000000000020;
      }
      else {
        cVar1 = '\0';
      }
      if (cVar1 == '\0') break;
      (**(code **)(a + 0x28))(b,iVar2);
      in_RCX = iStack0000000000000018;
      iVar2 = iVar2 + -1;
      in_RDI = iStack0000000000000020;
    }
  }
  return;
}



// Local variable root:int[RCX:8] conflicts with parameter, skipped.

void sort_siftDown(sort_Interface data,int lo,int hi,int first)

{
  int iVar1;
  int iVar2;
  char cVar3;
  int iVar4;
  int in_RSI;
  int in_RDI;
  int unaff_R14;
  int iStack0000000000000020;
  int iStack0000000000000028;
  int child;
  
  iStack0000000000000028 = in_RSI;
  iStack0000000000000020 = in_RDI;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  while( true ) {
    iVar4 = first * 2 + 1;
    if (iStack0000000000000020 <= iVar4) {
      return;
    }
    iVar1 = first * 2 + 2;
    if ((iVar1 < iStack0000000000000020) &&
       (cVar3 = (**(code **)(lo + 0x20))
                          (hi,iStack0000000000000028 + first * 2 + 1,
                           iStack0000000000000028 + first * 2 + 2), cVar3 != '\0')) {
      iVar4 = iVar1;
    }
    iVar1 = first + iStack0000000000000028;
    iVar2 = iVar4 + iStack0000000000000028;
    cVar3 = (**(code **)(lo + 0x20))(hi,iVar1);
    if (cVar3 == '\0') break;
    (**(code **)(lo + 0x28))(hi,iVar1,iVar2);
    first = iVar4;
  }
  return;
}



// Local variable first:int[RCX:8] conflicts with parameter, skipped.

void sort_heapSort(sort_Interface data,int a,int b)

{
  int in_RCX;
  int first;
  int i;
  int in_RDI;
  int hi;
  int iVar1;
  int unaff_R14;
  int iStack0000000000000018;
  sort_Interface in_stack_ffffffffffffffb0;
  int i_1;
  
  iStack0000000000000018 = in_RCX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar1 = (in_RDI - iStack0000000000000018) + -1;
  for (first = ((in_RDI - iStack0000000000000018) - (iVar1 >> 0x3f)) + -1 >> 1; -1 < first;
      first = first + -1) {
    sort_siftDown(in_stack_ffffffffffffffb0,a,b,first);
  }
  for (; -1 < iVar1; iVar1 = iVar1 + -1) {
    (**(code **)(a + 0x28))(b,iStack0000000000000018,iVar1 + iStack0000000000000018);
    sort_siftDown(in_stack_ffffffffffffffb0,a,b,0);
  }
  return;
}



void sort_pdqsort(sort_Interface data,int a,int b,int limit)

{
  bool bVar1;
  char extraout_AL;
  int extraout_RAX;
  int pivot;
  byte bVar2;
  int extraout_RAX_00;
  int mid_1;
  int extraout_RAX_01;
  int mid;
  int iVar3;
  int leftLen;
  char extraout_BL;
  bool alreadyPartitioned;
  int iVar4;
  int rightLen;
  int extraout_RBX;
  sort_sortedHint hint;
  int in_RSI;
  int in_RDI;
  char cVar5;
  int iVar6;
  int length;
  int balanceThreshold;
  int unaff_R14;
  sort_Interface in_stack_ffffffffffffff70;
  bool wasPartitioned;
  bool wasBalanced;
  int local_10;
  
  while (&local_10 <= *(int **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  bVar1 = true;
  cVar5 = '\x01';
  while( true ) {
    iVar6 = in_RDI - limit;
    if (iVar6 < 0xd) {
      sort_insertionSort(in_stack_ffffffffffffff70,a,b);
      return;
    }
    if (in_RSI == 0) break;
    local_10 = limit;
    if (!bVar1) {
      sort_breakPatterns(in_stack_ffffffffffffff70,a,b);
      in_RSI = in_RSI + -1;
    }
    sort_choosePivot(in_stack_ffffffffffffff70,a,b,local_10,in_RDI);
    iVar4 = extraout_RAX;
    iVar3 = extraout_RBX;
    if (extraout_RBX == 2) {
      sort_reverseRange(in_stack_ffffffffffffff70,a,b);
      iVar4 = (in_RDI - (extraout_RAX - local_10)) + -1;
      iVar3 = 1;
    }
    if ((((bVar1) && (cVar5 != '\0')) && (iVar3 == 1)) &&
       (sort_partialInsertionSort(in_stack_ffffffffffffff70,a,b,SUB81(local_10,0)),
       extraout_AL != '\0')) {
      return;
    }
    if (local_10 < 1) {
      bVar2 = 0;
    }
    else {
      bVar2 = (**(code **)(a + 0x20))(b,local_10 + -1,iVar4,iVar4,*(code **)(a + 0x20),cVar5);
      bVar2 = bVar2 ^ 1;
    }
    if (bVar2 == 0) {
      sort_partition(in_stack_ffffffffffffff70,a,b,local_10,in_RDI,SUB81(iVar4,0));
      iVar3 = extraout_RAX_01 - local_10;
      iVar4 = in_RDI - extraout_RAX_01;
      if (iVar3 < iVar4) {
        sort_pdqsort(in_stack_ffffffffffffff70,a,b,local_10);
        limit = extraout_RAX_01 + 1;
        iVar4 = iVar3;
      }
      else {
        sort_pdqsort(in_stack_ffffffffffffff70,a,b,extraout_RAX_01 + 1);
        in_RDI = extraout_RAX_01;
        limit = local_10;
      }
      bVar1 = iVar6 >> 3 <= iVar4;
      cVar5 = extraout_BL;
    }
    else {
      sort_partitionEqual(in_stack_ffffffffffffff70,a,b,local_10,in_RDI);
      limit = extraout_RAX_00;
    }
  }
  sort_heapSort(in_stack_ffffffffffffff70,a,b);
  return;
}



void sort_partition(sort_Interface data,int a,int b,int pivot,int newpivot,bool alreadyPartitioned)

{
  char cVar1;
  byte bVar2;
  int iVar3;
  int iVar4;
  int i;
  undefined7 in_register_00000031;
  int iVar5;
  int j;
  int unaff_R14;
  int iStack0000000000000018;
  int iStack0000000000000020;
  
  iStack0000000000000018 = pivot;
  iStack0000000000000020 = newpivot;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  (**(code **)(a + 0x28))
            (b,iStack0000000000000018,CONCAT71(in_register_00000031,alreadyPartitioned));
  iVar5 = iStack0000000000000020 + -1;
  iVar3 = iStack0000000000000018;
  iVar4 = iStack0000000000000018;
  do {
    iVar4 = iVar4 + 1;
    if (iVar5 < iVar4) {
      cVar1 = '\0';
    }
    else {
      cVar1 = (**(code **)(a + 0x20))(b,iVar4,iVar3);
      iVar3 = iStack0000000000000018;
    }
  } while (cVar1 != '\0');
  while( true ) {
    if (iVar5 < iVar4) {
      bVar2 = 0;
    }
    else {
      bVar2 = (**(code **)(a + 0x20))(b,iVar5,iVar3);
      bVar2 = bVar2 ^ 1;
      iVar3 = iStack0000000000000018;
    }
    if (bVar2 == 0) break;
    iVar5 = iVar5 + -1;
  }
  if (iVar5 < iVar4) {
    (**(code **)(a + 0x28))(b,iVar5);
    return;
  }
  (**(code **)(a + 0x28))(b,iVar4,iVar5);
  while( true ) {
    iVar5 = iVar5 + -1;
    do {
      iVar4 = iVar4 + 1;
      if (iVar5 < iVar4) {
        cVar1 = '\0';
      }
      else {
        cVar1 = (**(code **)(a + 0x20))(b,iVar4,iStack0000000000000018);
      }
    } while (cVar1 != '\0');
    while( true ) {
      if (iVar5 < iVar4) {
        bVar2 = 0;
      }
      else {
        bVar2 = (**(code **)(a + 0x20))(b,iVar5,iStack0000000000000018);
        bVar2 = bVar2 ^ 1;
      }
      if (bVar2 == 0) break;
      iVar5 = iVar5 + -1;
    }
    if (iVar5 < iVar4) break;
    (**(code **)(a + 0x28))(b,iVar4,iVar5);
  }
  (**(code **)(a + 0x28))(b,iVar5,iStack0000000000000018);
  return;
}



void sort_partitionEqual(sort_Interface data,int a,int b,int pivot,int newpivot)

{
  byte bVar1;
  char cVar2;
  int iVar3;
  int i;
  int iVar4;
  undefined8 in_RSI;
  int iVar5;
  int j;
  int unaff_R14;
  int iStack0000000000000018;
  int iStack0000000000000020;
  
  iStack0000000000000018 = pivot;
  iStack0000000000000020 = newpivot;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  (**(code **)(a + 0x28))(b,iStack0000000000000018,in_RSI);
  iVar3 = iStack0000000000000018;
  iVar5 = iStack0000000000000020;
  while( true ) {
    iVar5 = iVar5 + -1;
    iVar4 = iStack0000000000000018;
    do {
      iVar3 = iVar3 + 1;
      if (iVar5 < iVar3) {
        bVar1 = 0;
      }
      else {
        bVar1 = (**(code **)(a + 0x20))(b,iVar4,iVar3);
        bVar1 = bVar1 ^ 1;
        iVar4 = iStack0000000000000018;
      }
    } while (bVar1 != 0);
    while( true ) {
      if (iVar5 < iVar3) {
        cVar2 = '\0';
      }
      else {
        cVar2 = (**(code **)(a + 0x20))(b,iVar4,iVar5);
        iVar4 = iStack0000000000000018;
      }
      if (cVar2 == '\0') break;
      iVar5 = iVar5 + -1;
    }
    if (iVar5 < iVar3) break;
    (**(code **)(a + 0x28))(b,iVar3,iVar5);
  }
  return;
}



void sort_partialInsertionSort(sort_Interface data,int a,int b,bool ~r0)

{
  byte bVar1;
  char cVar2;
  int iVar3;
  undefined7 in_register_00000009;
  int i;
  int iVar4;
  int j_2;
  int iVar5;
  int in_RDI;
  int iVar6;
  int unaff_R14;
  int iStack0000000000000018;
  int iStack0000000000000020;
  int j_1;
  int j;
  
  iStack0000000000000018 = CONCAT71(in_register_00000009,~r0);
  iStack0000000000000020 = in_RDI;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar5 = iStack0000000000000018 + 1;
  iVar6 = 0;
  do {
    iVar3 = iStack0000000000000018;
    iVar4 = iStack0000000000000020;
    if (4 < iVar6) {
      return;
    }
    while( true ) {
      if (iVar5 < iVar4) {
        bVar1 = (**(code **)(a + 0x20))(b,iVar5,iVar5 + -1);
        bVar1 = bVar1 ^ 1;
        iVar3 = iStack0000000000000018;
        iVar4 = iStack0000000000000020;
      }
      else {
        bVar1 = 0;
      }
      if (bVar1 == 0) break;
      iVar5 = iVar5 + 1;
    }
    if (iVar4 == iVar5) {
      return;
    }
    if (iVar4 - iVar3 < 0x32) {
      return;
    }
    iVar3 = iVar5 + -1;
    (**(code **)(a + 0x28))(b,iVar5);
    if (1 < iVar5 - iStack0000000000000018) {
      while (0 < iVar3) {
        cVar2 = (**(code **)(a + 0x20))(b,iVar3);
        if (cVar2 == '\0') break;
        (**(code **)(a + 0x28))(b,iVar3,iVar3 + -1);
        iVar3 = iVar3 + -1;
      }
    }
    iVar3 = iVar5;
    if (1 < iStack0000000000000020 - iVar5) {
      while ((iVar4 = iVar3 + 1, iVar4 < iStack0000000000000020 &&
             (cVar2 = (**(code **)(a + 0x20))(b,iVar4), cVar2 != '\0'))) {
        (**(code **)(a + 0x28))(b,iVar4,iVar3);
        iVar3 = iVar4;
      }
    }
    iVar6 = iVar6 + 1;
  } while( true );
}



void sort_breakPatterns(sort_Interface data,int a,int b)

{
  int in_RCX;
  int idx;
  int iVar1;
  int in_RDI;
  uint uVar2;
  int length;
  uint uVar3;
  int other;
  int iVar4;
  uint shift;
  uint modulus;
  int unaff_R14;
  int iStack0000000000000018;
  uint local_28;
  
  iStack0000000000000018 = in_RCX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar2 = in_RDI - iStack0000000000000018;
  if (7 < (int)uVar2) {
    iVar4 = 0x3f;
    if (uVar2 != 0) {
      for (; uVar2 >> iVar4 == 0; iVar4 = iVar4 + -1) {
      }
    }
    if (uVar2 == 0) {
      iVar4 = -1;
    }
    iVar1 = iStack0000000000000018 + ((int)uVar2 >> 2) * 2 + -1;
    local_28 = uVar2;
    while (iVar1 <= iStack0000000000000018 + ((int)uVar2 >> 2) * 2 + 1) {
      local_28 = local_28 << 0xd ^ local_28;
      local_28 = local_28 >> 0x11 ^ local_28;
      local_28 = local_28 << 5 ^ local_28;
      uVar3 = (1 << ((byte)(iVar4 + 1U) & 0x3f) & -(uint)(iVar4 + 1U < 0x40)) - 1 & local_28;
      if ((int)uVar2 <= (int)uVar3) {
        uVar3 = uVar3 - uVar2;
      }
      (**(code **)(a + 0x28))(b,iVar1,uVar3 + iStack0000000000000018);
      iVar1 = iVar1 + 1;
    }
  }
  return;
}



// WARNING: Removing unreachable block (ram,0x004a1e14)
// WARNING: Removing unreachable block (ram,0x004a1e25)
// WARNING: Removing unreachable block (ram,0x004a1e1a)

void sort_choosePivot(sort_Interface data,int a,int b,int pivot,sort_sortedHint hint)

{
  int iVar1;
  int *extraout_RAX;
  int *extraout_RAX_00;
  int *extraout_RAX_01;
  int iVar2;
  int l;
  int i;
  int *swaps;
  int iVar3;
  int j;
  int *swaps_00;
  int k;
  int *swaps_01;
  int unaff_R14;
  sort_Interface in_stack_ffffffffffffff88;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar2 = hint - pivot;
  iVar3 = (int)(((uint)(iVar2 >> 0x3f) >> 0x3e) + iVar2) >> 2;
  iVar1 = iVar3 * 3;
  swaps = (int *)(iVar3 + pivot);
  swaps_00 = (int *)(pivot + iVar3 * 2);
  swaps_01 = (int *)(pivot + iVar1);
  if (7 < iVar2) {
    if (0x31 < iVar2) {
      sort_median(in_stack_ffffffffffffff88,a,b,iVar3 + pivot + -1,swaps,iVar3 + pivot + 1);
      sort_median(in_stack_ffffffffffffff88,a,b,pivot + iVar3 * 2 + -1,swaps_00,
                  pivot + iVar3 * 2 + 1);
      sort_median(in_stack_ffffffffffffff88,a,b,iVar1 + pivot + -1,swaps_01,iVar1 + pivot + 1);
      swaps = extraout_RAX;
      swaps_00 = extraout_RAX_00;
      swaps_01 = extraout_RAX_01;
    }
    sort_median(in_stack_ffffffffffffff88,a,b,(int)swaps,swaps_00,(int)swaps_01);
  }
  return;
}



void sort_median(sort_Interface data,int a,int b,int c,int *swaps,int ~r0)

{
  char cVar1;
  int *piVar2;
  int *piVar3;
  int *in_R8;
  int unaff_R14;
  int *piStack0000000000000018;
  int *piStack0000000000000020;
  int *piStack0000000000000028;
  int *piStack0000000000000030;
  
  piStack0000000000000018 = (int *)c;
  piStack0000000000000028 = (int *)~r0;
  piStack0000000000000020 = swaps;
  piStack0000000000000030 = in_R8;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  cVar1 = (**(code **)(a + 0x20))(b,piStack0000000000000020);
  piVar2 = piStack0000000000000020;
  piVar3 = piStack0000000000000018;
  if (cVar1 != '\0') {
    *piStack0000000000000030 = *piStack0000000000000030 + 1;
    piVar2 = piStack0000000000000018;
    piVar3 = piStack0000000000000020;
  }
  cVar1 = (**(code **)(a + 0x20))(b,piStack0000000000000028,piVar2);
  if (cVar1 != '\0') {
    *piStack0000000000000030 = *piStack0000000000000030 + 1;
    piVar2 = piStack0000000000000028;
  }
  cVar1 = (**(code **)(a + 0x20))(b,piVar2,piVar3);
  if (cVar1 != '\0') {
    *piStack0000000000000030 = *piStack0000000000000030 + 1;
  }
  return;
}



// Local variable i:int[RCX:8] conflicts with parameter, skipped.

void sort_reverseRange(sort_Interface data,int a,int b)

{
  int in_RCX;
  int j;
  int in_RDI;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  for (; in_RDI = in_RDI + -1, in_RCX < in_RDI; in_RCX = in_RCX + 1) {
    (**(code **)(a + 0x28))(b,in_RCX,in_RDI);
  }
  return;
}



void sort_stable(sort_Interface data,int n)

{
  int in_RCX;
  int blockSize;
  int iVar1;
  int iVar2;
  int iVar3;
  int iVar4;
  int m;
  int in_RBX;
  int b_00;
  int unaff_R14;
  int iStack0000000000000018;
  sort_Interface in_stack_ffffffffffffffb8;
  int b;
  
  iStack0000000000000018 = in_RCX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  for (iVar3 = 0x14; iVar3 <= iStack0000000000000018; iVar3 = iVar3 + 0x14) {
    sort_insertionSort(in_stack_ffffffffffffffb8,n,in_RBX);
  }
  sort_insertionSort(in_stack_ffffffffffffffb8,n,in_RBX);
  blockSize = 0x14;
  iVar3 = iStack0000000000000018;
  while (blockSize < iVar3) {
    iVar1 = blockSize << 1;
    iVar4 = iVar1;
    b_00 = 0;
    while (iVar2 = iVar4, iVar2 <= iVar3) {
      sort_symMerge(in_stack_ffffffffffffffb8,n,in_RBX,b_00);
      iVar3 = iStack0000000000000018;
      b_00 = iVar2;
      iVar4 = iVar2 + blockSize * 2;
    }
    iVar4 = blockSize + b_00;
    blockSize = iVar1;
    if (iVar4 < iVar3) {
