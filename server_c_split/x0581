        *extraout_R11_01 = in_RBX;
        ppcVar3 = extraout_RAX_04;
      }
      *ppcVar3 = in_RBX;
      ppcVar3[3] = (char *)0x2;
      ppcVar3[2] = &DAT_008ae22e;
      return;
    }
  }
  if ((p->options).checkJoiners == false) {
    return;
  }
  t = (p->options).trie;
  vendor_golang_org_x_net_idna___idnaTrie__lookupString
            (t,in_stack_ffffffffffffffb8,(uint16)in_RBX,(int)in_RCX);
  if ((extraout_AX & 0x1003) != 0x1000) {
    strings_Index(in_stack_ffffffffffffffb8,in_stack_ffffffffffffffc8,(int)in_RBX);
    if ((extraout_RAX_07 == -1) &&
       (strings_Index(in_stack_ffffffffffffffb8,in_stack_ffffffffffffffc8,(int)in_RBX),
       extraout_RAX_08 == -1)) {
      return;
    }
    uVar2 = (uint)extraout_AX;
    vVar5 = 0;
    i = 0;
    puVar4 = ~r0;
    while( true ) {
      if ((uVar2 & 3) == 0) {
        jt = (ushort)uVar2 >> 8 & 7;
      }
      else {
        jt = 0;
      }
      pcVar1 = puVar4 + i;
      if (in_RCX < pcVar1) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceAlen();
      }
      if (pcVar1 < (uint)i) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      ~r0_00 = (void *)(-(int)puVar4 >> 0x3f & i);
      if (puVar4 == &DAT_00000003) {
        if ((*(short *)(in_RBX + (int)~r0_00) == -0x7f1e) && ((in_RBX + 2)[(int)~r0_00] == -0x73)) {
          jt = 5;
        }
        else if ((*(short *)(in_RBX + (int)~r0_00) == -0x7f1e) &&
                ((in_RBX + 2)[(int)~r0_00] == -0x74)) {
          jt = 6;
        }
      }
      if ((uint)vendor_golang_org_x_net_idna_joinStates.len <= (uint)(int)vVar5) break;
      if (7 < jt) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      vVar5 = vendor_golang_org_x_net_idna_joinStates.array[vVar5][jt];
      if (((ushort)uVar2 & 0x1803) == 0x1800) {
        if ((uint)vendor_golang_org_x_net_idna_joinStates.len <= (uint)(int)vVar5) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        vVar5 = vendor_golang_org_x_net_idna_joinStates.array[vVar5][7];
      }
      if (in_RCX == pcVar1) {
        if ((vVar5 != 5) && (vVar5 != 4)) {
          return;
        }
        runtime_newobject((internal_abi_Type *)&DAT_00867820,~r0_00);
        extraout_RAX_10[1] = in_RCX;
        ppcVar3 = extraout_RAX_10;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier1();
          *extraout_R11_03 = in_RBX;
          ppcVar3 = extraout_RAX_11;
        }
        *ppcVar3 = in_RBX;
        ppcVar3[3] = &DAT_00000001;
        ppcVar3[2] = "C";
        return;
      }
      vendor_golang_org_x_net_idna___idnaTrie__lookupString
                (t,in_stack_ffffffffffffffb8,
                 (uint16)in_RBX + ((ushort)(-((int)in_RCX - (int)pcVar1) >> 0x3f) & (ushort)pcVar1),
                 (int)in_RCX - (int)pcVar1);
      uVar2 = extraout_RAX_09;
      i = (int)pcVar1;
      puVar4 = extraout_RBX;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  runtime_newobject((internal_abi_Type *)&DAT_00867820,~r0);
  extraout_RAX_05[1] = in_RCX;
  ppcVar3 = extraout_RAX_05;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11_02 = in_RBX;
    ppcVar3 = extraout_RAX_06;
  }
  *ppcVar3 = in_RBX;
  ppcVar3[3] = (char *)0x2;
  ppcVar3[2] = &DAT_008ae230;
  return;
}



void vendor_golang_org_x_net_idna_decode(string encoded,string ~r0,error ~r1)

{
  char cVar1;
  runtime_slice ~r0_00;
  __int32 a;
  runtime_slice ~r0_01;
  string substr;
  string ~r0_02;
  bool bVar2;
  bool ok;
  dword dVar4;
  int32 k_1;
  sdword sVar3;
  int32 extraout_EAX;
  int in_RAX;
  void *extraout_RAX;
  void *extraout_RAX_00;
  int *extraout_RAX_01;
  int *extraout_RAX_02;
  void *extraout_RAX_03;
  int iVar5;
  int64 p;
  int *extraout_RAX_04;
  int *extraout_RAX_05;
  int *extraout_RAX_06;
  int *extraout_RAX_07;
  int *extraout_RAX_08;
  int *extraout_RAX_09;
  int *extraout_RAX_10;
  int *extraout_RAX_11;
  int *extraout_RAX_12;
  int *extraout_RAX_13;
  int *extraout_RAX_14;
  int *extraout_RAX_15;
  int *piVar6;
  void *extraout_RAX_16;
  void *pvVar7;
  void *extraout_RCX;
  void *extraout_RCX_00;
  int pos;
  void *~r0_03;
  uint uVar8;
  int32 i;
  void *in_RBX;
  void *~r0_04;
  void *extraout_RBX;
  int extraout_RBX_00;
  void *extraout_RBX_01;
  int32 n;
  void *~r0_05;
  int32 r;
  void *__src;
  void *pvVar9;
  int *extraout_R11;
  int *extraout_R11_00;
  int *extraout_R11_01;
  int *extraout_R11_02;
  int *extraout_R11_03;
  int *extraout_R11_04;
  int *extraout_R11_05;
  int32 w;
  int iVar10;
  sdword sVar11;
  int32 t;
  void *pvVar12;
  int64 p_1;
  int unaff_R14;
  sdword sVar13;
  int32 k;
  int32 digit;
  void *pvVar14;
  string in_stack_ffffffffffffff58;
  uint8 *in_stack_ffffffffffffff68;
  uint8 *in_stack_ffffffffffffff70;
  int in_stack_ffffffffffffff78;
  int32 bias;
  void *local_28;
  void *local_20;
  void *local_18;
  void *local_10;
  
  while (&local_28 <= *(void ***)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RBX == (void *)0x0) {
    return;
  }
  substr.len = (int)in_stack_ffffffffffffff70;
  substr.str = in_stack_ffffffffffffff68;
  strings_LastIndex(in_stack_ffffffffffffff58,substr,in_RAX);
  if (extraout_RAX == (void *)0x0) {
    runtime_newobject((internal_abi_Type *)&DAT_00867820,~r0_04);
    extraout_RAX_01[1] = (int)in_RBX;
    piVar6 = extraout_RAX_01;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11 = in_RAX;
      piVar6 = extraout_RAX_02;
    }
    *piVar6 = in_RAX;
    piVar6[3] = 2;
    piVar6[2] = (int)&DAT_008ae232;
    return;
  }
  if (in_RBX == (void *)((int)extraout_RAX + 1)) {
    return;
  }
  local_20 = extraout_RAX;
  runtime_makeslice((internal_abi_Type *)&DAT_008077e0,0,(int)in_RBX,~r0_05);
  pvVar7 = in_RBX;
  if (local_20 == (void *)0xffffffffffffffff) {
    ~r0_03 = (void *)0x0;
    local_10 = extraout_RAX_00;
  }
  else {
    if (in_RBX < local_20) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAlen();
    }
    iVar10 = 0;
    ~r0_03 = (void *)0x0;
    local_18 = extraout_RAX_00;
    pvVar9 = local_20;
    while (local_10 = local_18, iVar10 < (int)pvVar9) {
      r = (int32)*(byte *)(in_RAX + iVar10);
      if (*(byte *)(in_RAX + iVar10) < 0x80) {
        iVar10 = iVar10 + 1;
      }
      else {
        runtime_decoderune(in_stack_ffffffffffffff58,in_RAX,(int32)pvVar9,iVar10);
        pvVar9 = local_20;
        iVar10 = extraout_RBX_00;
        r = extraout_EAX;
      }
      ~r0_03 = (void *)((int)~r0_03 + 1);
      if (pvVar7 < ~r0_03) {
        ~r0_01.cap = (int)in_stack_ffffffffffffff68;
        ~r0_01.array = in_stack_ffffffffffffff58.str;
        ~r0_01.len = in_stack_ffffffffffffff58.len;
        runtime_growslice(local_18,(int)~r0_03,(int)pvVar7,1,(internal_abi_Type *)&DAT_008077e0,
                          ~r0_01);
        local_18 = extraout_RAX_16;
        pvVar9 = local_20;
        pvVar7 = extraout_RCX_00;
        ~r0_03 = extraout_RBX_01;
      }
      *(int32 *)((int)local_18 + (int)~r0_03 * 4 + -4) = r;
    }
  }
  pvVar12 = (void *)0x0;
  sVar3 = 0x48;
  n = 0x80;
  pvVar9 = (void *)((int)extraout_RAX + 1);
  while( true ) {
    if ((int)in_RBX <= (int)pvVar9) {
      a.cap = (int)in_stack_ffffffffffffff68;
      a.array = (int32 *)in_stack_ffffffffffffff58.str;
      a.len = in_stack_ffffffffffffff58.len;
      ~r0_02.len = in_stack_ffffffffffffff78;
      ~r0_02.str = in_stack_ffffffffffffff70;
      runtime_slicerunetostring((runtime_tmpBuf *)0x0,a,~r0_02);
      return;
    }
    iVar10 = 1;
    sVar13 = 0x24;
    pvVar14 = pvVar12;
    while( true ) {
      if (in_RBX == pvVar9) {
        runtime_newobject((internal_abi_Type *)&DAT_00867820,pvVar14);
        extraout_RAX_12[1] = (int)in_RBX;
        piVar6 = extraout_RAX_12;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier1();
          *extraout_R11_04 = in_RAX;
          piVar6 = extraout_RAX_13;
        }
        *piVar6 = in_RAX;
        piVar6[3] = 2;
        piVar6[2] = (int)&DAT_008ae232;
        return;
      }
      if (in_RBX <= pvVar9) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      cVar1 = *(char *)(in_RAX + (int)pvVar9);
      if ((byte)(cVar1 - 0x30U) < 10) {
        digit = (int32)(byte)(cVar1 - 0x16);
        bVar2 = true;
      }
      else if ((byte)(cVar1 + 0xbfU) < 0x1a) {
        digit = (int32)(byte)(cVar1 + 0xbfU);
        bVar2 = true;
      }
      else if ((byte)(cVar1 + 0x9fU) < 0x1a) {
        digit = (int32)(byte)(cVar1 + 0x9fU);
        bVar2 = true;
      }
      else {
        bVar2 = false;
        digit = 0;
      }
      if (!bVar2) {
        runtime_newobject((internal_abi_Type *)&DAT_00867820,pvVar14);
        extraout_RAX_10[1] = (int)in_RBX;
        piVar6 = extraout_RAX_10;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier1();
          *extraout_R11_03 = in_RAX;
          piVar6 = extraout_RAX_11;
        }
        *piVar6 = in_RAX;
        piVar6[3] = 2;
        piVar6[2] = (int)&DAT_008ae232;
        return;
      }
      iVar5 = (int)digit * (int)(sdword)iVar10;
      if (-((sdword)pvVar14 + -0x7fffffff) < iVar5) {
        runtime_newobject((internal_abi_Type *)&DAT_00867820,pvVar14);
        extraout_RAX_08[1] = (int)in_RBX;
        piVar6 = extraout_RAX_08;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier1();
          *extraout_R11_02 = in_RAX;
          piVar6 = extraout_RAX_09;
        }
        *piVar6 = in_RAX;
        piVar6[3] = 2;
        piVar6[2] = (int)&DAT_008ae232;
        return;
      }
      sVar11 = sVar13 - sVar3;
      dVar4 = (sdword)iVar5 + (sdword)pvVar14;
      if (sVar3 < sVar13) {
        pvVar14 = pvVar12;
        if ((sdword)(sVar3 + 0x1a) <= sVar13) {
          sVar11 = 0x1a;
        }
      }
      else {
        sVar11 = 1;
      }
      pvVar9 = (void *)((int)pvVar9 + 1);
      if (digit < sVar11) break;
      iVar10 = (int)(sdword)-(sVar11 + -0x24) * (int)(sdword)iVar10;
      if (0x7fffffff < iVar10) {
        runtime_newobject((internal_abi_Type *)&DAT_00867820,pvVar14);
        extraout_RAX_04[1] = (int)in_RBX;
        piVar6 = extraout_RAX_04;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier1();
          *extraout_R11_00 = in_RAX;
          piVar6 = extraout_RAX_05;
        }
        *piVar6 = in_RAX;
        piVar6[3] = 2;
        piVar6[2] = (int)&DAT_008ae232;
        return;
      }
      sVar13 = sVar13 + 0x24;
      pvVar14 = (void *)(uint)dVar4;
    }
    if (0x3ff < (int)~r0_03) {
      runtime_newobject((internal_abi_Type *)&DAT_00867820,pvVar14);
      extraout_RAX_06[1] = (int)in_RBX;
      piVar6 = extraout_RAX_06;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier1();
        *extraout_R11_01 = in_RAX;
        piVar6 = extraout_RAX_07;
      }
      *piVar6 = in_RAX;
      piVar6[3] = 2;
      piVar6[2] = (int)&DAT_008ae232;
      return;
    }
    sVar3 = dVar4 - (sdword)pvVar12;
    if ((sdword)pvVar12 == 0) {
      sVar3 = sVar3 / 700;
    }
    else {
      sVar3 = sVar3 / 2;
    }
    ~r0_03 = (void *)((int)~r0_03 + 1);
    sVar13 = (sdword)~r0_03;
    if (sVar13 == 0) break;
    if (sVar13 == -1) {
      sVar11 = -sVar3;
    }
    else {
      sVar11 = sVar3 / sVar13;
    }
    k_1 = 0;
    uVar8 = (uint)(dword)(sVar3 + sVar11);
    while (sVar3 = (sdword)uVar8, 0x1c7 < sVar3) {
      k_1 = k_1 + 0x24;
      uVar8 = (int)sVar3 / 0x23 + ((int)sVar3 >> 0x3f);
    }
    if (sVar3 == -0x26) {
                    // WARNING: Subroutine does not return
      runtime_panicdivide();
    }
    if (sVar13 == -1) {
      sVar11 = -dVar4;
      sVar13 = 0;
    }
    else {
      sVar11 = (sdword)dVar4 / sVar13;
      sVar13 = (sdword)dVar4 % sVar13;
    }
    n = n + sVar11;
    if ((sdword)(sVar3 + 0x26) == -1) {
      sVar3 = sVar3 * -0x24;
    }
    else {
      sVar3 = (sdword)(sVar3 * 0x24) / (sdword)(sVar3 + 0x26);
    }
    sVar3 = k_1 + sVar3;
    if (0x10ffff < (dword)n) {
      runtime_newobject((internal_abi_Type *)&DAT_00867820,~r0_03);
      extraout_RAX_14[1] = (int)in_RBX;
      piVar6 = extraout_RAX_14;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier1();
        *extraout_R11_05 = in_RAX;
        piVar6 = extraout_RAX_15;
      }
      *piVar6 = in_RAX;
      piVar6[3] = 2;
      piVar6[2] = (int)&DAT_008ae232;
      return;
    }
    local_28 = pvVar9;
    if (pvVar7 < ~r0_03) {
      ~r0_00.cap = (int)in_stack_ffffffffffffff68;
      ~r0_00.array = in_stack_ffffffffffffff58.str;
      ~r0_00.len = in_stack_ffffffffffffff58.len;
      runtime_growslice(local_10,(int)~r0_03,(int)pvVar7,1,(internal_abi_Type *)&DAT_008077e0,~r0_00
                       );
      local_10 = extraout_RAX_03;
      pvVar7 = extraout_RCX;
      ~r0_03 = extraout_RBX;
    }
    *(undefined4 *)((int)local_10 + (int)~r0_03 * 4 + -4) = 0;
    pvVar9 = (void *)(int)(sdword)(sVar13 + 1U);
    if (~r0_03 < pvVar9) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    pvVar12 = (void *)(int)sVar13;
    pvVar14 = (void *)(((int)pvVar9 << 2 & (int)pvVar9 - (int)pvVar7 >> 0x3f) + (int)local_10);
    if (~r0_03 < pvVar12) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    __src = (void *)(((int)pvVar12 << 2 & (int)pvVar12 - (int)pvVar7 >> 0x3f) + (int)local_10);
    iVar10 = (int)~r0_03 - (int)pvVar9;
    if ((int)~r0_03 - (int)pvVar12 < (int)~r0_03 - (int)pvVar9) {
      iVar10 = (int)~r0_03 - (int)pvVar12;
    }
    local_20 = pvVar12;
    if (__src != pvVar14) {
      runtime_memmove(pvVar14,__src,iVar10 << 2);
    }
    pvVar12 = (void *)(uint)(dword)(sVar13 + 1U);
    *(int32 *)((int)local_10 + (int)local_20 * 4) = n;
    pvVar9 = local_28;
  }
                    // WARNING: Subroutine does not return
  runtime_panicdivide();
}



void vendor_golang_org_x_net_idna_encode(string prefix,string s,string ~r0,error ~r1)

{
  runtime_slice ~r0_00;
  runtime_slice ~r0_01;
  runtime_slice ~r0_02;
  runtime_slice ~r0_03;
  int32 extraout_EAX;
  int32 extraout_EAX_00;
  int32 extraout_EAX_01;
  dword dVar1;
  int32 k_1;
  uint8 *in_RAX;
  uint8 *__dest;
  uint8 *extraout_RAX;
  uint8 *extraout_RAX_00;
  int *extraout_RAX_01;
  int *extraout_RAX_02;
  uint8 *extraout_RAX_03;
  int *extraout_RAX_04;
  int *extraout_RAX_05;
  int *piVar2;
  uint8 *extraout_RAX_06;
  int32 r_1;
  int in_RCX;
  uint extraout_RCX;
  uint extraout_RCX_00;
  uint extraout_RCX_01;
  uint extraout_RCX_02;
  int32 k;
  uint oldCap;
  uint uVar3;
  int32 r_00;
  sdword sVar4;
  uint in_RBX;
  int extraout_RBX;
  uint extraout_RBX_00;
  uint extraout_RBX_01;
  int extraout_RBX_02;
  int extraout_RBX_03;
  uint extraout_RBX_04;
  uint extraout_RBX_05;
  int32 h;
  sdword sVar5;
  sdword sVar6;
  void *in_RDI;
  uint8 uVar7;
  int32 r;
  int32 q;
  sdword sVar8;
  int *extraout_R11;
  int *extraout_R11_00;
  int32 bias;
  sdword sVar9;
  int32 t;
  sdword sVar11;
  int32 r_2;
  int iVar10;
  int unaff_R14;
  int64 p;
  interface___ in_stack_ffffffffffffff28;
  int in_stack_ffffffffffffff38;
  int32 remaining;
  sdword local_84;
  int32 delta;
  int32 b;
  int32 m;
  uint local_58;
  int local_50;
  uint local_48;
  uint local_40;
  int local_38;
  uint local_30;
  uint8 *local_28;
  uint8 *local_18;
  uint8 *local_10;
  
  while (&local_58 <= *(uint **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  local_58 = in_RBX + (int)in_RDI * 2 + 1;
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,in_RBX,local_58,in_RDI);
  local_18 = __dest;
  if (__dest != in_RAX) {
    local_10 = __dest;
    runtime_memmove(__dest,in_RAX,in_RBX);
    local_18 = local_10;
  }
  iVar10 = 0;
  h = 0;
  sVar6 = 0;
  oldCap = local_58;
  while (r_00 = (int32)in_RDI, iVar10 < (int)in_RDI) {
    r = (int32)*(byte *)(in_RCX + iVar10);
    if (*(byte *)(in_RCX + iVar10) < 0x80) {
      iVar10 = iVar10 + 1;
    }
    else {
      local_30 = oldCap;
      local_28 = local_18;
      runtime_decoderune((string)in_stack_ffffffffffffff28,in_RCX,r_00,iVar10);
      local_18 = local_28;
      oldCap = local_30;
      iVar10 = extraout_RBX;
      r = extraout_EAX;
    }
    if (r < 0x80) {
      in_RBX = in_RBX + 1;
      if (oldCap < in_RBX) {
        ~r0_00.cap = in_stack_ffffffffffffff38;
        ~r0_00.array = in_stack_ffffffffffffff28._type;
        ~r0_00.len = (int)in_stack_ffffffffffffff28.data;
        local_38 = iVar10;
        runtime_growslice(local_18,in_RBX,oldCap,1,(internal_abi_Type *)&DAT_00807920,~r0_00);
        local_18 = extraout_RAX;
        oldCap = extraout_RCX;
        in_RBX = extraout_RBX_00;
        iVar10 = local_38;
      }
      local_18[in_RBX - 1] = (uint8)r;
      h = h + 1;
    }
    else {
      sVar6 = sVar6 + 1;
    }
  }
  if (0 < h) {
    in_RBX = in_RBX + 1;
    if (oldCap < in_RBX) {
      ~r0_01.cap = in_stack_ffffffffffffff38;
      ~r0_01.array = in_stack_ffffffffffffff28._type;
      ~r0_01.len = (int)in_stack_ffffffffffffff28.data;
      runtime_growslice(local_18,in_RBX,oldCap,1,(internal_abi_Type *)&DAT_00807920,~r0_01);
      local_18 = extraout_RAX_00;
      oldCap = extraout_RCX_00;
      in_RBX = extraout_RBX_01;
    }
    local_18[in_RBX - 1] = 0x2d;
  }
  sVar9 = 0x80;
  sVar8 = 0;
  bias = 0x48;
  sVar5 = h;
  do {
    if (sVar6 == 0) {
      runtime_slicebytetostring
                ((runtime_tmpBuf *)0x0,local_18,in_RBX,(string)in_stack_ffffffffffffff28);
      return;
    }
    iVar10 = 0;
    local_58 = oldCap;
    local_28 = local_18;
    r_1 = 0x7fffffff;
    while (sVar11 = r_1, iVar10 < (int)in_RDI) {
      r_1 = (int32)*(byte *)(in_RCX + iVar10);
      if (*(byte *)(in_RCX + iVar10) < 0x80) {
        iVar10 = iVar10 + 1;
      }
      else {
        runtime_decoderune((string)in_stack_ffffffffffffff28,in_RCX,r_00,iVar10);
        local_18 = local_28;
        oldCap = local_58;
        iVar10 = extraout_RBX_02;
        r_1 = extraout_EAX_00;
      }
      if ((sVar11 <= r_1) || (r_1 < sVar9)) {
        r_1 = sVar11;
      }
    }
    iVar10 = (int)(sdword)(sVar11 - sVar9) * (int)(sdword)(sVar5 + 1);
    if (-(sVar8 + -0x7fffffff) < iVar10) {
      runtime_newobject((internal_abi_Type *)&DAT_00867820,in_RDI);
      extraout_RAX_01[1] = (int)in_RDI;
      piVar2 = extraout_RAX_01;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier1();
        *extraout_R11 = in_RCX;
        piVar2 = extraout_RAX_02;
      }
      *piVar2 = in_RCX;
      piVar2[3] = 2;
      piVar2[2] = (int)&DAT_008ae232;
      return;
    }
    q = (sdword)iVar10 + sVar8;
    iVar10 = 0;
    while (iVar10 < (int)in_RDI) {
      r_2 = (int32)*(byte *)(in_RCX + iVar10);
      if (*(byte *)(in_RCX + iVar10) < 0x80) {
        iVar10 = iVar10 + 1;
      }
      else {
        local_48 = oldCap;
        local_40 = in_RBX;
        runtime_decoderune((string)in_stack_ffffffffffffff28,in_RCX,r_00,iVar10);
        oldCap = local_48;
        in_RBX = local_40;
        iVar10 = extraout_RBX_03;
        r_2 = extraout_EAX_01;
      }
      if (r_2 < sVar11) {
        q = q + 1;
        if (q < 0) {
          runtime_newobject((internal_abi_Type *)&DAT_00867820,in_RDI);
          extraout_RAX_04[1] = (int)in_RDI;
          piVar2 = extraout_RAX_04;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier1();
            *extraout_R11_00 = in_RCX;
            piVar2 = extraout_RAX_05;
          }
          *piVar2 = in_RCX;
          piVar2[3] = 2;
          piVar2[2] = (int)&DAT_008ae232;
          return;
        }
      }
      else if (r_2 <= sVar11) {
        local_84 = 0x24;
        local_50 = iVar10;
        dVar1 = q;
        while( true ) {
          sVar9 = local_84 - bias;
          if (bias < local_84) {
            iVar10 = local_50;
            if ((sdword)(bias + 0x1a) <= local_84) {
              sVar9 = 0x1a;
            }
          }
          else {
            sVar9 = 1;
          }
          if ((sdword)dVar1 < sVar9) break;
          sVar4 = -(sVar9 + -0x24);
          sVar8 = dVar1 - sVar9;
          if (sVar4 == 0) {
                    // WARNING: Subroutine does not return
            runtime_panicdivide();
          }
          if (sVar4 == -1) {
            dVar1 = -sVar8;
            sVar8 = 0;
          }
          else {
            dVar1 = sVar8 / sVar4;
            sVar8 = sVar8 % sVar4;
          }
          if ((dword)(sVar8 + sVar9) < 0x1a) {
            uVar7 = (char)sVar8 + (char)sVar9 + 0x61;
          }
          else {
            if (9 < (dword)((sVar8 + sVar9) - 0x1aU)) {
                    // WARNING: Subroutine does not return
              runtime_gopanic(in_stack_ffffffffffffff28);
            }
            uVar7 = (char)sVar8 + (char)sVar9 + 0x16;
          }
          in_RBX = in_RBX + 1;
          if (oldCap < in_RBX) {
            ~r0_03.cap = in_stack_ffffffffffffff38;
            ~r0_03.array = in_stack_ffffffffffffff28._type;
            ~r0_03.len = (int)in_stack_ffffffffffffff28.data;
            runtime_growslice(local_18,in_RBX,oldCap,1,(internal_abi_Type *)&DAT_00807920,~r0_03);
            in_RBX = extraout_RBX_05;
            local_18 = extraout_RAX_06;
            oldCap = extraout_RCX_02;
            iVar10 = local_50;
          }
          local_18[in_RBX - 1] = uVar7;
          local_84 = local_84 + 0x24;
        }
        if (dVar1 < 0x1a) {
          uVar7 = (char)dVar1 + 0x61;
        }
        else {
          if (9 < (dword)(dVar1 - 0x1a)) {
                    // WARNING: Subroutine does not return
            runtime_gopanic(in_stack_ffffffffffffff28);
          }
          uVar7 = (char)dVar1 + 0x16;
        }
        in_RBX = in_RBX + 1;
        if (oldCap < in_RBX) {
          ~r0_02.cap = in_stack_ffffffffffffff38;
          ~r0_02.array = in_stack_ffffffffffffff28._type;
          ~r0_02.len = (int)in_stack_ffffffffffffff28.data;
          runtime_growslice(local_18,in_RBX,oldCap,1,(internal_abi_Type *)&DAT_00807920,~r0_02);
          local_18 = extraout_RAX_03;
          oldCap = extraout_RCX_01;
          in_RBX = extraout_RBX_04;
          iVar10 = local_50;
        }
        local_18[in_RBX - 1] = uVar7;
        if (sVar5 == h) {
          sVar9 = q / 700;
        }
        else {
          sVar9 = q / 2;
        }
        if (sVar5 == -1) {
                    // WARNING: Subroutine does not return
          runtime_panicdivide();
        }
        sVar5 = sVar5 + 1;
        if (sVar5 == -1) {
          sVar8 = -sVar9;
        }
        else {
          sVar8 = sVar9 / sVar5;
        }
        k_1 = 0;
        uVar3 = (uint)(dword)(sVar9 + sVar8);
        while (sVar9 = (sdword)uVar3, 0x1c7 < sVar9) {
          k_1 = k_1 + 0x24;
          uVar3 = (int)sVar9 / 0x23 + ((int)sVar9 >> 0x3f);
        }
        if (sVar9 == -0x26) {
                    // WARNING: Subroutine does not return
          runtime_panicdivide();
        }
        if ((sdword)(sVar9 + 0x26) == -1) {
          sVar9 = sVar9 * -0x24;
        }
        else {
          sVar9 = (sdword)(sVar9 * 0x24) / (sdword)(sVar9 + 0x26);
        }
        sVar6 = sVar6 + -1;
        bias = k_1 + sVar9;
        q = 0;
      }
    }
    sVar8 = q + 1;
    sVar9 = sVar11 + 1;
  } while( true );
}



void vendor_golang_org_x_net_idna___idnaTrie__lookupString
               (vendor_golang_org_x_net_idna_idnaTrie *t,string s,uint16 v,int sz)

{
  byte bVar1;
  uint8 c1;
  uint8 c2;
  uint8 c3;
  uint8 c0;
  uint32 o;
  uint32 o_1;
  uint uVar2;
  undefined6 in_register_0000001a;
  byte *pbVar3;
  uint8 c1_1;
  uint8 c1_2;
  uint8 c2_1;
  uint16 uVar4;
  int unaff_R14;
  
  pbVar3 = (byte *)CONCAT62(in_register_0000001a,v);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (sz == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  bVar1 = *pbVar3;
  if (bVar1 < 0x80) {
    return;
  }
  if (bVar1 < 0xc2) {
    return;
  }
  if (bVar1 < 0xe0) {
    if (sz < 2) {
      return;
    }
    if (0x3f < (byte)(pbVar3[1] + 0x80)) {
      return;
    }
    vendor_golang_org_x_net_idna___idnaTrie__lookupValue
              (t,(dword)vendor_golang_org_x_net_idna_idnaIndex[bVar1],pbVar3[1],0x6e00);
    return;
  }
  if (bVar1 < 0xf0) {
    if (sz < 3) {
      return;
    }
    uVar4 = pbVar3[1] - 0x80;
    if (0x3f < (byte)uVar4) {
      return;
    }
    uVar2 = (uint)(dword)((dword)vendor_golang_org_x_net_idna_idnaIndex[bVar1] * 0x40 +
                         (dword)pbVar3[1]);
    if (0x9bf < uVar2) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    if (0x3f < (byte)(pbVar3[2] + 0x80)) {
      return;
    }
    vendor_golang_org_x_net_idna___idnaTrie__lookupValue
              (t,(dword)vendor_golang_org_x_net_idna_idnaIndex[uVar2],pbVar3[2],uVar4);
    return;
  }
  if (0xf7 < bVar1) {
    return;
  }
  if (sz < 4) {
    return;
  }
  if (0x3f < (byte)(pbVar3[1] + 0x80)) {
    return;
  }
  uVar2 = (uint)(dword)((dword)vendor_golang_org_x_net_idna_idnaIndex[bVar1] * 0x40 +
                       (dword)pbVar3[1]);
  if (uVar2 < 0x9c0) {
    uVar4 = pbVar3[2] - 0x80;
    if (0x3f < (byte)uVar4) {
      return;
    }
    uVar2 = (uint)(dword)((dword)vendor_golang_org_x_net_idna_idnaIndex[uVar2] * 0x40 +
                         (dword)pbVar3[2]);
    if (uVar2 < 0x9c0) {
      if (0x3f < (byte)(pbVar3[3] + 0x80)) {
        return;
      }
      vendor_golang_org_x_net_idna___idnaTrie__lookupValue
                (t,(dword)vendor_golang_org_x_net_idna_idnaIndex[uVar2],pbVar3[3],uVar4);
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void vendor_golang_org_x_net_idna___idnaTrie__lookupValue
               (vendor_golang_org_x_net_idna_idnaTrie *t,uint32 n,uint8 b,uint16 ~r0)

{
  uint16 extraout_DI;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    ~r0 = extraout_DI;
  }
  if (n < 0x85) {
    if ((dword)((dword)b + n * 0x40) < 0x21c0) {
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  vendor_golang_org_x_net_idna___sparseBlocks__lookup
            (&vendor_golang_org_x_net_idna_idnaSparse,n - 0x85,b,~r0);
  return;
}



void vendor_golang_org_x_net_idna___sparseBlocks__lookup
               (vendor_golang_org_x_net_idna_sparseBlocks *t,uint32 n,uint8 b,uint16 ~r0)

{
  uint uVar1;
  vendor_golang_org_x_net_idna_valueRange *pvVar2;
  ushort uVar3;
  uint uVar4;
  uint16 offset;
  uint16 hi;
  ushort uVar5;
  ushort uVar6;
  uint16 lo;
  ushort uVar7;
  uint16 m;
  
  if ((uint)(t->offset).len <= (uint)n) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  uVar7 = (t->offset).array[n];
  uVar1 = (t->values).len;
  if (uVar7 < uVar1) {
    pvVar2 = (t->values).array;
    uVar6 = uVar7 + 1;
    uVar7 = pvVar2[uVar7].lo + uVar7 + 1;
    while( true ) {
      uVar3 = uVar7;
      if (uVar3 <= uVar6) {
        return;
      }
      uVar5 = (ushort)(uVar3 - uVar6) >> 1;
      uVar7 = uVar5 + uVar6;
      uVar4 = (uint)uVar7;
      if (uVar1 <= uVar4) break;
      if (pvVar2[uVar4].lo <= b) {
        if (b <= pvVar2[uVar4].hi) {
          return;
        }
        if (pvVar2[uVar4].lo <= b) {
          uVar6 = uVar5 + uVar6 + 1;
          uVar7 = uVar3;
        }
      }
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}
