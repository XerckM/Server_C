    noalg.[8]*google.golang.org/grpc/internal/transport.Stream elems;
    void *overflow;
};

typedef struct noalg.map.hdr[string]*text/template/parse.Tree noalg.map.hdr[string]*text/template/parse.Tree, *Pnoalg.map.hdr[string]*text/template/parse.Tree;

typedef struct noalg.map.bucket[string]*text/template/parse.Tree noalg.map.bucket[string]*text/template/parse.Tree, *Pnoalg.map.bucket[string]*text/template/parse.Tree;

typedef struct text/template/parse.Tree *noalg.[8]*text/template/parse.Tree[8];

struct noalg.map.bucket[string]*text/template/parse.Tree {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8]*text/template/parse.Tree elems;
    void *overflow;
};

struct noalg.map.hdr[string]*text/template/parse.Tree {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string]*text/template/parse.Tree *buckets;
    struct noalg.map.bucket[string]*text/template/parse.Tree *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct noalg.struct_{_F_uintptr;_X0_map[string]bool_} noalg.struct_{_F_uintptr;_X0_map[string]bool_}, *Pnoalg.struct_{_F_uintptr;_X0_map[string]bool_};

struct noalg.struct_{_F_uintptr;_X0_map[string]bool_} { // Original name: noalg.struct { F uintptr; X0 map[string]bool }
    uintptr F;
    map[string]bool X0;
};

typedef struct noalg.struct_{_google.golang.org/grpc.c_unsafe.Pointer;_google.golang.org/grpc.elem_unsafe.Pointer_} noalg.struct_{_google.golang.org/grpc.c_unsafe.Pointer;_google.golang.org/grpc.elem_unsafe.Pointer_}, *Pnoalg.struct_{_google.golang.org/grpc.c_unsafe.Pointer;_google.golang.org/grpc.elem_unsafe.Pointer_};

struct noalg.struct_{_google.golang.org/grpc.c_unsafe.Pointer;_google.golang.org/grpc.elem_unsafe.Pointer_} { // Original name: noalg.struct { google.golang.org/grpc.c unsafe.Pointer; google.golang.org/grpc.elem unsafe.Pointer }
    void *c;
    void *elem;
};

typedef struct hash<net/http.ConnState,string> *map[net/http.ConnState]string;

typedef struct os.File os.File, *Pos.File;

typedef struct os.file os.file, *Pos.file;

typedef struct os.dirInfo os.dirInfo, *Pos.dirInfo;

struct os.dirInfo {
    struct []uint8 *buf;
    int nbuf;
    int bufp;
};

struct os.file {
    struct internal/poll.FD pfd;
    struct string name;
    struct os.dirInfo *dirinfo;
    bool nonblock;
    bool stdoutOrErr;
    bool appendMode;
};

struct os.File {
    struct os.file *file;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.Server;_X1_*google.golang.org/grpc.listenSocket_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.Server;_X1_*google.golang.org/grpc.listenSocket_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.Server;_X1_*google.golang.org/grpc.listenSocket_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.Server;_X1_*google.golang.org/grpc.listenSocket_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc.Server; X1 *google.golang.org/grpc.listenSocket }
    uintptr F;
    struct google.golang.org/grpc.Server *X0;
    struct google.golang.org/grpc.listenSocket *X1;
};

typedef struct mime/multipart.partReader mime/multipart.partReader, *Pmime/multipart.partReader;

typedef struct mime/multipart.Part mime/multipart.Part, *Pmime/multipart.Part;

typedef struct mime/multipart.Reader mime/multipart.Reader, *Pmime/multipart.Reader;

struct mime/multipart.partReader {
    struct mime/multipart.Part *p;
};

struct mime/multipart.Reader {
    struct bufio.Reader *bufReader;
    struct string tempDir;
    struct mime/multipart.Part *currentPart;
    int partsRead;
    struct []uint8 nl;
    struct []uint8 nlDashBoundary;
    struct []uint8 dashBoundaryDash;
    struct []uint8 dashBoundary;
};

struct mime/multipart.Part {
    net/textproto.MIMEHeader Header;
    struct mime/multipart.Reader *mr;
    struct string disposition;
    map[string]string dispositionParams;
    io.Reader r;
    int n;
    int64 total;
    error err;
    error readErr;
};

typedef struct noalg.struct_{_F_uintptr;_R_*strings.Replacer_} noalg.struct_{_F_uintptr;_R_*strings.Replacer_}, *Pnoalg.struct_{_F_uintptr;_R_*strings.Replacer_};

typedef struct strings.Replacer strings.Replacer, *Pstrings.Replacer;

typedef struct runtime.iface strings.replacer;

struct strings.Replacer {
    struct sync.Once once;
    strings.replacer r;
    struct []string oldnew;
};

struct noalg.struct_{_F_uintptr;_R_*strings.Replacer_} { // Original name: noalg.struct { F uintptr; R *strings.Replacer }
    uintptr F;
    struct strings.Replacer *R;
};

typedef struct struct_{_crypto/x509.extKeyUsage_crypto/x509.ExtKeyUsage;_crypto/x509.oid_encoding/asn1.ObjectIdentifier_} struct_{_crypto/x509.extKeyUsage_crypto/x509.ExtKeyUsage;_crypto/x509.oid_encoding/asn1.ObjectIdentifier_}, *Pstruct_{_crypto/x509.extKeyUsage_crypto/x509.ExtKeyUsage;_crypto/x509.oid_encoding/asn1.ObjectIdentifier_};

struct struct_{_crypto/x509.extKeyUsage_crypto/x509.ExtKeyUsage;_crypto/x509.oid_encoding/asn1.ObjectIdentifier_} { // Original name: struct { crypto/x509.extKeyUsage crypto/x509.ExtKeyUsage; crypto/x509.oid encoding/asn1.ObjectIdentifier }
    crypto/x509.ExtKeyUsage extKeyUsage;
    struct encoding/asn1.ObjectIdentifier oid;
};

typedef struct runtime.suspendGState runtime.suspendGState, *Pruntime.suspendGState;

struct runtime.suspendGState {
    struct runtime.g *g;
    bool dead;
    bool stopped;
};

typedef struct runtime.sweepLocked runtime.sweepLocked, *Pruntime.sweepLocked;

struct runtime.sweepLocked {
    struct runtime.mspan *mspan;
};

typedef struct runtime.sweepLocker runtime.sweepLocker, *Pruntime.sweepLocker;

struct runtime.sweepLocker {
    uint32 sweepGen;
    bool valid;
};

typedef struct []*runtime.moduledata []*runtime.moduledata, *P[]*runtime.moduledata;

struct []*runtime.moduledata {
    struct runtime.moduledata **array;
    int len;
    int cap;
};

typedef struct runtime.stackt runtime.stackt, *Pruntime.stackt;

struct runtime.stackt {
    uint8 *ss_sp;
    int32 ss_flags;
    uint8 pad_cgo_0[4];
    uintptr ss_size;
};

typedef struct net.UnixAddr net.UnixAddr, *Pnet.UnixAddr;

struct net.UnixAddr {
    struct string Name;
    struct string Net;
};

typedef struct google.golang.org/grpc/metadata.rawMD google.golang.org/grpc/metadata.rawMD, *Pgoogle.golang.org/grpc/metadata.rawMD;

typedef struct [][]string [][]string, *P[][]string;

struct [][]string {
    struct []string *array;
    int len;
    int cap;
};

struct google.golang.org/grpc/metadata.rawMD {
    google.golang.org/grpc/metadata.MD md;
    struct [][]string added;
};

typedef struct strings.Builder strings.Builder, *Pstrings.Builder;

struct strings.Builder {
    struct strings.Builder *addr;
    struct []uint8 buf;
};

typedef struct runtime.finalizer runtime.finalizer, *Pruntime.finalizer;

struct runtime.finalizer {
    struct runtime.funcval *fn;
    void *arg;
    uintptr nret;
    struct internal/abi.Type *fint;
    struct internal/abi.PtrType *ot;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/metadata.MD_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/metadata.MD_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/metadata.MD_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/metadata.MD_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc/metadata.MD }
    uintptr F;
    google.golang.org/grpc/metadata.MD *X0;
};

typedef struct hash<string,*golang.org/x/net/trace.traceSet> hash<string,*golang.org/x/net/trace.traceSet>, *Phash<string,*golang.org/x/net/trace.traceSet>;

typedef struct hash<string,*golang.org/x/net/trace.traceSet> *map[string]*golang.org/x/net/trace.traceSet;

struct hash<string,*golang.org/x/net/trace.traceSet> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,*golang.org/x/net/trace.traceSet> *buckets;
    struct bucket<string,*golang.org/x/net/trace.traceSet> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_Trailer google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_Trailer, *Pgoogle.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_Trailer;

typedef struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.Trailer google.golang.org/grpc/binarylog/grpc_binarylog_v1.Trailer, *Pgoogle.golang.org/grpc/binarylog/grpc_binarylog_v1.Trailer;

struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.Trailer {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.Metadata *Metadata;
    uint32 StatusCode;
    struct string StatusMessage;
    struct []uint8 StatusDetails;
};

struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_Trailer {
    struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.Trailer *Trailer;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client;_X1_golang.org/x/net/http2.Setting_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client;_X1_golang.org/x/net/http2.Setting_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client;_X1_golang.org/x/net/http2.Setting_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client;_X1_golang.org/x/net/http2.Setting_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc/internal/transport.http2Client; X1 golang.org/x/net/http2.Setting }
    uintptr F;
    struct google.golang.org/grpc/internal/transport.http2Client *X0;
    struct golang.org/x/net/http2.Setting X1;
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_reflect.Type_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_reflect.Type_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_reflect.Type_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_reflect.Type_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/internal/impl.offset; X1 reflect.StructField; X2 reflect.Type }
    uintptr F;
    google.golang.org/protobuf/internal/impl.offset X0;
    struct reflect.StructField X1;
    reflect.Type X2;
};

typedef struct sudog<net.result[int].1> sudog<net.result[int].1>, *Psudog<net.result[int].1>;

typedef struct net.result[int].1 net.result[int].1, *Pnet.result[int].1;

struct sudog<net.result[int].1> { // Original name: sudog<net.result[int]·1>
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    struct net.result[int].1 *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

struct net.result[int].1 { // Original name: net.result[int]·1
    int res;
    error err;
};

typedef struct google.golang.org/protobuf/internal/impl.listPtrConverter google.golang.org/protobuf/internal/impl.listPtrConverter, *Pgoogle.golang.org/protobuf/internal/impl.listPtrConverter;

struct google.golang.org/protobuf/internal/impl.listPtrConverter {
    reflect.Type goType;
    google.golang.org/protobuf/internal/impl.Converter c;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*time.Timer_} noalg.struct_{_F_uintptr;_X0_*time.Timer_}, *Pnoalg.struct_{_F_uintptr;_X0_*time.Timer_};

struct noalg.struct_{_F_uintptr;_X0_*time.Timer_} { // Original name: noalg.struct { F uintptr; X0 *time.Timer }
    uintptr F;
    struct time.Timer *X0;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*net.Resolver;_X1_context.Context;_X2_*net.dnsConfig;_X3_chan_net.result.3_} noalg.struct_{_F_uintptr;_X0_*net.Resolver;_X1_context.Context;_X2_*net.dnsConfig;_X3_chan_net.result.3_}, *Pnoalg.struct_{_F_uintptr;_X0_*net.Resolver;_X1_context.Context;_X2_*net.dnsConfig;_X3_chan_net.result.3_};

typedef struct hchan<net.result.3> hchan<net.result.3>, *Phchan<net.result.3>;

typedef struct hchan<net.result.3> *chan_net.result.3;

typedef struct waitq<net.result.3> waitq<net.result.3>, *Pwaitq<net.result.3>;

typedef struct sudog<net.result.3> sudog<net.result.3>, *Psudog<net.result.3>;

typedef struct net.result.3 net.result.3, *Pnet.result.3;

typedef struct vendor/golang.org/x/net/dns/dnsmessage.Parser vendor/golang.org/x/net/dns/dnsmessage.Parser, *Pvendor/golang.org/x/net/dns/dnsmessage.Parser;

typedef struct vendor/golang.org/x/net/dns/dnsmessage.header vendor/golang.org/x/net/dns/dnsmessage.header, *Pvendor/golang.org/x/net/dns/dnsmessage.header;

struct vendor/golang.org/x/net/dns/dnsmessage.header {
    uint16 id;
    uint16 bits;
    uint16 questions;
    uint16 answers;
    uint16 authorities;
    uint16 additionals;
};

struct vendor/golang.org/x/net/dns/dnsmessage.Parser {
    struct []uint8 msg;
    struct vendor/golang.org/x/net/dns/dnsmessage.header header;
    vendor/golang.org/x/net/dns/dnsmessage.section section;
    int off;
    int index;
    bool resHeaderValid;
    struct vendor/golang.org/x/net/dns/dnsmessage.ResourceHeader resHeader;
};

struct waitq<net.result.3> { // Original name: waitq<net.result·3>
    struct sudog<net.result.3> *first;
    struct sudog<net.result.3> *last;
};

struct hchan<net.result.3> { // Original name: hchan<net.result·3>
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<net.result.3> recvq;
    struct waitq<net.result.3> sendq;
    struct runtime.mutex lock;
};

struct net.result.3 { // Original name: net.result·3
    struct vendor/golang.org/x/net/dns/dnsmessage.Parser p;
    struct string server;
    error error;
};

struct noalg.struct_{_F_uintptr;_X0_*net.Resolver;_X1_context.Context;_X2_*net.dnsConfig;_X3_chan_net.result.3_} { // Original name: noalg.struct { F uintptr; X0 *net.Resolver; X1 context.Context; X2 *net.dnsConfig; X3 chan net.result·3 }
    uintptr F;
    struct net.Resolver *X0;
    context.Context X1;
    struct net.dnsConfig *X2;
    chan_net.result.3 X3;
};

struct sudog<net.result.3> { // Original name: sudog<net.result·3>
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    struct net.result.3 *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

typedef struct hash<int,google.golang.org/grpc/codes.Code> hash<int,google.golang.org/grpc/codes.Code>, *Phash<int,google.golang.org/grpc/codes.Code>;

typedef struct bucket<int,google.golang.org/grpc/codes.Code> bucket<int,google.golang.org/grpc/codes.Code>, *Pbucket<int,google.golang.org/grpc/codes.Code>;

struct hash<int,google.golang.org/grpc/codes.Code> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<int,google.golang.org/grpc/codes.Code> *buckets;
    struct bucket<int,google.golang.org/grpc/codes.Code> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<int,google.golang.org/grpc/codes.Code> {
    uint8 tophash[8];
    int keys[8];
    google.golang.org/grpc/codes.Code values[8];
    struct bucket<int,google.golang.org/grpc/codes.Code> *overflow;
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal.HealthChecker_} noalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal.HealthChecker_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal.HealthChecker_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal.HealthChecker_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/grpc/internal.HealthChecker }
    uintptr F;
    void (**X0)(context.Context, void (**)(struct string, interface_{} *, error *), void (**)(google.golang.org/grpc/connectivity.State, error), struct string, error *);
};

typedef struct strings.singleStringReplacer strings.singleStringReplacer, *Pstrings.singleStringReplacer;

struct strings.singleStringReplacer {
    struct strings.stringFinder *finder;
    struct string value;
};

typedef struct hash<string,google.golang.org/grpc/resolver.Builder> hash<string,google.golang.org/grpc/resolver.Builder>, *Phash<string,google.golang.org/grpc/resolver.Builder>;

typedef struct bucket<string,google.golang.org/grpc/resolver.Builder> bucket<string,google.golang.org/grpc/resolver.Builder>, *Pbucket<string,google.golang.org/grpc/resolver.Builder>;

struct hash<string,google.golang.org/grpc/resolver.Builder> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,google.golang.org/grpc/resolver.Builder> *buckets;
    struct bucket<string,google.golang.org/grpc/resolver.Builder> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<string,google.golang.org/grpc/resolver.Builder> {
    uint8 tophash[8];
    struct string keys[8];
    google.golang.org/grpc/resolver.Builder values[8];
    struct bucket<string,google.golang.org/grpc/resolver.Builder> *overflow;
};

typedef struct encoding/json.errorContext encoding/json.errorContext, *Pencoding/json.errorContext;

struct encoding/json.errorContext {
    reflect.Type Struct;
    struct []string FieldStack;
};

typedef struct reflect.visit reflect.visit, *Preflect.visit;

struct reflect.visit {
    void *a1;
    void *a2;
    reflect.Type typ;
};

typedef struct encoding/asn1.taggedEncoder encoding/asn1.taggedEncoder, *Pencoding/asn1.taggedEncoder;

struct encoding/asn1.taggedEncoder {
    uint8 scratch[8];
    encoding/asn1.encoder tag;
    encoding/asn1.encoder body;
};

typedef struct hash<crypto.Hash,encoding/asn1.RawValue> hash<crypto.Hash,encoding/asn1.RawValue>, *Phash<crypto.Hash,encoding/asn1.RawValue>;

typedef struct bucket<crypto.Hash,encoding/asn1.RawValue> bucket<crypto.Hash,encoding/asn1.RawValue>, *Pbucket<crypto.Hash,encoding/asn1.RawValue>;

struct bucket<crypto.Hash,encoding/asn1.RawValue> {
    uint8 tophash[8];
    crypto.Hash keys[8];
    struct encoding/asn1.RawValue values[8];
    struct bucket<crypto.Hash,encoding/asn1.RawValue> *overflow;
};

struct hash<crypto.Hash,encoding/asn1.RawValue> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<crypto.Hash,encoding/asn1.RawValue> *buckets;
    struct bucket<crypto.Hash,encoding/asn1.RawValue> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct runtime.gcBgMarkWorkerNode runtime.gcBgMarkWorkerNode, *Pruntime.gcBgMarkWorkerNode;

struct runtime.gcBgMarkWorkerNode {
    struct runtime.lfnode node;
    runtime.guintptr gp;
    runtime.muintptr m;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.FieldNumbers_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.FieldNumbers_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.FieldNumbers_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.FieldNumbers_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/filedesc.FieldNumbers }
    uintptr F;
    struct google.golang.org/protobuf/internal/filedesc.FieldNumbers *X0;
};

typedef uint64 crypto/internal/nistec.p256OrdElement[4];

typedef struct vendor/golang.org/x/text/secure/bidirule.Transformer vendor/golang.org/x/text/secure/bidirule.Transformer, *Pvendor/golang.org/x/text/secure/bidirule.Transformer;

struct vendor/golang.org/x/text/secure/bidirule.Transformer {
    vendor/golang.org/x/text/secure/bidirule.ruleState state;
    bool hasRTL;
    uint16 seen;
};

typedef struct crypto/ed25519.PublicKey crypto/ed25519.PublicKey, *Pcrypto/ed25519.PublicKey;

struct crypto/ed25519.PublicKey {
    uint8 *array;
    int len;
    int cap;
};

typedef struct hash<golang.org/x/net/http2.SettingID,string> hash<golang.org/x/net/http2.SettingID,string>, *Phash<golang.org/x/net/http2.SettingID,string>;

typedef struct bucket<golang.org/x/net/http2.SettingID,string> bucket<golang.org/x/net/http2.SettingID,string>, *Pbucket<golang.org/x/net/http2.SettingID,string>;

struct bucket<golang.org/x/net/http2.SettingID,string> {
    uint8 tophash[8];
    golang.org/x/net/http2.SettingID keys[8];
    struct string values[8];
    struct bucket<golang.org/x/net/http2.SettingID,string> *overflow;
};

struct hash<golang.org/x/net/http2.SettingID,string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<golang.org/x/net/http2.SettingID,string> *buckets;
    struct bucket<golang.org/x/net/http2.SettingID,string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct []log/slog.Attr []log/slog.Attr, *P[]log/slog.Attr;

struct []log/slog.Attr {
    struct log/slog.Attr *array;
    int len;
    int cap;
};

typedef struct noalg.struct_{_F_uintptr;_X0_golang.org/x/net/trace.eventLogs_} noalg.struct_{_F_uintptr;_X0_golang.org/x/net/trace.eventLogs_}, *Pnoalg.struct_{_F_uintptr;_X0_golang.org/x/net/trace.eventLogs_};

struct noalg.struct_{_F_uintptr;_X0_golang.org/x/net/trace.eventLogs_} { // Original name: noalg.struct { F uintptr; X0 golang.org/x/net/trace.eventLogs }
    uintptr F;
    struct golang.org/x/net/trace.eventLogs X0;
};

typedef struct google.golang.org/grpc.streamKey google.golang.org/grpc.streamKey, *Pgoogle.golang.org/grpc.streamKey;

struct google.golang.org/grpc.streamKey {
};

typedef struct golang.org/x/net/http2.StreamError golang.org/x/net/http2.StreamError, *Pgolang.org/x/net/http2.StreamError;

struct golang.org/x/net/http2.StreamError {
    uint32 StreamID;
    golang.org/x/net/http2.ErrCode Code;
    error Cause;
};

typedef struct google.golang.org/protobuf/encoding/prototext.MarshalOptions google.golang.org/protobuf/encoding/prototext.MarshalOptions, *Pgoogle.golang.org/protobuf/encoding/prototext.MarshalOptions;

struct google.golang.org/protobuf/encoding/prototext.MarshalOptions {
    struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals NoUnkeyedLiterals;
    bool Multiline;
    struct string Indent;
    bool EmitASCII;
    bool allowInvalidUTF8;
    bool AllowPartial;
    bool EmitUnknown;
    interface_{_FindExtensionByName(google.golang.org/protobuf/reflect/protoreflect.FullName)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error);_FindExtensionByNumber(google.golang.org/protobuf/reflect/protoreflect.FullName,_google.golang.org/protobuf/encoding/protowire.Number)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error);_FindMessageByName(google.golang.org/protobuf/reflect/protoreflect.FullName)_(google.golang.org/protobuf/reflect/protoreflect.MessageType,_error);_FindMessageByURL(string)_(google.golang.org/protobuf/reflect/protoreflect.MessageType,_error)_} Resolver;
};

typedef struct noalg.map.hdr[string]*flag.Flag noalg.map.hdr[string]*flag.Flag, *Pnoalg.map.hdr[string]*flag.Flag;

typedef struct noalg.map.bucket[string]*flag.Flag noalg.map.bucket[string]*flag.Flag, *Pnoalg.map.bucket[string]*flag.Flag;

typedef struct flag.Flag *noalg.[8]*flag.Flag[8];

struct noalg.map.hdr[string]*flag.Flag {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string]*flag.Flag *buckets;
    struct noalg.map.bucket[string]*flag.Flag *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.bucket[string]*flag.Flag {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8]*flag.Flag elems;
    void *overflow;
};

typedef struct internal/cpu.option internal/cpu.option, *Pinternal/cpu.option;

struct internal/cpu.option {
    struct string Name;
    bool *Feature;
    bool Specified;
    bool Enable;
};

typedef struct noalg.map.iter[string]*google.golang.org/grpc.MethodDesc noalg.map.iter[string]*google.golang.org/grpc.MethodDesc, *Pnoalg.map.iter[string]*google.golang.org/grpc.MethodDesc;

struct noalg.map.iter[string]*google.golang.org/grpc.MethodDesc {
    struct string *key;
    struct google.golang.org/grpc.MethodDesc **elem;
    void *t;
    struct noalg.map.hdr[string]*google.golang.org/grpc.MethodDesc *h;
    struct noalg.map.bucket[string]*google.golang.org/grpc.MethodDesc *buckets;
    struct noalg.map.bucket[string]*google.golang.org/grpc.MethodDesc *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal/binarylog.Logger_} noalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal/binarylog.Logger_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal/binarylog.Logger_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal/binarylog.Logger_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/grpc/internal/binarylog.Logger }
    uintptr F;
    google.golang.org/grpc/internal/binarylog.Logger X0;
};

typedef struct crypto/internal/edwards25519.projP1xP1 crypto/internal/edwards25519.projP1xP1, *Pcrypto/internal/edwards25519.projP1xP1;

struct crypto/internal/edwards25519.projP1xP1 {
    struct crypto/internal/edwards25519/field.Element X;
    struct crypto/internal/edwards25519/field.Element Y;
    struct crypto/internal/edwards25519/field.Element Z;
    struct crypto/internal/edwards25519/field.Element T;
};

typedef struct reflect.nonEmptyInterface reflect.nonEmptyInterface, *Preflect.nonEmptyInterface;

typedef struct struct_{_reflect.ityp_*internal/abi.Type;_reflect.typ_*internal/abi.Type;_reflect.hash_uint32;_reflect.__[4]uint8;_reflect.fun_[100000]unsafe.Pointer_} struct_{_reflect.ityp_*internal/abi.Type;_reflect.typ_*internal/abi.Type;_reflect.hash_uint32;_reflect.__[4]uint8;_reflect.fun_[100000]unsafe.Pointer_}, *Pstruct_{_reflect.ityp_*internal/abi.Type;_reflect.typ_*internal/abi.Type;_reflect.hash_uint32;_reflect.__[4]uint8;_reflect.fun_[100000]unsafe.Pointer_};

struct struct_{_reflect.ityp_*internal/abi.Type;_reflect.typ_*internal/abi.Type;_reflect.hash_uint32;_reflect.__[4]uint8;_reflect.fun_[100000]unsafe.Pointer_} { // Original name: struct { reflect.ityp *internal/abi.Type; reflect.typ *internal/abi.Type; reflect.hash uint32; reflect._ [4]uint8; reflect.fun [100000]unsafe.Pointer }
    struct internal/abi.Type *ityp;
    struct internal/abi.Type *typ;
    uint32 hash;
    uint8 _[4];
    void *fun[100000];
};

struct reflect.nonEmptyInterface {
    struct struct_{_reflect.ityp_*internal/abi.Type;_reflect.typ_*internal/abi.Type;_reflect.hash_uint32;_reflect.__[4]uint8;_reflect.fun_[100000]unsafe.Pointer_} *itab;
    void *word;
};

typedef struct net/netip.parseAddrError net/netip.parseAddrError, *Pnet/netip.parseAddrError;

struct net/netip.parseAddrError {
    struct string in;
    struct string msg;
    struct string at;
};

typedef struct net/http.finishAsyncByteRead net/http.finishAsyncByteRead, *Pnet/http.finishAsyncByteRead;

struct net/http.finishAsyncByteRead {
    struct net/http.transferWriter *tw;
};

typedef struct io.multiReader io.multiReader, *Pio.multiReader;

struct io.multiReader {
    struct []io.Reader readers;
};

typedef struct path.lazybuf path.lazybuf, *Ppath.lazybuf;

struct path.lazybuf {
    struct string s;
    struct []uint8 buf;
    int w;
};

typedef struct bucket<string,*unicode.RangeTable> bucket<string,*unicode.RangeTable>, *Pbucket<string,*unicode.RangeTable>;

struct bucket<string,*unicode.RangeTable> {
    uint8 tophash[8];
    struct string keys[8];
    struct unicode.RangeTable *values[8];
    struct bucket<string,*unicode.RangeTable> *overflow;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.atomicSemaphore_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.atomicSemaphore_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.atomicSemaphore_};

typedef struct google.golang.org/grpc.atomicSemaphore google.golang.org/grpc.atomicSemaphore, *Pgoogle.golang.org/grpc.atomicSemaphore;

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.atomicSemaphore_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc.atomicSemaphore }
    uintptr F;
    struct google.golang.org/grpc.atomicSemaphore *X0;
};

struct google.golang.org/grpc.atomicSemaphore {
    struct sync/atomic.Int64 n;
    chan_struct_{} wait;
};

typedef struct crypto/x509.pkcs1PublicKey crypto/x509.pkcs1PublicKey, *Pcrypto/x509.pkcs1PublicKey;

struct crypto/x509.pkcs1PublicKey {
    struct math/big.Int *N;
    int E;
};

typedef struct google.golang.org/protobuf/internal/impl.uint64Converter google.golang.org/protobuf/internal/impl.uint64Converter, *Pgoogle.golang.org/protobuf/internal/impl.uint64Converter;

struct google.golang.org/protobuf/internal/impl.uint64Converter {
    reflect.Type goType;
    struct google.golang.org/protobuf/reflect/protoreflect.Value def;
};

typedef struct math/big.divisor math/big.divisor, *Pmath/big.divisor;

struct math/big.divisor {
    struct math/big.nat bbb;
    int nbits;
    int ndigits;
};

typedef struct hash<int32,google.golang.org/protobuf/reflect/protoreflect.ProtoMessage> hash<int32,google.golang.org/protobuf/reflect/protoreflect.ProtoMessage>, *Phash<int32,google.golang.org/protobuf/reflect/protoreflect.ProtoMessage>;

typedef struct bucket<int32,google.golang.org/protobuf/reflect/protoreflect.ProtoMessage> bucket<int32,google.golang.org/protobuf/reflect/protoreflect.ProtoMessage>, *Pbucket<int32,google.golang.org/protobuf/reflect/protoreflect.ProtoMessage>;

struct hash<int32,google.golang.org/protobuf/reflect/protoreflect.ProtoMessage> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<int32,google.golang.org/protobuf/reflect/protoreflect.ProtoMessage> *buckets;
    struct bucket<int32,google.golang.org/protobuf/reflect/protoreflect.ProtoMessage> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<int32,google.golang.org/protobuf/reflect/protoreflect.ProtoMessage> {
    uint8 tophash[8];
    int32 keys[8];
    google.golang.org/protobuf/reflect/protoreflect.ProtoMessage values[8];
    struct bucket<int32,google.golang.org/protobuf/reflect/protoreflect.ProtoMessage> *overflow;
};

typedef struct google.golang.org/protobuf/reflect/protoregistry.Types google.golang.org/protobuf/reflect/protoregistry.Types, *Pgoogle.golang.org/protobuf/reflect/protoregistry.Types;

typedef struct hash<google.golang.org/protobuf/reflect/protoreflect.FullName,interface_{}> *google.golang.org/protobuf/reflect/protoregistry.typesByName;

typedef struct hash<google.golang.org/protobuf/reflect/protoreflect.FullName,google.golang.org/protobuf/reflect/protoregistry.extensionsByNumber> *google.golang.org/protobuf/reflect/protoregistry.extensionsByMessage;

struct google.golang.org/protobuf/reflect/protoregistry.Types {
    google.golang.org/protobuf/reflect/protoregistry.typesByName typesByName;
    google.golang.org/protobuf/reflect/protoregistry.extensionsByMessage extensionsByMessage;
    int numEnums;
    int numMessages;
    int numExtensions;
};

typedef struct noalg.map.bucket[reflect.visit]bool noalg.map.bucket[reflect.visit]bool, *Pnoalg.map.bucket[reflect.visit]bool;

struct noalg.map.bucket[reflect.visit]bool {
    uint8 topbits[8];
    noalg.[8]reflect.visit keys;
    noalg.[8]bool elems;
    void *overflow;
};

typedef struct reflect.visit noalg.[8]reflect.visit[8];

typedef struct struct_{_crypto/x509.algo_crypto/x509.SignatureAlgorithm;_crypto/x509.name_string;_crypto/x509.oid_encoding/asn1.ObjectIdentifier;_crypto/x509.pubKeyAlgo_crypto/x509.PublicKeyAlgorithm;_crypto/x509.hash_crypto.Hash_} struct_{_crypto/x509.algo_crypto/x509.SignatureAlgorithm;_crypto/x509.name_string;_crypto/x509.oid_encoding/asn1.ObjectIdentifier;_crypto/x509.pubKeyAlgo_crypto/x509.PublicKeyAlgorithm;_crypto/x509.hash_crypto.Hash_}, *Pstruct_{_crypto/x509.algo_crypto/x509.SignatureAlgorithm;_crypto/x509.name_string;_crypto/x509.oid_encoding/asn1.ObjectIdentifier;_crypto/x509.pubKeyAlgo_crypto/x509.PublicKeyAlgorithm;_crypto/x509.hash_crypto.Hash_};

struct struct_{_crypto/x509.algo_crypto/x509.SignatureAlgorithm;_crypto/x509.name_string;_crypto/x509.oid_encoding/asn1.ObjectIdentifier;_crypto/x509.pubKeyAlgo_crypto/x509.PublicKeyAlgorithm;_crypto/x509.hash_crypto.Hash_} { // Original name: struct { crypto/x509.algo crypto/x509.SignatureAlgorithm; crypto/x509.name string; crypto/x509.oid encoding/asn1.ObjectIdentifier; crypto/x509.pubKeyAlgo crypto/x509.PublicKeyAlgorithm; crypto/x509.hash crypto.Hash }
    crypto/x509.SignatureAlgorithm algo;
    struct string name;
    struct encoding/asn1.ObjectIdentifier oid;
    crypto/x509.PublicKeyAlgorithm pubKeyAlgo;
    crypto.Hash hash;
};

typedef struct struct_{_runtime.lock_runtime.mutex;_runtime.next_int32;_runtime.m_map[int32]unsafe.Pointer;_runtime.minv_map[unsafe.Pointer]int32_} struct_{_runtime.lock_runtime.mutex;_runtime.next_int32;_runtime.m_map[int32]unsafe.Pointer;_runtime.minv_map[unsafe.Pointer]int32_}, *Pstruct_{_runtime.lock_runtime.mutex;_runtime.next_int32;_runtime.m_map[int32]unsafe.Pointer;_runtime.minv_map[unsafe.Pointer]int32_};

typedef struct hash<int32,unsafe.Pointer> hash<int32,unsafe.Pointer>, *Phash<int32,unsafe.Pointer>;

typedef struct hash<int32,unsafe.Pointer> *map[int32]unsafe.Pointer;

typedef struct hash<unsafe.Pointer,int32> *map[unsafe.Pointer]int32;

typedef struct bucket<int32,unsafe.Pointer> bucket<int32,unsafe.Pointer>, *Pbucket<int32,unsafe.Pointer>;

struct struct_{_runtime.lock_runtime.mutex;_runtime.next_int32;_runtime.m_map[int32]unsafe.Pointer;_runtime.minv_map[unsafe.Pointer]int32_} { // Original name: struct { runtime.lock runtime.mutex; runtime.next int32; runtime.m map[int32]unsafe.Pointer; runtime.minv map[unsafe.Pointer]int32 }
    struct runtime.mutex lock;
    int32 next;
    map[int32]unsafe.Pointer m;
    map[unsafe.Pointer]int32 minv;
};

struct bucket<int32,unsafe.Pointer> {
    uint8 tophash[8];
    int32 keys[8];
    void *values[8];
    struct bucket<int32,unsafe.Pointer> *overflow;
};

struct hash<int32,unsafe.Pointer> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<int32,unsafe.Pointer> *buckets;
    struct bucket<int32,unsafe.Pointer> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct hash<int,google.golang.org/grpc/codes.Code> *map[int]google.golang.org/grpc/codes.Code;

typedef struct runtime.timeHistogram runtime.timeHistogram, *Pruntime.timeHistogram;

struct runtime.timeHistogram {
    struct runtime/internal/atomic.Uint64 counts[160];
    struct runtime/internal/atomic.Uint64 underflow;
    struct runtime/internal/atomic.Uint64 overflow;
};

typedef struct runtime.pMask runtime.pMask, *Pruntime.pMask;

struct runtime.pMask {
    uint32 *array;
    int len;
    int cap;
};

typedef struct net.byRFC6724 net.byRFC6724, *Pnet.byRFC6724;

typedef struct []net.ipAttr []net.ipAttr, *P[]net.ipAttr;

typedef struct []net/netip.Addr []net/netip.Addr, *P[]net/netip.Addr;

struct []net/netip.Addr {
    struct net/netip.Addr *array;
    int len;
    int cap;
};

struct []net.ipAttr {
    struct net.ipAttr *array;
    int len;
    int cap;
};

struct net.byRFC6724 {
    struct []net.IPAddr addrs;
    struct []net.ipAttr addrAttr;
    struct []net/netip.Addr srcs;
    struct []net.ipAttr srcAttr;
};

typedef struct hash<string,*unicode.RangeTable> hash<string,*unicode.RangeTable>, *Phash<string,*unicode.RangeTable>;

struct hash<string,*unicode.RangeTable> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,*unicode.RangeTable> *buckets;
    struct bucket<string,*unicode.RangeTable> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct google.golang.org/protobuf/internal/impl.aberrantMessageType google.golang.org/protobuf/internal/impl.aberrantMessageType, *Pgoogle.golang.org/protobuf/internal/impl.aberrantMessageType;

struct google.golang.org/protobuf/internal/impl.aberrantMessageType {
    reflect.Type t;
};

typedef struct net.UDPConn net.UDPConn, *Pnet.UDPConn;

struct net.UDPConn {
    struct net.conn conn;
};

typedef struct go.shape.[]log/slog.Attr go.shape.[]log/slog.Attr, *Pgo.shape.[]log/slog.Attr;

struct go.shape.[]log/slog.Attr {
    struct log/slog.Attr *array;
    int len;
    int cap;
};

typedef struct golang.org/x/net/http2.HeadersFrameParam golang.org/x/net/http2.HeadersFrameParam, *Pgolang.org/x/net/http2.HeadersFrameParam;

struct golang.org/x/net/http2.HeadersFrameParam {
    uint32 StreamID;
    struct []uint8 BlockFragment;
    bool EndStream;
    bool EndHeaders;
    uint8 PadLength;
    struct golang.org/x/net/http2.PriorityParam Priority;
};

typedef struct text/template/parse.ActionNode *noalg.[8]*text/template/parse.ActionNode[8];

typedef struct bucket<*reflect.structType,bool> bucket<*reflect.structType,bool>, *Pbucket<*reflect.structType,bool>;

struct bucket<*reflect.structType,bool> {
    uint8 tophash[8];
    struct reflect.structType *keys[8];
    bool values[8];
    struct bucket<*reflect.structType,bool> *overflow;
};

typedef struct crypto/rand.reader crypto/rand.reader, *Pcrypto/rand.reader;

typedef struct sync/atomic.Uint32 sync/atomic.Uint32, *Psync/atomic.Uint32;

struct sync/atomic.Uint32 {
    struct sync/atomic.noCopy _;
    uint32 v;
};

struct crypto/rand.reader {
    io.Reader f;
    struct sync.Mutex mu;
    struct sync/atomic.Uint32 used;
};

typedef struct hash<google.golang.org/protobuf/internal/filedesc.pathKey,[]int> hash<google.golang.org/protobuf/internal/filedesc.pathKey,[]int>, *Phash<google.golang.org/protobuf/internal/filedesc.pathKey,[]int>;

typedef struct bucket<google.golang.org/protobuf/internal/filedesc.pathKey,[]int> bucket<google.golang.org/protobuf/internal/filedesc.pathKey,[]int>, *Pbucket<google.golang.org/protobuf/internal/filedesc.pathKey,[]int>;

struct hash<google.golang.org/protobuf/internal/filedesc.pathKey,[]int> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/protobuf/internal/filedesc.pathKey,[]int> *buckets;
    struct bucket<google.golang.org/protobuf/internal/filedesc.pathKey,[]int> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<google.golang.org/protobuf/internal/filedesc.pathKey,[]int> {
    uint8 tophash[8];
    struct google.golang.org/protobuf/internal/filedesc.pathKey keys[8];
    struct []int values[8];
    struct bucket<google.golang.org/protobuf/internal/filedesc.pathKey,[]int> *overflow;
};

typedef struct runtime.cgoTracebackArg runtime.cgoTracebackArg, *Pruntime.cgoTracebackArg;

struct runtime.cgoTracebackArg {
    uintptr context;
    uintptr sigContext;
    uintptr *buf;
    uintptr max;
};

typedef struct []time.Duration []time.Duration, *P[]time.Duration;

struct []time.Duration {
    time.Duration *array;
