    int len;
    int cap;
};

struct regexp/syntax.Prog {
    struct []regexp/syntax.Inst Inst;
    int Start;
    int NumCap;
};

struct regexp.onePassProg {
    struct []regexp.onePassInst Inst;
    int Start;
    int NumCap;
};

struct regexp.Regexp {
    struct string expr;
    struct regexp/syntax.Prog *prog;
    struct regexp.onePassProg *onepass;
    int numSubexp;
    int maxBitStateLen;
    struct []string subexpNames;
    struct string prefix;
    struct []uint8 prefixBytes;
    int32 prefixRune;
    uint32 prefixEnd;
    int mpool;
    int matchcap;
    bool prefixComplete;
    regexp/syntax.EmptyOp cond;
    int minInputLen;
    bool longest;
};

typedef struct os.unixDirent os.unixDirent, *Pos.unixDirent;

typedef struct runtime.iface io/fs.FileInfo;

struct os.unixDirent {
    struct string parent;
    struct string name;
    io/fs.FileMode typ;
    io/fs.FileInfo info;
};

typedef struct net.Interface net.Interface, *Pnet.Interface;

typedef struct net.HardwareAddr net.HardwareAddr, *Pnet.HardwareAddr;

struct net.HardwareAddr {
    uint8 *array;
    int len;
    int cap;
};

struct net.Interface {
    int Index;
    int MTU;
    struct string Name;
    struct net.HardwareAddr HardwareAddr;
    net.Flags Flags;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*reflect.Type;_X1_*error;_X2_*flag.Flag_} noalg.struct_{_F_uintptr;_X0_*reflect.Type;_X1_*error;_X2_*flag.Flag_}, *Pnoalg.struct_{_F_uintptr;_X0_*reflect.Type;_X1_*error;_X2_*flag.Flag_};

struct noalg.struct_{_F_uintptr;_X0_*reflect.Type;_X1_*error;_X2_*flag.Flag_} { // Original name: noalg.struct { F uintptr; X0 *reflect.Type; X1 *error; X2 *flag.Flag }
    uintptr F;
    reflect.Type *X0;
    error *X1;
    struct flag.Flag *X2;
};

typedef struct []google.golang.org/protobuf/internal/order.mapEntry []google.golang.org/protobuf/internal/order.mapEntry, *P[]google.golang.org/protobuf/internal/order.mapEntry;

typedef struct google.golang.org/protobuf/internal/order.mapEntry google.golang.org/protobuf/internal/order.mapEntry, *Pgoogle.golang.org/protobuf/internal/order.mapEntry;

struct google.golang.org/protobuf/internal/order.mapEntry {
    struct google.golang.org/protobuf/reflect/protoreflect.MapKey k;
    struct google.golang.org/protobuf/reflect/protoreflect.Value v;
};

struct []google.golang.org/protobuf/internal/order.mapEntry {
    struct google.golang.org/protobuf/internal/order.mapEntry *array;
    int len;
    int cap;
};

typedef struct log/slog.Attr *log/slog.groupptr;

typedef struct bufio.Reader bufio.Reader, *Pbufio.Reader;

struct bufio.Reader {
    struct []uint8 buf;
    io.Reader rd;
    int r;
    int w;
    error err;
    int lastByte;
    int lastRuneSize;
};

typedef struct []golang.org/x/net/http2.Setting []golang.org/x/net/http2.Setting, *P[]golang.org/x/net/http2.Setting;

struct []golang.org/x/net/http2.Setting {
    struct golang.org/x/net/http2.Setting *array;
    int len;
    int cap;
};

typedef struct vendor/golang.org/x/net/idna.idnaTrie vendor/golang.org/x/net/idna.idnaTrie, *Pvendor/golang.org/x/net/idna.idnaTrie;

struct vendor/golang.org/x/net/idna.idnaTrie {
};

typedef struct noalg.map.bucket[reflect.Type]bool noalg.map.bucket[reflect.Type]bool, *Pnoalg.map.bucket[reflect.Type]bool;

struct noalg.map.bucket[reflect.Type]bool {
    uint8 topbits[8];
    noalg.[8]reflect.Type keys;
    noalg.[8]bool elems;
    void *overflow;
};

typedef reflect.Type noalg.[8]reflect.Type[8];

typedef struct google.golang.org/grpc/internal/transport.outgoingSettings google.golang.org/grpc/internal/transport.outgoingSettings, *Pgoogle.golang.org/grpc/internal/transport.outgoingSettings;

struct google.golang.org/grpc/internal/transport.outgoingSettings {
    struct []golang.org/x/net/http2.Setting ss;
};

typedef struct hash<string,text/template/parse.itemType> hash<string,text/template/parse.itemType>, *Phash<string,text/template/parse.itemType>;

typedef struct bucket<string,text/template/parse.itemType> bucket<string,text/template/parse.itemType>, *Pbucket<string,text/template/parse.itemType>;

struct hash<string,text/template/parse.itemType> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,text/template/parse.itemType> *buckets;
    struct bucket<string,text/template/parse.itemType> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<string,text/template/parse.itemType> {
    uint8 tophash[8];
    struct string keys[8];
    text/template/parse.itemType values[8];
    struct bucket<string,text/template/parse.itemType> *overflow;
};

typedef struct google.golang.org/grpc/stats.OutTrailer google.golang.org/grpc/stats.OutTrailer, *Pgoogle.golang.org/grpc/stats.OutTrailer;

struct google.golang.org/grpc/stats.OutTrailer {
    bool Client;
    int WireLength;
    google.golang.org/grpc/metadata.MD Trailer;
};

typedef struct struct_{_runtime.cgocheck_int32;_runtime.clobberfree_int32;_runtime.disablethp_int32;_runtime.dontfreezetheworld_int32;_runtime.efence_int32;_runtime.gccheckmark_int32;_runtime.gcpacertrace_int32;_runtime.gcshrinkstackoff_int32;_runtime.gcstoptheworld_int32;_runtime.gctrace_int32;_runtime.invalidptr_int32;_runtime.madvdontneed_int32;_runtime.scavtrace_int32;_runtime.scheddetail_int32;_runtime.schedtrace_int32;_runtime.tracebackancestors_int32;_runtime.asyncpreemptoff_int32;_runtime.harddecommit_int32;_runtime.adaptivestackstart_int32;_runtime.tracefpunwindoff_int32;_runtime.malloc_bool;_runtime.allocfreetrace_int32;_runtime.inittrace_int32;_runtime.sbrk_int32;_runtime.panicnil_runtime/internal/atomic.Int32_} struct_{_runtime.cgocheck_int32;_runtime.clobberfree_int32;_runtime.disablethp_int32;_runtime.dontfreezetheworld_int32;_runtime.efence_int32;_runtime.gccheckmark_int32;_runtime.gcpacertrace_int32;_runtime.gcshrinkstackoff_int32;_runtime.gcstoptheworld_int32;_runtime.gctrace_int32;_runtime.invalidptr_int32;_runtime.madvdontneed_int32;_runtime.scavtrace_int32;_runtime.scheddetail_int32;_runtime.schedtrace_int32;_runtime.tracebackancestors_int32;_runtime.asyncpreemptoff_int32;_runtime.harddecommit_int32;_runtime.adaptivestackstart_int32;_runtime.tracefpunwindoff_int32;_runtime.malloc_bool;_runtime.allocfreetrace_int32;_runtime.inittrace_int32;_runtime.sbrk_int32;_runtime.panicnil_runtime/internal/atomic.Int32_}, *Pstruct_{_runtime.cgocheck_int32;_runtime.clobberfree_int32;_runtime.disablethp_int32;_runtime.dontfreezetheworld_int32;_runtime.efence_int32;_runtime.gccheckmark_int32;_runtime.gcpacertrace_int32;_runtime.gcshrinkstackoff_int32;_runtime.gcstoptheworld_int32;_runtime.gctrace_int32;_runtime.invalidptr_int32;_runtime.madvdontneed_int32;_runtime.scavtrace_int32;_runtime.scheddetail_int32;_runtime.schedtrace_int32;_runtime.tracebackancestors_int32;_runtime.asyncpreemptoff_int32;_runtime.harddecommit_int32;_runtime.adaptivestackstart_int32;_runtime.tracefpunwindoff_int32;_runtime.malloc_bool;_runtime.allocfreetrace_int32;_runtime.inittrace_int32;_runtime.sbrk_int32;_runtime.panicnil_runtime/internal/atomic.Int32_};

struct struct_{_runtime.cgocheck_int32;_runtime.clobberfree_int32;_runtime.disablethp_int32;_runtime.dontfreezetheworld_int32;_runtime.efence_int32;_runtime.gccheckmark_int32;_runtime.gcpacertrace_int32;_runtime.gcshrinkstackoff_int32;_runtime.gcstoptheworld_int32;_runtime.gctrace_int32;_runtime.invalidptr_int32;_runtime.madvdontneed_int32;_runtime.scavtrace_int32;_runtime.scheddetail_int32;_runtime.schedtrace_int32;_runtime.tracebackancestors_int32;_runtime.asyncpreemptoff_int32;_runtime.harddecommit_int32;_runtime.adaptivestackstart_int32;_runtime.tracefpunwindoff_int32;_runtime.malloc_bool;_runtime.allocfreetrace_int32;_runtime.inittrace_int32;_runtime.sbrk_int32;_runtime.panicnil_runtime/internal/atomic.Int32_} { // Original name: struct { runtime.cgocheck int32; runtime.clobberfree int32; runtime.disablethp int32; runtime.dontfreezetheworld int32; runtime.efence int32; runtime.gccheckmark int32; runtime.gcpacertrace int32; runtime.gcshrinkstackoff int32; runtime.gcstoptheworld int32; runtime.gctrace int32; runtime.invalidptr int32; runtime.madvdontneed int32; runtime.scavtrace int32; runtime.scheddetail int32; runtime.schedtrace int32; runtime.tracebackancestors int32; runtime.asyncpreemptoff int32; runtime.harddecommit int32; runtime.adaptivestackstart int32; runtime.tracefpunwindoff int32; runtime.malloc bool; runtime.allocfreetrace int32; runtime.inittrace int32; runtime.sbrk int32; runtime.panicnil runtime/internal/atomic.Int32 }
    int32 cgocheck;
    int32 clobberfree;
    int32 disablethp;
    int32 dontfreezetheworld;
    int32 efence;
    int32 gccheckmark;
    int32 gcpacertrace;
    int32 gcshrinkstackoff;
    int32 gcstoptheworld;
    int32 gctrace;
    int32 invalidptr;
    int32 madvdontneed;
    int32 scavtrace;
    int32 scheddetail;
    int32 schedtrace;
    int32 tracebackancestors;
    int32 asyncpreemptoff;
    int32 harddecommit;
    int32 adaptivestackstart;
    int32 tracefpunwindoff;
    bool malloc;
    int32 allocfreetrace;
    int32 inittrace;
    int32 sbrk;
    struct runtime/internal/atomic.Int32 panicnil;
};

typedef struct google.golang.org/grpc.pickfirstBuilder google.golang.org/grpc.pickfirstBuilder, *Pgoogle.golang.org/grpc.pickfirstBuilder;

struct google.golang.org/grpc.pickfirstBuilder {
};

typedef struct runtime.iface google.golang.org/grpc.DialOption;

typedef struct noalg.struct_{_F_uintptr;_X0_*net.UnixListener_} noalg.struct_{_F_uintptr;_X0_*net.UnixListener_}, *Pnoalg.struct_{_F_uintptr;_X0_*net.UnixListener_};

typedef struct net.UnixListener net.UnixListener, *Pnet.UnixListener;

typedef struct net.netFD net.netFD, *Pnet.netFD;

typedef struct internal/poll.FD internal/poll.FD, *Pinternal/poll.FD;

typedef struct internal/poll.fdMutex internal/poll.fdMutex, *Pinternal/poll.fdMutex;

typedef struct internal/poll.pollDesc internal/poll.pollDesc, *Pinternal/poll.pollDesc;

struct internal/poll.fdMutex {
    uint64 state;
    uint32 rsema;
    uint32 wsema;
};

struct internal/poll.pollDesc {
    uintptr runtimeCtx;
};

struct internal/poll.FD {
    struct internal/poll.fdMutex fdmu;
    int Sysfd;
    struct internal/poll.SysFile SysFile;
    struct internal/poll.pollDesc pd;
    uint32 csema;
    uint32 isBlocking;
    bool IsStream;
    bool ZeroReadIsEOF;
    bool isFile;
};

struct noalg.struct_{_F_uintptr;_X0_*net.UnixListener_} { // Original name: noalg.struct { F uintptr; X0 *net.UnixListener }
    uintptr F;
    struct net.UnixListener *X0;
};

struct net.netFD {
    struct internal/poll.FD pfd;
    int family;
    int sotype;
    bool isConnected;
    struct string net;
    net.Addr laddr;
    net.Addr raddr;
};

struct net.UnixListener {
    struct net.netFD *fd;
    struct string path;
    bool unlink;
    struct sync.Once unlinkOnce;
};

typedef struct internal/poll.errNetClosing internal/poll.errNetClosing, *Pinternal/poll.errNetClosing;

struct internal/poll.errNetClosing {
};

typedef struct noalg.struct_{_F_uintptr;_X0_*int;_X1_*string_} noalg.struct_{_F_uintptr;_X0_*int;_X1_*string_}, *Pnoalg.struct_{_F_uintptr;_X0_*int;_X1_*string_};

struct noalg.struct_{_F_uintptr;_X0_*int;_X1_*string_} { // Original name: noalg.struct { F uintptr; X0 *int; X1 *string }
    uintptr F;
    int *X0;
    struct string *X1;
};

typedef struct struct_{_net.laddr_net.TCPAddr;_net.value_int_} struct_{_net.laddr_net.TCPAddr;_net.value_int_}, *Pstruct_{_net.laddr_net.TCPAddr;_net.value_int_};

typedef struct net.TCPAddr net.TCPAddr, *Pnet.TCPAddr;

struct net.TCPAddr {
    struct net.IP IP;
    int Port;
    struct string Zone;
};

struct struct_{_net.laddr_net.TCPAddr;_net.value_int_} { // Original name: struct { net.laddr net.TCPAddr; net.value int }
    struct net.TCPAddr laddr;
    int value;
};

typedef struct noalg.map.bucket[string][]int noalg.map.bucket[string][]int, *Pnoalg.map.bucket[string][]int;

struct noalg.map.bucket[string][]int {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8][]int elems;
    void *overflow;
};

typedef struct bucket<string,map[string]string> bucket<string,map[string]string>, *Pbucket<string,map[string]string>;

struct bucket<string,map[string]string> {
    uint8 tophash[8];
    struct string keys[8];
    map[string]string values[8];
    struct bucket<string,map[string]string> *overflow;
};

typedef struct runtime/internal/atomic.Pointer[func(string,_string)] runtime/internal/atomic.Pointer[func(string,_string)], *Pruntime/internal/atomic.Pointer[func(string,_string)];

struct runtime/internal/atomic.Pointer[func(string,_string)] { // Original name: runtime/internal/atomic.Pointer[func(string, string)]
    struct runtime/internal/atomic.UnsafePointer u;
};

typedef struct runtime.hmap runtime.hmap, *Pruntime.hmap;

struct runtime.hmap {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    void *buckets;
    void *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct runtime.iface internal/bisect.Writer;

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.Converter;_X1_google.golang.org/protobuf/internal/impl.offset;_X2_reflect.StructField;_X3_reflect.Type_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.Converter;_X1_google.golang.org/protobuf/internal/impl.offset;_X2_reflect.StructField;_X3_reflect.Type_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.Converter;_X1_google.golang.org/protobuf/internal/impl.offset;_X2_reflect.StructField;_X3_reflect.Type_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.Converter;_X1_google.golang.org/protobuf/internal/impl.offset;_X2_reflect.StructField;_X3_reflect.Type_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/internal/impl.Converter; X1 google.golang.org/protobuf/internal/impl.offset; X2 reflect.StructField; X3 reflect.Type }
    uintptr F;
    google.golang.org/protobuf/internal/impl.Converter X0;
    google.golang.org/protobuf/internal/impl.offset X1;
    struct reflect.StructField X2;
    reflect.Type X3;
};

typedef struct hash<string,text/template/parse.itemType> *map[string]text/template/parse.itemType;

typedef struct []net/http.keyValues []net/http.keyValues, *P[]net/http.keyValues;

typedef struct net/http.keyValues net/http.keyValues, *Pnet/http.keyValues;

struct []net/http.keyValues {
    struct net/http.keyValues *array;
    int len;
    int cap;
};

struct net/http.keyValues {
    struct string key;
    struct []string values;
};

typedef struct []io/fs.DirEntry []io/fs.DirEntry, *P[]io/fs.DirEntry;

typedef struct runtime.iface io/fs.DirEntry;

struct []io/fs.DirEntry {
    io/fs.DirEntry *array;
    int len;
    int cap;
};

typedef struct vendor/golang.org/x/text/unicode/norm.nfkcTrie vendor/golang.org/x/text/unicode/norm.nfkcTrie, *Pvendor/golang.org/x/text/unicode/norm.nfkcTrie;

struct vendor/golang.org/x/text/unicode/norm.nfkcTrie {
};

typedef struct []vendor/golang.org/x/net/dns/dnsmessage.Type []vendor/golang.org/x/net/dns/dnsmessage.Type, *P[]vendor/golang.org/x/net/dns/dnsmessage.Type;

struct []vendor/golang.org/x/net/dns/dnsmessage.Type {
    vendor/golang.org/x/net/dns/dnsmessage.Type *array;
    int len;
    int cap;
};

typedef struct strings.appendSliceWriter strings.appendSliceWriter, *Pstrings.appendSliceWriter;

struct strings.appendSliceWriter {
    uint8 *array;
    int len;
    int cap;
};

typedef struct runtime.iface interface_{_PollFD()_*internal/poll.FD_};

typedef struct net.result[[]net.IPAddr].1 net.result[[]net.IPAddr].1, *Pnet.result[[]net.IPAddr].1;

typedef struct []net.IPAddr []net.IPAddr, *P[]net.IPAddr;

struct []net.IPAddr {
    struct net.IPAddr *array;
    int len;
    int cap;
};

struct net.result[[]net.IPAddr].1 { // Original name: net.result[[]net.IPAddr]·1
    struct []net.IPAddr res;
    error err;
};

typedef struct google.golang.org/protobuf/internal/impl.float64Converter google.golang.org/protobuf/internal/impl.float64Converter, *Pgoogle.golang.org/protobuf/internal/impl.float64Converter;

struct google.golang.org/protobuf/internal/impl.float64Converter {
    reflect.Type goType;
    struct google.golang.org/protobuf/reflect/protoreflect.Value def;
};

typedef struct golang.org/x/net/http2.duplicatePseudoHeaderError golang.org/x/net/http2.duplicatePseudoHeaderError, *Pgolang.org/x/net/http2.duplicatePseudoHeaderError;

struct golang.org/x/net/http2.duplicatePseudoHeaderError {
    uint8 *str;
    int len;
};

typedef struct waitq<bool> waitq<bool>, *Pwaitq<bool>;

typedef struct sudog<bool> sudog<bool>, *Psudog<bool>;

struct waitq<bool> {
    struct sudog<bool> *first;
    struct sudog<bool> *last;
};

struct sudog<bool> {
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    bool *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

typedef struct google.golang.org/protobuf/internal/impl.aberrantMessage google.golang.org/protobuf/internal/impl.aberrantMessage, *Pgoogle.golang.org/protobuf/internal/impl.aberrantMessage;

struct google.golang.org/protobuf/internal/impl.aberrantMessage {
    struct reflect.Value v;
};

typedef struct encoding/asn1.multiEncoder encoding/asn1.multiEncoder, *Pencoding/asn1.multiEncoder;

typedef struct runtime.iface encoding/asn1.encoder;

struct encoding/asn1.multiEncoder {
    encoding/asn1.encoder *array;
    int len;
    int cap;
};

typedef struct google.golang.org/protobuf/encoding/protojson.unpopulatedFieldRanger google.golang.org/protobuf/encoding/protojson.unpopulatedFieldRanger, *Pgoogle.golang.org/protobuf/encoding/protojson.unpopulatedFieldRanger;

struct google.golang.org/protobuf/encoding/protojson.unpopulatedFieldRanger {
    google.golang.org/protobuf/reflect/protoreflect.Message Message;
    bool skipNull;
};

typedef struct noalg.map.hdr[google.golang.org/grpc/internal/grpcsync.Subscriber]bool noalg.map.hdr[google.golang.org/grpc/internal/grpcsync.Subscriber]bool, *Pnoalg.map.hdr[google.golang.org/grpc/internal/grpcsync.Subscriber]bool;

typedef struct noalg.map.bucket[google.golang.org/grpc/internal/grpcsync.Subscriber]bool noalg.map.bucket[google.golang.org/grpc/internal/grpcsync.Subscriber]bool, *Pnoalg.map.bucket[google.golang.org/grpc/internal/grpcsync.Subscriber]bool;

struct noalg.map.hdr[google.golang.org/grpc/internal/grpcsync.Subscriber]bool {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[google.golang.org/grpc/internal/grpcsync.Subscriber]bool *buckets;
    struct noalg.map.bucket[google.golang.org/grpc/internal/grpcsync.Subscriber]bool *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.bucket[google.golang.org/grpc/internal/grpcsync.Subscriber]bool {
    uint8 topbits[8];
    noalg.[8]google.golang.org/grpc/internal/grpcsync.Subscriber keys;
    noalg.[8]bool elems;
    void *overflow;
};

typedef google.golang.org/grpc/internal/grpcsync.Subscriber noalg.[8]google.golang.org/grpc/internal/grpcsync.Subscriber[8];

typedef struct bucket<string,*golang.org/x/net/trace.traceSet> bucket<string,*golang.org/x/net/trace.traceSet>, *Pbucket<string,*golang.org/x/net/trace.traceSet>;

struct bucket<string,*golang.org/x/net/trace.traceSet> {
    uint8 tophash[8];
    struct string keys[8];
    struct golang.org/x/net/trace.traceSet *values[8];
    struct bucket<string,*golang.org/x/net/trace.traceSet> *overflow;
};

typedef struct noalg.map.hdr[int32]google.golang.org/protobuf/internal/impl.ExtensionField noalg.map.hdr[int32]google.golang.org/protobuf/internal/impl.ExtensionField, *Pnoalg.map.hdr[int32]google.golang.org/protobuf/internal/impl.ExtensionField;

typedef struct noalg.map.bucket[int32]google.golang.org/protobuf/internal/impl.ExtensionField noalg.map.bucket[int32]google.golang.org/protobuf/internal/impl.ExtensionField, *Pnoalg.map.bucket[int32]google.golang.org/protobuf/internal/impl.ExtensionField;

typedef int32 noalg.[8]int32[8];

struct noalg.map.bucket[int32]google.golang.org/protobuf/internal/impl.ExtensionField {
    uint8 topbits[8];
    noalg.[8]int32 keys;
    noalg.[8]google.golang.org/protobuf/internal/impl.ExtensionField elems;
    void *overflow;
};

struct noalg.map.hdr[int32]google.golang.org/protobuf/internal/impl.ExtensionField {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[int32]google.golang.org/protobuf/internal/impl.ExtensionField *buckets;
    struct noalg.map.bucket[int32]google.golang.org/protobuf/internal/impl.ExtensionField *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct google.golang.org/protobuf/internal/impl.ExtensionField noalg.[8]google.golang.org/protobuf/internal/impl.ExtensionField[8];

typedef struct bucket<string,[2]int32> bucket<string,[2]int32>, *Pbucket<string,[2]int32>;

struct bucket<string,[2]int32> {
    uint8 tophash[8];
    struct string keys[8];
    int32 values[8][2];
    struct bucket<string,[2]int32> *overflow;
};

typedef struct []google.golang.org/grpc/metadata.MD []google.golang.org/grpc/metadata.MD, *P[]google.golang.org/grpc/metadata.MD;

struct []google.golang.org/grpc/metadata.MD {
    google.golang.org/grpc/metadata.MD *array;
    int len;
    int cap;
};

typedef struct google.golang.org/grpc/internal/transport.NewStreamError google.golang.org/grpc/internal/transport.NewStreamError, *Pgoogle.golang.org/grpc/internal/transport.NewStreamError;

struct google.golang.org/grpc/internal/transport.NewStreamError {
    error Err;
    bool AllowTransparentRetry;
};

typedef struct google.golang.org/grpc/internal/resolver/dns.deadResolver google.golang.org/grpc/internal/resolver/dns.deadResolver, *Pgoogle.golang.org/grpc/internal/resolver/dns.deadResolver;

struct google.golang.org/grpc/internal/resolver/dns.deadResolver {
};

typedef struct regexp.queueOnePass regexp.queueOnePass, *Pregexp.queueOnePass;

struct regexp.queueOnePass {
    struct []uint32 sparse;
    struct []uint32 dense;
    uint32 size;
    uint32 nextIndex;
};

typedef struct struct_{_reflect.b_bool;_reflect.x_interface_{}_} struct_{_reflect.b_bool;_reflect.x_interface_{}_}, *Pstruct_{_reflect.b_bool;_reflect.x_interface_{}_};

struct struct_{_reflect.b_bool;_reflect.x_interface_{}_} { // Original name: struct { reflect.b bool; reflect.x interface {} }
    bool b;
    interface_{} x;
};

typedef struct crypto/internal/edwards25519.projCached crypto/internal/edwards25519.projCached, *Pcrypto/internal/edwards25519.projCached;

struct crypto/internal/edwards25519.projCached {
    struct crypto/internal/edwards25519/field.Element YplusX;
    struct crypto/internal/edwards25519/field.Element YminusX;
    struct crypto/internal/edwards25519/field.Element Z;
    struct crypto/internal/edwards25519/field.Element T2d;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Server;_X1_golang.org/x/net/http2.Setting_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Server;_X1_golang.org/x/net/http2.Setting_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Server;_X1_golang.org/x/net/http2.Setting_};

typedef struct google.golang.org/grpc/internal/transport.http2Server google.golang.org/grpc/internal/transport.http2Server, *Pgoogle.golang.org/grpc/internal/transport.http2Server;

typedef struct google.golang.org/grpc/peer.Peer google.golang.org/grpc/peer.Peer, *Pgoogle.golang.org/grpc/peer.Peer;

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Server;_X1_golang.org/x/net/http2.Setting_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc/internal/transport.http2Server; X1 golang.org/x/net/http2.Setting }
    uintptr F;
    struct google.golang.org/grpc/internal/transport.http2Server *X0;
    struct golang.org/x/net/http2.Setting X1;
};

struct google.golang.org/grpc/peer.Peer {
    net.Addr Addr;
    net.Addr LocalAddr;
    google.golang.org/grpc/credentials.AuthInfo AuthInfo;
};

struct google.golang.org/grpc/internal/transport.http2Server {
    int64 lastRead;
    chan_struct_{} done;
    net.Conn conn;
    struct google.golang.org/grpc/internal/transport.loopyWriter *loopy;
    chan_struct_{} readerDone;
    chan_struct_{} loopyWriterDone;
    struct google.golang.org/grpc/peer.Peer peer;
    void (**inTapHandle)(context.Context, struct google.golang.org/grpc/tap.Info *, context.Context *, error *);
    struct google.golang.org/grpc/internal/transport.framer *framer;
    uint32 maxStreams;
    struct google.golang.org/grpc/internal/transport.controlBuffer *controlBuf;
    struct google.golang.org/grpc/internal/transport.trInFlow *fc;
    struct []google.golang.org/grpc/stats.Handler stats;
    struct google.golang.org/grpc/keepalive.ServerParameters kp;
    struct google.golang.org/grpc/keepalive.EnforcementPolicy kep;
    struct time.Time lastPingAt;
    uint8 pingStrikes;
    uint32 resetPingStrikes;
    int32 initialWindowSize;
    struct google.golang.org/grpc/internal/transport.bdpEstimator *bdpEst;
    uint32 *maxSendHeaderListSize;
    struct sync.Mutex mu;
    struct google.golang.org/grpc/internal/grpcsync.Event *drainEvent;
    google.golang.org/grpc/internal/transport.transportState state;
    map[uint32]*google.golang.org/grpc/internal/transport.Stream activeStreams;
    struct time.Time idle;
    struct google.golang.org/grpc/internal/channelz.Socket *channelz;
    struct google.golang.org/grpc/internal/transport.bufferPool *bufferPool;
    uint64 connectionID;
    struct sync.Mutex maxStreamMu;
    uint32 maxStreamID;
    struct google.golang.org/grpc/internal/grpclog.PrefixLogger *logger;
};

typedef struct hash<golang.org/x/net/http2.FrameType,string> hash<golang.org/x/net/http2.FrameType,string>, *Phash<golang.org/x/net/http2.FrameType,string>;

typedef struct hash<golang.org/x/net/http2.FrameType,string> *map[golang.org/x/net/http2.FrameType]string;

typedef struct bucket<golang.org/x/net/http2.FrameType,string> bucket<golang.org/x/net/http2.FrameType,string>, *Pbucket<golang.org/x/net/http2.FrameType,string>;

struct hash<golang.org/x/net/http2.FrameType,string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<golang.org/x/net/http2.FrameType,string> *buckets;
    struct bucket<golang.org/x/net/http2.FrameType,string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<golang.org/x/net/http2.FrameType,string> {
    uint8 tophash[8];
    golang.org/x/net/http2.FrameType keys[8];
    struct string values[8];
    struct bucket<golang.org/x/net/http2.FrameType,string> *overflow;
};

typedef struct vendor/golang.org/x/net/dns/dnsmessage.SRVResource vendor/golang.org/x/net/dns/dnsmessage.SRVResource, *Pvendor/golang.org/x/net/dns/dnsmessage.SRVResource;

struct vendor/golang.org/x/net/dns/dnsmessage.SRVResource {
    uint16 Priority;
    uint16 Weight;
    uint16 Port;
    struct vendor/golang.org/x/net/dns/dnsmessage.Name Target;
};

typedef struct hash<int32,string> hash<int32,string>, *Phash<int32,string>;

struct hash<int32,string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<int32,string> *buckets;
    struct bucket<int32,string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct auth/auth_grpc.RegisterOTPSeedResponse auth/auth_grpc.RegisterOTPSeedResponse, *Pauth/auth_grpc.RegisterOTPSeedResponse;

struct auth/auth_grpc.RegisterOTPSeedResponse {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    bool Success;
};

typedef struct runtime.memRecord runtime.memRecord, *Pruntime.memRecord;

typedef struct runtime.memRecordCycle runtime.memRecordCycle, *Pruntime.memRecordCycle;

struct runtime.memRecordCycle {
    uintptr allocs;
    uintptr frees;
    uintptr alloc_bytes;
    uintptr free_bytes;
};

struct runtime.memRecord {
    struct runtime.memRecordCycle active;
    struct runtime.memRecordCycle future[3];
};

typedef struct net.DNSError net.DNSError, *Pnet.DNSError;

struct net.DNSError {
    struct string Err;
    struct string Name;
    struct string Server;
    bool IsTimeout;
    bool IsTemporary;
    bool IsNotFound;
};

typedef struct google.golang.org/grpc.listenSocket google.golang.org/grpc.listenSocket, *Pgoogle.golang.org/grpc.listenSocket;

struct google.golang.org/grpc.listenSocket {
    net.Listener Listener;
    struct google.golang.org/grpc/internal/channelz.Socket *channelz;
};

typedef struct strconv.decimal strconv.decimal, *Pstrconv.decimal;

struct strconv.decimal {
    uint8 d[800];
    int nd;
    int dp;
    bool neg;
    bool trunc;
};

typedef struct net.byPriorityWeight net.byPriorityWeight, *Pnet.byPriorityWeight;

struct net.byPriorityWeight {
    struct net.SRV **array;
    int len;
    int cap;
};

typedef struct google.golang.org/protobuf/internal/impl.placeholderEnumValues google.golang.org/protobuf/internal/impl.placeholderEnumValues, *Pgoogle.golang.org/protobuf/internal/impl.placeholderEnumValues;

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.EnumValueDescriptors;

struct google.golang.org/protobuf/internal/impl.placeholderEnumValues {
    google.golang.org/protobuf/reflect/protoreflect.EnumValueDescriptors EnumValueDescriptors;
};

typedef struct runtime.eface crypto.PublicKey;

typedef struct noalg.struct_{_F_uintptr;_X0_**runtime.mcache_} noalg.struct_{_F_uintptr;_X0_**runtime.mcache_}, *Pnoalg.struct_{_F_uintptr;_X0_**runtime.mcache_};

struct noalg.struct_{_F_uintptr;_X0_**runtime.mcache_} { // Original name: noalg.struct { F uintptr; X0 **runtime.mcache }
    uintptr F;
    struct runtime.mcache **X0;
};

typedef struct noalg.map.bucket[string]*golang.org/x/net/trace.traceSet noalg.map.bucket[string]*golang.org/x/net/trace.traceSet, *Pnoalg.map.bucket[string]*golang.org/x/net/trace.traceSet;

struct noalg.map.bucket[string]*golang.org/x/net/trace.traceSet {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8]*golang.org/x/net/trace.traceSet elems;
    void *overflow;
};

typedef struct runtime.debugCallWrapArgs runtime.debugCallWrapArgs, *Pruntime.debugCallWrapArgs;

struct runtime.debugCallWrapArgs {
    uintptr dispatch;
    struct runtime.g *callingG;
};

typedef struct runtime/internal/atomic.Pointer[func(string)_func()] runtime/internal/atomic.Pointer[func(string)_func()], *Pruntime/internal/atomic.Pointer[func(string)_func()];

struct runtime/internal/atomic.Pointer[func(string)_func()] { // Original name: runtime/internal/atomic.Pointer[func(string) func()]
    struct runtime/internal/atomic.UnsafePointer u;
};

typedef struct struct_{_Families_[]string;_Buckets_[]golang.org/x/net/trace.bucket;_Counts_[][]int;_Family_string;_Bucket_int;_EventLogs_golang.org/x/net/trace.eventLogs;_Expanded_bool_} struct_{_Families_[]string;_Buckets_[]golang.org/x/net/trace.bucket;_Counts_[][]int;_Family_string;_Bucket_int;_EventLogs_golang.org/x/net/trace.eventLogs;_Expanded_bool_}, *Pstruct_{_Families_[]string;_Buckets_[]golang.org/x/net/trace.bucket;_Counts_[][]int;_Family_string;_Bucket_int;_EventLogs_golang.org/x/net/trace.eventLogs;_Expanded_bool_};

typedef struct []golang.org/x/net/trace.bucket []golang.org/x/net/trace.bucket, *P[]golang.org/x/net/trace.bucket;

typedef struct golang.org/x/net/trace.bucket golang.org/x/net/trace.bucket, *Pgolang.org/x/net/trace.bucket;

struct []golang.org/x/net/trace.bucket {
    struct golang.org/x/net/trace.bucket *array;
    int len;
    int cap;
};

struct struct_{_Families_[]string;_Buckets_[]golang.org/x/net/trace.bucket;_Counts_[][]int;_Family_string;_Bucket_int;_EventLogs_golang.org/x/net/trace.eventLogs;_Expanded_bool_} { // Original name: struct { Families []string; Buckets []golang.org/x/net/trace.bucket; Counts [][]int; Family string; Bucket int; EventLogs golang.org/x/net/trace.eventLogs; Expanded bool }
    struct []string Families;
    struct []golang.org/x/net/trace.bucket Buckets;
    struct [][]int Counts;
    struct string Family;
    int Bucket;
    struct golang.org/x/net/trace.eventLogs EventLogs;
    bool Expanded;
};

struct golang.org/x/net/trace.bucket {
    time.Duration MaxErrAge;
    struct string String;
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_google.golang.org/protobuf/reflect/protoreflect.OneofDescriptor_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_google.golang.org/protobuf/reflect/protoreflect.OneofDescriptor_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_google.golang.org/protobuf/reflect/protoreflect.OneofDescriptor_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_google.golang.org/protobuf/reflect/protoreflect.OneofDescriptor_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/internal/impl.offset; X1 reflect.StructField; X2 google.golang.org/protobuf/reflect/protoreflect.OneofDescriptor }
    uintptr F;
    google.golang.org/protobuf/internal/impl.offset X0;
    struct reflect.StructField X1;
    google.golang.org/protobuf/reflect/protoreflect.OneofDescriptor X2;
};

typedef struct google.golang.org/grpc.pickfirstBalancer google.golang.org/grpc.pickfirstBalancer, *Pgoogle.golang.org/grpc.pickfirstBalancer;

struct google.golang.org/grpc.pickfirstBalancer {
    struct google.golang.org/grpc/internal/grpclog.PrefixLogger *logger;
    google.golang.org/grpc/connectivity.State state;
    google.golang.org/grpc/balancer.ClientConn cc;
    google.golang.org/grpc/balancer.SubConn subConn;
};

typedef struct go.shape.struct_{_runtime.lfnode;_runtime.popped_runtime/internal/atomic.Uint32;_runtime.spans_[512]runtime.atomicMSpanPointer_} go.shape.struct_{_runtime.lfnode;_runtime.popped_runtime/internal/atomic.Uint32;_runtime.spans_[512]runtime.atomicMSpanPointer_}, *Pgo.shape.struct_{_runtime.lfnode;_runtime.popped_runtime/internal/atomic.Uint32;_runtime.spans_[512]runtime.atomicMSpanPointer_};

typedef struct runtime.atomicMSpanPointer runtime.atomicMSpanPointer, *Pruntime.atomicMSpanPointer;

struct runtime.atomicMSpanPointer {
    struct runtime/internal/atomic.UnsafePointer p;
};

struct go.shape.struct_{_runtime.lfnode;_runtime.popped_runtime/internal/atomic.Uint32;_runtime.spans_[512]runtime.atomicMSpanPointer_} { // Original name: go.shape.struct { runtime.lfnode; runtime.popped runtime/internal/atomic.Uint32; runtime.spans [512]runtime.atomicMSpanPointer }
    struct runtime.lfnode lfnode;
    struct runtime/internal/atomic.Uint32 popped;
    struct runtime.atomicMSpanPointer spans[512];
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.p_} noalg.struct_{_F_uintptr;_X0_*runtime.p_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.p_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.p_} { // Original name: noalg.struct { F uintptr; X0 *runtime.p }
    uintptr F;
    struct runtime.p *X0;
};

typedef struct runtime.pinState runtime.pinState, *Pruntime.pinState;

struct runtime.pinState {
    uint8 *bytep;
    uint8 byteVal;
    uint8 mask;
};

typedef struct flag.FlagSet flag.FlagSet, *Pflag.FlagSet;

struct flag.FlagSet {
    void (**Usage)(void);
    struct string name;
    bool parsed;
    map[string]*flag.Flag actual;
    map[string]*flag.Flag formal;
    struct []string args;
    flag.ErrorHandling errorHandling;
    io.Writer output;
    map[string]string undef;
};

typedef struct crypto/x509.ConstraintViolationError crypto/x509.ConstraintViolationError, *Pcrypto/x509.ConstraintViolationError;

struct crypto/x509.ConstraintViolationError {
};

typedef struct syscall.NlMsghdr syscall.NlMsghdr, *Psyscall.NlMsghdr;

struct syscall.NlMsghdr {
    uint32 Len;
    uint16 Type;
    uint16 Flags;
    uint32 Seq;
    uint32 Pid;
};

typedef struct bufio.Writer bufio.Writer, *Pbufio.Writer;

struct bufio.Writer {
    error err;
    struct []uint8 buf;
    int n;
    io.Writer wr;
};

typedef struct hash<net.hostLookupOrder,string> hash<net.hostLookupOrder,string>, *Phash<net.hostLookupOrder,string>;

typedef struct bucket<net.hostLookupOrder,string> bucket<net.hostLookupOrder,string>, *Pbucket<net.hostLookupOrder,string>;

struct bucket<net.hostLookupOrder,string> {
    uint8 tophash[8];
    net.hostLookupOrder keys[8];
    struct string values[8];
    struct bucket<net.hostLookupOrder,string> *overflow;
};

struct hash<net.hostLookupOrder,string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<net.hostLookupOrder,string> *buckets;
    struct bucket<net.hostLookupOrder,string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct bucket<string,*golang.org/x/net/trace.eventFamily> bucket<string,*golang.org/x/net/trace.eventFamily>, *Pbucket<string,*golang.org/x/net/trace.eventFamily>;

struct bucket<string,*golang.org/x/net/trace.eventFamily> {
    uint8 tophash[8];
    struct string keys[8];
    struct golang.org/x/net/trace.eventFamily *values[8];
    struct bucket<string,*golang.org/x/net/trace.eventFamily> *overflow;
};

typedef struct runtime/internal/atomic.Pointer[go.shape.func(string,_string)] runtime/internal/atomic.Pointer[go.shape.func(string,_string)], *Pruntime/internal/atomic.Pointer[go.shape.func(string,_string)];

struct runtime/internal/atomic.Pointer[go.shape.func(string,_string)] { // Original name: runtime/internal/atomic.Pointer[go.shape.func(string, string)]
    struct runtime/internal/atomic.UnsafePointer u;
};

typedef struct text/template/parse.IfNode text/template/parse.IfNode, *Ptext/template/parse.IfNode;

struct text/template/parse.IfNode {
    struct text/template/parse.BranchNode BranchNode;
};

typedef struct net.Resolver net.Resolver, *Pnet.Resolver;

typedef struct internal/singleflight.Group internal/singleflight.Group, *Pinternal/singleflight.Group;

typedef struct hash<string,*internal/singleflight.call> hash<string,*internal/singleflight.call>, *Phash<string,*internal/singleflight.call>;

typedef struct hash<string,*internal/singleflight.call> *map[string]*internal/singleflight.call;

typedef struct bucket<string,*internal/singleflight.call> bucket<string,*internal/singleflight.call>, *Pbucket<string,*internal/singleflight.call>;

typedef struct internal/singleflight.call internal/singleflight.call, *Pinternal/singleflight.call;

typedef struct []chan<-_internal/singleflight.Result []chan<-_internal/singleflight.Result, *P[]chan<-_internal/singleflight.Result;

typedef struct hchan<internal/singleflight.Result> hchan<internal/singleflight.Result>, *Phchan<internal/singleflight.Result>;

typedef struct hchan<internal/singleflight.Result> *chan<-_internal/singleflight.Result;

typedef struct waitq<internal/singleflight.Result> waitq<internal/singleflight.Result>, *Pwaitq<internal/singleflight.Result>;

typedef struct sudog<internal/singleflight.Result> sudog<internal/singleflight.Result>, *Psudog<internal/singleflight.Result>;

typedef struct internal/singleflight.Result internal/singleflight.Result, *Pinternal/singleflight.Result;

struct bucket<string,*internal/singleflight.call> {
    uint8 tophash[8];
    struct string keys[8];
    struct internal/singleflight.call *values[8];
    struct bucket<string,*internal/singleflight.call> *overflow;
};

struct hash<string,*internal/singleflight.call> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,*internal/singleflight.call> *buckets;
    struct bucket<string,*internal/singleflight.call> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct sudog<internal/singleflight.Result> {
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    struct internal/singleflight.Result *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

struct waitq<internal/singleflight.Result> {
    struct sudog<internal/singleflight.Result> *first;
    struct sudog<internal/singleflight.Result> *last;
};

struct []chan<-_internal/singleflight.Result { // Original name: []chan<- internal/singleflight.Result
    chan<-_internal/singleflight.Result *array;
    int len;
