  ~r0_03.addr = in_stack_ffffffffffffffd8;
  DAT_00c51768 = piVar8;
  net_netip_AddrFrom16((uint8  [16])ZEXT816(0x220),~r0_03);
  if (extraout_RCX_07 == net_netip_z0) {
LAB_00606af9:
    DAT_00c51798 = 0;
  }
  else {
    uVar10 = 0x80;
    if (net_netip_z4 == extraout_RCX_07) {
      uVar10 = 0x20;
    }
    if (uVar10 < 0x10) goto LAB_00606af9;
    DAT_00c51798 = 0x11;
  }
  piVar8 = extraout_RCX_07;
  if ((extraout_RCX_07 != net_netip_z0) &&
     (piVar8 = extraout_RCX_07, net_netip_z4 != extraout_RCX_07)) {
    piVar8 = net_netip_z6noz;
  }
  _DAT_00c51780 = extraout_RAX_03;
  _DAT_00c51788 = extraout_RBX_03;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_03 = extraout_RCX_08;
    extraout_R11_03[1] = DAT_00c51790;
    piVar8 = extraout_RCX_08;
  }
  ~r0_04.z = in_stack_ffffffffffffffe8;
  ~r0_04.addr = in_stack_ffffffffffffffd8;
  DAT_00c51790 = piVar8;
  net_netip_AddrFrom16((uint8  [16])ZEXT816(0xfe3f),~r0_04);
  if (extraout_RCX_09 == net_netip_z0) {
LAB_00606b99:
    DAT_00c517c0 = 0;
  }
  else {
    uVar10 = 0x80;
    if (net_netip_z4 == extraout_RCX_09) {
      uVar10 = 0x20;
    }
    if (uVar10 < 0x10) goto LAB_00606b99;
    DAT_00c517c0 = 0x11;
  }
  piVar8 = extraout_RCX_09;
  if ((extraout_RCX_09 != net_netip_z0) &&
     (piVar8 = extraout_RCX_09, net_netip_z4 != extraout_RCX_09)) {
    piVar8 = net_netip_z6noz;
  }
  _DAT_00c517a8 = extraout_RAX_04;
  _DAT_00c517b0 = extraout_RBX_04;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_04 = extraout_RCX_10;
    extraout_R11_04[1] = DAT_00c517b8;
    piVar8 = extraout_RCX_10;
  }
  ~r0_05.z = in_stack_ffffffffffffffe8;
  ~r0_05.addr = in_stack_ffffffffffffffd8;
  DAT_00c517b8 = piVar8;
  net_netip_AddrFrom16((uint8  [16])ZEXT816(0xc0fe),~r0_05);
  if (extraout_RCX_11 == net_netip_z0) {
LAB_00606c39:
    DAT_00c517e8 = 0;
  }
  else {
    uVar10 = 0x80;
    if (net_netip_z4 == extraout_RCX_11) {
      uVar10 = 0x20;
    }
    if (uVar10 < 10) goto LAB_00606c39;
    DAT_00c517e8 = 0xb;
  }
  piVar8 = extraout_RCX_11;
  if ((extraout_RCX_11 != net_netip_z0) &&
     (piVar8 = extraout_RCX_11, net_netip_z4 != extraout_RCX_11)) {
    piVar8 = net_netip_z6noz;
  }
  _DAT_00c517d0 = extraout_RAX_05;
  _DAT_00c517d8 = extraout_RBX_05;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_05 = extraout_RCX_12;
    extraout_R11_05[1] = DAT_00c517e0;
    piVar8 = extraout_RCX_12;
  }
  ~r0_06.z = in_stack_ffffffffffffffe8;
  ~r0_06.addr = in_stack_ffffffffffffffd8;
  DAT_00c517e0 = piVar8;
  net_netip_AddrFrom16((uint8  [16])ZEXT816(0xfc),~r0_06);
  if (extraout_RCX_13 != net_netip_z0) {
    uVar10 = 0x80;
    if (net_netip_z4 == extraout_RCX_13) {
      uVar10 = 0x20;
    }
    if (6 < uVar10) {
      DAT_00c51810 = 8;
      goto code_r0x00606ce0;
    }
  }
  DAT_00c51810 = 0;
code_r0x00606ce0:
  piVar8 = extraout_RCX_13;
  if ((extraout_RCX_13 != net_netip_z0) &&
     (piVar8 = extraout_RCX_13, net_netip_z4 != extraout_RCX_13)) {
    piVar8 = net_netip_z6noz;
  }
  _DAT_00c517f8 = extraout_RAX_06;
  _DAT_00c51800 = extraout_RBX_06;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_06 = extraout_RCX_14;
    extraout_R11_06[1] = DAT_00c51808;
    piVar8 = extraout_RCX_14;
  }
  ~r0_07.z = in_stack_ffffffffffffffe8;
  ~r0_07.addr = in_stack_ffffffffffffffd8;
  DAT_00c51808 = piVar8;
  net_netip_AddrFrom16((uint8  [16])in_XMM15,~r0_07);
  DAT_00c51838 = extraout_RCX_15 != net_netip_z0;
  piVar8 = extraout_RCX_15;
  if (((bool)DAT_00c51838) && (piVar8 = extraout_RCX_15, net_netip_z4 != extraout_RCX_15)) {
    piVar8 = net_netip_z6noz;
  }
  prVar6 = extraout_RAX_07;
  _DAT_00c51820 = extraout_RAX_07;
  _DAT_00c51828 = extraout_RBX_07;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_07 = extraout_RCX_16;
    extraout_R11_07[1] = (internal_intern_Value *)DAT_00c51830;
    prVar6 = DAT_00c51830;
    piVar8 = extraout_RCX_16;
  }
  DAT_00c51830 = (runtime_hmap *)piVar8;
  runtime_makemap_small(prVar6);
  runtime_mapassign_fast64((internal_abi_MapType *)&DAT_0082c6e0,(runtime_hmap *)h,0,~r0_08);
  extraout_RAX_08[1] = 3;
  puVar1 = extraout_RAX_08;
  pvVar11 = extraout_RDI;
  if (runtime_writeBarrier._0_4_ != 0) {
    uVar9 = *extraout_RAX_08;
    runtime_gcWriteBarrier1();
    *extraout_R11_08 = uVar9;
    puVar1 = extraout_RAX_09;
    pvVar11 = extraout_RDI_00;
  }
  *puVar1 = &DAT_008ae339;
  runtime_mapassign_fast64((internal_abi_MapType *)&DAT_0082c6e0,(runtime_hmap *)h,1,pvVar11);
  extraout_RAX_10[1] = 9;
  puVar1 = extraout_RAX_10;
  pvVar11 = extraout_RDI_01;
  if (runtime_writeBarrier._0_4_ != 0) {
    uVar9 = *extraout_RAX_10;
    runtime_gcWriteBarrier1();
    *extraout_R11_09 = uVar9;
    puVar1 = extraout_RAX_11;
    pvVar11 = extraout_RDI_02;
  }
  *puVar1 = &DAT_008b261b;
  runtime_mapassign_fast64((internal_abi_MapType *)&DAT_0082c6e0,(runtime_hmap *)h,2,pvVar11);
  extraout_RAX_12[1] = 9;
  puVar1 = extraout_RAX_12;
  pvVar11 = extraout_RDI_03;
  if (runtime_writeBarrier._0_4_ != 0) {
    uVar9 = *extraout_RAX_12;
    runtime_gcWriteBarrier1();
    *extraout_R11_10 = uVar9;
    puVar1 = extraout_RAX_13;
    pvVar11 = extraout_RDI_04;
  }
  *puVar1 = &DAT_008b2624;
  runtime_mapassign_fast64((internal_abi_MapType *)&DAT_0082c6e0,(runtime_hmap *)h,3,pvVar11);
  extraout_RAX_14[1] = 5;
  puVar1 = extraout_RAX_14;
  pvVar11 = extraout_RDI_05;
  if (runtime_writeBarrier._0_4_ != 0) {
    uVar9 = *extraout_RAX_14;
    runtime_gcWriteBarrier1();
    *extraout_R11_11 = uVar9;
    puVar1 = extraout_RAX_15;
    pvVar11 = extraout_RDI_06;
  }
  *puVar1 = &DAT_008aeceb;
  runtime_mapassign_fast64((internal_abi_MapType *)&DAT_0082c6e0,(runtime_hmap *)h,4,pvVar11);
  extraout_RAX_16->flags = 3;
  extraout_RAX_16->B = 0;
  extraout_RAX_16->noverflow = 0;
  extraout_RAX_16->hash0 = 0;
  prVar6 = extraout_RAX_16;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier3();
    *extraout_R11_12 = extraout_RCX_17;
    extraout_R11_12[1] = h;
    extraout_R11_12[2] = net_lookupOrderName;
    prVar6 = extraout_RAX_17;
  }
  prVar6->count = (int)&DAT_008ae2d6;
  net_lookupOrderName = h;
  runtime_makemap_small(prVar6);
  phVar2 = extraout_RAX_18;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_13 = extraout_RAX_19;
    extraout_R11_13[1] = net_zoneCache.toIndex;
    phVar2 = extraout_RAX_19;
  }
  net_zoneCache.toIndex = phVar2;
  runtime_makemap_small((runtime_hmap *)phVar2);
  phVar3 = extraout_RAX_20;
  pvVar11 = extraout_RSI;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_14 = extraout_RAX_21;
    extraout_R11_14[1] = net_zoneCache.toName;
    phVar3 = extraout_RAX_21;
    pvVar11 = extraout_RSI_00;
  }
  net_zoneCache.toName = phVar3;
  runtime_makeslicecopy
            ((internal_abi_Type *)&DAT_00807920,0x10,net_v4InV6Prefix.len,net_v4InV6Prefix.array,
             pvVar11);
  *(undefined4 *)(extraout_RAX_22 + 0xc) = 0xffffffff;
  net_IPv4bcast.len = 0x10;
  net_IPv4bcast.cap = 0x10;
  puVar4 = extraout_RAX_22;
  pvVar11 = extraout_RSI_01;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_15 = extraout_RAX_23;
    extraout_R11_15[1] = net_IPv4bcast.array;
    puVar4 = extraout_RAX_23;
    pvVar11 = extraout_RSI_02;
  }
  net_IPv4bcast.array = puVar4;
  runtime_makeslicecopy
            ((internal_abi_Type *)&DAT_00807920,0x10,net_v4InV6Prefix.len,net_v4InV6Prefix.array,
             pvVar11);
  *(undefined4 *)(extraout_RAX_24 + 0xc) = 0x10000e0;
  net_IPv4allsys.len = 0x10;
  net_IPv4allsys.cap = 0x10;
  puVar4 = extraout_RAX_24;
  pvVar11 = extraout_RSI_03;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_16 = extraout_RAX_25;
    extraout_R11_16[1] = net_IPv4allsys.array;
    puVar4 = extraout_RAX_25;
    pvVar11 = extraout_RSI_04;
  }
  net_IPv4allsys.array = puVar4;
  runtime_makeslicecopy
            ((internal_abi_Type *)&DAT_00807920,0x10,net_v4InV6Prefix.len,net_v4InV6Prefix.array,
             pvVar11);
  *(undefined4 *)(extraout_RAX_26 + 0xc) = 0x20000e0;
  net_IPv4allrouter.len = 0x10;
  net_IPv4allrouter.cap = 0x10;
  puVar4 = extraout_RAX_26;
  pvVar11 = extraout_RSI_05;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_17 = extraout_RAX_27;
    extraout_R11_17[1] = net_IPv4allrouter.array;
    puVar4 = extraout_RAX_27;
    pvVar11 = extraout_RSI_06;
  }
  net_IPv4allrouter.array = puVar4;
  runtime_makeslicecopy
            ((internal_abi_Type *)&DAT_00807920,0x10,net_v4InV6Prefix.len,net_v4InV6Prefix.array,
             pvVar11);
  *(undefined4 *)(extraout_RAX_28 + 0xc) = 0;
  net_IPv4zero.len = 0x10;
  net_IPv4zero.cap = 0x10;
  puVar4 = extraout_RAX_28;
  pvVar11 = extraout_RDI_07;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_18 = extraout_RAX_29;
    extraout_R11_18[1] = net_IPv4zero.array;
    puVar4 = extraout_RAX_29;
    pvVar11 = extraout_RDI_08;
  }
  net_IPv4zero.array = puVar4;
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,4,4,pvVar11);
  *extraout_RAX_30 = 0xff;
  net_classAMask.len = 4;
  net_classAMask.cap = 4;
  puVar5 = extraout_RAX_30;
  pvVar11 = extraout_RDI_09;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_19 = extraout_RAX_31;
    extraout_R11_19[1] = net_classAMask.array;
    puVar5 = extraout_RAX_31;
    pvVar11 = extraout_RDI_10;
  }
  net_classAMask.array = (uint8 *)puVar5;
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,4,4,pvVar11);
  *extraout_RAX_32 = 0xffff;
  net_classBMask.len = 4;
  net_classBMask.cap = 4;
  puVar5 = extraout_RAX_32;
  pvVar11 = extraout_RDI_11;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_20 = extraout_RAX_33;
    extraout_R11_20[1] = net_classBMask.array;
    puVar5 = extraout_RAX_33;
    pvVar11 = extraout_RDI_12;
  }
  net_classBMask.array = (uint8 *)puVar5;
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,4,4,pvVar11);
  *(undefined4 *)&extraout_RAX_34->count = 0xffffff;
  net_classCMask.len = 4;
  net_classCMask.cap = 4;
  prVar6 = extraout_RAX_34;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_21 = extraout_RAX_35;
    extraout_R11_21[1] = (runtime_hmap *)net_classCMask.array;
    prVar6 = extraout_RAX_35;
  }
  net_classCMask.array = (uint8 *)prVar6;
  runtime_makemap_small(prVar6);
  phVar2 = h_00;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,(runtime_hmap *)h_00,in_XMM15,&DAT_008ae60b);
  *extraout_RAX_36 = 1;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,(runtime_hmap *)phVar2,in_XMM15,&DAT_008ae60f);
  *extraout_RAX_37 = 2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,(runtime_hmap *)phVar2,in_XMM15,&DAT_008ae2d3);
  *extraout_RAX_38 = 6;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,(runtime_hmap *)phVar2,in_XMM15,&DAT_008ae330);
  *extraout_RAX_39 = 0x11;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,(runtime_hmap *)phVar2,in_XMM15,&DAT_008b262d);
  *extraout_RAX_40 = 0x3a;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_22 = phVar2;
    extraout_R11_22[1] = net_protocols;
  }
  net_protocols = phVar2;
  net_map_init_0();
  net_aLongTimeAgo.wall = 0;
  net_aLongTimeAgo.ext = 0xe7791f701;
  ptVar7 = time_Local;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_23 = extraout_RAX_41;
    extraout_R11_23[1] = net_aLongTimeAgo.loc;
    ptVar7 = extraout_RAX_41;
  }
  net_aLongTimeAgo.loc = ptVar7;
  return (int)ptVar7;
}



// WARNING: Unknown calling convention

void net_map_init_0(void)

{
  runtime_hmap *in_RAX;
  map_string_map_string_int ~r0;
  runtime_hmap *h;
  undefined8 *extraout_RAX;
  runtime_hmap **extraout_RAX_00;
  runtime_hmap **extraout_RAX_01;
  runtime_hmap *h_00;
  undefined8 *extraout_RAX_02;
  undefined8 *extraout_RAX_03;
  undefined8 *extraout_RAX_04;
  undefined8 *extraout_RAX_05;
  undefined8 *extraout_RAX_06;
  undefined8 *extraout_RAX_07;
  undefined8 *extraout_RAX_08;
  undefined8 *extraout_RAX_09;
  undefined8 *extraout_RAX_10;
  undefined8 *extraout_RAX_11;
  undefined8 *extraout_RAX_12;
  undefined8 *extraout_RAX_13;
  undefined8 *extraout_RAX_14;
  runtime_hmap **extraout_RAX_15;
  runtime_hmap **extraout_RAX_16;
  runtime_hmap **pprVar1;
  runtime_hmap *extraout_RAX_17;
  runtime_hmap *extraout_RDI;
  runtime_hmap *extraout_RDI_00;
  runtime_hmap *~r0_00;
  runtime_hmap **extraout_R11;
  runtime_hmap **extraout_R11_00;
  int unaff_R14;
  string in_stack_ffffffffffffffc0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RAX = extraout_RAX_17;
  }
  runtime_makemap_small(in_RAX);
  runtime_makemap_small((runtime_hmap *)~r0);
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,h,in_stack_ffffffffffffffc0,
             "domaingophertelnet Valuesysmontimersefenceselect, not object next= jobs= goid sweep  B -> % util alloc free  span= prev= list=, i =  code= addr= m->p= p->m=SCHED  curg=], sp= ctxt: min=  max= (...)\n base allow"
            );
  *extraout_RAX = 0x35;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c740,(runtime_hmap *)~r0,in_stack_ffffffffffffffc0,
             &DAT_008ae330);
  pprVar1 = extraout_RAX_00;
  ~r0_00 = extraout_RDI;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = h;
    extraout_R11[1] = *extraout_RAX_01;
    pprVar1 = extraout_RAX_01;
    ~r0_00 = extraout_RDI_00;
  }
  *pprVar1 = h;
  runtime_makemap((internal_abi_MapType *)&DAT_0082c560,0xd,(runtime_hmap *)0x0,~r0_00);
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,h_00,in_stack_ffffffffffffffc0,&DAT_008ae33c);
  *extraout_RAX_02 = 0x15;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,h_00,in_stack_ffffffffffffffc0,&DAT_008ae613);
  *extraout_RAX_03 = 0x3de;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,h_00,in_stack_ffffffffffffffc0,
             "gophertelnet Valuesysmontimersefenceselect, not object next= jobs= goid sweep  B -> % util alloc free  span= prev= list=, i =  code= addr= m->p= p->m=SCHED  curg=], sp= ctxt: min=  max= (...)\n base allow"
            );
  *extraout_RAX_04 = 0x46;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,h_00,in_stack_ffffffffffffffc0,&DAT_008ae617);
  *extraout_RAX_05 = 0x50;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,h_00,in_stack_ffffffffffffffc0,&DAT_008aecf0);
  *extraout_RAX_06 = 0x1bb;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,h_00,in_stack_ffffffffffffffc0,&DAT_008aecf5);
  *extraout_RAX_07 = 0x8f;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,h_00,in_stack_ffffffffffffffc0,&DAT_008aecfa);
  *extraout_RAX_08 = 0xdc;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,h_00,in_stack_ffffffffffffffc0,&DAT_008aecff);
  *extraout_RAX_09 = 0x3e1;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,h_00,in_stack_ffffffffffffffc0,&DAT_008ae61b);
  *extraout_RAX_10 = 0x6e;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,h_00,in_stack_ffffffffffffffc0,&DAT_008aed04);
  *extraout_RAX_11 = 0x3e3;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,h_00,in_stack_ffffffffffffffc0,&DAT_008ae61f);
  *extraout_RAX_12 = 0x19;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,h_00,in_stack_ffffffffffffffc0,&DAT_008ae33f);
  *extraout_RAX_13 = 0x16;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c560,h_00,in_stack_ffffffffffffffc0,
             "telnet Valuesysmontimersefenceselect, not object next= jobs= goid sweep  B -> % util alloc free  span= prev= list=, i =  code= addr= m->p= p->m=SCHED  curg=], sp= ctxt: min=  max= (...)\n base allow"
            );
  *extraout_RAX_14 = 0x17;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082c740,(runtime_hmap *)~r0,in_stack_ffffffffffffffc0,
             &DAT_008ae2d3);
  pprVar1 = extraout_RAX_15;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier4();
    *extraout_R11_00 = h_00;
    extraout_R11_00[1] = *extraout_RAX_16;
    extraout_R11_00[2] = (runtime_hmap *)~r0;
    extraout_R11_00[3] = (runtime_hmap *)net_services;
    pprVar1 = extraout_RAX_16;
  }
  *pprVar1 = h_00;
  net_services = ~r0;
  return;
}



void net___netFD__listenStream___netFD__addrFunc_func1(net_Addr ~r0)

{
  return;
}



void net___netFD__listenDatagram___netFD__addrFunc_func1(net_Addr ~r0)

{
  return;
}



void net___netFD__dial___netFD__addrFunc_func1(net_Addr ~r0)

{
  return;
}



void net___netFD__dial___netFD__addrFunc_func2(net_Addr ~r0)

{
  return;
}



void net___netFD__dial___netFD__addrFunc_func3(net_Addr ~r0)

{
  return;
}



void net___netFD__dial___netFD__addrFunc_func4(net_Addr ~r0)

{
  return;
}



void net___netFD__dial___netFD__addrFunc_func5(net_Addr ~r0)

{
  return;
}



void net___netFD__accept___netFD__addrFunc_func1(net_Addr ~r0)

{
  return;
}



void net___netFD__accept___netFD__addrFunc_func2(net_Addr ~r0)

{
  return;
}



void type__eq_net_UnixAddr(net_UnixAddr *p,net_UnixAddr *q,bool r)

{
  char extraout_AL;
  int unaff_R14;
  net_UnixAddr *pnStack0000000000000008;
  net_UnixAddr *pnStack0000000000000010;
  
  pnStack0000000000000008 = p;
  pnStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((((pnStack0000000000000010->Name).len == (pnStack0000000000000008->Name).len) &&
      ((pnStack0000000000000010->Net).len == (pnStack0000000000000008->Net).len)) &&
     (runtime_memequal(), extraout_AL != '\0')) {
    runtime_memequal();
  }
  return;
}



void type__eq_net_OpError(net_OpError *p,net_OpError *q,bool r)

{
  runtime_itab *prVar1;
  char extraout_AL;
  char extraout_AL_00;
  char extraout_AL_01;
  char extraout_AL_02;
  bool ~r0;
  bool ~r0_00;
  bool ~r0_01;
  int unaff_R14;
  net_OpError *pnStack0000000000000008;
  net_OpError *pnStack0000000000000010;
  
  pnStack0000000000000008 = p;
  pnStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (((((((pnStack0000000000000010->Op).len == (pnStack0000000000000008->Op).len) &&
         ((pnStack0000000000000008->Net).len == (pnStack0000000000000010->Net).len)) &&
        (runtime_memequal(), extraout_AL != '\0')) &&
       ((runtime_memequal(), extraout_AL_00 != '\0' &&
        (prVar1 = (pnStack0000000000000008->Source).tab,
        (pnStack0000000000000010->Source).tab == prVar1)))) &&
      ((runtime_ifaceeq(prVar1,(pnStack0000000000000008->Source).data,
                        (pnStack0000000000000010->Source).data,~r0), extraout_AL_01 != '\0' &&
       ((prVar1 = (pnStack0000000000000008->Addr).tab, (pnStack0000000000000010->Addr).tab == prVar1
        && (runtime_ifaceeq(prVar1,(pnStack0000000000000008->Addr).data,
                            (pnStack0000000000000010->Addr).data,~r0_00), extraout_AL_02 != '\0'))))
      )) && (prVar1 = (pnStack0000000000000008->Err).tab,
            (pnStack0000000000000010->Err).tab == prVar1)) {
    runtime_ifaceeq(prVar1,(pnStack0000000000000008->Err).data,(pnStack0000000000000010->Err).data,
                    ~r0_01);
  }
  return;
}



void type__eq_net_netFD(net_netFD *p,net_netFD *q,bool r)

{
  runtime_itab *prVar1;
  char extraout_AL;
  char extraout_AL_00;
  char extraout_AL_01;
  uint uVar2;
  uint extraout_RCX;
  bool ~r0;
  bool ~r0_00;
  int unaff_R14;
  net_netFD *pnStack0000000000000008;
  net_netFD *pnStack0000000000000010;
  
  uVar2 = (uint)r;
  pnStack0000000000000008 = p;
  pnStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    uVar2 = extraout_RCX;
  }
  type__eq_internal_poll_FD
            (&pnStack0000000000000008->pfd,&pnStack0000000000000010->pfd,SUB81(uVar2,0));
  if ((((((extraout_AL != '\0') &&
         (pnStack0000000000000010->family == pnStack0000000000000008->family)) &&
        (pnStack0000000000000010->sotype == pnStack0000000000000008->sotype)) &&
       ((pnStack0000000000000010->isConnected == pnStack0000000000000008->isConnected &&
        ((pnStack0000000000000010->net).len == (pnStack0000000000000008->net).len)))) &&
      ((runtime_memequal(), extraout_AL_00 != '\0' &&
       ((prVar1 = (pnStack0000000000000008->laddr).tab,
        (pnStack0000000000000010->laddr).tab == prVar1 &&
        (runtime_ifaceeq(prVar1,(pnStack0000000000000008->laddr).data,
                         (pnStack0000000000000010->laddr).data,~r0), extraout_AL_01 != '\0')))))) &&
     (prVar1 = (pnStack0000000000000008->raddr).tab, (pnStack0000000000000010->raddr).tab == prVar1)
     ) {
    runtime_ifaceeq(prVar1,(pnStack0000000000000008->raddr).data,
                    (pnStack0000000000000010->raddr).data,~r0_00);
  }
  return;
}



void type__eq_net_AddrError(net_AddrError *p,net_AddrError *q,bool r)

{
  char extraout_AL;
  int unaff_R14;
  net_AddrError *pnStack0000000000000008;
  net_AddrError *pnStack0000000000000010;
  
  pnStack0000000000000008 = p;
  pnStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((((pnStack0000000000000010->Err).len == (pnStack0000000000000008->Err).len) &&
      ((pnStack0000000000000010->Addr).len == (pnStack0000000000000008->Addr).len)) &&
     (runtime_memequal(), extraout_AL != '\0')) {
    runtime_memequal();
  }
  return;
}



void type__eq_net_onlyValuesCtx(net_onlyValuesCtx *p,net_onlyValuesCtx *q,bool r)

{
  runtime_itab *prVar1;
  char extraout_AL;
  undefined in_DIL;
  bool ~r0;
  undefined extraout_DIL;
  int unaff_R14;
  net_onlyValuesCtx *pnStack0000000000000008;
  net_onlyValuesCtx *pnStack0000000000000010;
  
  pnStack0000000000000008 = p;
  pnStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_DIL = extraout_DIL;
  }
  prVar1 = (pnStack0000000000000008->Context).tab;
  if ((((pnStack0000000000000010->Context).tab == prVar1) &&
      (runtime_ifaceeq(prVar1,(pnStack0000000000000008->Context).data,
                       (pnStack0000000000000010->Context).data,(bool)in_DIL), extraout_AL != '\0'))
     && (prVar1 = (pnStack0000000000000008->lookupValues).tab,
        (pnStack0000000000000010->lookupValues).tab == prVar1)) {
    runtime_ifaceeq(prVar1,(pnStack0000000000000008->lookupValues).data,
                    (pnStack0000000000000010->lookupValues).data,~r0);
  }
  return;
}



void type__eq_net_ParseError(net_ParseError *p,net_ParseError *q,bool r)

{
  char extraout_AL;
  int unaff_R14;
  net_ParseError *pnStack0000000000000008;
  net_ParseError *pnStack0000000000000010;
  
  pnStack0000000000000008 = p;
  pnStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((((pnStack0000000000000010->Type).len == (pnStack0000000000000008->Type).len) &&
      ((pnStack0000000000000010->Text).len == (pnStack0000000000000008->Text).len)) &&
     (runtime_memequal(), extraout_AL != '\0')) {
    runtime_memequal();
  }
  return;
}



void type__eq_net_UnixListener(net_UnixListener *p,net_UnixListener *q,bool r)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((((q->fd == p->fd) && ((q->path).len == (p->path).len)) && (q->unlink == p->unlink)) &&
     ((((q->unlinkOnce).done == (p->unlinkOnce).done &&
       ((q->unlinkOnce).m.state == (p->unlinkOnce).m.state)) &&
      ((q->unlinkOnce).m.sema == (p->unlinkOnce).m.sema)))) {
    runtime_memequal();
  }
  return;
}



void type__eq_net_MX(net_MX *p,net_MX *q,bool r)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (((q->Host).len == (p->Host).len) && (q->Pref == p->Pref)) {
    runtime_memequal();
  }
  return;
}



void type__eq_net_SRV(net_SRV *p,net_SRV *q,bool r)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (((((q->Target).len == (p->Target).len) && (q->Port == p->Port)) &&
      (q->Priority == p->Priority)) && (q->Weight == p->Weight)) {
    runtime_memequal();
  }
  return;
}



void type__eq_net_DNSError(net_DNSError *p,net_DNSError *q,bool r)

{
  char extraout_AL;
  char extraout_AL_00;
  int unaff_R14;
  net_DNSError *pnStack0000000000000008;
  net_DNSError *pnStack0000000000000010;
  
  pnStack0000000000000008 = p;
  pnStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((((((pnStack0000000000000010->Err).len == (pnStack0000000000000008->Err).len) &&
        ((pnStack0000000000000008->Name).len == (pnStack0000000000000010->Name).len)) &&
       ((pnStack0000000000000010->Server).len == (pnStack0000000000000008->Server).len)) &&
      ((pnStack0000000000000010->IsTimeout == pnStack0000000000000008->IsTimeout &&
       (pnStack0000000000000010->IsTemporary == pnStack0000000000000008->IsTemporary)))) &&
     ((pnStack0000000000000010->IsNotFound == pnStack0000000000000008->IsNotFound &&
      ((runtime_memequal(), extraout_AL != '\0' && (runtime_memequal(), extraout_AL_00 != '\0'))))))
  {
    runtime_memequal();
  }
  return;
}



void type__eq_net_addrPortUDPAddr(net_addrPortUDPAddr *p,net_addrPortUDPAddr *q,bool r)

{
  return;
}



void net_doBlockingWithCtx_go_shape___vendor_golang_org_x_net_dns_dnsmessage_Resource_
               (context_Context ctx,_param0 blocking,_param1 ~r0,error ~r1)

{
  char extraout_AL;
  int iVar1;
  uintptr extraout_RAX;
  _param2 res;
  runtime_funcval *extraout_RAX_00;
  runtime_funcval *extraout_RAX_01;
  runtime_funcval *fn;
  int extraout_RAX_02;
  undefined8 in_RCX;
  int in_RBX;
  void *~r0_00;
  bool ~r0_01;
  undefined extraout_DIL;
  undefined ~r0_02;
  code **in_RDI;
  int ~r0_03;
  bool ~r1_00;
  undefined8 *extraout_R11;
  int unaff_R14;
  undefined in_XMM15 [16];
  void *pvVar2;
  undefined auVar3 [16];
  uint16 local_98 [4];
  uintptr local_90;
  void *local_88;
  runtime_itab *local_80;
  runtime_scase local_78;
  undefined local_68 [16];
  _param3 r;
  undefined8 local_30;
  undefined4 uStack_28;
  undefined4 uStack_24;
  undefined4 uStack_20;
  undefined4 uStack_1c;
  
  while (&r.res.cap <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar1 = (**(code **)(in_RBX + 0x20))(in_RCX);
  if (iVar1 != 0) {
    runtime_makechan((internal_abi_ChanType *)blocking[2],1,(runtime_hchan *)blocking);
    local_90 = extraout_RAX;
    runtime_newobject((internal_abi_Type *)&DAT_00869ce0,~r0_00);
    extraout_RAX_00->fn =
         (uintptr)
         net_doBlockingWithCtx_go_shape___vendor_golang_org_x_net_dns_dnsmessage_Resource__func1;
    fn = extraout_RAX_00;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier3();
      *extraout_R11 = in_RDI;
      extraout_R11[1] = local_90;
      extraout_R11[2] = blocking;
      fn = extraout_RAX_01;
    }
    fn[1].fn = (uintptr)in_RDI;
    fn[2].fn = local_90;
    fn[3].fn = (uintptr)blocking;
    runtime_newproc(fn);
    pvVar2 = in_XMM15._8_8_;
    local_30 = in_XMM15._0_8_;
    uStack_28 = in_XMM15._0_4_;
    uStack_24 = in_XMM15._4_4_;
    uStack_20 = in_XMM15._8_4_;
    uStack_1c = in_XMM15._12_4_;
    local_78.c = (runtime_hchan *)(**(code **)(in_RBX + 0x20))(in_RCX);
    local_68._8_8_ = &local_30;
    local_68._0_8_ = local_90;
    local_78.elem = pvVar2;
    runtime_selectgo(&local_78,local_98,(uintptr *)0x0,0,2,true,~r0_03,~r1_00);
    if (extraout_RAX_02 == 0) {
      auVar3 = (**(code **)(in_RBX + 0x28))(in_RCX);
      local_88 = auVar3._8_8_;
      local_80 = auVar3._0_8_;
      ~r0_02 = ~r0_01;
      if (context_Canceled.tab == local_80) {
        runtime_ifaceeq(local_80,local_88,context_Canceled.data,~r0_01);
        auVar3._8_8_ = local_88;
        auVar3._0_8_ = local_80;
        ~r0_02 = extraout_DIL;
        if (extraout_AL != '\0') {
          return;
        }
      }
      local_88 = auVar3._8_8_;
      local_80 = auVar3._0_8_;
      if (context_DeadlineExceeded.tab == local_80) {
        runtime_ifaceeq(local_80,local_88,context_DeadlineExceeded.data,(bool)~r0_02);
      }
      return;
    }
    return;
  }
  (**in_RDI)();
  return;
}



void net_doBlockingWithCtx_go_shape___string_
               (context_Context ctx,_param0 blocking,_param1 ~r0,error ~r1)

{
  char extraout_AL;
  int iVar1;
  uintptr extraout_RAX;
  _param2 res;
  runtime_funcval *extraout_RAX_00;
  runtime_funcval *extraout_RAX_01;
  runtime_funcval *fn;
  int extraout_RAX_02;
  undefined8 in_RCX;
  int in_RBX;
  void *~r0_00;
  bool ~r0_01;
  undefined extraout_DIL;
  undefined ~r0_02;
  code **in_RDI;
  int ~r0_03;
  bool ~r1_00;
  undefined8 *extraout_R11;
  int unaff_R14;
  undefined in_XMM15 [16];
  void *pvVar2;
  undefined auVar3 [16];
  uint16 local_98 [4];
  uintptr local_90;
  void *local_88;
  runtime_itab *local_80;
  runtime_scase local_78;
  undefined local_68 [16];
  _param3 r;
  undefined8 local_30;
  undefined4 uStack_28;
  undefined4 uStack_24;
  undefined4 uStack_20;
  undefined4 uStack_1c;
  
  while (&r.res.cap <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar1 = (**(code **)(in_RBX + 0x20))(in_RCX);
  if (iVar1 != 0) {
    runtime_makechan((internal_abi_ChanType *)blocking[2],1,(runtime_hchan *)blocking);
    local_90 = extraout_RAX;
    runtime_newobject((internal_abi_Type *)&DAT_00869c20,~r0_00);
    extraout_RAX_00->fn = (uintptr)net_doBlockingWithCtx_go_shape___string__func1;
    fn = extraout_RAX_00;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier3();
      *extraout_R11 = in_RDI;
      extraout_R11[1] = local_90;
      extraout_R11[2] = blocking;
      fn = extraout_RAX_01;
    }
    fn[1].fn = (uintptr)in_RDI;
    fn[2].fn = local_90;
    fn[3].fn = (uintptr)blocking;
    runtime_newproc(fn);
    pvVar2 = in_XMM15._8_8_;
    local_30 = in_XMM15._0_8_;
    uStack_28 = in_XMM15._0_4_;
    uStack_24 = in_XMM15._4_4_;
    uStack_20 = in_XMM15._8_4_;
