
void crypto_elliptic___nistCurve_go_shape__uint8___Add
               (_param19 curve,math_big_Int *x1,math_big_Int *y1,math_big_Int *x2,math_big_Int *y2,
               math_big_Int *~r0,math_big_Int *~r1)

{
  code *pcVar1;
  undefined8 extraout_RAX;
  _param20 p1;
  undefined8 extraout_RAX_00;
  _param20 p2;
  math_big_Int *x;
  int extraout_RBX;
  int extraout_RBX_00;
  math_big_Int *y;
  int unaff_R14;
  math_big_Int *pmStack0000000000000010;
  interface___ in_stack_ffffffffffffffb8;
  
  pmStack0000000000000010 = x1;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  crypto_elliptic___nistCurve_go_shape__uint8___pointFromAffine
            (curve,(math_big_Int *)pmStack0000000000000010[1].abs.cap,y1,&x2->neg,
             (error)in_stack_ffffffffffffffb8);
  if (extraout_RBX == 0) {
    crypto_elliptic___nistCurve_go_shape__uint8___pointFromAffine
              (curve,(math_big_Int *)pmStack0000000000000010[1].abs.cap,y2,&~r0->neg,
               (error)in_stack_ffffffffffffffb8);
    if (extraout_RBX_00 == 0) {
      pcVar1 = (code *)(pmStack0000000000000010->abs).len;
      x = (math_big_Int *)
          (*pcVar1)(extraout_RAX,extraout_RAX,extraout_RAX_00,pcVar1,
                    &(pmStack0000000000000010->abs).len);
      crypto_elliptic___nistCurve_go_shape__uint8___pointToAffine
                (curve,(_param18)pmStack0000000000000010[1].abs.cap,x,y);
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffffb8);
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffb8);
}



void crypto_elliptic___nistCurve_go_shape__uint8___pointToAffine
               (_param17 curve,_param18 p,math_big_Int *x,math_big_Int *y)

{
  math_big_nat ~r0;
  math_big_nat ~r0_00;
  char *extraout_RAX;
  undefined *extraout_RAX_00;
  undefined8 extraout_RAX_01;
  undefined8 extraout_RAX_02;
  undefined *extraout_RAX_03;
  undefined8 extraout_RAX_04;
  undefined8 extraout_RAX_05;
  undefined8 uVar1;
  undefined *extraout_RCX;
  int iVar2;
  int byteLen;
  undefined8 extraout_RCX_00;
  undefined8 extraout_RCX_01;
  undefined *puVar3;
  undefined *puVar4;
  undefined *~r0_01;
  void *~r0_02;
  void *extraout_RBX;
  void *extraout_RBX_00;
  void *~r0_03;
  undefined8 extraout_RBX_01;
  undefined8 *extraout_R11;
  undefined8 *extraout_R11_00;
  int unaff_R14;
  _param17 pcStack0000000000000008;
  math_big_nat in_stack_ffffffffffffff88;
  __uint8 in_stack_ffffffffffffffa0;
  undefined *puVar5;
  undefined *puVar6;
  
  pcStack0000000000000008 = curve;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  (**(code **)(p + 8))(x);
  if ((~r0_01 == &DAT_00000001) && (*extraout_RAX == '\0')) {
    runtime_newobject((internal_abi_Type *)&DAT_00855ba0,&DAT_00000001);
    runtime_newobject((internal_abi_Type *)&DAT_00855ba0,~r0_02);
    return;
  }
  iVar2 = pcStack0000000000000008->params->BitSize;
  puVar5 = ~r0_01;
  puVar6 = extraout_RCX;
  runtime_newobject((internal_abi_Type *)&DAT_00855ba0,~r0_01);
  iVar2 = (int)(((uint)(iVar2 + 7 >> 0x3f) >> 0x3d) + iVar2 + 7) >> 3;
  puVar4 = (undefined *)(iVar2 + 1);
  if (puVar6 < puVar4) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  if (iVar2 != -1) {
    ~r0.len = (int)puVar6;
    ~r0.array = (math_big_Word *)puVar5;
    ~r0.cap = iVar2;
    math_big_nat_setBytes(in_stack_ffffffffffffff88,in_stack_ffffffffffffffa0,~r0);
    *(void **)(extraout_RAX_00 + 0x10) = extraout_RBX;
    *(undefined8 *)(extraout_RAX_00 + 0x18) = extraout_RCX_00;
    uVar1 = extraout_RAX_01;
    puVar3 = extraout_RAX_00;
    ~r0_03 = extraout_RBX;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RAX_02;
      extraout_R11[1] = *(undefined8 *)(puVar3 + 8);
      uVar1 = extraout_RAX_02;
      ~r0_03 = extraout_RBX_00;
    }
    *(undefined8 *)(puVar3 + 8) = uVar1;
    *puVar3 = 0;
    runtime_newobject((internal_abi_Type *)&DAT_00855ba0,~r0_03);
    if (puVar4 <= puVar5) {
      ~r0_00.len = (int)puVar6;
      ~r0_00.array = (math_big_Word *)puVar5;
      ~r0_00.cap = iVar2;
      math_big_nat_setBytes(in_stack_ffffffffffffff88,in_stack_ffffffffffffffa0,~r0_00);
      *(undefined8 *)(extraout_RAX_03 + 0x10) = extraout_RBX_01;
      *(undefined8 *)(extraout_RAX_03 + 0x18) = extraout_RCX_01;
      uVar1 = extraout_RAX_04;
      puVar4 = extraout_RAX_03;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_00 = extraout_RAX_05;
        extraout_R11_00[1] = *(undefined8 *)(puVar4 + 8);
        uVar1 = extraout_RAX_05;
      }
      *(undefined8 *)(puVar4 + 8) = uVar1;
      *puVar4 = 0;
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceB();
}



void crypto_elliptic___nistCurve_go_shape__uint8___pointFromAffine
               (_param15 curve,math_big_Int *x,math_big_Int *y,_param16 p,error err)

{
  __uint8 ~r0;
  __uint8 ~r0_00;
  undefined8 *extraout_RAX;
  undefined8 *extraout_RAX_00;
  undefined *extraout_RAX_01;
  go_shape__uint8 *extraout_RAX_02;
  undefined8 uVar1;
  int iVar2;
  uint top_1;
  int iVar3;
  int byteLen;
  uint top;
  int iVar4;
  int i_1;
  int i;
  uint uVar5;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffb0;
  undefined8 in_stack_ffffffffffffffc8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar3 = (y->abs).len;
  if (iVar3 == 0) {
    iVar2 = 0;
  }
  else if (y->neg == false) {
    iVar2 = 1;
  }
  else {
    iVar2 = -1;
  }
  if (iVar2 == 0) {
    if (*(int *)(p + 0x10) == 0) {
      iVar2 = 0;
    }
    else if (*p == 0) {
      iVar2 = 1;
    }
    else {
      iVar2 = -1;
    }
    if (iVar2 == 0) {
      (**curve->newPoint)((go_shape__uint8 *)*curve->newPoint);
      return;
    }
  }
  if (iVar3 == 0) {
    iVar2 = 0;
  }
  else if (y->neg == false) {
    iVar2 = 1;
  }
  else {
    iVar2 = -1;
  }
  if (-1 < iVar2) {
    iVar2 = *(int *)(p + 0x10);
    if (iVar2 == 0) {
      iVar4 = 0;
    }
    else if (*p == 0) {
      iVar4 = 1;
    }
    else {
      iVar4 = -1;
    }
    if (-1 < iVar4) {
      if (iVar3 + -1 < 0) {
        iVar3 = 0;
      }
      else {
        uVar5 = (y->abs).array[iVar3 + -1];
        uVar5 = uVar5 | uVar5 >> 1;
        uVar5 = uVar5 | uVar5 >> 2;
        uVar5 = uVar5 >> 4 | uVar5;
        uVar5 = uVar5 | uVar5 >> 8;
        uVar5 = uVar5 | uVar5 >> 0x10;
        uVar5 = uVar5 >> 0x20 | uVar5;
        iVar4 = 0x3f;
        if (uVar5 != 0) {
          for (; uVar5 >> iVar4 == 0; iVar4 = iVar4 + -1) {
          }
        }
        if (uVar5 == 0) {
          iVar4 = -1;
        }
        iVar3 = (iVar3 + -1) * 0x40 + iVar4 + 1;
      }
      iVar4 = curve->params->BitSize;
      if (iVar3 <= iVar4) {
        if (iVar2 + -1 < 0) {
          iVar3 = 0;
        }
        else {
          uVar5 = *(uint *)(*(int *)(p + 8) + -8 + iVar2 * 8);
          uVar5 = uVar5 | uVar5 >> 1;
          uVar5 = uVar5 | uVar5 >> 2;
          uVar5 = uVar5 >> 4 | uVar5;
          uVar5 = uVar5 | uVar5 >> 8;
          uVar5 = uVar5 | uVar5 >> 0x10;
          uVar5 = uVar5 >> 0x20 | uVar5;
          iVar3 = 0x3f;
          if (uVar5 != 0) {
            for (; uVar5 >> iVar3 == 0; iVar3 = iVar3 + -1) {
            }
          }
          if (uVar5 == 0) {
            iVar3 = -1;
          }
          iVar3 = (iVar2 + -1) * 0x40 + iVar3 + 1;
        }
        if (iVar3 <= iVar4) {
          iVar3 = (int)(((uint)(iVar4 + 7 >> 0x3f) >> 0x3d) + iVar4 + 7) >> 3;
          uVar5 = iVar3 * 2 + 1;
          runtime_makeslice((internal_abi_Type *)&DAT_00807920,uVar5,uVar5,p);
          if (uVar5 == 0) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          *extraout_RAX_01 = 4;
          if (uVar5 < iVar3 + 1U) {
                    // WARNING: Subroutine does not return
            runtime_panicSliceAcap();
          }
          if (iVar3 == -1) {
                    // WARNING: Subroutine does not return
            runtime_panicSliceB();
          }
          ~r0.len = iVar3;
          ~r0.array = (uint8 *)in_stack_ffffffffffffffc8;
          ~r0.cap = uVar5;
          math_big___Int__FillBytes(y,in_stack_ffffffffffffffb0,~r0);
          ~r0_00.len = iVar3;
          ~r0_00.array = (uint8 *)in_stack_ffffffffffffffc8;
          ~r0_00.cap = uVar5;
          math_big___Int__FillBytes((math_big_Int *)p,in_stack_ffffffffffffffb0,~r0_00);
          uVar1 = (**curve->newPoint)(extraout_RAX_02);
          (**(code **)x)(uVar1,extraout_RAX_01,uVar5,uVar5);
          return;
        }
      }
      runtime_newobject((internal_abi_Type *)&DAT_0083e560,x);
      extraout_RAX_00[1] = 0x16;
      *extraout_RAX_00 = &DAT_008ba539;
      return;
    }
  }
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,x);
  extraout_RAX[1] = 0x13;
  *extraout_RAX = &DAT_008b89c3;
  return;
}



void crypto_elliptic___nistCurve_go_shape__uint8___IsOnCurve
               (_param14 curve,math_big_Int *x,math_big_Int *y,bool ~r0)

{
  int iVar1;
  undefined7 in_register_00000039;
  _param16 p;
  int unaff_R14;
  error in_stack_ffffffffffffffd8;
  
  p = (_param16)CONCAT71(in_register_00000039,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((y->abs).len == 0) {
    iVar1 = 0;
  }
  else if (y->neg == false) {
    iVar1 = 1;
  }
  else {
    iVar1 = -1;
  }
  if (iVar1 == 0) {
    if (*(int *)(p + 0x10) == 0) {
      iVar1 = 0;
    }
    else if (*p == 0) {
      iVar1 = 1;
    }
    else {
      iVar1 = -1;
    }
    if (iVar1 == 0) {
      return;
    }
  }
  crypto_elliptic___nistCurve_go_shape__uint8___pointFromAffine
            (curve,(math_big_Int *)x[1].abs.len,y,p,in_stack_ffffffffffffffd8);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P521Point___UnmarshalCompressed
               (_param31 curve,__uint8 data,math_big_Int *x,math_big_Int *y)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  data.len = (int)x;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    data.array = (uint8 *)curve;
    data.cap = (int)y;
    runtime_morestack_noctxt();
    curve = (_param31)data.array;
    y = (math_big_Int *)data.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &data)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___UnmarshalCompressed
            ((_param31)curve,in_stack_ffffffffffffffd0,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P521Point_,
             (math_big_Int *)data.len);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P521Point___Unmarshal
               (_param30 curve,__uint8 data,math_big_Int *x,math_big_Int *y)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  data.len = (int)x;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    data.array = (uint8 *)curve;
    data.cap = (int)y;
    runtime_morestack_noctxt();
    curve = (_param30)data.array;
    y = (math_big_Int *)data.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &data)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___Unmarshal
            ((_param30)curve,in_stack_ffffffffffffffd0,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P521Point_,
             (math_big_Int *)data.len);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P521Point___CombinedMult
               (_param28 curve,math_big_Int *Px,math_big_Int *Py,__uint8 s1,__uint8 s2,
               math_big_Int *x,math_big_Int *y)

{
  __uint8 **pp_Var1;
  __uint8 s1_00;
  undefined8 in_R9;
  undefined8 in_R10;
  int in_R11;
  int unaff_R14;
  undefined8 uStack0000000000000038;
  __uint8 in_stack_ffffffffffffffc0;
  
  uStack0000000000000038 = in_R9;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    s1.array = (uint8 *)curve;
    s1.len = (int)Px;
    s1.cap = (int)Py;
    runtime_morestack_noctxt();
    curve = (_param28)s1.array;
    Py = (math_big_Int *)s1.cap;
    Px = (math_big_Int *)s1.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &s1)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffa8;
  }
  s1_00.len = in_R10;
  s1_00.array = (uint8 *)uStack0000000000000038;
  s1_00.cap = in_R11;
  crypto_elliptic___nistCurve_go_shape__uint8___CombinedMult
            ((_param28)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P521Point_,Px,
             s1_00,in_stack_ffffffffffffffc0,Py,x);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P521Point___ScalarBaseMult
               (_param26 curve,__uint8 scalar,math_big_Int *~r0,math_big_Int *~r1)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  scalar.len = (int)~r0;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    scalar.array = (uint8 *)curve;
    scalar.cap = (int)~r1;
    runtime_morestack_noctxt();
    curve = (_param26)scalar.array;
    ~r1 = (math_big_Int *)scalar.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &scalar)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___ScalarBaseMult
            ((_param26)curve,in_stack_ffffffffffffffd0,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P521Point_,
             (math_big_Int *)scalar.len);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P521Point___ScalarMult
               (_param24 curve,math_big_Int *Bx,math_big_Int *By,__uint8 scalar,math_big_Int *~r0,
               math_big_Int *~r1)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  math_big_Int *pmStack0000000000000020;
  __uint8 in_stack_ffffffffffffffc0;
  
  pmStack0000000000000020 = ~r0;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    scalar.array = (uint8 *)curve;
    scalar.len = (int)Bx;
    scalar.cap = (int)By;
    runtime_morestack_noctxt();
    curve = (_param24)scalar.array;
    By = (math_big_Int *)scalar.cap;
    Bx = (math_big_Int *)scalar.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &scalar)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffc0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___ScalarMult
            ((_param24)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P521Point_,Bx,
             in_stack_ffffffffffffffc0,By,pmStack0000000000000020);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P521Point___Double
               (_param21 curve,math_big_Int *x1,math_big_Int *y1,math_big_Int *~r0,math_big_Int *~r1
               )

{
  int *piVar1;
  math_big_Int *extraout_RSI;
  int unaff_R14;
  _param21 in_stack_00000008;
  math_big_Int *in_stack_00000010;
  math_big_Int *in_stack_00000018;
  undefined auStack_28 [32];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = curve;
    in_stack_00000010 = x1;
    in_stack_00000018 = y1;
    runtime_morestack_noctxt();
    curve = in_stack_00000008;
    y1 = in_stack_00000018;
    x1 = in_stack_00000010;
    ~r1 = extraout_RSI;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((_param21 *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_28;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___Double
            ((_param21)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P521Point_,x1,
             y1,~r1);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P521Point___Add
               (_param19 curve,math_big_Int *x1,math_big_Int *y1,math_big_Int *x2,math_big_Int *y2,
               math_big_Int *~r0,math_big_Int *~r1)

{
  int *piVar1;
  math_big_Int *extraout_R9;
  int unaff_R14;
  _param19 in_stack_00000008;
  math_big_Int *in_stack_00000010;
  math_big_Int *in_stack_00000018;
  math_big_Int *in_stack_00000020;
  math_big_Int *in_stack_00000028;
  undefined auStack_38 [48];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = curve;
    in_stack_00000010 = x1;
    in_stack_00000018 = y1;
    in_stack_00000020 = x2;
    in_stack_00000028 = y2;
    runtime_morestack_noctxt();
    curve = in_stack_00000008;
    y1 = in_stack_00000018;
    x1 = in_stack_00000010;
    y2 = in_stack_00000028;
    x2 = in_stack_00000020;
    ~r1 = extraout_R9;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((_param19 *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_38;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___Add
            ((_param19)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P521Point_,x1,
             y1,x2,y2,~r1);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P521Point___IsOnCurve
               (_param14 curve,math_big_Int *x,math_big_Int *y,bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  _param14 in_stack_00000008;
  math_big_Int *in_stack_00000010;
  math_big_Int *in_stack_00000018;
  undefined auStack_28 [32];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = curve;
    in_stack_00000010 = x;
    in_stack_00000018 = y;
    runtime_morestack_noctxt();
    curve = in_stack_00000008;
    y = in_stack_00000018;
    x = in_stack_00000010;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((_param14 *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_28;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___IsOnCurve
            ((_param14)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P521Point_,x,
             SUB81(y,0));
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P521Point___Params
               (_param13 curve,crypto_elliptic_CurveParams *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P384Point___UnmarshalCompressed
               (_param31 curve,__uint8 data,math_big_Int *x,math_big_Int *y)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  data.len = (int)x;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    data.array = (uint8 *)curve;
    data.cap = (int)y;
    runtime_morestack_noctxt();
    curve = (_param31)data.array;
    y = (math_big_Int *)data.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &data)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___UnmarshalCompressed
            ((_param31)curve,in_stack_ffffffffffffffd0,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P384Point_,
             (math_big_Int *)data.len);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P384Point___Unmarshal
               (_param30 curve,__uint8 data,math_big_Int *x,math_big_Int *y)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  data.len = (int)x;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    data.array = (uint8 *)curve;
    data.cap = (int)y;
    runtime_morestack_noctxt();
    curve = (_param30)data.array;
    y = (math_big_Int *)data.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &data)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___Unmarshal
            ((_param30)curve,in_stack_ffffffffffffffd0,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P384Point_,
             (math_big_Int *)data.len);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P384Point___CombinedMult
               (_param28 curve,math_big_Int *Px,math_big_Int *Py,__uint8 s1,__uint8 s2,
               math_big_Int *x,math_big_Int *y)

{
  __uint8 **pp_Var1;
  __uint8 s1_00;
  undefined8 in_R9;
  undefined8 in_R10;
  int in_R11;
  int unaff_R14;
  undefined8 uStack0000000000000038;
  __uint8 in_stack_ffffffffffffffc0;
  
  uStack0000000000000038 = in_R9;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    s1.array = (uint8 *)curve;
    s1.len = (int)Px;
    s1.cap = (int)Py;
    runtime_morestack_noctxt();
    curve = (_param28)s1.array;
    Py = (math_big_Int *)s1.cap;
    Px = (math_big_Int *)s1.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &s1)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffa8;
  }
  s1_00.len = in_R10;
  s1_00.array = (uint8 *)uStack0000000000000038;
  s1_00.cap = in_R11;
  crypto_elliptic___nistCurve_go_shape__uint8___CombinedMult
            ((_param28)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P384Point_,Px,
             s1_00,in_stack_ffffffffffffffc0,Py,x);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P384Point___ScalarBaseMult
               (_param26 curve,__uint8 scalar,math_big_Int *~r0,math_big_Int *~r1)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  scalar.len = (int)~r0;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    scalar.array = (uint8 *)curve;
    scalar.cap = (int)~r1;
    runtime_morestack_noctxt();
    curve = (_param26)scalar.array;
    ~r1 = (math_big_Int *)scalar.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &scalar)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___ScalarBaseMult
            ((_param26)curve,in_stack_ffffffffffffffd0,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P384Point_,
             (math_big_Int *)scalar.len);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P384Point___ScalarMult
               (_param24 curve,math_big_Int *Bx,math_big_Int *By,__uint8 scalar,math_big_Int *~r0,
               math_big_Int *~r1)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  math_big_Int *pmStack0000000000000020;
  __uint8 in_stack_ffffffffffffffc0;
  
  pmStack0000000000000020 = ~r0;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    scalar.array = (uint8 *)curve;
    scalar.len = (int)Bx;
    scalar.cap = (int)By;
    runtime_morestack_noctxt();
    curve = (_param24)scalar.array;
    By = (math_big_Int *)scalar.cap;
    Bx = (math_big_Int *)scalar.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &scalar)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffc0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___ScalarMult
            ((_param24)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P384Point_,Bx,
             in_stack_ffffffffffffffc0,By,pmStack0000000000000020);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P384Point___Double
               (_param21 curve,math_big_Int *x1,math_big_Int *y1,math_big_Int *~r0,math_big_Int *~r1
               )

{
  int *piVar1;
  math_big_Int *extraout_RSI;
  int unaff_R14;
  _param21 in_stack_00000008;
  math_big_Int *in_stack_00000010;
  math_big_Int *in_stack_00000018;
  undefined auStack_28 [32];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = curve;
    in_stack_00000010 = x1;
    in_stack_00000018 = y1;
    runtime_morestack_noctxt();
    curve = in_stack_00000008;
    y1 = in_stack_00000018;
    x1 = in_stack_00000010;
    ~r1 = extraout_RSI;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((_param21 *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_28;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___Double
            ((_param21)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P384Point_,x1,
             y1,~r1);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P384Point___Add
               (_param19 curve,math_big_Int *x1,math_big_Int *y1,math_big_Int *x2,math_big_Int *y2,
               math_big_Int *~r0,math_big_Int *~r1)

{
  int *piVar1;
  math_big_Int *extraout_R9;
  int unaff_R14;
  _param19 in_stack_00000008;
  math_big_Int *in_stack_00000010;
  math_big_Int *in_stack_00000018;
  math_big_Int *in_stack_00000020;
  math_big_Int *in_stack_00000028;
  undefined auStack_38 [48];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = curve;
    in_stack_00000010 = x1;
    in_stack_00000018 = y1;
    in_stack_00000020 = x2;
    in_stack_00000028 = y2;
    runtime_morestack_noctxt();
    curve = in_stack_00000008;
    y1 = in_stack_00000018;
    x1 = in_stack_00000010;
    y2 = in_stack_00000028;
    x2 = in_stack_00000020;
    ~r1 = extraout_R9;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((_param19 *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_38;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___Add
            ((_param19)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P384Point_,x1,
             y1,x2,y2,~r1);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P384Point___IsOnCurve
               (_param14 curve,math_big_Int *x,math_big_Int *y,bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  _param14 in_stack_00000008;
  math_big_Int *in_stack_00000010;
  math_big_Int *in_stack_00000018;
  undefined auStack_28 [32];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = curve;
    in_stack_00000010 = x;
    in_stack_00000018 = y;
    runtime_morestack_noctxt();
    curve = in_stack_00000008;
    y = in_stack_00000018;
    x = in_stack_00000010;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((_param14 *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_28;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___IsOnCurve
            ((_param14)curve,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P384Point_,x,
             SUB81(y,0));
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P384Point___Params
               (_param13 curve,crypto_elliptic_CurveParams *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P256Point___UnmarshalCompressed
               (crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *curve,__uint8 data,
               math_big_Int *x,math_big_Int *y)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  data.len = (int)x;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    data.array = (uint8 *)curve;
    data.cap = (int)y;
    runtime_morestack_noctxt();
    curve = (crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *)data.array;
    y = (math_big_Int *)data.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &data)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___UnmarshalCompressed
            ((_param31)curve,in_stack_ffffffffffffffd0,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,
             (math_big_Int *)data.len);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P256Point___Unmarshal
               (crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *curve,__uint8 data,
               math_big_Int *x,math_big_Int *y)

{
  __uint8 **pp_Var1;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd0;
  
  data.len = (int)x;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    data.array = (uint8 *)curve;
    data.cap = (int)y;
    runtime_morestack_noctxt();
    curve = (crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *)data.array;
    y = (math_big_Int *)data.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &data)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd0;
  }
  crypto_elliptic___nistCurve_go_shape__uint8___Unmarshal
            ((_param30)curve,in_stack_ffffffffffffffd0,
             (math_big_Int *)crypto_elliptic__dict_nistCurve__crypto_internal_nistec_P256Point_,
             (math_big_Int *)data.len);
  return;
}



void crypto_elliptic___nistCurve__crypto_internal_nistec_P256Point___CombinedMult
               (crypto_elliptic_nistCurve__crypto_internal_nistec_P256Point_ *curve,math_big_Int *Px
               ,math_big_Int *Py,__uint8 s1,__uint8 s2,math_big_Int *x,math_big_Int *y)

{
  __uint8 **pp_Var1;
  __uint8 s1_00;
  undefined8 in_R9;
  undefined8 in_R10;
