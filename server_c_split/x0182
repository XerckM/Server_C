  puVar2 = unicode_Tifinagh;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_x00151 = puVar2;
    extraout_R11_x00151[1] = *extraout_RAX_x00304;
    ppuVar1 = extraout_RAX_x00304;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffd0,
             &DAT_008b0ca0);
  ppuVar1 = extraout_RAX_x00305;
  puVar2 = unicode_Tirhuta;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_x00152 = puVar2;
    extraout_R11_x00152[1] = *extraout_RAX_x00306;
    ppuVar1 = extraout_RAX_x00306;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffd0,
             &DAT_008ae77f);
  ppuVar1 = extraout_RAX_x00307;
  puVar2 = unicode_Toto;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_x00153 = puVar2;
    extraout_R11_x00153[1] = *extraout_RAX_x00308;
    ppuVar1 = extraout_RAX_x00308;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffd0,
             &DAT_008b1e96);
  ppuVar1 = extraout_RAX_x00309;
  puVar2 = unicode_Ugaritic;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_x00154 = puVar2;
    extraout_R11_x00154[1] = *extraout_RAX_x00310;
    ppuVar1 = extraout_RAX_x00310;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffd0,
             &DAT_008ae3e4);
  ppuVar1 = extraout_RAX_x00311;
  puVar2 = unicode_Vai;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_x00155 = puVar2;
    extraout_R11_x00155[1] = *extraout_RAX_x00312;
    ppuVar1 = extraout_RAX_x00312;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffd0,
             &DAT_008b1e9e);
  ppuVar1 = extraout_RAX_x00313;
  puVar2 = unicode_Vithkuqi;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_x00156 = puVar2;
    extraout_R11_x00156[1] = *extraout_RAX_x00314;
    ppuVar1 = extraout_RAX_x00314;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffd0,
             &DAT_008afaf6);
  ppuVar1 = extraout_RAX_x00315;
  puVar2 = unicode_Wancho;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_x00157 = puVar2;
    extraout_R11_x00157[1] = *extraout_RAX_x00316;
    ppuVar1 = extraout_RAX_x00316;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffd0,
             &DAT_008b3ee2);
  ppuVar1 = extraout_RAX_x00317;
  puVar2 = unicode_Warang_Citi;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_x00158 = puVar2;
    extraout_R11_x00158[1] = *extraout_RAX_x00318;
    ppuVar1 = extraout_RAX_x00318;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffd0,
             &DAT_008afafc);
  ppuVar1 = extraout_RAX_x00319;
  puVar2 = unicode_Yezidi;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_x00159 = puVar2;
    extraout_R11_x00159[1] = *extraout_RAX_x00320;
    ppuVar1 = extraout_RAX_x00320;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffd0,
             &DAT_008ae20e);
  ppuVar1 = extraout_RAX_x00321;
  puVar2 = unicode_Yi;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_x00160 = puVar2;
    extraout_R11_x00160[1] = *extraout_RAX_x00322;
    ppuVar1 = extraout_RAX_x00322;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffd0,
             "Zanabazar_Squareinvalid ip:port invalid AddrPortinvalid dns nameunpacking headerRCodeFormatErrorGODEBUG: value \"must be positiveinvalid encodingregexp: Compile(quoted-printableContent-Language"
            );
  ppuVar1 = extraout_RAX_x00323;
  puVar2 = unicode_Zanabazar_Square;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier4();
    *extraout_R11_x00161 = puVar2;
    extraout_R11_x00161[1] = *extraout_RAX_x00324;
    extraout_R11_x00161[2] = h;
    extraout_R11_x00161[3] = (unicode_RangeTable *)unicode_Scripts;
    ppuVar1 = extraout_RAX_x00324;
  }
  *ppuVar1 = puVar2;
  unicode_Scripts = (map_string__unicode_RangeTable)h;
  return;
}



int unicode_init(EVP_PKEY_CTX *ctx)

{
  runtime_hmap *~r0;
  unicode_RangeTable *h;
  unicode_RangeTable **extraout_RAX;
  unicode_RangeTable **extraout_RAX_00;
  unicode_RangeTable **extraout_RAX_01;
  unicode_RangeTable **extraout_RAX_02;
  unicode_RangeTable **extraout_RAX_03;
  unicode_RangeTable **extraout_RAX_04;
  unicode_RangeTable **extraout_RAX_05;
  unicode_RangeTable **extraout_RAX_06;
  unicode_RangeTable **extraout_RAX_07;
  unicode_RangeTable **extraout_RAX_08;
  runtime_hmap *extraout_RAX_09;
  runtime_hmap *extraout_RAX_10;
  runtime_hmap *~r0_00;
  unicode_RangeTable *h_00;
  unicode_RangeTable **extraout_RAX_11;
  unicode_RangeTable **extraout_RAX_12;
  unicode_RangeTable **extraout_RAX_13;
  unicode_RangeTable **extraout_RAX_14;
  unicode_RangeTable **extraout_RAX_15;
  unicode_RangeTable **extraout_RAX_16;
  unicode_RangeTable **ppuVar1;
  unicode_RangeTable *extraout_RCX;
  unicode_RangeTable *extraout_RCX_00;
  unicode_RangeTable *puVar2;
  unicode_RangeTable **extraout_R11;
  unicode_RangeTable **extraout_R11_00;
  unicode_RangeTable **extraout_R11_01;
  unicode_RangeTable **extraout_R11_02;
  unicode_RangeTable **extraout_R11_03;
  unicode_RangeTable **extraout_R11_04;
  unicode_RangeTable **extraout_R11_05;
  unicode_RangeTable **extraout_R11_06;
  unicode_RangeTable **extraout_R11_07;
  int unaff_R14;
  string in_stack_ffffffffffffffc8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  unicode_map_init_0();
  unicode_map_init_1();
  runtime_mapinitnoop();
  runtime_makemap_small(~r0);
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffc8,
             &DAT_0095ae30);
  ppuVar1 = extraout_RAX;
  puVar2 = unicode_foldL;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RCX;
    extraout_R11[1] = *extraout_RAX_00;
    ppuVar1 = extraout_RAX_00;
    puVar2 = extraout_RCX;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffc8,
             &DAT_008ae1d4);
  ppuVar1 = extraout_RAX_01;
  puVar2 = unicode_foldLl;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = puVar2;
    extraout_R11_00[1] = *extraout_RAX_02;
    ppuVar1 = extraout_RAX_02;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffc8,
             &DAT_008ae1d6);
  ppuVar1 = extraout_RAX_03;
  puVar2 = unicode_foldLt;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_01 = puVar2;
    extraout_R11_01[1] = *extraout_RAX_04;
    ppuVar1 = extraout_RAX_04;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffc8,
             &DAT_008ae1d8);
  ppuVar1 = extraout_RAX_05;
  puVar2 = unicode_foldLu;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_02 = puVar2;
    extraout_R11_02[1] = *extraout_RAX_06;
    ppuVar1 = extraout_RAX_06;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffc8,
             &DAT_008ae13e);
  ppuVar1 = extraout_RAX_07;
  puVar2 = unicode_foldM;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_03 = puVar2;
    extraout_R11_03[1] = *extraout_RAX_08;
    ppuVar1 = extraout_RAX_08;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h,in_stack_ffffffffffffffc8,
             &DAT_008ae1da);
  ~r0_00 = extraout_RAX_09;
  puVar2 = unicode_foldMn;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier4();
    *extraout_R11_04 = puVar2;
    extraout_R11_04[1] = (unicode_RangeTable *)extraout_RAX_10->count;
    extraout_R11_04[2] = h;
    extraout_R11_04[3] = (unicode_RangeTable *)unicode_FoldCategory;
    ~r0_00 = extraout_RAX_10;
  }
  ~r0_00->count = (int)puVar2;
  unicode_FoldCategory = (map_string__unicode_RangeTable)h;
  runtime_makemap_small(~r0_00);
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h_00,in_stack_ffffffffffffffc8,
             &DAT_008afa72);
  ppuVar1 = extraout_RAX_11;
  puVar2 = unicode_foldCommon;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_05 = extraout_RCX_00;
    extraout_R11_05[1] = *extraout_RAX_12;
    ppuVar1 = extraout_RAX_12;
    puVar2 = extraout_RCX_00;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h_00,in_stack_ffffffffffffffc8,
             &DAT_008aee58);
  ppuVar1 = extraout_RAX_13;
  puVar2 = unicode_foldGreek;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_06 = puVar2;
    extraout_R11_06[1] = *extraout_RAX_14;
    ppuVar1 = extraout_RAX_14;
  }
  *ppuVar1 = puVar2;
  runtime_mapassign_faststr
            ((internal_abi_MapType *)&DAT_0082e1e0,(runtime_hmap *)h_00,in_stack_ffffffffffffffc8,
             &DAT_008b2aad);
  ppuVar1 = extraout_RAX_15;
  puVar2 = unicode_foldInherited;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier4();
    *extraout_R11_07 = puVar2;
    extraout_R11_07[1] = *extraout_RAX_16;
    extraout_R11_07[2] = h_00;
    extraout_R11_07[3] = (unicode_RangeTable *)unicode_FoldScript;
    ppuVar1 = extraout_RAX_16;
  }
  *ppuVar1 = puVar2;
  unicode_FoldScript = (map_string__unicode_RangeTable)h_00;
  return (int)ppuVar1;
}



void reflect___abiSeq__addArg(reflect_abiSeq *a,internal_abi_Type *t,reflect_abiStep *~r0)

{
  uint uVar1;
  int iVar2;
  uintptr uVar3;
  uintptr uVar4;
  char extraout_AL;
  int *extraout_RAX;
  int *extraout_RAX_00;
  int *oldPtr;
  reflect_abiStep *extraout_RAX_01;
  reflect_abiStep *extraout_RAX_02;
  reflect_abiStep *oldPtr_00;
  int extraout_RCX;
  int extraout_RCX_00;
  uint uVar5;
  reflect_abiSeq *prVar6;
  uint extraout_RBX;
  uint extraout_RBX_00;
  uint extraout_RBX_01;
  uint extraout_RBX_02;
  undefined ~r0_00;
  undefined extraout_DIL;
  undefined extraout_DIL_00;
  undefined8 in_RDI;
  undefined8 extraout_RDI;
  int **extraout_R11;
  reflect_abiStep **extraout_R11_00;
  int unaff_R14;
  undefined in_XMM15 [16];
  reflect_abiSeq *prStack0000000000000008;
  internal_abi_Type *piStack0000000000000010;
  runtime_slice in_stack_ffffffffffffff30;
  undefined4 uStack_78;
  undefined4 uStack_74;
  undefined4 local_70;
  undefined4 uStack_6c;
  undefined4 uStack_68;
  undefined4 uStack_64;
  undefined4 local_60;
  undefined4 uStack_5c;
  reflect_abiSeq aOld;
  
  prStack0000000000000008 = a;
  piStack0000000000000010 = t;
  while (~r0_00 = (undefined)in_RDI, &aOld <= *(reflect_abiSeq **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  uVar1 = (prStack0000000000000008->valueStart).cap;
  uVar5 = (prStack0000000000000008->valueStart).len + 1;
  iVar2 = (prStack0000000000000008->steps).len;
  oldPtr = (prStack0000000000000008->valueStart).array;
  if (uVar1 < uVar5) {
    runtime_growslice(oldPtr,uVar5,uVar1,1,(internal_abi_Type *)&DAT_00807760,
                      in_stack_ffffffffffffff30);
    (prStack0000000000000008->valueStart).cap = extraout_RCX;
    oldPtr = extraout_RAX;
    prVar6 = prStack0000000000000008;
    uVar5 = extraout_RBX;
    ~r0_00 = extraout_DIL;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RAX_00;
      extraout_R11[1] = (prVar6->valueStart).array;
      oldPtr = extraout_RAX_00;
      uVar5 = extraout_RBX_00;
      ~r0_00 = extraout_DIL_00;
    }
    (prVar6->valueStart).array = oldPtr;
  }
  (prStack0000000000000008->valueStart).len = uVar5;
  oldPtr[uVar5 - 1] = iVar2;
  if (piStack0000000000000010->Size_ == 0) {
    prStack0000000000000008->stackBytes =
         -(uint)piStack0000000000000010->Align_ &
         ((uint)piStack0000000000000010->Align_ + prStack0000000000000008->stackBytes) - 1;
    return;
  }
  aOld.steps.array = (prStack0000000000000008->steps).array;
  aOld.steps.len._0_4_ = *(undefined4 *)&(prStack0000000000000008->steps).len;
  aOld.steps.len._4_4_ = *(undefined4 *)((int)&(prStack0000000000000008->steps).len + 4);
  aOld.steps.cap._0_4_ = *(undefined4 *)&(prStack0000000000000008->steps).cap;
  aOld.steps.cap._4_4_ = *(undefined4 *)((int)&(prStack0000000000000008->steps).cap + 4);
  aOld.valueStart.array._0_4_ = *(undefined4 *)&(prStack0000000000000008->valueStart).array;
  aOld.valueStart.array._4_4_ =
       *(undefined4 *)((int)&(prStack0000000000000008->valueStart).array + 4);
  aOld.valueStart.len._0_4_ = *(undefined4 *)&(prStack0000000000000008->valueStart).len;
  aOld.valueStart.len._4_4_ = *(undefined4 *)((int)&(prStack0000000000000008->valueStart).len + 4);
  aOld.valueStart.cap._0_4_ = *(undefined4 *)&(prStack0000000000000008->valueStart).cap;
  aOld.valueStart.cap._4_4_ = *(undefined4 *)((int)&(prStack0000000000000008->valueStart).cap + 4);
  aOld.stackBytes._0_4_ = *(undefined4 *)&prStack0000000000000008->stackBytes;
  aOld.stackBytes._4_4_ = *(undefined4 *)((int)&prStack0000000000000008->stackBytes + 4);
  aOld.iregs._0_4_ = *(undefined4 *)&prStack0000000000000008->iregs;
  aOld.iregs._4_4_ = *(undefined4 *)((int)&prStack0000000000000008->iregs + 4);
  aOld.fregs._0_4_ = *(undefined4 *)&prStack0000000000000008->fregs;
  aOld.fregs._4_4_ = *(undefined4 *)((int)&prStack0000000000000008->fregs + 4);
  reflect___abiSeq__regAssign(prStack0000000000000008,piStack0000000000000010,0,(bool)~r0_00);
  if (extraout_AL != '\0') {
    return;
  }
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_wbMove((internal_abi_Type *)&DAT_0087e600,prStack0000000000000008,&aOld);
  }
  (prStack0000000000000008->steps).array = aOld.steps.array;
  *(undefined4 *)&(prStack0000000000000008->steps).len = (undefined4)aOld.steps.len;
  *(undefined4 *)((int)&(prStack0000000000000008->steps).len + 4) = aOld.steps.len._4_4_;
  *(undefined4 *)&(prStack0000000000000008->steps).cap = (undefined4)aOld.steps.cap;
  *(undefined4 *)((int)&(prStack0000000000000008->steps).cap + 4) = aOld.steps.cap._4_4_;
  *(undefined4 *)&(prStack0000000000000008->valueStart).array = aOld.valueStart.array._0_4_;
  *(undefined4 *)((int)&(prStack0000000000000008->valueStart).array + 4) =
       aOld.valueStart.array._4_4_;
  *(undefined4 *)&(prStack0000000000000008->valueStart).len = (undefined4)aOld.valueStart.len;
  *(undefined4 *)((int)&(prStack0000000000000008->valueStart).len + 4) = aOld.valueStart.len._4_4_;
  *(undefined4 *)&(prStack0000000000000008->valueStart).cap = (undefined4)aOld.valueStart.cap;
  *(undefined4 *)((int)&(prStack0000000000000008->valueStart).cap + 4) = aOld.valueStart.cap._4_4_;
  *(undefined4 *)&prStack0000000000000008->stackBytes = (undefined4)aOld.stackBytes;
  *(undefined4 *)((int)&prStack0000000000000008->stackBytes + 4) = aOld.stackBytes._4_4_;
  *(undefined4 *)&prStack0000000000000008->iregs = (undefined4)aOld.iregs;
  *(undefined4 *)((int)&prStack0000000000000008->iregs + 4) = aOld.iregs._4_4_;
  *(undefined4 *)&prStack0000000000000008->fregs = (undefined4)aOld.fregs;
  *(undefined4 *)((int)&prStack0000000000000008->fregs + 4) = aOld.fregs._4_4_;
  uVar3 = piStack0000000000000010->Size_;
  prStack0000000000000008->stackBytes =
       -(uint)piStack0000000000000010->Align_ &
       prStack0000000000000008->stackBytes + (piStack0000000000000010->Align_ - 1);
  uVar4 = prStack0000000000000008->stackBytes;
  uVar1 = (prStack0000000000000008->steps).cap;
  uVar5 = (prStack0000000000000008->steps).len + 1;
  oldPtr_00 = (prStack0000000000000008->steps).array;
  prVar6 = prStack0000000000000008;
  if (uVar1 < uVar5) {
    runtime_growslice(oldPtr_00,uVar5,uVar1,1,(internal_abi_Type *)&DAT_00885720,
                      in_stack_ffffffffffffff30);
    (prStack0000000000000008->steps).cap = extraout_RCX_00;
    oldPtr_00 = extraout_RAX_01;
    prVar6 = prStack0000000000000008;
    uVar5 = extraout_RBX_01;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_00 = extraout_RAX_02;
      extraout_R11_00[1] = (prVar6->steps).array;
      oldPtr_00 = extraout_RAX_02;
      uVar5 = extraout_RBX_02;
    }
    (prVar6->steps).array = oldPtr_00;
  }
  (prVar6->steps).len = uVar5;
  uStack_78 = in_XMM15._8_4_;
  uStack_74 = in_XMM15._12_4_;
  *(undefined4 *)&oldPtr_00[uVar5 - 1].kind = 1;
  *(undefined4 *)((int)&oldPtr_00[uVar5 - 1].kind + 4) = 0;
  *(undefined4 *)&oldPtr_00[uVar5 - 1].offset = uStack_78;
  *(undefined4 *)((int)&oldPtr_00[uVar5 - 1].offset + 4) = uStack_74;
  local_70 = (undefined4)uVar3;
  uStack_6c = (undefined4)(uVar3 >> 0x20);
  uStack_68 = (undefined4)uVar4;
  uStack_64 = (undefined4)(uVar4 >> 0x20);
  *(undefined4 *)&oldPtr_00[uVar5 - 1].size = local_70;
  *(undefined4 *)((int)&oldPtr_00[uVar5 - 1].size + 4) = uStack_6c;
  *(undefined4 *)&oldPtr_00[uVar5 - 1].stkOff = uStack_68;
  *(undefined4 *)((int)&oldPtr_00[uVar5 - 1].stkOff + 4) = uStack_64;
  local_60 = in_XMM15._0_4_;
  uStack_5c = in_XMM15._4_4_;
  *(undefined4 *)&oldPtr_00[uVar5 - 1].ireg = local_60;
  *(undefined4 *)((int)&oldPtr_00[uVar5 - 1].ireg + 4) = uStack_5c;
  *(undefined4 *)&oldPtr_00[uVar5 - 1].freg = uStack_78;
  *(undefined4 *)((int)&oldPtr_00[uVar5 - 1].freg + 4) = uStack_74;
  prVar6->stackBytes = prVar6->stackBytes + uVar3;
  uVar1 = (prVar6->steps).len;
  if (uVar1 - 1 < uVar1) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void reflect___abiSeq__addRcvr
               (reflect_abiSeq *a,internal_abi_Type *rcvr,reflect_abiStep *~r0,bool ~r1)

{
  uint uVar1;
  int iVar2;
  uintptr uVar3;
  char extraout_AL;
  bool ok;
  bool ptr;
  char extraout_AL_00;
  char cVar4;
  int *extraout_RAX;
  int *extraout_RAX_00;
  int *oldPtr;
  reflect_abiStep *extraout_RAX_01;
  reflect_abiStep *extraout_RAX_02;
  reflect_abiStep *oldPtr_00;
  int extraout_RCX;
  int extraout_RCX_00;
  uint uVar5;
  reflect_abiSeq *prVar6;
  uint extraout_RBX;
  uint extraout_RBX_00;
  uint extraout_RBX_01;
  uint extraout_RBX_02;
  int **extraout_R11;
  reflect_abiStep **extraout_R11_00;
  int unaff_R14;
  undefined in_XMM15 [16];
  reflect_abiSeq *prStack0000000000000008;
  runtime_slice in_stack_ffffffffffffff78;
  undefined4 uStack_30;
  undefined4 uStack_2c;
  undefined4 uStack_20;
  undefined4 uStack_1c;
  undefined4 local_18;
  undefined4 uStack_14;
  
  prStack0000000000000008 = a;
  while (&stack0xfffffffffffffff8 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar1 = (prStack0000000000000008->valueStart).cap;
  uVar5 = (prStack0000000000000008->valueStart).len + 1;
  oldPtr = (prStack0000000000000008->valueStart).array;
  iVar2 = (prStack0000000000000008->steps).len;
  if (uVar1 < uVar5) {
    runtime_growslice(oldPtr,uVar5,uVar1,1,(internal_abi_Type *)&DAT_00807760,
                      in_stack_ffffffffffffff78);
    (prStack0000000000000008->valueStart).cap = extraout_RCX;
    oldPtr = extraout_RAX;
    prVar6 = prStack0000000000000008;
    uVar5 = extraout_RBX;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RAX_00;
      extraout_R11[1] = (prVar6->valueStart).array;
      oldPtr = extraout_RAX_00;
      uVar5 = extraout_RBX_00;
    }
    (prVar6->valueStart).array = oldPtr;
  }
  (prStack0000000000000008->valueStart).len = uVar5;
  oldPtr[uVar5 - 1] = iVar2;
  if (((rcvr->Kind_ & 0x20) == 0) || (rcvr->PtrBytes != 0)) {
    reflect___abiSeq__assignIntN(prStack0000000000000008,0,8,1,1,SUB81(oldPtr,0));
    cVar4 = extraout_AL;
  }
  else {
    reflect___abiSeq__assignIntN(prStack0000000000000008,0,8,1,0,SUB81(oldPtr,0));
    cVar4 = extraout_AL_00;
  }
  if (cVar4 != '\0') {
    return;
  }
  prStack0000000000000008->stackBytes = prStack0000000000000008->stackBytes + 7 & 0xfffffffffffffff8
  ;
  uVar3 = prStack0000000000000008->stackBytes;
  uVar1 = (prStack0000000000000008->steps).cap;
  uVar5 = (prStack0000000000000008->steps).len + 1;
  oldPtr_00 = (prStack0000000000000008->steps).array;
  prVar6 = prStack0000000000000008;
  if (uVar1 < uVar5) {
    runtime_growslice(oldPtr_00,uVar5,uVar1,1,(internal_abi_Type *)&DAT_00885720,
                      in_stack_ffffffffffffff78);
    (prStack0000000000000008->steps).cap = extraout_RCX_00;
    oldPtr_00 = extraout_RAX_01;
    prVar6 = prStack0000000000000008;
    uVar5 = extraout_RBX_01;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_00 = extraout_RAX_02;
      extraout_R11_00[1] = (prVar6->steps).array;
      oldPtr_00 = extraout_RAX_02;
      uVar5 = extraout_RBX_02;
    }
    (prVar6->steps).array = oldPtr_00;
  }
  (prVar6->steps).len = uVar5;
  uStack_30 = in_XMM15._8_4_;
  uStack_2c = in_XMM15._12_4_;
  *(undefined4 *)&oldPtr_00[uVar5 - 1].kind = 1;
  *(undefined4 *)((int)&oldPtr_00[uVar5 - 1].kind + 4) = 0;
  *(undefined4 *)&oldPtr_00[uVar5 - 1].offset = uStack_30;
  *(undefined4 *)((int)&oldPtr_00[uVar5 - 1].offset + 4) = uStack_2c;
  uStack_20 = (undefined4)uVar3;
  uStack_1c = (undefined4)(uVar3 >> 0x20);
  *(undefined4 *)&oldPtr_00[uVar5 - 1].size = 8;
  *(undefined4 *)((int)&oldPtr_00[uVar5 - 1].size + 4) = 0;
  *(undefined4 *)&oldPtr_00[uVar5 - 1].stkOff = uStack_20;
  *(undefined4 *)((int)&oldPtr_00[uVar5 - 1].stkOff + 4) = uStack_1c;
  local_18 = in_XMM15._0_4_;
  uStack_14 = in_XMM15._4_4_;
  *(undefined4 *)&oldPtr_00[uVar5 - 1].ireg = local_18;
  *(undefined4 *)((int)&oldPtr_00[uVar5 - 1].ireg + 4) = uStack_14;
  *(undefined4 *)&oldPtr_00[uVar5 - 1].freg = uStack_30;
  *(undefined4 *)((int)&oldPtr_00[uVar5 - 1].freg + 4) = uStack_2c;
  prVar6->stackBytes = prVar6->stackBytes + 8;
  uVar1 = (prVar6->steps).len;
  if (uVar1 - 1 < uVar1) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



// Local variable tt:internal/abi.ArrayType *[RBX:8] conflicts with parameter, skipped.
// Local variable st:reflect.structType *[RBX:8] conflicts with parameter, skipped.

void reflect___abiSeq__regAssign(reflect_abiSeq *a,internal_abi_Type *t,uintptr offset,bool ~r0)

{
  int iVar1;
  int iVar2;
  runtime_slice ~r0_00;
  runtime_slice ~r0_01;
  runtime_slice ~r0_02;
  char extraout_AL;
  reflect_abiStep *extraout_RAX;
  reflect_abiStep *extraout_RAX_00;
  reflect_abiStep *extraout_RAX_01;
  reflect_abiStep *extraout_RAX_02;
  reflect_abiStep *extraout_RAX_03;
  reflect_abiStep *extraout_RAX_04;
  reflect_abiStep *prVar3;
  int extraout_RCX;
  int extraout_RCX_00;
  int extraout_RCX_01;
  int i_3;
  reflect_abiSeq *prVar4;
  int i_2;
  uint uVar5;
  uint extraout_RBX;
  uint extraout_RBX_00;
  uint extraout_RBX_01;
  uint extraout_RBX_02;
  int i_1;
  uint uVar6;
  uint extraout_RBX_03;
  uint extraout_RBX_04;
  uint uVar7;
  uint extraout_RDI;
  bool bVar8;
  reflect_abiStep **extraout_R11;
  reflect_abiStep **extraout_R11_00;
  reflect_abiStep **extraout_R11_01;
  int unaff_R14;
  undefined in_XMM15 [16];
  interface___ in_stack_fffffffffffffef8;
  int in_stack_ffffffffffffff08;
  int i;
  undefined8 uStack_90;
  undefined local_88 [8];
  undefined8 uStack_80;
  undefined local_78 [8];
  undefined8 uStack_70;
  undefined local_68 [8];
  undefined8 uStack_60;
  undefined local_58 [8];
  undefined8 uStack_50;
  undefined local_48 [8];
  undefined8 uStack_40;
  undefined local_38 [8];
  undefined8 uStack_30;
  undefined local_28 [8];
  undefined8 uStack_20;
  undefined local_18 [8];
  undefined8 uStack_10;
  
  uVar7 = (uint)~r0;
  while (local_88 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    uVar7 = extraout_RDI;
  }
  uVar6 = (uint)(t->Kind_ & 0x1f);
  uVar5 = uVar6 - 1;
  if (0x19 < uVar5) {
    runtime_printlock();
    runtime_printstring((string)in_stack_fffffffffffffef8);
    runtime_printuint(uVar6);
    runtime_printnl();
    runtime_printunlock();
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_fffffffffffffef8);
  }
  bVar8 = SUB81(uVar5,0);
  switch(uVar5) {
  default:
    reflect___abiSeq__assignIntN(a,offset,t->Size_,1,0,bVar8);
    return;
  case 5:
  case 10:
    reflect___abiSeq__assignIntN(a,offset,8,1,0,bVar8);
    return;
  case 0xc:
  case 0xd:
    if ((a->fregs + 1 <= reflect_floatArgRegs) && (uVar7 = t->Size_, uVar7 <= reflect_floatRegSize))
    {
      bVar8 = false;
      while (!bVar8) {
        uStack_30 = in_XMM15._8_8_;
        uStack_20 = uStack_30;
        uStack_30 = offset;
        local_38 = (undefined  [8])0x4;
        local_28 = (undefined  [8])uVar7;
        local_18 = in_XMM15._0_8_;
        uStack_10 = a->fregs;
        uVar5 = (a->steps).cap;
        uVar6 = (a->steps).len + 1;
        prVar3 = (a->steps).array;
        if (uVar5 < uVar6) {
          ~r0_02.cap = in_stack_ffffffffffffff08;
          ~r0_02.array = in_stack_fffffffffffffef8._type;
          ~r0_02.len = (int)in_stack_fffffffffffffef8.data;
          runtime_growslice(prVar3,uVar6,uVar5,1,(internal_abi_Type *)&DAT_00885720,~r0_02);
          (a->steps).cap = extraout_RCX_01;
          prVar3 = extraout_RAX_03;
          prVar4 = a;
          uVar6 = extraout_RBX_03;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_01 = extraout_RAX_04;
            extraout_R11_01[1] = (prVar4->steps).array;
            prVar3 = extraout_RAX_04;
            uVar6 = extraout_RBX_04;
          }
          (prVar4->steps).array = prVar3;
        }
        (a->steps).len = uVar6;
        *(undefined4 *)&prVar3[uVar6 - 1].kind = local_38._0_4_;
        *(undefined4 *)((int)&prVar3[uVar6 - 1].kind + 4) = local_38._4_4_;
        *(undefined4 *)&prVar3[uVar6 - 1].offset = (undefined4)uStack_30;
        *(undefined4 *)((int)&prVar3[uVar6 - 1].offset + 4) = uStack_30._4_4_;
        *(undefined4 *)&prVar3[uVar6 - 1].size = local_28._0_4_;
        *(undefined4 *)((int)&prVar3[uVar6 - 1].size + 4) = local_28._4_4_;
        *(undefined4 *)&prVar3[uVar6 - 1].stkOff = (undefined4)uStack_20;
        *(undefined4 *)((int)&prVar3[uVar6 - 1].stkOff + 4) = uStack_20._4_4_;
        *(undefined4 *)&prVar3[uVar6 - 1].ireg = local_18._0_4_;
        *(undefined4 *)((int)&prVar3[uVar6 - 1].ireg + 4) = local_18._4_4_;
        *(undefined4 *)&prVar3[uVar6 - 1].freg = (undefined4)uStack_10;
        *(undefined4 *)((int)&prVar3[uVar6 - 1].freg + 4) = uStack_10._4_4_;
        a->fregs = a->fregs + 1;
        bVar8 = true;
      }
    }
    return;
  case 0xe:
    if ((a->fregs + 2 <= reflect_floatArgRegs) && (3 < reflect_floatRegSize)) {
      for (i_2 = 0; i_2 < 2; i_2 = i_2 + 1) {
        uStack_60 = in_XMM15._8_8_;
        uStack_50 = uStack_60;
        uStack_60 = offset + i_2 * 4;
        local_68 = (undefined  [8])0x4;
        local_58 = (undefined  [8])0x4;
        local_48 = in_XMM15._0_8_;
        uStack_40 = a->fregs;
        uVar7 = (a->steps).cap;
        uVar5 = (a->steps).len + 1;
        prVar3 = (a->steps).array;
        if (uVar7 < uVar5) {
          ~r0_01.cap = in_stack_ffffffffffffff08;
          ~r0_01.array = in_stack_fffffffffffffef8._type;
          ~r0_01.len = (int)in_stack_fffffffffffffef8.data;
          runtime_growslice(prVar3,uVar5,uVar7,1,(internal_abi_Type *)&DAT_00885720,~r0_01);
          (a->steps).cap = extraout_RCX_00;
          prVar3 = extraout_RAX_01;
          prVar4 = a;
          uVar5 = extraout_RBX_01;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_00 = extraout_RAX_02;
            extraout_R11_00[1] = (prVar4->steps).array;
            prVar3 = extraout_RAX_02;
            uVar5 = extraout_RBX_02;
          }
          (prVar4->steps).array = prVar3;
        }
        (a->steps).len = uVar5;
        *(undefined4 *)&prVar3[uVar5 - 1].kind = local_68._0_4_;
        *(undefined4 *)((int)&prVar3[uVar5 - 1].kind + 4) = local_68._4_4_;
        *(undefined4 *)&prVar3[uVar5 - 1].offset = (undefined4)uStack_60;
        *(undefined4 *)((int)&prVar3[uVar5 - 1].offset + 4) = uStack_60._4_4_;
        *(undefined4 *)&prVar3[uVar5 - 1].size = local_58._0_4_;
        *(undefined4 *)((int)&prVar3[uVar5 - 1].size + 4) = local_58._4_4_;
        *(undefined4 *)&prVar3[uVar5 - 1].stkOff = (undefined4)uStack_50;
        *(undefined4 *)((int)&prVar3[uVar5 - 1].stkOff + 4) = uStack_50._4_4_;
        *(undefined4 *)&prVar3[uVar5 - 1].ireg = local_48._0_4_;
        *(undefined4 *)((int)&prVar3[uVar5 - 1].ireg + 4) = local_48._4_4_;
        *(undefined4 *)&prVar3[uVar5 - 1].freg = (undefined4)uStack_40;
        *(undefined4 *)((int)&prVar3[uVar5 - 1].freg + 4) = uStack_40._4_4_;
        a->fregs = a->fregs + 1;
      }
    }
    return;
  case 0xf:
    if ((a->fregs + 2 <= reflect_floatArgRegs) && (7 < reflect_floatRegSize)) {
      for (i_3 = 0; i_3 < 2; i_3 = i_3 + 1) {
        uStack_90 = in_XMM15._8_8_;
        uStack_80 = uStack_90;
        local_88 = (undefined  [8])0x8;
        local_78 = in_XMM15._0_8_;
        uStack_70 = a->fregs;
        uVar7 = (a->steps).cap;
        uVar5 = (a->steps).len + 1;
        prVar3 = (a->steps).array;
        if (uVar7 < uVar5) {
          ~r0_00.cap = in_stack_ffffffffffffff08;
          ~r0_00.array = in_stack_fffffffffffffef8._type;
          ~r0_00.len = (int)in_stack_fffffffffffffef8.data;
          runtime_growslice(prVar3,uVar5,uVar7,1,(internal_abi_Type *)&DAT_00885720,~r0_00);
          (a->steps).cap = extraout_RCX;
          prVar3 = extraout_RAX;
          prVar4 = a;
          uVar5 = extraout_RBX;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11 = extraout_RAX_00;
            extraout_R11[1] = (prVar4->steps).array;
            prVar3 = extraout_RAX_00;
            uVar5 = extraout_RBX_00;
          }
          (prVar4->steps).array = prVar3;
        }
        (a->steps).len = uVar5;
        *(undefined4 *)&prVar3[uVar5 - 1].kind = 4;
        *(undefined4 *)((int)&prVar3[uVar5 - 1].kind + 4) = 0;
        prVar3[uVar5 - 1].offset = offset + i_3 * 8;
        *(undefined4 *)&prVar3[uVar5 - 1].size = local_88._0_4_;
        *(undefined4 *)((int)&prVar3[uVar5 - 1].size + 4) = local_88._4_4_;
        *(undefined4 *)&prVar3[uVar5 - 1].stkOff = (undefined4)uStack_80;
        *(undefined4 *)((int)&prVar3[uVar5 - 1].stkOff + 4) = uStack_80._4_4_;
        *(undefined4 *)&prVar3[uVar5 - 1].ireg = local_78._0_4_;
        *(undefined4 *)((int)&prVar3[uVar5 - 1].ireg + 4) = local_78._4_4_;
        *(undefined4 *)&prVar3[uVar5 - 1].freg = (undefined4)uStack_70;
        *(undefined4 *)((int)&prVar3[uVar5 - 1].freg + 4) = uStack_70._4_4_;
        a->fregs = a->fregs + 1;
      }
    }
    return;
  case 0x10:
    break;
  case 0x11:
  case 0x12:
  case 0x14:
  case 0x15:
  case 0x19:
    reflect___abiSeq__assignIntN(a,offset,t->Size_,1,1,bVar8);
    return;
  case 0x13:
    reflect___abiSeq__assignIntN(a,offset,8,2,2,bVar8);
    return;
  case 0x16:
    reflect___abiSeq__assignIntN(a,offset,8,3,1,bVar8);
    return;
  case 0x17:
    reflect___abiSeq__assignIntN(a,offset,8,2,1,bVar8);
    return;
  case 0x18:
    iVar2._0_4_ = t[1].Hash;
    iVar2._4_1_ = t[1].TFlag;
    iVar2._5_1_ = t[1].Align_;
    iVar2._6_1_ = t[1].FieldAlign_;
    iVar2._7_1_ = t[1].Kind_;
    uVar7 = 0;
    while( true ) {
      if (iVar2 <= (int)uVar7) {
        return;
      }
      uVar5._0_4_ = t[1].Hash;
      uVar5._4_1_ = t[1].TFlag;
      uVar5._5_1_ = t[1].Align_;
      uVar5._6_1_ = t[1].FieldAlign_;
      uVar5._7_1_ = t[1].Kind_;
      if (uVar5 <= uVar7) break;
      reflect___abiSeq__regAssign
                (a,*(internal_abi_Type **)(t[1].PtrBytes + 8 + uVar7 * 0x18),
                 *(int *)(t[1].PtrBytes + 0x10 + uVar7 * 0x18) + offset,(bool)((char)uVar7 * '\x03')
                );
      if (extraout_AL == '\0') {
        return;
      }
      uVar7 = uVar7 + 1;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  iVar1._0_4_ = t[1].Hash;
  iVar1._4_1_ = t[1].TFlag;
  iVar1._5_1_ = t[1].Align_;
  iVar1._6_1_ = t[1].FieldAlign_;
  iVar1._7_1_ = t[1].Kind_;
  if (iVar1 == 0) {
    return;
  }
  if (iVar1 != 1) {
    return;
  }
  reflect___abiSeq__regAssign(a,(internal_abi_Type *)t[1].Size_,offset,SUB81(uVar7,0));
  return;
}



void reflect___abiSeq__assignIntN
               (reflect_abiSeq *a,uintptr offset,uintptr size,int n,uint8 ptrMap,bool ~r0)

{
  int iVar1;
  uint oldCap;
  runtime_slice ~r0_00;
  reflect_abiStep *extraout_RAX;
  reflect_abiStep *extraout_RAX_00;
  reflect_abiStep *oldPtr;
  int extraout_RCX;
  uint uVar2;
  int i;
  reflect_abiSeq *prVar3;
  uint extraout_RBX;
  uint extraout_RBX_00;
  reflect_abiStepKind kind;
  uint newLen;
  reflect_abiStep **extraout_R11;
  int unaff_R14;
  undefined in_XMM15 [16];
  undefined auVar4 [16];
  interface___ in_stack_ffffffffffffff80;
  int in_stack_ffffffffffffff90;
  undefined4 uStack_20;
  undefined4 uStack_1c;
  undefined4 local_18;
  undefined4 uStack_14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((uint)n < 9) {
    if ((ptrMap != 0) && (size != 8)) {
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffff80);
    }
    if (a->iregs + n <= reflect_intArgRegs) {
      for (uVar2 = 0; (int)uVar2 < n; uVar2 = uVar2 + 1) {
        kind._0_4_ = 2;
        if ((ptrMap & (byte)(1 << ((byte)uVar2 & 0x1f)) & -(uVar2 < 0x20)) != 0) {
          kind._0_4_ = 3;
        }
        iVar1 = a->iregs;
        oldCap = (a->steps).cap;
        newLen = (a->steps).len + 1;
        oldPtr = (a->steps).array;
        auVar4 = in_XMM15;
        if (oldCap < newLen) {
          ~r0_00.cap = in_stack_ffffffffffffff90;
          ~r0_00.array = in_stack_ffffffffffffff80._type;
          ~r0_00.len = (int)in_stack_ffffffffffffff80.data;
          runtime_growslice(oldPtr,newLen,oldCap,1,(internal_abi_Type *)&DAT_00885720,~r0_00);
          (a->steps).cap = extraout_RCX;
          oldPtr = extraout_RAX;
          prVar3 = a;
          newLen = extraout_RBX;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11 = extraout_RAX_00;
            extraout_R11[1] = (prVar3->steps).array;
            oldPtr = extraout_RAX_00;
            newLen = extraout_RBX_00;
          }
          (prVar3->steps).array = oldPtr;
        }
        (a->steps).len = newLen;
        *(undefined4 *)&oldPtr[newLen - 1].kind = (undefined4)kind;
        *(undefined4 *)((int)&oldPtr[newLen - 1].kind + 4) = 0;
        oldPtr[newLen - 1].offset = offset + uVar2 * size;
        uStack_20 = in_XMM15._8_4_;
        uStack_1c = in_XMM15._12_4_;
        oldPtr[newLen - 1].size = size;
        *(undefined4 *)&oldPtr[newLen - 1].stkOff = uStack_20;
        *(undefined4 *)((int)&oldPtr[newLen - 1].stkOff + 4) = uStack_1c;
        local_18 = (undefined4)iVar1;
        uStack_14 = (undefined4)((uint)iVar1 >> 0x20);
        *(undefined4 *)&oldPtr[newLen - 1].ireg = local_18;
        *(undefined4 *)((int)&oldPtr[newLen - 1].ireg + 4) = uStack_14;
        *(undefined4 *)&oldPtr[newLen - 1].freg = uStack_20;
        *(undefined4 *)((int)&oldPtr[newLen - 1].freg + 4) = uStack_1c;
        a->iregs = a->iregs + 1;
        in_XMM15 = auVar4;
      }
      return;
    }
    return;
