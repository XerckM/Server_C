
{
  bool more;
  int unaff_R14;
  undefined uStack0000000000000008;
  
  uStack0000000000000008 = preemptible;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_lock2(&runtime_work.wbufSpans.lock);
  if ((runtime_gcphase == 0) && (runtime_work.wbufSpans.free.first != (runtime_mspan *)0x0)) {
    runtime_systemstack();
    runtime_unlock2(&runtime_work.wbufSpans.lock);
    return;
  }
  runtime_unlock2(&runtime_work.wbufSpans.lock);
  return;
}



// WARNING: Unknown calling convention

void runtime_freeSomeWbufs_func1(void)

{
  char cVar1;
  int iVar2;
  runtime_mspan *s;
  int iVar3;
  runtime_g *gp;
  int in_RDX;
  int unaff_R14;
  runtime_mspan *span;
  int i;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack();
  }
  iVar2 = *(int *)(*(int *)(unaff_R14 + 0x30) + 0xc0);
  cVar1 = *(char *)(in_RDX + 8);
  iVar3 = 0;
  while ((s = runtime_work.wbufSpans.free.first, iVar3 < 0x40 &&
         (((cVar1 == '\0' || (*(char *)(iVar2 + 0xb1) == '\0')) &&
          (runtime_work.wbufSpans.free.first != (runtime_mspan *)0x0))))) {
    runtime___mSpanList__remove((char *)&runtime_work.wbufSpans.free);
    runtime___mheap__freeManual(&runtime_mheap_,s,3);
    iVar3 = iVar3 + 1;
  }
  return;
}



void runtime___mspan__base(runtime_mspan *s,uintptr ~r0)

{
  return;
}



// WARNING: Unknown calling convention
// Local variable h:runtime.mheap *[RAX:8] conflicts with parameter, skipped.
// Local variable s:runtime.mspan *[RBX:8] conflicts with parameter, skipped.

void runtime_recordspan(void *vh,void *p)

{
  uint uVar1;
  int iVar2;
  void *v;
  uint uVar3;
  int n;
  void *__dest;
  int iVar4;
  int iVar5;
  int unaff_R14;
  string in_stack_ffffffffffffffc0;
  ___runtime_mspan new;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (*(int *)((int)vh + 0x10158) <= *(int *)((int)vh + 0x10150)) {
    iVar4 = (*(int *)((int)vh + 0x10158) * 3) / 2;
    n = 0x2000;
    if (0x2000 < iVar4) {
      n = iVar4;
    }
    runtime_sysAlloc(n << 3,&runtime_memstats.other_sys,(void *)(n << 3));
    if (__dest == (void *)0x0) {
                    // WARNING: Subroutine does not return
      runtime_throw(in_stack_ffffffffffffffc0);
    }
    iVar4 = *(int *)((int)vh + 0x10150);
    iVar2 = *(int *)((int)vh + 0x10150);
    if (iVar2 != 0) {
      iVar5 = iVar4;
      if (iVar2 < iVar4) {
        iVar5 = iVar2;
      }
      if (__dest != *(void **)((int)vh + 0x10148)) {
        runtime_memmove(__dest,*(void **)((int)vh + 0x10148),iVar5 << 3);
      }
    }
    v = *(void **)((int)vh + 0x10148);
    iVar2 = *(int *)((int)vh + 0x10158);
    iVar5 = *(int *)((int)vh + 0x10150);
    *(void **)((int)vh + 0x10148) = __dest;
    *(int *)((int)vh + 0x10150) = iVar4;
    *(int *)((int)vh + 0x10158) = n;
    if (iVar5 != 0) {
      runtime_sysFree(v,iVar2 << 3,&runtime_memstats.other_sys);
    }
  }
  uVar3 = *(uint *)((int)vh + 0x10150);
  uVar1 = uVar3 + 1;
  if (*(uint *)((int)vh + 0x10158) < uVar1) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  *(uint *)((int)vh + 0x10150) = uVar1;
  if (uVar1 <= uVar3) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  *(void **)(*(int *)((int)vh + 0x10148) + uVar3 * 8) = p;
  return;
}



void runtime_inHeapOrStack(uintptr b,bool ~r0)

{
  byte bVar1;
  uint uVar2;
  runtime_heapArena *ha;
  runtime_mspan *s;
  
  uVar2 = b + 0x800000000000 >> 0x1a;
  if (uVar2 < 0x400000) {
    if ((*runtime_mheap_.arenas[0])[uVar2] == (runtime_heapArena *)0x0) {
      s = (runtime_mspan *)0x0;
    }
    else {
      s = (*runtime_mheap_.arenas[0])[uVar2]->spans[(dword)(b >> 0xd) & 0x1fff];
    }
  }
  else {
    s = (runtime_mspan *)0x0;
  }
  if ((s != (runtime_mspan *)0x0) && (s->startAddr <= b)) {
    bVar1 = (s->state).s.value;
    if ((bVar1 != 0) && (bVar1 < 3)) {
      return;
    }
    return;
  }
  return;
}



void runtime_spanOfHeap(uintptr p,runtime_mspan *~r0)

{
  uint uVar1;
  runtime_heapArena *ha;
  runtime_mspan *s;
  bool bVar2;
  
  uVar1 = p + 0x800000000000 >> 0x1a;
  if (uVar1 < 0x400000) {
    if ((*runtime_mheap_.arenas[0])[uVar1] == (runtime_heapArena *)0x0) {
      s = (runtime_mspan *)0x0;
    }
    else {
      s = (*runtime_mheap_.arenas[0])[uVar1]->spans[(dword)(p >> 0xd) & 0x1fff];
    }
  }
  else {
    s = (runtime_mspan *)0x0;
  }
  if (s == (runtime_mspan *)0x0) {
    bVar2 = true;
  }
  else {
    bVar2 = (s->state).s.value != 1;
  }
  if (((!bVar2) && (s->startAddr <= p)) && (p < s->limit)) {
    return;
  }
  return;
}



int runtime___mheap__init(EVP_PKEY_CTX *ctx)

{
  EVP_PKEY_CTX *ctx_00;
  EVP_PKEY_CTX *ctx_01;
  EVP_PKEY_CTX *ctx_02;
  EVP_PKEY_CTX *ctx_03;
  EVP_PKEY_CTX *ctx_04;
  EVP_PKEY_CTX *ctx_05;
  int iVar1;
  int i;
  int unaff_R14;
  EVP_PKEY_CTX *pEStack0000000000000008;
  
  pEStack0000000000000008 = ctx;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ctx_00 = pEStack0000000000000008 + 0x16890;
  ctx_01 = pEStack0000000000000008 + 0x168d8;
  ctx_02 = pEStack0000000000000008 + 0x16920;
  ctx_03 = pEStack0000000000000008 + 0x16968;
  ctx_04 = pEStack0000000000000008 + 0x169b0;
  ctx_05 = pEStack0000000000000008 + 0x16a00;
  runtime___fixalloc__init(pEStack0000000000000008 + 0x16848);
  runtime___fixalloc__init(ctx_00);
  runtime___fixalloc__init(ctx_01);
  runtime___fixalloc__init(ctx_02);
  runtime___fixalloc__init(ctx_03);
  runtime___fixalloc__init(ctx_04);
  runtime___fixalloc__init(ctx_05);
  pEStack0000000000000008[0x16888] = (EVP_PKEY_CTX)0x0;
  for (i = 0; i < 0x88; i = i + 1) {
    pEStack0000000000000008[i * 0xc0 + 0x10248] = SUB81(i,0);
  }
  iVar1 = runtime___pageAlloc__init(pEStack0000000000000008 + 8);
  return iVar1;
}



// WARNING: Unknown calling convention

void runtime___mheap__reclaim(runtime_mheap *h,uintptr npage)

{
  sdword *psVar1;
  runtime_internal_atomic_Uint64 *prVar2;
  sdword sVar3;
  int iVar4;
  uint n;
  runtime_arenaIdx *pageIdx;
  uintptr ~r0;
  uint uVar5;
  bool bVar6;
  runtime_mheap *h_00;
  uint extraout_RAX;
  uintptr nfound;
  runtime_m *mp;
  uintptr take;
  bool locked;
  uintptr credit;
  uint uVar7;
  int unaff_R14;
  runtime_g *gp;
  runtime_g *gp_1;
  bool bVar8;
  runtime_mheap *prStack0000000000000008;
  __runtime_arenaIdx in_stack_ffffffffffffff98;
  
  prStack0000000000000008 = h;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (0x7fffffffffffffff < (prStack0000000000000008->reclaimIndex).value) {
    return;
  }
  psVar1 = (sdword *)(*(int *)(unaff_R14 + 0x30) + 0x108);
  *psVar1 = *psVar1 + 1;
  iVar4 = *(int *)(unaff_R14 + 0x30);
  if (runtime_trace.enabled != false) {
    runtime_traceGCSweepStart();
  }
  n = (prStack0000000000000008->sweepArenas).len;
  pageIdx = (prStack0000000000000008->sweepArenas).array;
  ~r0 = (prStack0000000000000008->sweepArenas).cap;
  bVar6 = false;
  h_00 = prStack0000000000000008;
  take = npage;
LAB_0042c6c3:
  do {
    if (take == 0) {
LAB_0042c7cd:
      if (bVar6) {
        runtime_unlock2(&h_00->lock);
      }
      if (runtime_trace.enabled != false) {
        runtime_traceGCSweepDone();
      }
      sVar3 = *(sdword *)(iVar4 + 0x108);
      *(sdword *)(iVar4 + 0x108) = sVar3 + -1;
      if ((sVar3 == 1) && (*(char *)(unaff_R14 + 0xb1) != '\0')) {
        *(undefined8 *)(unaff_R14 + 0x10) = 0xfffffffffffffade;
      }
      return;
    }
    uVar5 = (h_00->reclaimCredit).value;
    if (uVar5 != 0) {
      uVar7 = uVar5;
      if (take < uVar5) {
        uVar7 = take;
      }
      LOCK();
      bVar8 = uVar5 == (h_00->reclaimCredit).value;
      if (bVar8) {
        (h_00->reclaimCredit).value = uVar5 - uVar7;
      }
      UNLOCK();
      if (bVar8) {
        take = take - uVar7;
      }
      goto LAB_0042c6c3;
    }
    LOCK();
    prVar2 = &h_00->reclaimIndex;
    uVar5 = prVar2->value;
    prVar2->value = prVar2->value + 0x200;
    UNLOCK();
    if (n <= uVar5 >> 0xd) {
      LOCK();
      (h_00->reclaimIndex).value = 0x8000000000000000;
      UNLOCK();
      goto LAB_0042c7cd;
    }
    if (!bVar6) {
      runtime_lock2(&h_00->lock);
      h_00 = prStack0000000000000008;
    }
    runtime___mheap__reclaimChunk(h_00,in_stack_ffffffffffffff98,(uintptr)pageIdx,n,~r0);
    if (take < extraout_RAX) {
      LOCK();
      (prStack0000000000000008->reclaimCredit).value =
           (prStack0000000000000008->reclaimCredit).value + (extraout_RAX - take);
      UNLOCK();
      take = 0;
    }
    else {
      take = take - extraout_RAX;
    }
    bVar6 = true;
    h_00 = prStack0000000000000008;
  } while( true );
}



// WARNING: Removing unreachable block (ram,0x0042c88c)
// WARNING: Removing unreachable block (ram,0x0042c866)
// Local variable n0:uintptr[R8:8] conflicts with parameter, skipped.

void runtime___mheap__reclaimChunk
               (runtime_mheap *h,__runtime_arenaIdx arenas,uintptr pageIdx,uintptr n,uintptr ~r0)

{
  int iVar1;
  byte bVar2;
  uint8 inUseUnmarked;
  byte extraout_AL;
  int extraout_RAX;
  bool ~r0_00;
  runtime_sweepLocked ~r0_01;
  uintptr npages;
  uint32 state;
  uintptr nFreed;
  char extraout_BL;
  bool ok;
  runtime_sweepLocker sl;
  runtime_mspan *s;
  uint in_RSI;
  runtime_arenaIdx ai;
  runtime_heapArena *prVar3;
  dword dVar4;
  uint arenaPage;
  uint uVar6;
  uint8 *puVar7;
  uint in_R8;
  uint uVar8;
  int i;
  uint j;
  int unaff_R14;
  uint8 *puVar9;
  uint uStack0000000000000030;
  runtime_sweepLocker local_90;
  runtime_sweepLocked local_88;
  uintptr local_80;
  uint local_78;
  int local_70;
  runtime_heapArena *ha;
  uint local_60;
  uintptr local_58;
  uintptr local_50;
  runtime_sweepLocked local_48;
  uint local_40;
  uint local_38;
  uint local_30;
  runtime_mheap *local_28;
  uint8 *local_20;
  uint8 *local_18;
  uint8 *local_10;
  uint uVar5;
  
  while (uStack0000000000000030 = in_R8, &local_28 <= *(runtime_mheap ***)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_R8 = uStack0000000000000030;
  }
  state = (dword)runtime_sweep.active.state.value & 0x80000000;
  if (state == 0) {
    runtime_sweep.active.state.value =
         (runtime_internal_atomic_Uint32)((sdword)runtime_sweep.active.state.value + 1);
    LOCK();
    UNLOCK();
  }
  local_90.sweepGen = runtime_mheap_.sweepgen;
  local_90.valid = state == 0;
  if (!local_90.valid) {
    return;
  }
  local_80 = 0;
  local_28 = h;
  while( true ) {
    if (in_R8 == 0) {
      sl._4_4_ = 0;
      sl.sweepGen = local_90.sweepGen;
      runtime___activeSweep__end(&runtime_sweep.active,sl);
      if (runtime_trace.enabled != false) {
        local_30 = (uStack0000000000000030 - local_80) * 0x2000;
        runtime_unlock2(&local_28->lock);
        runtime_traceGCSweepSpan(local_30);
        runtime_lock2(&local_28->lock);
      }
      return;
    }
    if (n <= in_RSI >> 0xd) {
                    // WARNING: Subroutine does not return
      runtime_panicIndexU();
    }
    uVar8 = *(uint *)(pageIdx + (in_RSI >> 0xd) * 8);
    if (0x3fffff < uVar8) {
                    // WARNING: Subroutine does not return
      runtime_panicIndexU();
    }
    dVar4 = (dword)in_RSI & 0x1fff;
    uVar5 = (uint)dVar4;
    uVar6 = (uint)(dVar4 >> 3);
    prVar3 = (*h->arenas[0])[uVar8];
    if (0x400 < uVar6) break;
    iVar1 = uVar6 - 0x400;
    uVar6 = uVar6 & iVar1 >> 0x3f;
    uVar8 = in_R8 >> 3;
    puVar9 = prVar3->pageInUse + uVar6;
    puVar7 = prVar3->pageMarks + uVar6;
    if ((uint)-iVar1 < uVar8 || -uVar8 == iVar1) {
      uVar8 = -iVar1;
    }
    local_78 = uVar8;
    ha = prVar3;
    local_40 = in_RSI;
    local_38 = uVar5;
    local_30 = in_R8;
    local_20 = puVar7;
    local_18 = puVar9;
    for (i = 0; i < (int)uVar8; i = i + 1) {
      local_10 = puVar9 + i;
      if (uVar8 <= (uint)i) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      bVar2 = *local_10 & ~puVar7[i];
      if (bVar2 != 0) {
        local_70 = i;
        for (~r0_01.mspan = (runtime_mspan *)0x0; ~r0_01.mspan < (runtime_mspan *)0x8;
            ~r0_01.mspan = (runtime_mspan *)((int)&(~r0_01.mspan)->next + 1)) {
          if (((byte)(1 << ((byte)~r0_01.mspan & 0x1f)) & bVar2) != 0) {
            uVar8 = (int)&(~r0_01.mspan)->next + uVar5 + i * 8;
            if (0x1fff < uVar8) {
                    // WARNING: Subroutine does not return
              runtime_panicIndexU();
            }
            local_50 = local_80;
            local_48.mspan = ~r0_01.mspan;
            runtime___sweepLocker__tryAcquire(&local_90,prVar3->spans[uVar8],~r0_01,SUB81(puVar7,0))
            ;
            ~r0_01.mspan = local_48.mspan;
            local_80 = local_50;
            prVar3 = ha;
            puVar7 = local_20;
            uVar8 = local_78;
            i = local_70;
            in_RSI = local_40;
            uVar5 = local_38;
            puVar9 = local_18;
            if (extraout_BL != '\0') {
              local_58 = *(int *)(extraout_RAX + 0x20) + local_50;
              runtime_unlock2(&local_28->lock);
              runtime___sweepLocked__sweep(&local_88,false,~r0_00);
              local_60 = (uint)extraout_AL;
              runtime_lock2(&local_28->lock);
              bVar2 = *local_10 & ~local_20[local_70];
              ~r0_01.mspan = local_48.mspan;
              local_80 = local_50;
              prVar3 = ha;
              puVar7 = local_20;
              uVar8 = local_78;
              i = local_70;
              in_RSI = local_40;
              uVar5 = local_38;
              puVar9 = local_18;
              if (local_60 != 0) {
                local_80 = local_58;
              }
            }
          }
          in_R8 = local_30;
        }
      }
      h = local_28;
    }
    in_RSI = in_RSI + uVar8 * 8;
    in_R8 = in_R8 + uVar8 * -8;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceBU();
}



void runtime___mheap__alloc
               (runtime_mheap *h,uintptr npages,runtime_spanClass spanclass,runtime_mspan *~r0)

{
  int unaff_R14;
  undefined4 in_XMM15_Dc;
  undefined4 in_XMM15_Dd;
  undefined8 local_38;
  code *local_30;
  runtime_mheap *prStack_28;
  uintptr local_20;
  undefined local_18 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  local_38 = 0;
  local_30 = runtime___mheap__alloc_func1;
  local_18._9_7_ = (undefined7)(CONCAT44(in_XMM15_Dd,in_XMM15_Dc) >> 8);
  local_18[8] = spanclass;
  local_18._0_8_ = &local_38;
  prStack_28 = h;
  local_20 = npages;
  runtime_systemstack();
  return;
}



// WARNING: Unknown calling convention

void runtime___mheap__alloc_func1(void)

{
  runtime_spanClass spanclass_00;
  runtime_mheap *h_00;
  uintptr npage;
  runtime_mspan *prVar1;
  runtime_mheap *h;
  runtime_mspan *extraout_RAX;
  int in_RDX;
  uintptr npages;
  runtime_mspan **_s;
  runtime_mspan *extraout_RSI;
  runtime_mspan *s;
  runtime_spanClass spanclass;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack();
  }
  h_00 = *(runtime_mheap **)(in_RDX + 8);
  npage = *(uintptr *)(in_RDX + 0x10);
  prVar1 = *(runtime_mspan **)(in_RDX + 0x18);
  spanclass_00 = *(runtime_spanClass *)(in_RDX + 0x20);
  s = prVar1;
  if (runtime_sweep.active.state.value != 0x80000000) {
    runtime___mheap__reclaim(h_00,npage);
    s = extraout_RSI;
  }
  runtime___mheap__allocSpan(h_00,npage,0,spanclass_00,s);
  prVar1->next = extraout_RAX;
  return;
}



void runtime___mheap__allocManual
               (runtime_mheap *h,uintptr npages,runtime_spanAllocType typ,runtime_mspan *~r0)

{
  runtime_mspan *in_RSI;
  runtime_mspan *extraout_RSI;
  int unaff_R14;
  string in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x18)) {
    runtime_morestackc();
    in_RSI = extraout_RSI;
  }
  if (typ != 0) {
    runtime___mheap__allocSpan(h,npages,typ,0,in_RSI);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_throw(in_stack_ffffffffffffffe0);
}



// WARNING: Unknown calling convention

void runtime___mheap__setSpans(runtime_mheap *h,uintptr base,uintptr npage,runtime_mspan *s)

{
  uint uVar1;
  runtime_heapArena *ha;
  runtime_heapArena *prVar2;
  uint uVar3;
  uintptr n;
  uint uVar4;
  uintptr i;
  
  uVar1 = base + 0x800000000000 >> 0x1a;
  if (0x3fffff < uVar1) {
                    // WARNING: Subroutine does not return
    runtime_panicIndexU();
  }
  prVar2 = (*h->arenas[0])[uVar1];
  uVar1 = 0;
  do {
    if (npage <= uVar1) {
      return;
    }
    uVar4 = (uint)((sdword)(base >> 0xd) + (sdword)uVar1 & 0x1fff);
    if (uVar4 == 0) {
      uVar3 = uVar1 * 0x2000 + base + 0x800000000000 >> 0x1a;
      if (0x3fffff < uVar3) {
                    // WARNING: Subroutine does not return
        runtime_panicIndexU();
      }
      prVar2 = (*h->arenas[0])[uVar3];
    }
    prVar2->spans[uVar4] = s;
    uVar1 = uVar1 + 1;
  } while( true );
}



void runtime___mheap__allocNeedsZero(runtime_mheap *h,uintptr base,uintptr npage,bool needZero)

{
  runtime_heapArena *prVar1;
  uint uVar2;
  uintptr arenaBase;
  uint uVar3;
  runtime_heapArena *ha;
  uintptr zeroedBase;
  uintptr uVar4;
  uintptr arenaLimit;
  int unaff_R14;
  bool bVar5;
  string in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  do {
    if (npage == 0) {
      return;
    }
    uVar3 = base + 0x800000000000 >> 0x1a;
    if (0x3fffff < uVar3) {
                    // WARNING: Subroutine does not return
      runtime_panicIndexU();
    }
    prVar1 = (*h->arenas[0])[uVar3];
    uVar4 = prVar1->zeroedBase;
    uVar2 = (uint)((dword)base & 0x3ffffff);
    uVar3 = npage * 0x2000 + uVar2;
    if (0x4000000 < uVar3) {
      uVar3 = 0x4000000;
    }
    while (uVar4 < uVar3) {
      LOCK();
      bVar5 = uVar4 == prVar1->zeroedBase;
      if (bVar5) {
        prVar1->zeroedBase = uVar3;
      }
      UNLOCK();
      if (bVar5) break;
      uVar4 = prVar1->zeroedBase;
      if ((uVar4 <= uVar3) && (uVar2 < uVar4)) {
                    // WARNING: Subroutine does not return
        runtime_throw(in_stack_ffffffffffffffe8);
      }
    }
    base = (uVar3 - uVar2) + base;
    npage = npage - (uVar3 - uVar2 >> 0xd);
  } while( true );
}



void runtime___mheap__allocMSpanLocked(runtime_mheap *h,runtime_mspan *~r0)

{
  uint uVar1;
  int iVar2;
  runtime_mspan *s;
  undefined8 extraout_RAX;
  int iVar3;
  runtime_p *pp;
  runtime_mspan *extraout_RBX;
  runtime_mspan *extraout_RBX_00;
  int unaff_R14;
  int i;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x18)) {
    runtime_morestackc();
    ~r0 = extraout_RBX_00;
  }
  iVar2 = *(int *)(*(int *)(unaff_R14 + 0x30) + 0xd0);
  if (iVar2 == 0) {
    runtime___fixalloc__alloc(&h->spanalloc,~r0);
    return;
  }
  if (*(int *)(iVar2 + 0xdc8) == 0) {
    for (iVar3 = 0; iVar3 < 0x40; iVar3 = iVar3 + 1) {
      runtime___fixalloc__alloc(&h->spanalloc,~r0);
      *(undefined8 *)(iVar2 + 0xdd0 + iVar3 * 8) = extraout_RAX;
      ~r0 = extraout_RBX;
    }
    *(undefined8 *)(iVar2 + 0xdc8) = 0x40;
  }
  uVar1 = *(int *)(iVar2 + 0xdc8) - 1;
  if (uVar1 < 0x80) {
    *(uint *)(iVar2 + 0xdc8) = uVar1;
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void runtime___mheap__allocSpan
               (runtime_mheap *h,uintptr npages,runtime_spanAllocType typ,
               runtime_spanClass spanclass,runtime_mspan *s)

{
  int iVar1;
  int iVar2;
  byte bVar3;
  string s_00;
  runtime_pageCache ~r0;
  uintptr extraout_RAX;
  runtime_pageCache *c;
  uintptr base;
  runtime_pageCache *extraout_RAX_00;
  uintptr extraout_RAX_01;
  uintptr growth;
  runtime_pageCache *extraout_RAX_02;
  runtime_pageCache *prVar4;
  runtime_mspan *extraout_RAX_03;
  int64 start;
  int extraout_RAX_04;
  uintptr released;
  int *extraout_RAX_05;
  runtime_heapStatsDelta *stats;
  undefined7 in_register_00000009;
  uint64 extraout_RCX;
  uintptr extraout_RCX_00;
  uintptr ~r0_00;
  uintptr addr;
  uintptr todo;
  int64 now;
  bool forceScavenge;
  char extraout_BL;
  bool ok;
  runtime_p *pp_1;
  runtime_mspan *s_01;
  int64 limit;
  uint64 extraout_RBX;
  runtime_mspan *extraout_RBX_00;
  uintptr scav;
  runtime_mspan *extraout_RBX_01;
  runtime_mspan *extraout_RBX_02;
  runtime_mspan *prVar5;
  uintptr uVar6;
  runtime_heapStatsDelta *extraout_RBX_03;
  runtime_heapStatsDelta *extraout_RBX_04;
  runtime_heapStatsDelta *~r0_01;
  uintptr extraout_RSI;
  uintptr uVar7;
  runtime_spanClass spanclass_00;
  bool ~r1;
  undefined7 in_register_00000039;
  uintptr extraout_RDI;
  uintptr scav_00;
  uintptr scav_01;
  runtime_mspan *s_1;
  uint uVar8;
  uintptr bytesToScavenge;
  uint64 goal;
  uint nbytes;
  uint64 retained;
  uintptr overage;
  int unaff_R14;
  runtime_g *gp;
  bool force;
  runtime_mheap *prStack0000000000000008;
  uintptr uStack0000000000000010;
  runtime_spanAllocType rStack0000000000000018;
  uint8 *in_stack_ffffffffffffff68;
  uint8 *now_00;
  int in_stack_ffffffffffffff70;
  uint64 in_stack_ffffffffffffff78;
  runtime_pageAlloc *local_18;
  runtime_p *pp;
  
  uVar6 = CONCAT71(in_register_00000039,spanclass);
  uVar7 = CONCAT71(in_register_00000009,typ);
  prStack0000000000000008 = h;
  uStack0000000000000010 = npages;
  while( true ) {
    spanclass_00 = (runtime_spanClass)uVar6;
    rStack0000000000000018 = (runtime_spanAllocType)uVar7;
    if (*(runtime_pageAlloc ***)(unaff_R14 + 0x18) < &local_18) break;
    runtime_morestackc();
    uVar7 = (uintptr)rStack0000000000000018;
    uVar6 = uVar6 & 0xff;
  }
  pp = *(runtime_p **)(*(int *)(unaff_R14 + 0x30) + 0xd0);
  if (pp == (runtime_p *)0x0) {
    prVar4 = (runtime_pageCache *)0x0;
    s_01 = (runtime_mspan *)0x0;
    prVar5 = (runtime_mspan *)0x0;
  }
  else if (uStack0000000000000010 < 0x10) {
    if ((pp->pcache).cache == 0) {
      local_18 = &prStack0000000000000008->pages;
      runtime_lock2(&prStack0000000000000008->lock);
      ~r0.cache = in_stack_ffffffffffffff70;
      ~r0.base = (uintptr)in_stack_ffffffffffffff68;
      ~r0.scav = in_stack_ffffffffffffff78;
      runtime___pageAlloc__allocToCache(local_18,~r0);
      (pp->pcache).base = extraout_RAX;
      (pp->pcache).cache = extraout_RBX;
      (pp->pcache).scav = extraout_RCX;
      runtime_unlock2(&prStack0000000000000008->lock);
      uVar7 = extraout_RCX_00;
      uVar6 = extraout_RDI;
    }
    runtime___pageCache__alloc(&pp->pcache,uStack0000000000000010,uVar7,uVar6);
    prVar4 = c;
    prVar5 = extraout_RBX_00;
    if (c == (runtime_pageCache *)0x0) {
      s_01 = (runtime_mspan *)0x0;
    }
    else {
      iVar1 = *(int *)(*(int *)(unaff_R14 + 0x30) + 0xd0);
      if ((iVar1 == 0) || (iVar2 = *(int *)(iVar1 + 0xdc8), iVar2 == 0)) {
        s_01 = (runtime_mspan *)0x0;
      }
      else {
        if (0x7f < iVar2 - 1U) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        s_01 = *(runtime_mspan **)(iVar1 + 0xdc8 + iVar2 * 8);
        *(uint *)(iVar1 + 0xdc8) = iVar2 - 1U;
      }
      if (s_01 != (runtime_mspan *)0x0) {
        todo = 0;
        goto LAB_0042d349;
      }
    }
  }
  else {
    prVar4 = (runtime_pageCache *)0x0;
    s_01 = (runtime_mspan *)0x0;
    prVar5 = (runtime_mspan *)0x0;
  }
  runtime_lock2(&prStack0000000000000008->lock);
  if (prVar4 == (runtime_pageCache *)0x0) {
    local_18 = &prStack0000000000000008->pages;
    runtime___pageAlloc__alloc(local_18,uStack0000000000000010,(uintptr)local_18,scav_00);
    if (extraout_RAX_00 == (runtime_pageCache *)0x0) {
      runtime___mheap__grow(prStack0000000000000008,uStack0000000000000010,~r0_00,~r1);
      if (extraout_BL == '\0') {
        runtime_unlock2(&prStack0000000000000008->lock);
        return;
      }
      runtime___pageAlloc__alloc(local_18,uStack0000000000000010,addr,scav_01);
      prVar4 = extraout_RAX_02;
      todo = extraout_RAX_01;
      prVar5 = extraout_RBX_02;
      if (extraout_RAX_02 == (runtime_pageCache *)0x0) {
        s_00.len = in_stack_ffffffffffffff70;
        s_00.str = in_stack_ffffffffffffff68;
                    // WARNING: Subroutine does not return
        runtime_throw(s_00);
      }
    }
    else {
      todo = 0;
      prVar4 = extraout_RAX_00;
      prVar5 = extraout_RBX_01;
    }
  }
  else {
    todo = 0;
  }
  if (s_01 == (runtime_mspan *)0x0) {
    runtime___mheap__allocMSpanLocked(prStack0000000000000008,prVar5);
    s_01 = extraout_RAX_03;
  }
  runtime_unlock2(&prStack0000000000000008->lock);
LAB_0042d349:
  if (runtime_gcCPULimiter.enabled.u.value == 0) {
    uVar8 = (int)&prVar5->next + runtime_gcController.mappedReady.value;
    force = (uint)runtime_gcController.memoryLimit.value < uVar8;
    nbytes = 0;
    if (force) {
      nbytes = uVar8 - runtime_gcController.memoryLimit.value;
    }
  }
  else {
    force = false;
    nbytes = 0;
  }
  if (((runtime_scavenge.gcPercentGoal.value != 0xffffffffffffffff) && (todo != 0)) &&
     (retained = runtime_gcController.heapInUse + runtime_gcController.heapFree + todo,
     runtime_scavenge.gcPercentGoal.value < retained)) {
    if (retained - runtime_scavenge.gcPercentGoal.value < todo) {
      todo = retained - runtime_scavenge.gcPercentGoal.value;
    }
    if (nbytes < todo) {
      nbytes = todo;
    }
  }
  if ((pp != (runtime_p *)0x0) && (nbytes != 0)) {
    runtime_nanotime1();
    bVar3 = (byte)((pp->limiterEvent).stamp.value >> 0x38);
    uVar7 = extraout_RSI;
    if (bVar3 >> 5 == 0) {
      uVar7 = (uint)in_stack_ffffffffffffff68 & 0x1fffffffffffffff;
      LOCK();
      (pp->limiterEvent).stamp.value = uVar7 | 0x6000000000000000;
      UNLOCK();
    }
    now_00 = in_stack_ffffffffffffff68;
    runtime___pageAlloc__scavenge
              (&prStack0000000000000008->pages,nbytes,
               (func___bool **)&PTR_runtime___mheap__allocSpan_func1_008eb230,force,uVar7);
    LOCK();
    runtime_mheap_.pages.scav.releasedEager.value =
         runtime_mheap_.pages.scav.releasedEager.value + extraout_RAX_04;
    UNLOCK();
    runtime_nanotime1();
    if (bVar3 >> 5 == 0) {
      runtime___limiterEvent__stop(&pp->limiterEvent,3,(int64)now_00);
    }
    LOCK();
    runtime_scavenge.assistTime.value =
         (int64)(now_00 + (runtime_scavenge.assistTime.value - (int)in_stack_ffffffffffffff68));
    UNLOCK();
  }
  runtime___mheap__initSpan
            (prStack0000000000000008,s_01,rStack0000000000000018,spanclass_00,(uintptr)prVar4,
             uStack0000000000000010);
  uVar7 = uStack0000000000000010;
  uVar6 = uStack0000000000000010 * 0x2000;
  if (prVar5 != (runtime_mspan *)0x0) {
    LOCK();
    runtime_gcController.mappedReady.value =
         (int)&prVar5->next + runtime_gcController.mappedReady.value;
    UNLOCK();
    runtime_sysUsedOS(prVar4,uVar6);
    runtime___sysMemStat__add(&runtime_gcController.heapReleased,-(int)prVar5);
  }
  runtime___sysMemStat__add(&runtime_gcController.heapFree,(int)prVar5 + uVar7 * -0x2000);
