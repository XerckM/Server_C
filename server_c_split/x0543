  crypto_x509_pkix_RDNSequence *issuerRDNs;
  char extraout_AL_09;
  char extraout_AL_10;
  uint64 extraout_RAX_02;
  crypto_x509_pkix_RDNSequence *rdns_00;
  crypto_x509_pkix_RDNSequence *subjectRDNs;
  crypto_x509_PublicKeyAlgorithm extraout_RAX_03;
  internal_abi_Type *extraout_RAX_04;
  undefined8 *extraout_RAX_05;
  undefined8 *extraout_RAX_06;
  undefined8 *extraout_RAX_07;
  undefined8 *extraout_RAX_08;
  undefined8 *extraout_RAX_09;
  undefined8 *extraout_RAX_10;
  undefined8 *extraout_RAX_11;
  undefined8 *extraout_RAX_12;
  undefined8 *extraout_RAX_13;
  undefined8 *extraout_RAX_14;
  undefined8 *extraout_RAX_15;
  undefined8 *extraout_RAX_16;
  undefined8 *extraout_RAX_17;
  undefined8 *extraout_RAX_18;
  undefined8 *extraout_RAX_19;
  undefined8 *extraout_RAX_20;
  undefined8 *extraout_RAX_21;
  undefined8 *extraout_RAX_22;
  undefined8 *extraout_RAX_23;
  undefined8 *extraout_RAX_24;
  undefined8 *extraout_RAX_25;
  int *extraout_RAX_26;
  void *~r0_08;
  char *extraout_RAX_27;
  undefined *extraout_RAX_28;
  crypto_x509_pkix_Extension *extraout_RAX_29;
  crypto_x509_pkix_Extension *extraout_RAX_30;
  crypto_x509_pkix_Extension *oldPtr;
  undefined8 *extraout_RAX_31;
  undefined8 *extraout_RAX_32;
  int extraout_RAX_33;
  uint8 *extraout_RAX_34;
  uint8 *extraout_RAX_35;
  uint8 *puVar2;
  undefined8 *extraout_RAX_36;
  bool ~r0_09;
  bool ~r0_10;
  int in_RCX;
  time_Location *extraout_RCX;
  time_Location *extraout_RCX_00;
  time_Location *ptVar3;
  int extraout_RCX_01;
  int extraout_RCX_02;
  crypto_x509_Certificate *extraout_RCX_03;
  crypto_x509_Certificate *extraout_RCX_04;
  undefined8 extraout_RCX_05;
  int extraout_RCX_06;
  crypto_x509_Certificate *extraout_RCX_07;
  crypto_x509_Certificate *pcVar4;
  int extraout_RCX_08;
  int iVar5;
  void *in_RBX;
  void *~r0_11;
  void *~r0_12;
  void *~r0_13;
  void *~r0_14;
  void *~r0_15;
  void *~r0_16;
  void *~r0_17;
  void *~r0_18;
  void *extraout_RBX;
  void *~r0_19;
  int extraout_RBX_00;
  void *~r0_20;
  int64 extraout_RBX_01;
  void *~r0_21;
  int extraout_RBX_02;
  void *~r0_22;
  void *~r0_23;
  void *~r0_24;
  void *~r0_25;
  void *extraout_RBX_03;
  void *extraout_RBX_04;
  void *pvVar6;
  void *~r0_26;
  void *~r0_27;
  void *~r0_28;
  void *~r0_29;
  void *~r0_30;
  undefined8 extraout_RBX_05;
  void *extraout_RBX_06;
  void *~r0_31;
  uint newLen;
  uint extraout_RBX_07;
  uint extraout_RBX_08;
  void *~r0_32;
  int extraout_RBX_09;
  bool ~r0_33;
  int64 extraout_RSI;
  int64 extraout_RSI_00;
  int64 iVar7;
  undefined8 extraout_RSI_01;
  runtime_itab *prVar8;
  bool ~r0_34;
  bool ~r0_35;
  bool ~r0_36;
  bool ~r0_37;
  bool ~r0_38;
  bool ~r0_39;
  bool ~r0_40;
  bool ~r0_41;
  bool extraout_DIL;
  uint8 *extraout_RDI;
  uint8 *extraout_RDI_00;
  math_big_Int *extraout_RDI_01;
  math_big_Int *pmVar9;
  uint8 *extraout_RDI_02;
  uint64 extraout_RDI_03;
  uint64 extraout_RDI_04;
  uint64 extraout_RDI_05;
  uint64 uVar10;
  uint8 *extraout_RDI_06;
  uint8 *extraout_RDI_07;
  undefined4 *extraout_RDI_08;
  undefined4 *puVar11;
  crypto_x509_Certificate *extraout_R8;
  crypto_x509_Certificate *extraout_R8_00;
  crypto_x509_Certificate *extraout_R8_01;
  time_Location *extraout_R8_02;
  time_Location *extraout_R8_03;
  time_Location *extraout_R8_04;
  time_Location *ptVar12;
  crypto_x509_Certificate *extraout_R8_05;
  crypto_x509_Certificate *extraout_R8_06;
  undefined8 extraout_R8_07;
  int extraout_R9;
  int extraout_R9_00;
  int extraout_R9_01;
  undefined8 extraout_R9_02;
  int extraout_R10;
  uint8 **extraout_R11;
  uint8 **extraout_R11_00;
  math_big_Int **extraout_R11_01;
  uint8 **extraout_R11_02;
  time_Location **extraout_R11_03;
  time_Location **extraout_R11_04;
  uint8 **extraout_R11_05;
  uint8 **extraout_R11_06;
  void **extraout_R11_07;
  crypto_x509_pkix_Extension **extraout_R11_08;
  uint8 **extraout_R11_09;
  int unaff_R14;
  undefined in_XMM15 [16];
  interface___ in_stack_fffffffffffffb70;
  internal_abi_Type *in_stack_fffffffffffffb80;
  runtime_itab *in_stack_fffffffffffffb88;
  void *in_stack_fffffffffffffb90;
  time_Location *in_stack_fffffffffffffb98;
  uint64 in_stack_fffffffffffffba0;
  undefined in_stack_fffffffffffffba8 [16];
  runtime_itab *in_stack_fffffffffffffbb8;
  void *in_stack_fffffffffffffbc0;
  int in_stack_fffffffffffffbc8;
  __uint8 in_stack_fffffffffffffbd0;
  undefined7 in_stack_fffffffffffffbe8;
  bool in_stack_fffffffffffffbef;
  bool bVar13;
  void *in_stack_fffffffffffffbf0;
  runtime_itab *in_stack_fffffffffffffbf8;
  math_big_Int *pmVar14;
  vendor_golang_org_x_crypto_cryptobyte_String validity;
  vendor_golang_org_x_crypto_cryptobyte_String tbs;
  vendor_golang_org_x_crypto_cryptobyte_String subjectSeq;
  vendor_golang_org_x_crypto_cryptobyte_String spki;
  vendor_golang_org_x_crypto_cryptobyte_String sigAISeq;
  vendor_golang_org_x_crypto_cryptobyte_String pkAISeq;
  vendor_golang_org_x_crypto_cryptobyte_String outerSigAISeq;
  vendor_golang_org_x_crypto_cryptobyte_String issuerSeq;
  vendor_golang_org_x_crypto_cryptobyte_String input;
  vendor_golang_org_x_crypto_cryptobyte_String extensions;
  vendor_golang_org_x_crypto_cryptobyte_String extension;
  encoding_asn1_BitString spk;
  encoding_asn1_BitString signature;
  undefined local_298 [16];
  undefined local_288 [32];
  crypto_x509_pkix_Extension ext;
  undefined4 local_228;
  undefined4 uStack_224;
  undefined4 uStack_220;
  undefined4 uStack_21c;
  undefined4 local_218;
  undefined4 uStack_214;
  undefined4 uStack_210;
  undefined4 uStack_20c;
  undefined4 local_208;
  undefined4 uStack_204;
  undefined4 uStack_200;
  undefined4 uStack_1fc;
  crypto_x509_pkix_AlgorithmIdentifier pkAI;
  undefined local_138 [152];
  crypto_x509_publicKeyInfo local_a0;
  
  while (&stack0xfffffffffffffbf0 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_newobject((internal_abi_Type *)&DAT_008aa080,in_RBX);
  input.array = (uint8 *)~r0;
  input.len = (int)in_RBX;
  input.cap = in_RCX;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Element(&input,&input,0x30,~r0_34);
  if (extraout_AL == '\0') {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_11);
    extraout_RAX_25[1] = 0x1b;
    *extraout_RAX_25 = &DAT_008bd369;
    return;
  }
  (out->Raw).len = input.len;
  (out->Raw).cap = input.cap;
  puVar2 = input.array;
  pcVar4 = out;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RDI;
    extraout_R11[1] = (extraout_R8->Raw).array;
    puVar2 = extraout_RDI;
    pcVar4 = extraout_R8;
  }
  (pcVar4->Raw).array = puVar2;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(&input,&input,0x30,SUB81(puVar2,0));
  if (extraout_AL_00 == '\0') {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_12);
    extraout_RAX_24[1] = 0x1b;
    *extraout_RAX_24 = &DAT_008bd369;
    return;
  }
  tbs.array = (uint8 *)0x0;
  tbs._8_16_ = in_XMM15;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Element(&input,&tbs,0x30,~r0_35);
  if (extraout_AL_01 == '\0') {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_13);
    extraout_RAX_23[1] = 0x1f;
    *extraout_RAX_23 = &DAT_008bfb3e;
    return;
  }
  (out->RawTBSCertificate).len = tbs.len;
  (out->RawTBSCertificate).cap = tbs.cap;
  puVar2 = tbs.array;
  pcVar4 = out;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = extraout_RDI_00;
    extraout_R11_00[1] = (extraout_R8_00->RawTBSCertificate).array;
    puVar2 = extraout_RDI_00;
    pcVar4 = extraout_R8_00;
  }
  (pcVar4->RawTBSCertificate).array = puVar2;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(&tbs,&tbs,0x30,SUB81(puVar2,0));
  if (extraout_AL_02 == '\0') {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_14);
    extraout_RAX_22[1] = 0x1f;
    *extraout_RAX_22 = &DAT_008bfb3e;
    return;
  }
  defaultValue.data = in_stack_fffffffffffffb88;
  defaultValue._type = in_stack_fffffffffffffb80;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadOptionalASN1Integer
            (&tbs,in_stack_fffffffffffffb70,0xe0,defaultValue,(bool)((char)out + -0x50));
  if (extraout_AL_03 == '\0') {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_15);
    extraout_RAX_21[1] = 0x17;
    *extraout_RAX_21 = &DAT_008baef0;
    return;
  }
  if (out->Version < 0) {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_15);
    extraout_RAX_20[1] = 0x17;
    *extraout_RAX_20 = &DAT_008baef0;
    return;
  }
  iVar5 = out->Version + 1;
  out->Version = iVar5;
  if (3 < iVar5) {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_15);
    extraout_RAX_19[1] = 0x15;
    *extraout_RAX_19 = &DAT_008b9abd;
    return;
  }
  runtime_newobject((internal_abi_Type *)&DAT_00855ba0,~r0_15);
  pmVar14 = extraout_RAX;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Integer
            (&tbs,in_stack_fffffffffffffb70,false);
  if (extraout_AL_04 == '\0') {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_16);
    extraout_RAX_18[1] = 0x1d;
    *extraout_RAX_18 = &DAT_008be762;
    return;
  }
  pmVar9 = extraout_RDI_01;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_01 = pmVar14;
    pmVar9 = out->SerialNumber;
    extraout_R11_01[1] = pmVar9;
  }
  sigAISeq.len = in_XMM15._8_8_;
  out->SerialNumber = pmVar14;
  sigAISeq.cap = 0;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(&tbs,&sigAISeq,0x30,SUB81(pmVar9,0));
  outerSigAISeq.len = in_XMM15._0_8_;
  if (extraout_AL_05 == '\0') {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_17);
    extraout_RAX_17[1] = 0x2e;
    *extraout_RAX_17 = &DAT_008c7883;
    return;
  }
  outerSigAISeq.array = (uint8 *)0x0;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(&input,&outerSigAISeq,0x30,~r0_36);
  if (extraout_AL_06 == '\0') {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_18);
    extraout_RAX_16[1] = 0x24;
    *extraout_RAX_16 = &DAT_008c2a8f;
    return;
  }
  pvVar6 = ~r0_18;
  if ((sigAISeq.len != outerSigAISeq.len) ||
     (runtime_memequal(), pvVar6 = extraout_RBX, extraout_AL_07 == '\0')) {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,pvVar6);
    extraout_RAX_00[1] = (char *)0x41;
    *extraout_RAX_00 =
         "x509: inner and outer signature algorithm identifiers don\'t matchx509: issuer name does not match subject from issuing certificatenistec: internal error: p224Table called with out-of-bounds valuenistec: internal error: p384Table called with out-of-bounds valuenistec: internal error: p521Table called with out-of-bounds valuegrpc: credentials.Bundle must return non-nil transport credentialsruntime: unexpected error while checking standard file descriptor reflect: indirection through nil pointer to embedded struct field base.baseBalancer: UpdateSubConnState(%v, %+v) called unexpectedlyreceived goaway with non-zero even-numbered numbered stream id: %vmetadata: Pairs got the odd number of input pairs for metadata: %dDescriptor.Options called without importing the descriptor packagex509: certificate is not valid for any names, but wanted to match x509: requested SignatureAlgorithm does not match private key typeServer retry pushback specified multiple values (%q); not retrying.base.baseBalancer: got state changes for an unknown SubConn: %p, %vtransport: cannot send secure credentials on an insecure connectionfield %v with invalid Mutable call on field with non-composite typeinvalid retry throttling config: tokenRatio (%v) may not be negativeAllThreadsSyscall6 results differ between threads; runtime corruptedreflect: reflect.Value.UnsafePointer on an invalid notinheap pointerexpected a JSON struct with one entry; received entry %v at index %dpadding bytes must all be zeros unless AllowIllegalWrites is enabledhttp: message cannot contain multiple Content-Length headers; got %qembedded IPv4 address must replace the final 2 fields of the addressinvalid descriptor: using edition features in a proto with syntax %sextension %v does not implement protoreflect.ExtensionTypeDescriptor2695994666715063979466701508701963067355791626002630814351006629888126959946667150639794667015087019625940457807714424391721682722368061big: invalid 2nd argument to Int.Jacobi: need odd integer but got %sreflect: embedded interface with unexported m..." /* TRUNCATED STRING LITERAL */
    ;
    return;
  }
  FUN_0046cdab();
  der_00.cap = (int)in_stack_fffffffffffffb80;
  der_00.array = (uint8 *)in_stack_fffffffffffffb70._type;
  der_00.len = (int)in_stack_fffffffffffffb70.data;
  ~r0_04.Algorithm.len = (int)in_stack_fffffffffffffb90;
  ~r0_04.Algorithm.array = (int *)in_stack_fffffffffffffb88;
  ~r0_04.Algorithm.cap = (int)in_stack_fffffffffffffb98;
  ~r0_04.Parameters.Class = in_stack_fffffffffffffba0;
  ~r0_04.Parameters.Tag = in_stack_fffffffffffffba8._0_8_;
  ~r0_04.Parameters.IsCompound = (bool)in_stack_fffffffffffffba8[8];
  ~r0_04.Parameters._17_7_ = in_stack_fffffffffffffba8._9_7_;
  ~r0_04.Parameters.Bytes.array = (uint8 *)in_stack_fffffffffffffbb8;
  ~r0_04.Parameters.Bytes.len = (int)in_stack_fffffffffffffbc0;
  ~r0_04.Parameters.Bytes.cap = in_stack_fffffffffffffbc8;
  ~r0_04.Parameters.FullBytes = in_stack_fffffffffffffbd0;
  ~r1_04.tab._7_1_ = in_stack_fffffffffffffbef;
  ~r1_04.tab._0_7_ = in_stack_fffffffffffffbe8;
  ~r1_04.data = in_stack_fffffffffffffbf0;
  crypto_x509_parseAI(der_00,~r0_04,~r1_04);
  iVar5 = FUN_0046d10c();
  if (iVar5 != 0) {
    return;
  }
  ~r0_07 = FUN_0046d10c();
  ai.Algorithm.cap = (int)in_stack_fffffffffffffb80;
  ai.Algorithm.array = (int *)in_stack_fffffffffffffb70._type;
  ai.Algorithm.len = (int)in_stack_fffffffffffffb70.data;
  ai.Parameters.Class = (int)in_stack_fffffffffffffb88;
  ai.Parameters.Tag = (int)in_stack_fffffffffffffb90;
  ai.Parameters._16_8_ = in_stack_fffffffffffffb98;
  ai.Parameters.Bytes.array = (uint8 *)in_stack_fffffffffffffba0;
  ai.Parameters.Bytes.len = in_stack_fffffffffffffba8._0_8_;
  ai.Parameters.Bytes.cap = in_stack_fffffffffffffba8._8_8_;
  ai.Parameters.FullBytes.array = (uint8 *)in_stack_fffffffffffffbb8;
  ai.Parameters.FullBytes.len = (int)in_stack_fffffffffffffbc0;
  ai.Parameters.FullBytes.cap = in_stack_fffffffffffffbc8;
  crypto_x509_getSignatureAlgorithmFromAI(ai,~r0_07);
  out->SignatureAlgorithm = extraout_RAX_01;
  issuerSeq.array = (uint8 *)0x0;
  issuerSeq._8_16_ = in_XMM15;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Element(&tbs,&issuerSeq,0x30,~r0_37);
  if (extraout_AL_08 == '\0') {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_19);
    extraout_RAX_15[1] = 0x16;
    *extraout_RAX_15 = &DAT_008ba473;
    return;
  }
  (out->RawIssuer).len = issuerSeq.len;
  (out->RawIssuer).cap = issuerSeq.cap;
  puVar2 = issuerSeq.array;
  pcVar4 = out;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_02 = extraout_RDI_02;
    extraout_R11_02[1] = (extraout_R8_01->RawIssuer).array;
    puVar2 = extraout_RDI_02;
    pcVar4 = extraout_R8_01;
  }
  (pcVar4->RawIssuer).array = puVar2;
  raw.cap = (int)in_stack_fffffffffffffb80;
  raw.array = (uint8 *)in_stack_fffffffffffffb70._type;
  raw.len = (int)in_stack_fffffffffffffb70.data;
  ~r1_01.data = in_stack_fffffffffffffb90;
  ~r1_01.tab = in_stack_fffffffffffffb88;
  crypto_x509_parseName(raw,(crypto_x509_pkix_RDNSequence *)issuerSeq.array,~r1_01);
  if (extraout_RBX_00 != 0) {
    return;
  }
  crypto_x509_pkix___Name__FillFromRDNSequence(&out->Issuer,rdns);
  validity.array = (uint8 *)0x0;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(&tbs,&validity,0x30,~r0_38);
  if (extraout_AL_09 == '\0') {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_20);
    extraout_RAX_14[1] = 0x18;
    *extraout_RAX_14 = &DAT_008bb6cd;
    return;
  }
  der_01.cap = (int)in_stack_fffffffffffffb80;
  der_01.array = (uint8 *)in_stack_fffffffffffffb70._type;
  der_01.len = (int)in_stack_fffffffffffffb70.data;
  ~r0_02.ext = (int64)in_stack_fffffffffffffb90;
  ~r0_02.wall = (uint64)in_stack_fffffffffffffb88;
  ~r0_02.loc = in_stack_fffffffffffffb98;
  ~r1_03.ext = in_stack_fffffffffffffba8._0_8_;
  ~r1_03.loc = (time_Location *)in_stack_fffffffffffffba8._8_8_;
  ~r1_03.wall = in_stack_fffffffffffffba0;
  ~r2.data = in_stack_fffffffffffffbc0;
  ~r2.tab = in_stack_fffffffffffffbb8;
  crypto_x509_parseValidity(der_01,~r0_02,~r1_03,~r2);
  (out->NotBefore).wall = extraout_RAX_02;
  (out->NotBefore).ext = extraout_RBX_01;
  ptVar3 = extraout_RCX;
  pcVar4 = out;
  iVar7 = extraout_RSI;
  uVar10 = extraout_RDI_03;
  ptVar12 = extraout_R8_02;
  iVar5 = extraout_R9;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_03 = extraout_RCX_00;
    extraout_R11_03[1] = (pcVar4->NotBefore).loc;
    ptVar3 = extraout_RCX_00;
    iVar7 = extraout_RSI_00;
    uVar10 = extraout_RDI_04;
    ptVar12 = extraout_R8_03;
    iVar5 = extraout_R9_00;
  }
  (pcVar4->NotBefore).loc = ptVar3;
  (pcVar4->NotAfter).wall = uVar10;
  (pcVar4->NotAfter).ext = iVar7;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_04 = extraout_R8_04;
    extraout_R11_04[1] = (pcVar4->NotAfter).loc;
    uVar10 = extraout_RDI_05;
    ptVar12 = extraout_R8_04;
    iVar5 = extraout_R9_01;
  }
  (pcVar4->NotAfter).loc = ptVar12;
  if (iVar5 == 0) {
    subjectSeq.array = (uint8 *)0x0;
    subjectSeq._8_16_ = in_XMM15;
    vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Element
              (&tbs,&subjectSeq,0x30,SUB81(uVar10,0));
    if (extraout_AL_10 == '\0') {
      runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_21);
      extraout_RAX_13[1] = 0x16;
      *extraout_RAX_13 = &DAT_008ba473;
      return;
    }
    (out->RawSubject).len = subjectSeq.len;
    (out->RawSubject).cap = subjectSeq.cap;
    puVar2 = subjectSeq.array;
    pcVar4 = out;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_05 = extraout_RDI_06;
      extraout_R11_05[1] = (extraout_R8_05->RawSubject).array;
      puVar2 = extraout_RDI_06;
      pcVar4 = extraout_R8_05;
    }
    (pcVar4->RawSubject).array = puVar2;
    raw_00.cap = (int)in_stack_fffffffffffffb80;
    raw_00.array = (uint8 *)in_stack_fffffffffffffb70._type;
    raw_00.len = (int)in_stack_fffffffffffffb70.data;
    ~r1_02.data = in_stack_fffffffffffffb90;
    ~r1_02.tab = in_stack_fffffffffffffb88;
    crypto_x509_parseName(raw_00,(crypto_x509_pkix_RDNSequence *)subjectSeq.array,~r1_02);
    if (extraout_RBX_02 != 0) {
      return;
    }
    crypto_x509_pkix___Name__FillFromRDNSequence(&out->Subject,rdns_00);
    spki.array = (uint8 *)0x0;
    spki._8_16_ = in_XMM15;
    vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Element(&tbs,&spki,0x30,~r0_39);
    if (extraout_AL_11 == '\0') {
      runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_22);
      extraout_RAX_12[1] = 0x14;
      *extraout_RAX_12 = &DAT_008b9293;
      return;
    }
    (out->RawSubjectPublicKeyInfo).len = spki.len;
    (out->RawSubjectPublicKeyInfo).cap = spki.cap;
    puVar2 = spki.array;
    pcVar4 = out;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_06 = extraout_RDI_07;
      extraout_R11_06[1] = (extraout_R8_06->RawSubjectPublicKeyInfo).array;
      puVar2 = extraout_RDI_07;
      pcVar4 = extraout_R8_06;
    }
    (pcVar4->RawSubjectPublicKeyInfo).array = puVar2;
    vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(&spki,&spki,0x30,SUB81(puVar2,0));
    if (extraout_AL_12 == '\0') {
      runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_23);
      extraout_RAX_11[1] = 0x14;
      *extraout_RAX_11 = &DAT_008b9293;
      return;
    }
    pkAISeq.array = (uint8 *)0x0;
    vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(&spki,&pkAISeq,0x30,~r0_40);
    if (extraout_AL_13 == '\0') {
      runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_24);
      extraout_RAX_10[1] = 0x2f;
      *extraout_RAX_10 = &DAT_008c7da0;
      return;
    }
    FUN_0046cdab();
    der_02.cap = (int)in_stack_fffffffffffffb80;
    der_02.array = (uint8 *)in_stack_fffffffffffffb70._type;
    der_02.len = (int)in_stack_fffffffffffffb70.data;
    ~r0_05.Algorithm.len = (int)in_stack_fffffffffffffb90;
    ~r0_05.Algorithm.array = (int *)in_stack_fffffffffffffb88;
    ~r0_05.Algorithm.cap = (int)in_stack_fffffffffffffb98;
    ~r0_05.Parameters.Class = in_stack_fffffffffffffba0;
    ~r0_05.Parameters.Tag = in_stack_fffffffffffffba8._0_8_;
    ~r0_05.Parameters.IsCompound = (bool)in_stack_fffffffffffffba8[8];
    ~r0_05.Parameters._17_7_ = in_stack_fffffffffffffba8._9_7_;
    ~r0_05.Parameters.Bytes.array = (uint8 *)in_stack_fffffffffffffbb8;
    ~r0_05.Parameters.Bytes.len = (int)in_stack_fffffffffffffbc0;
    ~r0_05.Parameters.Bytes.cap = in_stack_fffffffffffffbc8;
    ~r0_05.Parameters.FullBytes = in_stack_fffffffffffffbd0;
    ~r1_05.tab._7_1_ = in_stack_fffffffffffffbef;
    ~r1_05.tab._0_7_ = in_stack_fffffffffffffbe8;
    ~r1_05.data = in_stack_fffffffffffffbf0;
    crypto_x509_parseAI(der_02,~r0_05,~r1_05);
    FUN_0046d10c();
    iVar5 = FUN_0046d10c();
    if (iVar5 != 0) {
      return;
    }
    oid.cap = (int)in_stack_fffffffffffffb80;
    oid.array = (int *)in_stack_fffffffffffffb70._type;
    oid.len = (int)in_stack_fffffffffffffb70.data;
    crypto_x509_getPublicKeyAlgorithmFromOID
              (oid,(crypto_x509_PublicKeyAlgorithm)pkAI.Algorithm.array);
    out->PublicKeyAlgorithm = extraout_RAX_03;
    spk.Bytes._0_16_ = in_XMM15;
    spk._16_16_ = in_XMM15;
    vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1BitString(&spki,&spk,~r0_09);
    if (extraout_AL_14 == '\0') {
      runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_25);
      extraout_RAX_09[1] = 0x20;
      *extraout_RAX_09 = &DAT_008c0573;
      return;
    }
    pcVar4 = out;
    if (out->PublicKeyAlgorithm != 0) {
      FUN_0046cd99();
      FUN_0046d10c();
      local_a0.PublicKey.Bytes.len = spk.Bytes.len;
      local_a0.PublicKey.Bytes.cap = spk.Bytes.cap;
      local_a0.PublicKey.BitLength = spk.BitLength;
      local_a0.PublicKey.Bytes.array = spk.Bytes.array;
      ~r1_00.data = in_stack_fffffffffffffb88;
      ~r1_00.tab = (runtime_itab *)in_stack_fffffffffffffb80;
      crypto_x509_parsePublicKey(&local_a0,in_stack_fffffffffffffb70,~r1_00);
      (out->PublicKey)._type = extraout_RAX_04;
      iVar5 = extraout_RCX_01;
      pvVar6 = extraout_RBX_03;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_07 = extraout_RBX_04;
        extraout_R11_07[1] = (pcVar4->PublicKey).data;
        iVar5 = extraout_RCX_02;
        pvVar6 = extraout_RBX_04;
      }
      (pcVar4->PublicKey).data = pvVar6;
      if (iVar5 != 0) {
        return;
      }
    }
    if (1 < pcVar4->Version) {
      vendor_golang_org_x_crypto_cryptobyte___String__SkipOptionalASN1(&tbs,0x81,SUB81(pcVar4,0));
      if (extraout_AL_15 == '\0') {
        runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_26);
        extraout_RAX_08[1] = 0x1e;
        *extraout_RAX_08 = &DAT_008bf19d;
        return;
      }
      vendor_golang_org_x_crypto_cryptobyte___String__SkipOptionalASN1(&tbs,0x82,~r0_10);
      if (extraout_AL_16 == '\0') {
        runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_27);
        extraout_RAX_07[1] = 0x1f;
        *extraout_RAX_07 = &DAT_008bfb5d;
        return;
      }
      pcVar4 = extraout_RCX_03;
      if (out->Version == 3) {
        extensions.array = (uint8 *)0x0;
        bVar13 = false;
        extensions._8_16_ = in_XMM15;
        vendor_golang_org_x_crypto_cryptobyte___String__ReadOptionalASN1
                  (&tbs,&extensions,(bool *)&stack0xfffffffffffffbef,0xa3,~r0_33);
        if (extraout_AL_17 == '\0') {
          runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_28);
          extraout_RAX_06[1] = 0x1a;
          *extraout_RAX_06 = &DAT_008bc945;
          return;
        }
        pcVar4 = extraout_RCX_04;
        if (bVar13 != false) {
          local_288._8_8_ = in_XMM15._8_8_;
          local_298._0_12_ = in_XMM15._0_12_;
          FUN_0046cd99();
          local_288._0_8_ = local_138;
          runtime_fastrand((uint32)local_138);
          local_298._12_4_ = extraout_EAX;
          vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1
                    (&extensions,&extensions,0x30,~r0_41);
          puVar11 = extraout_RDI_08;
          if (extraout_AL_18 == '\0') {
            runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_29);
            extraout_RAX_05[1] = 0x1a;
            *extraout_RAX_05 = &DAT_008bc945;
            return;
          }
          while (extensions.len != 0) {
            extension.array = (uint8 *)0x0;
            vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1
                      (&extensions,&extension,0x30,SUB81(puVar11,0));
            if (extraout_AL_19 == '\0') {
              runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_30);
              extraout_RAX_32[1] = 0x19;
              *extraout_RAX_32 = &DAT_008bc004;
              return;
            }
            der_03.cap = (int)in_stack_fffffffffffffb80;
            der_03.array = (uint8 *)in_stack_fffffffffffffb70._type;
            der_03.len = (int)in_stack_fffffffffffffb70.data;
            ~r0_03.Id.len = (int)in_stack_fffffffffffffb90;
            ~r0_03.Id.array = (int *)in_stack_fffffffffffffb88;
            ~r0_03.Id.cap = (int)in_stack_fffffffffffffb98;
            ~r0_03._24_8_ = in_stack_fffffffffffffba0;
            ~r0_03.Value.array = (uint8 *)in_stack_fffffffffffffba8._0_8_;
            ~r0_03.Value.len = in_stack_fffffffffffffba8._8_8_;
            ~r0_03.Value.cap = (int)in_stack_fffffffffffffbb8;
            ~r0_1.Id.len = in_stack_fffffffffffffbc8;
            ~r0_1.Id.array = (int *)in_stack_fffffffffffffbc0;
            ~r0_1.Id.cap = (int *)in_stack_fffffffffffffbd0.array;
            ~r0_1._24_8_ = in_stack_fffffffffffffbd0.len;
            ~r0_1.Value.array = in_stack_fffffffffffffbd0.cap;
            ~r0_1.Value.len._0_7_ = in_stack_fffffffffffffbe8;
            ~r0_1.Value.len._7_1_ = bVar13;
            ~r0_1.Value.cap = (int)in_stack_fffffffffffffbf0;
            ~r1_06.data = pmVar14;
            ~r1_06.tab = in_stack_fffffffffffffbf8;
            crypto_x509_parseExtension(der_03,~r0_03,~r0_1,~r1_06);
            local_218._0_1_ = extraout_DIL;
            local_228 = (undefined4)extraout_RBX_05;
            uStack_224 = (undefined4)((uint)extraout_RBX_05 >> 0x20);
            uStack_220 = (undefined4)extraout_RCX_05;
            uStack_21c = (undefined4)((uint)extraout_RCX_05 >> 0x20);
            ext.Id.len._0_4_ = local_228;
            ext.Id.len._4_4_ = uStack_224;
            ext.Id.cap._0_4_ = uStack_220;
            ext.Id.cap._4_4_ = uStack_21c;
            uStack_210 = (undefined4)extraout_RSI_01;
            uStack_20c = (undefined4)((uint)extraout_RSI_01 >> 0x20);
            ext.Critical = local_218._0_1_;
            ext._25_3_ = local_218._1_3_;
            ext._28_4_ = uStack_214;
            ext.Value.array._0_4_ = uStack_210;
            ext.Value.array._4_4_ = uStack_20c;
            local_208 = (undefined4)extraout_R8_07;
            uStack_204 = (undefined4)((uint)extraout_R8_07 >> 0x20);
            uStack_200 = (undefined4)extraout_R9_02;
            uStack_1fc = (undefined4)((uint)extraout_R9_02 >> 0x20);
            ext.Value.len._0_4_ = local_208;
            ext.Value.len._4_4_ = uStack_204;
            ext.Value.cap._0_4_ = uStack_200;
            ext.Value.cap._4_4_ = uStack_1fc;
            if (extraout_R10 != 0) {
              return;
            }
            oi.cap = (int)in_stack_fffffffffffffb80;
            oi.array = (int *)in_stack_fffffffffffffb70._type;
            oi.len = (int)in_stack_fffffffffffffb70.data;
            ~r0_01.len = (int)in_stack_fffffffffffffb90;
            ~r0_01.str = (uint8 *)in_stack_fffffffffffffb88;
            ext.Id.array = extraout_RAX_26;
            encoding_asn1_ObjectIdentifier_String(oi,~r0_01);
            in_stack_fffffffffffffbf0 = extraout_RBX_06;
            runtime_mapaccess1_faststr
                      ((internal_abi_MapType *)&DAT_0082c920,(runtime_hmap *)local_298,
                       (string)in_stack_fffffffffffffb70,~r0_08);
            if (*extraout_RAX_27 != '\0') {
              runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_31);
              extraout_RAX_31[1] = 0x2f;
              *extraout_RAX_31 = &DAT_008c7dcf;
              return;
            }
            runtime_mapassign_faststr
                      ((internal_abi_MapType *)&DAT_0082c920,(runtime_hmap *)local_298,
                       (string)in_stack_fffffffffffffb70,~r0_08);
            *extraout_RAX_28 = 1;
            oldCap = (out->Extensions).cap;
            newLen = (out->Extensions).len + 1;
            oldPtr = (out->Extensions).array;
            if (oldCap < newLen) {
              ~r0_00.cap = (int)in_stack_fffffffffffffb80;
              ~r0_00.array = in_stack_fffffffffffffb70._type;
              ~r0_00.len = (int)in_stack_fffffffffffffb70.data;
              runtime_growslice(oldPtr,newLen,oldCap,1,(internal_abi_Type *)&DAT_008652c0,~r0_00);
              (out->Extensions).cap = extraout_RCX_06;
              oldPtr = extraout_RAX_29;
              pcVar4 = out;
              newLen = extraout_RBX_07;
              if (runtime_writeBarrier._0_4_ != 0) {
                runtime_gcWriteBarrier2();
                *extraout_R11_08 = extraout_RAX_30;
                extraout_R11_08[1] = (pcVar4->Extensions).array;
                oldPtr = extraout_RAX_30;
                newLen = extraout_RBX_08;
              }
              (pcVar4->Extensions).array = oldPtr;
            }
            (out->Extensions).len = newLen;
            prVar8 = (runtime_itab *)(newLen * 0x38);
            if (runtime_writeBarrier._0_4_ != 0) {
              runtime_wbMove((internal_abi_Type *)&DAT_008652c0,
                             (void *)((int)&(oldPtr->Id).array + (int)(prVar8->_ + -0x4c)),&ext);
              in_stack_fffffffffffffbf8 = prVar8;
            }
            puVar2 = prVar8->_;
            puVar11 = (undefined4 *)((int)&(oldPtr->Id).array + (int)(puVar2 + -0x34));
            puVar1 = prVar8->_;
            *(int **)((int)&prVar8[-2]._type + (int)oldPtr) = ext.Id.array;
            *(undefined4 *)((int)&(oldPtr->Id).array + (int)(puVar1 + -0x44)) =
                 (undefined4)ext.Id.len;
            *(undefined4 *)((int)&(oldPtr->Id).array + (int)(puVar1 + -0x40)) = ext.Id.len._4_4_;
            *(undefined4 *)((int)&(oldPtr->Id).array + (int)(puVar1 + -0x3c)) =
                 (undefined4)ext.Id.cap;
            *(undefined4 *)(puVar1 + (int)&oldPtr[-1].Id) = ext.Id.cap._4_4_;
            *puVar11 = ext._24_4_;
            *(undefined4 *)((int)&(oldPtr->Id).array + (int)(puVar2 + -0x30)) = ext._28_4_;
            *(undefined4 *)((int)&(oldPtr->Id).array + (int)(puVar2 + -0x2c)) =
                 ext.Value.array._0_4_;
            *(undefined4 *)((int)&(oldPtr->Id).array + (int)(puVar2 + -0x28)) =
                 ext.Value.array._4_4_;
            *(undefined4 *)((int)&(oldPtr->Id).array + (int)(puVar2 + -0x24)) =
                 (undefined4)ext.Value.len;
            *(undefined4 *)((int)&(oldPtr->Id).array + (int)(puVar2 + -0x20)) = ext.Value.len._4_4_;
            *(undefined4 *)((int)&(oldPtr->Id).array + (int)(puVar2 + -0x1c)) =
                 (undefined4)ext.Value.cap;
            *(undefined4 *)((int)&(oldPtr->Id).array + (int)(puVar2 + -0x18)) = ext.Value.cap._4_4_;
          }
          crypto_x509_processExtensions(out,(error)in_stack_fffffffffffffb70);
          pcVar4 = extraout_RCX_07;
          if (extraout_RAX_33 != 0) {
            return;
          }
        }
      }
    }
    vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1BitString
              (&input,&signature,SUB81(pcVar4,0));
    if (extraout_AL_20 == '\0') {
      runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_32);
      extraout_RAX_36[1] = 0x19;
      *extraout_RAX_36 = &DAT_008bc01d;
      return;
    }
    b.Bytes.cap = (int)in_stack_fffffffffffffb80;
    b.Bytes.array = (uint8 *)in_stack_fffffffffffffb70._type;
    b.Bytes.len = (int)in_stack_fffffffffffffb70.data;
    b.BitLength = (int)in_stack_fffffffffffffb88;
    ~r0_06.len = (int)in_stack_fffffffffffffb98;
    ~r0_06.array = (uint8 *)in_stack_fffffffffffffb90;
    ~r0_06.cap = in_stack_fffffffffffffba0;
    encoding_asn1_BitString_RightAlign(b,~r0_06);
    (out->Signature).len = extraout_RBX_09;
    (out->Signature).cap = extraout_RCX_08;
    puVar2 = extraout_RAX_34;
    pcVar4 = out;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_09 = extraout_RAX_35;
      extraout_R11_09[1] = (pcVar4->Signature).array;
      puVar2 = extraout_RAX_35;
    }
    (pcVar4->Signature).array = puVar2;
    return;
  }
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void crypto_x509_ParseCertificate(__uint8 der,crypto_x509_Certificate *~r0,error ~r1)

{
  error ~r1_00;
  int extraout_RAX;
  crypto_x509_Certificate *cert;
  undefined8 *extraout_RAX_00;
  int in_RBX;
  int extraout_RBX;
  runtime_itab *unaff_RBP;
  int unaff_R14;
  void *unaff_retaddr;
  __uint8 in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ~r1_00.data = unaff_retaddr;
  ~r1_00.tab = unaff_RBP;
  crypto_x509_parseCertificate(in_stack_ffffffffffffffe0,~r0,~r1_00);
  if (extraout_RBX == 0) {
    if (*(int *)(extraout_RAX + 8) != in_RBX) {
      runtime_newobject((internal_abi_Type *)&DAT_0083e560,(void *)0x0);
      extraout_RAX_00[1] = 0x13;
      *extraout_RAX_00 = &DAT_008b8905;
      return;
    }
    return;
  }
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack
// DWARF original prototype: void crypto/x509.systemRootsPool(crypto/x509.CertPool * ~r0,
// crypto/x509.CertPool * ~r0)

void crypto_x509_systemRootsPool(crypto_x509_CertPool *~r0,crypto_x509_CertPool *~r0_1)

{
  sdword sVar1;
  sdword sVar2;
  int unaff_R14;
  undefined local_20 [16];
  undefined *local_10;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (crypto_x509_once.done == 0) {
    sync___Once__doSlow(&crypto_x509_once,(func__ **)&PTR_crypto_x509_initSystemRoots_008ec940);
  }
  LOCK();
  sVar1 = crypto_x509_systemRootsMu.readerCount.v + 1;
  UNLOCK();
  sVar2 = crypto_x509_systemRootsMu.readerCount.v + 1;
  crypto_x509_systemRootsMu.readerCount.v = sVar1;
  if (sVar2 < 0) {
    sync_runtime_SemacquireRWMutexR(&crypto_x509_systemRootsMu.readerSem,false,0);
  }
  local_20._8_8_ = &crypto_x509_systemRootsMu;
  local_20._0_8_ = crypto_x509_systemRootsPool_func1;
  local_10 = local_20;
  crypto_x509_systemRootsPool_func1();
  return;
}



// WARNING: Unknown calling convention

void crypto_x509_systemRootsPool_func1(void)

{
  int *piVar1;
  int in_RDX;
  int unaff_R14;
  undefined auStack_10 [8];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  sync___RWMutex__RUnlock(*(sync_RWMutex **)(in_RDX + 8));
  return;
}



// WARNING: Unknown calling convention

void crypto_x509_initSystemRoots(void)

{
  error ~r1;
  crypto_x509_CertPool *~r0;
  crypto_x509_CertPool *extraout_RAX;
  crypto_x509_CertPool *extraout_RAX_00;
  crypto_x509_CertPool *pcVar1;
  undefined8 extraout_RAX_01;
  void *extraout_RCX;
  void *extraout_RCX_00;
  void *extraout_RCX_01;
  void *pvVar2;
  runtime_itab *extraout_RBX;
  runtime_itab *extraout_RBX_00;
  runtime_itab *prVar3;
  crypto_x509_CertPool **extraout_R11;
  void **extraout_R11_00;
  undefined8 *extraout_R11_01;
  int unaff_R14;
  undefined in_stack_ffffffffffffffd0 [15];
  undefined local_20 [16];
  code **local_10;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  sync___RWMutex__Lock(&crypto_x509_systemRootsMu);
  local_20._8_8_ = &crypto_x509_systemRootsMu;
  local_20._0_8_ = crypto_x509_initSystemRoots_func1;
  local_10 = (code **)local_20;
  ~r1.data._7_1_ = 1;
  ~r1._0_15_ = in_stack_ffffffffffffffd0;
  crypto_x509_loadSystemRoots(~r0,~r1);
  pcVar1 = extraout_RAX;
  pvVar2 = extraout_RCX;
  prVar3 = extraout_RBX;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RAX_00;
    extraout_R11[1] = crypto_x509_systemRoots;
    pcVar1 = extraout_RAX_00;
    pvVar2 = extraout_RCX_00;
    prVar3 = extraout_RBX_00;
  }
  crypto_x509_systemRoots = pcVar1;
  crypto_x509_systemRootsErr.tab = prVar3;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = extraout_RCX_01;
    extraout_R11_00[1] = crypto_x509_systemRootsErr.data;
    pvVar2 = extraout_RCX_01;
  }
  crypto_x509_systemRootsErr.data = pvVar2;
  if (crypto_x509_systemRootsErr.tab != (runtime_itab *)0x0) {
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_01 = extraout_RAX_01;
    }
    crypto_x509_systemRoots = (crypto_x509_CertPool *)0x0;
  }
  (**local_10)();
  return;
}



// WARNING: Unknown calling convention

void crypto_x509_initSystemRoots_func1(void)

{
  int *piVar1;
  int in_RDX;
  int unaff_R14;
  undefined auStack_10 [8];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  sync___RWMutex__Unlock(*(sync_RWMutex **)(in_RDX + 8));
  return;
}



void crypto_x509_loadSystemRoots(crypto_x509_CertPool *~r0,error ~r1)

{
  __uint8 pemCerts;
  __uint8 pemCerts_00;
  string ~r0_00;
  error target;
  string ~r0_01;
  string sep;
  error target_00;
  string a1;
  __uint8 ~r0_02;
