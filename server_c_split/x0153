      }
      return;
    }
    iVar2 = (*(code *)((pmStack0000000000000008->src).tab)->fun[0])
                      ((pmStack0000000000000008->src).data);
    math_archExp();
    if ((float)math_rand_fn[dVar1 & 0x7f] +
        (float)iVar2 * 1.084202e-19 *
        ((float)math_rand_fn[(sdword)((dVar1 & 0x7f) - 1)] - (float)math_rand_fn[dVar1 & 0x7f]) <
        (float)local_40) {
      return;
    }
  }
  return;
}



// WARNING: Unknown calling convention

void math_rand___Rand__Seed(math_rand_Rand *r,int64 seed)

{
  runtime_itab *prVar1;
  math_rand_lockedSource *r_00;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  prVar1 = (r->src).tab;
  r_00 = (math_rand_lockedSource *)(r->src).data;
  if (prVar1 == (runtime_itab *)go_itab__math_rand_lockedSource_math_rand_Source) {
    math_rand___lockedSource__seedPos(r_00,seed,&r->readPos);
    return;
  }
  (*(code *)prVar1[1].inter)(r_00);
  r->readPos = 0;
  return;
}



void math_rand___Rand__Int63(math_rand_Rand *r,int64 ~r0)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  (*(code *)((r->src).tab)->fun[0])((r->src).data);
  return;
}



void math_rand___Rand__Uint32(math_rand_Rand *r,uint32 ~r0)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  (*(code *)((r->src).tab)->fun[0])((r->src).data);
  return;
}



void math_rand___Rand__Uint64(math_rand_Rand *r,uint64 ~r0)

{
  runtime_itab *prVar1;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  prVar1 = (r->s64).tab;
  if (prVar1 != (runtime_itab *)0x0) {
    (*(code *)prVar1[1]._type)((r->s64).data);
    return;
  }
  (*(code *)((r->src).tab)->fun[0])((r->src).data);
  (*(code *)((r->src).tab)->fun[0])((r->src).data);
  return;
}



void math_rand___Rand__Int31(math_rand_Rand *r,int32 ~r0)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  (*(code *)((r->src).tab)->fun[0])((r->src).data);
  return;
}



void math_rand___Rand__Int(math_rand_Rand *r,int ~r0)

{
  uint u;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  (*(code *)((r->src).tab)->fun[0])((r->src).data);
  return;
}



void math_rand___Rand__Int63n(math_rand_Rand *r,int64 n,int64 ~r0)

{
  undefined auVar1 [16];
  int iVar2;
  int64 v;
  int64 max;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (0 < n) {
    if ((n & n - 1U) != 0) {
      auVar1._8_8_ = 0;
      auVar1._0_8_ = n;
      iVar2 = (*(code *)((r->src).tab)->fun[0])((r->src).data);
      while (0x7fffffffffffffff -
             SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x8000000000000000)) % auVar1,0) < iVar2) {
        iVar2 = (*(code *)((r->src).tab)->fun[0])((r->src).data);
      }
      return;
    }
    (*(code *)((r->src).tab)->fun[0])((r->src).data);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffd8);
}



void math_rand___Rand__Int31n(math_rand_Rand *r,int32 n,int32 ~r0)

{
  int32 v;
  undefined8 uVar1;
  int32 max;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (0 < n) {
    if ((dword)(n & n - 1U) != 0) {
      uVar1 = (*(code *)((r->src).tab)->fun[0])((r->src).data);
      while ((sdword)-((sdword)(0x80000000 % (uint)(dword)n) + -0x7fffffff) <
             (sdword)((uint)uVar1 >> 0x20)) {
        uVar1 = (*(code *)((r->src).tab)->fun[0])((r->src).data);
      }
      return;
    }
    (*(code *)((r->src).tab)->fun[0])((r->src).data);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffe0);
}



void math_rand___Rand__int31n(math_rand_Rand *r,int32 n,int32 ~r0)

{
  int iVar1;
  uint32 low;
  int iVar2;
  uint64 prod;
  dword dVar3;
  int unaff_R14;
  math_rand_Rand *pmStack0000000000000008;
  dword dStack0000000000000010;
  uint32 thresh;
  
  pmStack0000000000000008 = r;
  dStack0000000000000010 = n;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar2 = (int)(sdword)dStack0000000000000010;
  iVar1 = (*(code *)((pmStack0000000000000008->src).tab)->fun[0])
                    ((pmStack0000000000000008->src).data);
  iVar1 = (iVar1 >> 0x1f & 0xffffffffU) * iVar2;
  if ((dword)iVar1 < dStack0000000000000010) {
    if (dStack0000000000000010 == 0) {
                    // WARNING: Subroutine does not return
      runtime_panicdivide();
    }
    dVar3 = (dword)-dStack0000000000000010 % dStack0000000000000010;
    for (; low = (uint32)iVar1, low < dVar3; iVar1 = (iVar1 >> 0x1f & 0xffffffffU) * iVar2) {
      iVar1 = (*(code *)((pmStack0000000000000008->src).tab)->fun[0])
                        ((pmStack0000000000000008->src).data,iVar2);
    }
  }
  return;
}



void math_rand___Rand__Intn(math_rand_Rand *r,int n,int ~r0)

{
  undefined4 extraout_ECX;
  undefined4 extraout_var;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    ~r0 = CONCAT44(extraout_var,extraout_ECX);
  }
  if (0 < n) {
    if (n < 0x80000000) {
      math_rand___Rand__Int31n(r,(int32)n,(int32)~r0);
      return;
    }
    math_rand___Rand__Int63n(r,n,~r0);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffe8);
}



void math_rand___Rand__Float64(math_rand_Rand *r,float64 ~r0)

{
  int iVar1;
  int unaff_R14;
  float64 f;
  math_rand_Rand *pmStack0000000000000008;
  
  pmStack0000000000000008 = r;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  do {
    iVar1 = (*(code *)((pmStack0000000000000008->src).tab)->fun[0])
                      ((pmStack0000000000000008->src).data);
  } while ((double)iVar1 * 1.084202172485504e-19 == 1.0);
  return;
}



void math_rand___Rand__Float32(math_rand_Rand *r,float32 ~r0)

{
  float fVar1;
  int iVar2;
  int unaff_R14;
  float32 f;
  float64 f_1;
  math_rand_Rand *pmStack0000000000000008;
  
  pmStack0000000000000008 = r;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  do {
    do {
      iVar2 = (*(code *)((pmStack0000000000000008->src).tab)->fun[0])
                        ((pmStack0000000000000008->src).data);
      fVar1 = (float)iVar2 * 1.084202e-19;
    } while (fVar1 == 1.0);
  } while ((fVar1 == 1.0) && (!NAN(fVar1)));
  return;
}



void math_rand___Rand__Perm(math_rand_Rand *r,int n,__int ~r0)

{
  int extraout_RAX;
  uint extraout_RAX_00;
  int j;
  int ~r0_00;
  void *in_RDI;
  void *extraout_RDI;
  int unaff_R14;
  int i;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  runtime_makeslice((internal_abi_Type *)&DAT_00807760,n,n,in_RDI);
  ~r0_00 = 0;
  while( true ) {
    if (n <= ~r0_00) {
      return;
    }
    math_rand___Rand__Intn(r,~r0_00 + 1,~r0_00);
    if ((uint)n <= extraout_RAX_00) break;
    *(undefined8 *)(extraout_RAX + ~r0_00 * 8) = *(undefined8 *)(extraout_RAX + extraout_RAX_00 * 8)
    ;
    *(int *)(extraout_RAX + extraout_RAX_00 * 8) = ~r0_00;
    ~r0_00 = ~r0_00 + 1;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



// WARNING: Unknown calling convention

void math_rand___Rand__Shuffle(math_rand_Rand *r,int n,func_int__int_ **swap)

{
  sdword extraout_EAX;
  int extraout_RAX;
  int j;
  int iVar1;
  int i;
  int j_1;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (n < 0) {
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffffd8);
  }
  while (iVar1 = n + -1, 0x7ffffffe < iVar1) {
    math_rand___Rand__Int63n(r,n,(int64)swap);
    (**swap)(iVar1,extraout_RAX);
    n = iVar1;
  }
  for (; 0 < iVar1; iVar1 = iVar1 + -1) {
    math_rand___Rand__int31n(r,(sdword)iVar1 + 1,(int32)swap);
    (**swap)(iVar1,(int)extraout_EAX);
  }
  return;
}



void math_rand___Rand__Read(math_rand_Rand *r,__uint8 p,int n,error err)

{
  runtime_itab *prVar1;
  void *__fd;
  void *in_RCX;
  size_t in_RDI;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  prVar1 = (r->src).tab;
  __fd = (r->src).data;
  if (prVar1 != (runtime_itab *)0x0) {
    if (prVar1 == (runtime_itab *)go_itab__math_rand_lockedSource_math_rand_Source) {
      math_rand___lockedSource__read((int)__fd,(void *)n,(size_t)in_RCX);
      return;
    }
    if (prVar1 == (runtime_itab *)go_itab__math_rand_fastSource_math_rand_Source) {
      math_rand___fastSource__read((int)__fd,(void *)n,(size_t)in_RCX);
      return;
    }
  }
  math_rand_read(n,in_RCX,in_RDI);
  return;
}



ssize_t math_rand_read(int __fd,void *__buf,size_t __nbytes)

{
  int iVar1;
  int iVar2;
  uint uVar3;
  int8 pos;
  char cVar4;
  math_rand_rngSource *in_RSI;
  math_rand_rngSource *rng;
  undefined1 *in_RDI;
  uint *in_R8;
  char *in_R9;
  int64 val;
  int iVar5;
  uint uVar6;
  int64 x;
  int unaff_R14;
  int iStack0000000000000008;
  void *pvStack0000000000000010;
  undefined1 *puStack0000000000000020;
  math_rand_rngSource *pmStack0000000000000028;
  uint *puStack0000000000000030;
  char *pcStack0000000000000038;
  
  pmStack0000000000000028 = in_RSI;
  puStack0000000000000020 = in_RDI;
  while (iStack0000000000000008 = __fd, pvStack0000000000000010 = __buf,
        puStack0000000000000030 = in_R8, pcStack0000000000000038 = in_R9,
        &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    __fd = iStack0000000000000008;
    __buf = pvStack0000000000000010;
    in_R8 = puStack0000000000000030;
    in_R9 = pcStack0000000000000038;
  }
  rng = pmStack0000000000000028;
  if (puStack0000000000000020 != go_itab__math_rand_rngSource_math_rand_Source) {
    rng = (math_rand_rngSource *)0x0;
  }
  cVar4 = *in_R9;
  uVar6 = *in_R8;
  iVar5 = 0;
  do {
    if ((int)__buf <= iVar5) {
      *in_R9 = cVar4;
      *in_R8 = uVar6;
      return iVar5;
    }
    if (cVar4 == '\0') {
      if (rng == (math_rand_rngSource *)0x0) {
        uVar6 = (**(code **)(puStack0000000000000020 + 0x18))(pmStack0000000000000028);
        __fd = iStack0000000000000008;
        __buf = pvStack0000000000000010;
        in_R8 = puStack0000000000000030;
        in_R9 = pcStack0000000000000038;
      }
      else {
        iVar2 = rng->tap;
        iVar1 = iVar2 + -1;
        rng->tap = iVar1;
        if (iVar1 < 0) {
          rng->tap = iVar2 + 0x25e;
        }
        iVar2 = rng->feed;
        iVar1 = iVar2 + -1;
        rng->feed = iVar1;
        if (iVar1 < 0) {
          rng->feed = iVar2 + 0x25e;
        }
        uVar3 = rng->feed;
        if (0x25e < uVar3) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        if (0x25e < (uint)rng->tap) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        uVar6 = rng->vec[uVar3] + rng->vec[rng->tap];
        rng->vec[uVar3] = uVar6;
        uVar6 = uVar6 & 0x7fffffffffffffff;
      }
      cVar4 = '\a';
    }
    *(char *)(__fd + iVar5) = (char)uVar6;
    iVar5 = iVar5 + 1;
    uVar6 = (int)uVar6 >> 8;
    cVar4 = cVar4 + -1;
  } while( true );
}



void math_rand_globalRand(math_rand_Rand *~r0)

{
  char extraout_AL;
  math_rand_Rand *r_1;
  char *extraout_RAX;
  void *extraout_RAX_00;
  runtime_itab *extraout_RAX_01;
  math_rand_Rand *extraout_RAX_02;
  math_rand_Rand *r;
  math_rand_Rand *extraout_RAX_03;
  math_rand_Rand *extraout_RAX_04;
  math_rand_Rand *r_00;
  void *extraout_RAX_05;
  void *extraout_RAX_06;
  math_rand_Rand *extraout_RAX_07;
  math_rand_Rand *extraout_RAX_08;
  math_rand_Rand *extraout_RAX_09;
  undefined *~r0_00;
  void *~r0_01;
  void *~r0_02;
  void *~r0_03;
  void *~r0_04;
  undefined extraout_DIL;
  undefined extraout_DIL_00;
  undefined extraout_DIL_01;
  undefined extraout_DIL_02;
  undefined ~r0_05;
  void **extraout_R11;
  void **extraout_R11_00;
  void **extraout_R11_01;
  void **extraout_R11_02;
  int unaff_R14;
  string in_stack_ffffffffffffffa0;
  runtime_iface in_stack_ffffffffffffffb0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (math_rand_globalRandGenerator.v != (void *)0x0) {
    return;
  }
  internal_godebug___Setting__Value(math_rand_randautoseed,in_stack_ffffffffffffffa0);
  if ((~r0_00 == &DAT_00000001) && (*extraout_RAX == '0')) {
    internal_godebug___Setting__IncNonDefault(math_rand_randautoseed);
    runtime_newobject((internal_abi_Type *)&DAT_0084da40,~r0_01);
    runtime_assertI2I2((internal_abi_InterfaceType *)&DAT_0083e6e0,
                       (runtime_iface)in_stack_ffffffffffffffa0,in_stack_ffffffffffffffb0);
    runtime_newobject((internal_abi_Type *)&DAT_00873e20,~r0_02);
    (extraout_RAX_02->src).tab = (runtime_itab *)go_itab__math_rand_lockedSource_math_rand_Source;
    r_00 = extraout_RAX_02;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11 = extraout_RAX_00;
      r_00 = extraout_RAX_03;
    }
    (r_00->src).data = extraout_RAX_00;
    (r_00->s64).tab = extraout_RAX_01;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_00 = ~r0_02;
      r_00 = extraout_RAX_04;
    }
    (r_00->s64).data = ~r0_02;
    math_rand___Rand__Seed(r_00,1);
    ~r0_05 = extraout_DIL;
  }
  else {
    runtime_newobject((internal_abi_Type *)&DAT_0083e660,~r0_00);
    runtime_newobject((internal_abi_Type *)&DAT_0083e660,~r0_03);
    runtime_newobject((internal_abi_Type *)&DAT_00873e20,~r0_04);
    (extraout_RAX_07->src).tab = (runtime_itab *)go_itab__math_rand_fastSource_math_rand_Source;
    r_00 = extraout_RAX_07;
    ~r0_05 = extraout_DIL_00;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_01 = extraout_RAX_05;
      r_00 = extraout_RAX_08;
      ~r0_05 = extraout_DIL_01;
    }
    (r_00->src).data = extraout_RAX_05;
    (r_00->s64).tab = (runtime_itab *)go_itab__math_rand_fastSource_math_rand_Source64;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_02 = extraout_RAX_06;
      r_00 = extraout_RAX_09;
      ~r0_05 = extraout_DIL_02;
    }
    (r_00->s64).data = extraout_RAX_06;
  }
  sync_atomic_CompareAndSwapPointer(&math_rand_globalRandGenerator.v,(void *)0x0,r_00,(bool)~r0_05);
  if (extraout_AL == '\0') {
    return;
  }
  return;
}



void math_rand___fastSource__Int63(int64 ~r0)

{
  uint64 extraout_RAX;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    ~r0 = extraout_RAX;
  }
  math_rand_fastrand64(~r0);
  return;
}



// WARNING: Unknown calling convention

void math_rand___fastSource__Seed(void)

{
  int unaff_R14;
  interface___ in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffe8);
}



void math_rand___fastSource__Uint64(uint64 ~r0)

{
  uint64 extraout_RAX;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    ~r0 = extraout_RAX;
  }
  math_rand_fastrand64(~r0);
  return;
}



ssize_t math_rand___fastSource__read(int __fd,void *__buf,size_t __nbytes)

{
  ssize_t sVar1;
  sdword sVar2;
  int32 new;
  size_t in_RDI;
  int unaff_R14;
  bool bVar3;
  sync_Mutex *psStack0000000000000008;
  void *pvStack0000000000000010;
  
  psStack0000000000000008 = (sync_Mutex *)__fd;
  pvStack0000000000000010 = __buf;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  LOCK();
  bVar3 = psStack0000000000000008->state == 0;
  if (bVar3) {
    psStack0000000000000008->state = 1;
  }
  UNLOCK();
  if (!bVar3) {
    sync___Mutex__lockSlow(psStack0000000000000008);
  }
  sVar1 = math_rand_read((int)pvStack0000000000000010,(void *)__nbytes,in_RDI);
  LOCK();
  sVar2 = psStack0000000000000008->state;
  psStack0000000000000008->state = psStack0000000000000008->state + -1;
  UNLOCK();
  sVar2 = sVar2 + -1;
  if (sVar2 != 0) {
    sync___Mutex__unlockSlow(psStack0000000000000008,sVar2);
  }
  return sVar1;
}



// WARNING: Unknown calling convention

void math_rand_Seed(int64 seed)

{
  sync_atomic_Pointer_math_rand_Rand_ old;
  char extraout_AL;
  void *extraout_RAX;
  runtime_itab *extraout_RAX_00;
  math_rand_Rand *extraout_RAX_01;
  math_rand_Rand *r;
  math_rand_Rand *extraout_RAX_02;
  math_rand_Rand *extraout_RAX_03;
  math_rand_Rand *r_00;
  void *in_RBX;
  void *~r0;
  void *extraout_RBX;
  bool ~r0_00;
  void **extraout_R11;
  void **extraout_R11_00;
  int unaff_R14;
  runtime_iface in_stack_ffffffffffffffa0;
  runtime_iface in_stack_ffffffffffffffb0;
  math_rand_Rand *orig;
  
  while (old.v = math_rand_globalRandGenerator.v,
        &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RBX = extraout_RBX;
  }
                    // WARNING: Load size is inaccurate
  if ((math_rand_globalRandGenerator.v != (void *)0x0) &&
     (*math_rand_globalRandGenerator.v == go_itab__math_rand_lockedSource_math_rand_Source)) {
    math_rand___Rand__Seed((math_rand_Rand *)math_rand_globalRandGenerator.v,seed);
    return;
  }
  runtime_newobject((internal_abi_Type *)&DAT_0084da40,in_RBX);
  runtime_assertI2I2((internal_abi_InterfaceType *)&DAT_0083e6e0,in_stack_ffffffffffffffa0,
                     in_stack_ffffffffffffffb0);
  runtime_newobject((internal_abi_Type *)&DAT_00873e20,~r0);
  (extraout_RAX_01->src).tab = (runtime_itab *)go_itab__math_rand_lockedSource_math_rand_Source;
  r_00 = extraout_RAX_01;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11 = extraout_RAX;
    r_00 = extraout_RAX_02;
  }
  (r_00->src).data = extraout_RAX;
  (r_00->s64).tab = extraout_RAX_00;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11_00 = ~r0;
    r_00 = extraout_RAX_03;
  }
  (r_00->s64).data = ~r0;
  math_rand___Rand__Seed(r_00,seed);
  sync_atomic_CompareAndSwapPointer(&math_rand_globalRandGenerator.v,old.v,r_00,~r0_00);
  if (extraout_AL == '\0') {
    math_rand_Seed(seed);
  }
  return;
}



void math_rand_Int63(int64 ~r0)

{
  int *extraout_RAX;
  math_rand_Rand *extraout_RAX_00;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    ~r0 = (int64)extraout_RAX_00;
  }
  math_rand_globalRand((math_rand_Rand *)~r0);
  (**(code **)(*extraout_RAX + 0x18))(extraout_RAX[1]);
  return;
}



void math_rand_Int63n(int64 n,int64 ~r0)

{
  math_rand_Rand *r;
  int64 ~r0_00;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  math_rand_globalRand((math_rand_Rand *)n);
  math_rand___Rand__Int63n(r,n,~r0_00);
  return;
}



void math_rand_Intn(int n,int ~r0)

{
  math_rand_Rand *r;
  int ~r0_00;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  math_rand_globalRand((math_rand_Rand *)n);
  math_rand___Rand__Intn(r,n,~r0_00);
  return;
}



void math_rand_Float64(float64 ~r0)

{
  math_rand_Rand *in_RAX;
  int *extraout_RAX;
  int iVar1;
  math_rand_Rand *extraout_RAX_00;
  int unaff_R14;
  float64 f;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RAX = extraout_RAX_00;
  }
  math_rand_globalRand(in_RAX);
  do {
    iVar1 = (**(code **)(*extraout_RAX + 0x18))(extraout_RAX[1]);
  } while ((double)iVar1 * 1.084202172485504e-19 == 1.0);
  return;
}



// WARNING: Unknown calling convention

void math_rand_Shuffle(int n,func_int__int_ **swap)

{
  math_rand_Rand *r;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  math_rand_globalRand((math_rand_Rand *)n);
  math_rand___Rand__Shuffle(r,n,swap);
  return;
}



void math_rand___lockedSource__Int63(math_rand_lockedSource *r,int64 n)

{
  int iVar1;
  math_rand_rngSource *pmVar2;
  int iVar3;
  uint uVar4;
  sdword sVar5;
  int32 new;
  int64 x;
  int unaff_R14;
  bool bVar6;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  LOCK();
  bVar6 = (r->lk).state == 0;
  if (bVar6) {
    (r->lk).state = 1;
  }
  UNLOCK();
  if (!bVar6) {
    sync___Mutex__lockSlow(&r->lk);
  }
  pmVar2 = r->s;
  iVar3 = pmVar2->tap;
  iVar1 = iVar3 + -1;
  pmVar2->tap = iVar1;
  if (iVar1 < 0) {
    pmVar2->tap = iVar3 + 0x25e;
  }
  iVar3 = pmVar2->feed;
  iVar1 = iVar3 + -1;
  pmVar2->feed = iVar1;
  if (iVar1 < 0) {
    pmVar2->feed = iVar3 + 0x25e;
  }
  uVar4 = pmVar2->feed;
  if (0x25e < uVar4) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if (0x25e < (uint)pmVar2->tap) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  pmVar2->vec[uVar4] = pmVar2->vec[uVar4] + pmVar2->vec[pmVar2->tap];
  LOCK();
  sVar5 = (r->lk).state;
  (r->lk).state = (r->lk).state + -1;
  UNLOCK();
  sVar5 = sVar5 + -1;
  if (sVar5 != 0) {
    sync___Mutex__unlockSlow(&r->lk,sVar5);
  }
  return;
}



void math_rand___lockedSource__Uint64(math_rand_lockedSource *r,uint64 n)

{
  int iVar1;
  math_rand_rngSource *pmVar2;
  int iVar3;
  uint uVar4;
  sdword sVar5;
  int32 new;
  int64 x;
  int unaff_R14;
  bool bVar6;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  LOCK();
  bVar6 = (r->lk).state == 0;
  if (bVar6) {
    (r->lk).state = 1;
  }
  UNLOCK();
  if (!bVar6) {
    sync___Mutex__lockSlow(&r->lk);
  }
  pmVar2 = r->s;
  iVar3 = pmVar2->tap;
  iVar1 = iVar3 + -1;
  pmVar2->tap = iVar1;
  if (iVar1 < 0) {
    pmVar2->tap = iVar3 + 0x25e;
  }
  iVar3 = pmVar2->feed;
  iVar1 = iVar3 + -1;
  pmVar2->feed = iVar1;
  if (iVar1 < 0) {
    pmVar2->feed = iVar3 + 0x25e;
  }
  uVar4 = pmVar2->feed;
  if (0x25e < uVar4) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if (0x25e < (uint)pmVar2->tap) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  pmVar2->vec[uVar4] = pmVar2->vec[uVar4] + pmVar2->vec[pmVar2->tap];
  LOCK();
  sVar5 = (r->lk).state;
  (r->lk).state = (r->lk).state + -1;
  UNLOCK();
  sVar5 = sVar5 + -1;
  if (sVar5 != 0) {
    sync___Mutex__unlockSlow(&r->lk,sVar5);
  }
  return;
}



// WARNING: Unknown calling convention

void math_rand___lockedSource__Seed(math_rand_lockedSource *r,int64 seed)

{
  sdword sVar1;
  int32 new;
  int unaff_R14;
  bool bVar2;
  math_rand_lockedSource *pmStack0000000000000008;
  
  pmStack0000000000000008 = r;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  LOCK();
  bVar2 = (pmStack0000000000000008->lk).state == 0;
  if (bVar2) {
    (pmStack0000000000000008->lk).state = 1;
  }
  UNLOCK();
  if (!bVar2) {
    sync___Mutex__lockSlow(&pmStack0000000000000008->lk);
  }
  math_rand___lockedSource__seed(pmStack0000000000000008,seed);
  LOCK();
  sVar1 = (pmStack0000000000000008->lk).state;
  (pmStack0000000000000008->lk).state = (pmStack0000000000000008->lk).state + -1;
  UNLOCK();
  sVar1 = sVar1 + -1;
  if (sVar1 != 0) {
    sync___Mutex__unlockSlow(&pmStack0000000000000008->lk,sVar1);
  }
  return;
}



// WARNING: Unknown calling convention

void math_rand___lockedSource__seedPos(math_rand_lockedSource *r,int64 seed,int8 *readPos)

{
