                  runtime_growslice((void *)0x0,(int)local_148,0,(int)local_148,
                                    (internal_abi_Type *)&DAT_00807760,~r0_00);
                  local_110 = extraout_RAX_06;
                  local_178 = extraout_RCX;
                  local_180 = extraout_RBX;
                }
                runtime_memmove(local_110,local_f0,(int)local_148 << 3);
                newLen = (reflect_structType *)((int)&(local_180->StructType).Type.Size_ + 1);
                prVar4 = local_110;
                prVar7 = local_178;
                if (local_178 < newLen) {
                  ~r0_01.len = in_stack_fffffffffffffdf8;
                  ~r0_01.array = in_stack_fffffffffffffdf0;
                  ~r0_01.cap = in_stack_fffffffffffffe00;
                  runtime_growslice(local_110,(int)newLen,(int)local_178,1,
                                    (internal_abi_Type *)&DAT_00807760,~r0_01);
                  prVar4 = extraout_RAX_07;
                  prVar7 = extraout_RCX_00;
                  newLen = extraout_RBX_00;
                }
                *(int *)((int)prVar4 + (int)newLen * 8 + -8) = i;
                newLen_00 = local_158 + 1;
                pprVar10 = local_f8;
                uVar9 = local_128;
                if (local_128 < newLen_00) {
                  ~r0_02.len = in_stack_fffffffffffffdf8;
                  ~r0_02.array = in_stack_fffffffffffffdf0;
                  ~r0_02.cap = in_stack_fffffffffffffe00;
                  local_180 = newLen;
                  local_178 = prVar7;
                  local_110 = prVar4;
                  runtime_growslice(local_f8,newLen_00,local_128,1,
                                    (internal_abi_Type *)&DAT_00850ec0,~r0_02);
                  prVar4 = local_110;
                  prVar7 = local_178;
                  newLen = local_180;
                  pprVar10 = extraout_RAX_08;
                  newLen_00 = extraout_RBX_01;
                  uVar9 = extraout_RCX_01;
                }
                iVar8 = newLen_00 - 1;
                iVar11 = iVar8 * 0x20;
                pprVar10[iVar8 * 4 + 2] = newLen;
                pprVar10[iVar8 * 4 + 3] = prVar7;
                iVar8 = i;
                if (runtime_writeBarrier._0_4_ != 0) {
                  runtime_gcWriteBarrier4();
                  *extraout_R11 = local_c0;
                  extraout_R11[1] = *(reflect_structType **)((int)extraout_RSI + extraout_RDI_00);
                  extraout_R11[2] = extraout_RAX_09;
                  extraout_R11[3] =
                       *(reflect_structType **)((int)extraout_RSI + extraout_RDI_00 + 8);
                  prVar4 = extraout_RAX_09;
                  pprVar10 = extraout_RSI;
                  iVar11 = extraout_RDI_00;
                  newLen_00 = extraout_R8;
                  uVar9 = extraout_R9;
                }
                *(reflect_structType **)((int)pprVar10 + iVar11) = local_c0;
                *(reflect_structType **)((int)pprVar10 + iVar11 + 8) = prVar4;
                phVar6 = local_c8;
                cVar2 = local_198._6_1_;
              }
              else {
                runtime_mapassign_fast64ptr
                          ((internal_abi_MapType *)&DAT_0082d220,(runtime_hmap *)local_100,local_c0,
                           ~r0_08);
                *extraout_RAX_10 = 2;
                phVar6 = local_100;
                iVar8 = i;
                pprVar10 = local_f8;
                newLen_00 = local_158;
                uVar9 = local_128;
                cVar2 = local_198._6_1_;
              }
            }
          }
          else {
            runtime_mapaccess1_fast64
                      ((internal_abi_MapType *)&DAT_0082d220,(runtime_hmap *)count,(uint64)local_e8,
                       ~r0_07);
            if ((1 < *extraout_RAX_11) || (local_198._6_1_ != '\0')) {
              FUN_0046cdab();
              return;
            }
            f.Name.len = in_stack_fffffffffffffdf8;
            f.Name.str = in_stack_fffffffffffffdf0;
            f.PkgPath.str = (uint8 *)in_stack_fffffffffffffe00;
            auVar12 = in_stack_fffffffffffffe08._48_24_;
            f.PkgPath.len = in_stack_fffffffffffffe08._0_8_;
            f.Type.tab = (runtime_itab *)SUB168(in_stack_fffffffffffffe08._8_16_,0);
            f.Type.data = (void *)SUB168(in_stack_fffffffffffffe08._8_16_,8);
            f.Tag.str = (uint8 *)SUB168(in_stack_fffffffffffffe08._24_16_,0);
            f.Tag.len = SUB168(in_stack_fffffffffffffe08._24_16_,8);
            f.Offset = in_stack_fffffffffffffe08._40_8_;
            f.Index.array = (int *)auVar12._0_8_;
            f.Index.len = auVar12._8_8_;
            f.Index.cap = auVar12._16_8_;
            f.Anonymous = (bool)in_stack_fffffffffffffe08[72];
            f._97_7_ = in_stack_fffffffffffffe08._73_7_;
            reflect___structType__Field(local_e8,i,f);
            FUN_0046d10c();
            if (local_148 == (reflect_structType *)0x0) {
              local_d0 = (void *)0x0;
              local_130 = 0;
              local_138 = 0;
            }
            else {
              ~r0_03.len = in_stack_fffffffffffffdf8;
              ~r0_03.array = in_stack_fffffffffffffdf0;
              ~r0_03.cap = in_stack_fffffffffffffe00;
              runtime_growslice((void *)0x0,(int)local_148,0,(int)local_148,
                                (internal_abi_Type *)&DAT_00807760,~r0_03);
              local_d0 = extraout_RAX_12;
              local_130 = extraout_RCX_02;
              local_138 = extraout_RBX_02;
            }
            runtime_memmove(local_d0,local_f0,(int)local_148 << 3);
            uVar9 = local_138 + 1;
            pvVar5 = local_d0;
            if (local_130 < uVar9) {
              ~r0_04.len = in_stack_fffffffffffffdf8;
              ~r0_04.array = in_stack_fffffffffffffdf0;
              ~r0_04.cap = in_stack_fffffffffffffe00;
              runtime_growslice(local_d0,uVar9,local_130,1,(internal_abi_Type *)&DAT_00807760,~r0_04
                               );
              pvVar5 = extraout_RAX_13;
              uVar9 = extraout_RBX_03;
            }
            *(int *)((int)pvVar5 + uVar9 * 8 + -8) = i;
            phVar6 = local_100;
            iVar8 = i;
            pprVar10 = local_f8;
            newLen_00 = local_158;
            uVar9 = local_128;
            cVar2 = '\x01';
          }
          uVar3 = iVar8 + 1;
        }
      }
      local_e0 = local_e0 + 4;
    }
    local_e0 = pprVar10;
    pprVar10 = local_108;
    if (cVar2 != '\0') {
      return;
    }
  } while( true );
}



void reflect___structType__FieldByName
               (reflect_structType *t,string name,reflect_StructField f,bool present)

{
  string ~r0;
  reflect_StructField f_00;
  reflect_StructField result;
  bool bVar1;
  char extraout_AL;
  reflect_structType *t_00;
  reflect_structType *t_01;
  int extraout_RCX;
  undefined8 extraout_RCX_00;
  int extraout_RBX;
  undefined8 extraout_RBX_00;
  uint uVar2;
  int unaff_R14;
  undefined in_XMM15 [16];
  uint8 *in_stack_fffffffffffffed8;
  int in_stack_fffffffffffffee0;
  undefined auVar3 [24];
  undefined in_stack_fffffffffffffee8 [88];
  bool hasEmbeds;
  int i;
  int local_a0;
  int local_98;
  internal_abi_StructField *local_90;
  func_string__bool *local_88;
  undefined local_80 [16];
  undefined local_70 [104];
  
  while (&i <= *(int **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  t_00 = (reflect_structType *)FUN_0046cdab();
  if (extraout_RCX != 0) {
    local_98 = (t_00->StructType).Fields.len;
    bVar1 = false;
    uVar2 = 0;
    while ((int)uVar2 < local_98) {
      if ((uint)(t_00->StructType).Fields.len <= uVar2) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      local_90 = (t_00->StructType).Fields.array;
      local_a0 = uVar2 * 3;
      ~r0.len = in_stack_fffffffffffffee0;
      ~r0.str = in_stack_fffffffffffffed8;
      i = uVar2;
      internal_abi_Name_Name((internal_abi_Name)local_90[uVar2].Name.Bytes,~r0);
      if (extraout_RBX == extraout_RCX) {
        runtime_memequal();
        if (extraout_AL != '\0') {
          f_00.Name.len = in_stack_fffffffffffffee0;
          f_00.Name.str = in_stack_fffffffffffffed8;
          auVar3 = in_stack_fffffffffffffee8._56_24_;
          f_00.PkgPath.str = (uint8 *)SUB168(in_stack_fffffffffffffee8._0_16_,0);
          f_00.PkgPath.len = SUB168(in_stack_fffffffffffffee8._0_16_,8);
          f_00.Type.tab = (runtime_itab *)SUB168(in_stack_fffffffffffffee8._16_16_,0);
          f_00.Type.data = (void *)SUB168(in_stack_fffffffffffffee8._16_16_,8);
          f_00.Tag.str = (uint8 *)SUB168(in_stack_fffffffffffffee8._32_16_,0);
          f_00.Tag.len = SUB168(in_stack_fffffffffffffee8._32_16_,8);
          f_00.Offset = in_stack_fffffffffffffee8._48_8_;
          f_00.Index.array = (int *)auVar3._0_8_;
          f_00.Index.len = auVar3._8_8_;
          f_00.Index.cap = auVar3._16_8_;
          f_00.Anonymous = (bool)in_stack_fffffffffffffee8[80];
          f_00._97_7_ = in_stack_fffffffffffffee8._81_7_;
          reflect___structType__Field(t_00,i,f_00);
          local_70._0_8_ = in_stack_fffffffffffffed8;
          FUN_0046d10c();
          FUN_0046d10c();
          return;
        }
      }
      bVar1 = (bool)((*(&local_90->Name)[local_a0].Bytes & 8) != 0 | bVar1);
      uVar2 = i + 1;
    }
    if (bVar1) {
      local_70._8_8_ = in_XMM15._8_8_;
      FUN_0046cdab();
      local_88 = reflect___structType__FieldByName_func1;
      local_80._8_8_ = extraout_RCX_00;
      local_80._0_8_ = extraout_RBX_00;
      result.Name.len = in_stack_fffffffffffffee0;
      result.Name.str = in_stack_fffffffffffffed8;
      auVar3 = in_stack_fffffffffffffee8._56_24_;
      result.PkgPath.str = (uint8 *)SUB168(in_stack_fffffffffffffee8._0_16_,0);
      result.PkgPath.len = SUB168(in_stack_fffffffffffffee8._0_16_,8);
      result.Type.tab = (runtime_itab *)SUB168(in_stack_fffffffffffffee8._16_16_,0);
      result.Type.data = (void *)SUB168(in_stack_fffffffffffffee8._16_16_,8);
      result.Tag.str = (uint8 *)SUB168(in_stack_fffffffffffffee8._32_16_,0);
      result.Tag.len = SUB168(in_stack_fffffffffffffee8._32_16_,8);
      result.Offset = in_stack_fffffffffffffee8._48_8_;
      result.Index.array = (int *)auVar3._0_8_;
      result.Index.len = auVar3._8_8_;
      result.Index.cap = auVar3._16_8_;
      result.Anonymous = (bool)in_stack_fffffffffffffee8[80];
      result._97_7_ = in_stack_fffffffffffffee8._81_7_;
      reflect___structType__FieldByNameFunc(t_01,&local_88,result,SUB81(extraout_RCX_00,0));
      local_70._0_8_ = in_stack_fffffffffffffed8;
      FUN_0046d10c();
      FUN_0046d10c();
      return;
    }
  }
  return;
}



void reflect___structType__FieldByName_func1(string s,bool ~r0)

{
  int in_RDX;
  int in_RBX;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack();
  }
  if (*(int *)(in_RDX + 0x10) == in_RBX) {
    runtime_memequal();
  }
  return;
}



void reflect_TypeOf(interface___ i,reflect_Type ~r0)

{
  return;
}



void reflect___rtype__ptrTo(reflect_rtype *t,internal_abi_Type *~r0)

{
  int32 off;
  undefined4 uVar1;
  undefined4 uVar2;
  undefined4 uVar3;
  ___internal_abi_Type ~r0_00;
  string ~r0_01;
  interface___ actual;
  interface___ actual_00;
  bool bVar4;
  undefined extraout_AL;
  undefined4 extraout_EAX;
  internal_abi_Type *have;
  int extraout_RAX;
  internal_abi_Type *have_00;
  undefined8 *dst;
  reflect_ptrType *_pp;
  void *ptr;
  internal_abi_Type *have_01;
  char extraout_CL;
  bool ok;
  void *in_RCX;
  reflect_ptrType *prototype;
  reflect_rtype *extraout_RCX;
  void *extraout_RCX_00;
  uint32 uVar5;
  int iVar6;
  int32 ~r0_02;
  void *extraout_RBX;
  void *~r0_03;
  internal_abi_Type *tt;
  undefined8 *extraout_RSI;
  reflect_rtype **extraout_R11;
  int unaff_R14;
  interface___ in_stack_ffffffffffffff80;
  interface___ in_stack_ffffffffffffff90;
  internal_abi_Type *in_stack_ffffffffffffffa0;
  int in_stack_ffffffffffffffa8;
  void *pvVar7;
  uint8 local_50 [32];
  undefined local_30;
  undefined8 *local_28;
  undefined8 *local_20;
  interface___ iptr;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RCX = extraout_RCX_00;
  }
  off = (t->t).PtrToThis;
  if (off != 0) {
    reflect_resolveTypeOff(t,off,in_RCX);
    return;
  }
  sync___Map__Load(&reflect_ptrMap,in_stack_ffffffffffffff80,in_stack_ffffffffffffff90,true);
  if (extraout_CL != '\0') {
    if (have == (internal_abi_Type *)&DAT_00899740) {
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicdottypeE
              (have,(internal_abi_Type *)&DAT_00899740,(internal_abi_Type *)&DAT_00821120);
  }
  reflect___rtype__String(t,(string)in_stack_ffffffffffffff80);
  ~r0_01.len = in_stack_ffffffffffffffa8;
  ~r0_01.str = (uint8 *)in_stack_ffffffffffffffa0;
  runtime_concatstring2
            (&local_50,(string)in_stack_ffffffffffffff80,(string)in_stack_ffffffffffffff90,~r0_01);
  ~r0_00.cap = (int)in_stack_ffffffffffffffa0;
  ~r0_00.array = (internal_abi_Type **)in_stack_ffffffffffffff90._type;
  ~r0_00.len = (int)in_stack_ffffffffffffff90.data;
  pvVar7 = extraout_RBX;
  local_30 = extraout_AL;
  reflect_typesByString((string)in_stack_ffffffffffffff80,~r0_00);
  for (iVar6 = 0; iVar6 < (int)~r0_03; iVar6 = iVar6 + 1) {
    if (*(reflect_rtype **)(*(int *)(extraout_RAX + iVar6 * 8) + 0x30) == t) {
      actual.data = pvVar7;
      actual._type = in_stack_ffffffffffffffa0;
      sync___Map__LoadOrStore
                (&reflect_ptrMap,in_stack_ffffffffffffff80,in_stack_ffffffffffffff90,actual,true);
      if (have_00 == (internal_abi_Type *)&DAT_00899740) {
        return;
      }
                    // WARNING: Subroutine does not return
      runtime_panicdottypeE
                (have_00,(internal_abi_Type *)&DAT_00899740,(internal_abi_Type *)&DAT_00821120);
    }
  }
  iptr._type = (internal_abi_Type *)&DAT_007f87e0;
  iptr.data = (void *)0x0;
  local_28 = &DAT_007f87e0;
  runtime_newobject((internal_abi_Type *)&DAT_008413e0,~r0_03);
  local_20 = dst;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_wbMove((internal_abi_Type *)&DAT_008413e0,dst,local_28);
  }
  *local_20 = *local_28;
  uVar1 = *(undefined4 *)((int)local_28 + 0xc);
  uVar2 = *(undefined4 *)(local_28 + 2);
  uVar3 = *(undefined4 *)((int)local_28 + 0x14);
  *(undefined4 *)(local_20 + 1) = *(undefined4 *)(local_28 + 1);
  *(undefined4 *)((int)local_20 + 0xc) = uVar1;
  *(undefined4 *)(local_20 + 2) = uVar2;
  *(undefined4 *)((int)local_20 + 0x14) = uVar3;
  uVar1 = *(undefined4 *)((int)local_28 + 0x1c);
  uVar2 = *(undefined4 *)(local_28 + 4);
  uVar3 = *(undefined4 *)((int)local_28 + 0x24);
  *(undefined4 *)(local_20 + 3) = *(undefined4 *)(local_28 + 3);
  *(undefined4 *)((int)local_20 + 0x1c) = uVar1;
  *(undefined4 *)(local_20 + 4) = uVar2;
  *(undefined4 *)((int)local_20 + 0x24) = uVar3;
  uVar1 = *(undefined4 *)((int)local_28 + 0x2c);
  uVar2 = *(undefined4 *)(local_28 + 6);
  uVar3 = *(undefined4 *)((int)local_28 + 0x34);
  *(undefined4 *)(local_20 + 5) = *(undefined4 *)(local_28 + 5);
  *(undefined4 *)((int)local_20 + 0x2c) = uVar1;
  *(undefined4 *)(local_20 + 6) = uVar2;
  *(undefined4 *)((int)local_20 + 0x34) = uVar3;
  internal_abi_NewName
            ((string)in_stack_ffffffffffffff80,(string)in_stack_ffffffffffffff90,(bool)local_30,
             SUB81(pvVar7,0),(internal_abi_Name)0x0);
  reflect_addReflectOff(ptr,~r0_02);
  *(undefined4 *)(local_20 + 5) = extraout_EAX;
  *(undefined4 *)((int)local_20 + 0x2c) = 0;
  uVar5 = (t->t).Hash;
  bVar4 = false;
  while (!bVar4) {
    uVar5 = uVar5 * 0x1000193 ^ 0x2a;
    bVar4 = true;
  }
  *(uint32 *)(local_20 + 2) = uVar5;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RCX;
    extraout_R11[1] = (reflect_rtype *)extraout_RSI[6];
    t = extraout_RCX;
    local_20 = extraout_RSI;
  }
  local_20[6] = t;
  actual_00.data = pvVar7;
  actual_00._type = in_stack_ffffffffffffffa0;
  sync___Map__LoadOrStore
            (&reflect_ptrMap,in_stack_ffffffffffffff80,in_stack_ffffffffffffff90,actual_00,true);
  if (have_01 == (internal_abi_Type *)&DAT_00899740) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicdottypeE
            (have_01,(internal_abi_Type *)&DAT_00899740,(internal_abi_Type *)&DAT_00821120);
}



void reflect___rtype__Implements(reflect_rtype *t,reflect_Type u,bool ~r0)

{
  int iVar1;
  internal_abi_Type *T;
  bool ~r0_00;
  undefined8 in_RCX;
  undefined7 in_register_00000019;
  int iVar2;
  int unaff_R14;
  undefined8 uStack0000000000000018;
  interface___ in_stack_ffffffffffffffe8;
  
  iVar2 = CONCAT71(in_register_00000019,~r0);
  uStack0000000000000018 = in_RCX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (iVar2 != 0) {
    iVar1 = (**(code **)(iVar2 + 0x98))(uStack0000000000000018);
    if (iVar1 == 0x14) {
      T = (internal_abi_Type *)(**(code **)(iVar2 + 0x100))(uStack0000000000000018);
      reflect_implements(T,&t->t,~r0_00);
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffffe8);
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffe8);
}



void reflect___rtype__AssignableTo(reflect_rtype *t,reflect_Type u,bool ~r0)

{
  char extraout_AL;
  internal_abi_Type *T;
  internal_abi_Type *uu;
  bool ~r0_00;
  bool ~r0_01;
  undefined8 in_RCX;
  undefined7 in_register_00000019;
  int unaff_R14;
  undefined8 uStack0000000000000018;
  interface___ in_stack_ffffffffffffffe0;
  
  uStack0000000000000018 = in_RCX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (CONCAT71(in_register_00000019,~r0) == 0) {
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffffe0);
  }
  T = (internal_abi_Type *)
      (**(code **)(CONCAT71(in_register_00000019,~r0) + 0x100))(uStack0000000000000018);
  reflect_directlyAssignable(T,&t->t,~r0_00);
  if (extraout_AL == '\0') {
    reflect_implements(T,&t->t,~r0_01);
  }
  return;
}



void reflect___rtype__ConvertibleTo(reflect_rtype *t,reflect_Type u,bool ~r0)

{
  internal_abi_Type *dst;
  undefined8 in_RCX;
  func_reflect_Value__reflect_Type__reflect_Value **~r0_00;
  undefined7 in_register_00000019;
  int unaff_R14;
  undefined8 uStack0000000000000018;
  interface___ in_stack_ffffffffffffffe8;
  
  uStack0000000000000018 = in_RCX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (CONCAT71(in_register_00000019,~r0) != 0) {
    dst = (internal_abi_Type *)
          (**(code **)(CONCAT71(in_register_00000019,~r0) + 0x100))(uStack0000000000000018);
    reflect_convertOp(dst,&t->t,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffe8);
}



void reflect___rtype__Comparable(reflect_rtype *t,bool ~r0)

{
  return;
}



// Local variable t:reflect.interfaceType *[RAX:8] conflicts with parameter, skipped.
// Local variable v_1:reflect.interfaceType *[RBX:8] conflicts with parameter, skipped.

void reflect_implements(internal_abi_Type *T,internal_abi_Type *V,bool ~r0)

{
  dword off;
  int iVar1;
  char extraout_AL;
  char extraout_AL_01;
  char extraout_AL_02;
  uint8 *extraout_RAX;
  internal_abi_Name tmName;
  internal_abi_Name n;
  internal_abi_Name vmName;
  char extraout_AL_00;
  int extraout_RAX_00;
  int extraout_RAX_01;
  uint8 *extraout_RAX_02;
  internal_abi_Name tmName_1;
  internal_abi_Name n_00;
  internal_abi_Name vmName_1;
  int extraout_RAX_03;
  int extraout_RAX_04;
  internal_abi_Name n_01;
  uint uVar2;
  void *~r0_00;
  uint uVar3;
  void *~r0_01;
  void *pvVar4;
  int extraout_RBX;
  int extraout_RBX_00;
  int extraout_RBX_01;
  int extraout_RBX_02;
  int iVar5;
  int extraout_RBX_03;
  int extraout_RBX_04;
  int extraout_RBX_05;
  int extraout_RBX_06;
  int extraout_RBX_07;
  int extraout_RBX_08;
  int iVar6;
  int extraout_RBX_09;
  int extraout_RBX_10;
  int iVar7;
  byte bVar8;
  internal_abi_UncommonType *v;
  int unaff_R14;
  bool bVar9;
  internal_abi_Type *piStack0000000000000008;
  internal_abi_Type *piStack0000000000000010;
  string in_stack_ffffffffffffff48;
  int j_1;
  int j;
  int i;
  int i_1;
  int local_38 [2];
  internal_abi_Name local_28;
  uintptr local_20;
  internal_abi_Name local_18;
  void *local_10;
  
  piStack0000000000000008 = T;
  piStack0000000000000010 = V;
  while (local_38 <= *(int **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((piStack0000000000000008->Kind_ & 0x1f) != 0x14) {
    return;
  }
  iVar5._0_4_ = piStack0000000000000008[1].Hash;
  iVar5._4_1_ = piStack0000000000000008[1].TFlag;
  iVar5._5_1_ = piStack0000000000000008[1].Align_;
  iVar5._6_1_ = piStack0000000000000008[1].FieldAlign_;
  iVar5._7_1_ = piStack0000000000000008[1].Kind_;
  if (iVar5 == 0) {
    return;
  }
  bVar8 = piStack0000000000000010->Kind_ & 0x1f;
  if (bVar8 == 0x14) {
    pvVar4 = (void *)0x0;
    ~r0_01 = (void *)0x0;
    do {
      iVar6._0_4_ = piStack0000000000000010[1].Hash;
      iVar6._4_1_ = piStack0000000000000010[1].TFlag;
      iVar6._5_1_ = piStack0000000000000010[1].Align_;
      iVar6._6_1_ = piStack0000000000000010[1].FieldAlign_;
      iVar6._7_1_ = piStack0000000000000010[1].Kind_;
      if (iVar6 <= (int)pvVar4) {
        return;
      }
      if (*(void **)&piStack0000000000000008[1].Hash <= ~r0_01) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      local_10 = (void *)piStack0000000000000008[1].PtrBytes;
      reflect_resolveNameOff
                (piStack0000000000000008,*(int32 *)((int)local_10 + (int)~r0_01 * 8),local_10);
      if (*(void **)&piStack0000000000000010[1].Hash <= pvVar4) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      local_20 = piStack0000000000000010[1].PtrBytes;
      local_18.Bytes = extraout_RAX;
      reflect_resolveNameOff
                (piStack0000000000000010,*(int32 *)(local_20 + (int)pvVar4 * 8),
                 piStack0000000000000010);
      local_28.Bytes = n.Bytes;
      internal_abi_Name_Name(n,in_stack_ffffffffffffff48);
      internal_abi_Name_Name(local_18,in_stack_ffffffffffffff48);
      if (extraout_RBX_00 == extraout_RBX) {
        runtime_memequal();
        if (extraout_AL == '\0') {
          bVar9 = false;
        }
        else {
          reflect_resolveTypeOff
                    (piStack0000000000000010,*(int32 *)(local_20 + 4 + (int)pvVar4 * 8),pvVar4);
          local_38[0] = extraout_RAX_00;
          reflect_resolveTypeOff
                    (piStack0000000000000008,*(int32 *)((int)local_10 + (int)~r0_01 * 8 + 4),~r0_01)
          ;
          bVar9 = extraout_RAX_01 == local_38[0];
        }
      }
      else {
        bVar9 = false;
      }
      if (bVar9) {
        if ((*local_18.Bytes & 1) == 0) {
          reflect_pkgPath(local_18,in_stack_ffffffffffffff48);
          iVar5 = extraout_RBX_01;
          if (extraout_RBX_01 == 0) {
            internal_abi_Name_Name
                      ((uint8 *)piStack0000000000000008[1].Size_,in_stack_ffffffffffffff48);
            iVar5 = extraout_RBX_02;
          }
          reflect_pkgPath(local_28,in_stack_ffffffffffffff48);
          iVar6 = extraout_RBX_03;
          if (extraout_RBX_03 == 0) {
            internal_abi_Name_Name
                      ((uint8 *)piStack0000000000000010[1].Size_,in_stack_ffffffffffffff48);
            iVar6 = extraout_RBX_04;
          }
          if ((iVar5 != iVar6) || (runtime_memequal(), extraout_AL_00 == '\0')) goto LAB_004cc581;
        }
        ~r0_01 = (void *)((int)~r0_01 + 1);
        iVar7._0_4_ = piStack0000000000000008[1].Hash;
        iVar7._4_1_ = piStack0000000000000008[1].TFlag;
        iVar7._5_1_ = piStack0000000000000008[1].Align_;
        iVar7._6_1_ = piStack0000000000000008[1].FieldAlign_;
        iVar7._7_1_ = piStack0000000000000008[1].Kind_;
        if (iVar7 <= (int)~r0_01) {
          return;
        }
      }
LAB_004cc581:
      pvVar4 = (void *)((int)pvVar4 + 1);
    } while( true );
  }
  if ((piStack0000000000000010->TFlag & 1) == 0) {
    v = (internal_abi_UncommonType *)0x0;
  }
  else {
    switch(bVar8) {
    case 0x11:
      v = (internal_abi_UncommonType *)&piStack0000000000000010[1].Equal;
      break;
    case 0x12:
      v = (internal_abi_UncommonType *)&piStack0000000000000010[1].Hash;
      break;
    case 0x13:
      v = (internal_abi_UncommonType *)&piStack0000000000000010[1].PtrBytes;
      break;
    case 0x14:
      v = (internal_abi_UncommonType *)&piStack0000000000000010[1].GCData;
      break;
    case 0x15:
      v = (internal_abi_UncommonType *)&piStack0000000000000010[1].Str;
      break;
    case 0x16:
      v = (internal_abi_UncommonType *)&piStack0000000000000010[1].PtrBytes;
      break;
    case 0x17:
      v = (internal_abi_UncommonType *)&piStack0000000000000010[1].PtrBytes;
      break;
    default:
      v = (internal_abi_UncommonType *)(piStack0000000000000010 + 1);
      break;
    case 0x19:
      v = (internal_abi_UncommonType *)&piStack0000000000000010[1].GCData;
    }
  }
  if (v == (internal_abi_UncommonType *)0x0) {
    return;
  }
  uVar3 = (uint)v->Mcount;
  if (v->Mcount == 0) {
    uVar3 = 0;
    iVar5 = 0;
  }
  else {
    iVar5 = (int)&v->PkgPath + (uint)v->Moff;
    if (0x10000 < uVar3) {
                    // WARNING: Subroutine does not return
      runtime_panicSlice3Alen();
    }
  }
  uVar2 = 0;
  pvVar4 = (void *)0x0;
  do {
    if ((int)(uint)v->Mcount <= (int)uVar2) {
      return;
    }
    if (*(void **)&piStack0000000000000008[1].Hash <= pvVar4) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    local_10 = (void *)piStack0000000000000008[1].PtrBytes;
    reflect_resolveNameOff
              (piStack0000000000000008,*(int32 *)((int)local_10 + (int)pvVar4 * 8),local_10);
    if (uVar3 <= uVar2) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    off = *(dword *)(iVar5 + 4 + uVar2 * 0x10);
    local_18.Bytes = extraout_RAX_02;
    reflect_resolveNameOff
              (piStack0000000000000010,*(int32 *)(iVar5 + uVar2 * 0x10),(void *)(uint)off);
    local_28.Bytes = n_00.Bytes;
    internal_abi_Name_Name(n_00,in_stack_ffffffffffffff48);
    internal_abi_Name_Name(local_18,in_stack_ffffffffffffff48);
    if (extraout_RBX_06 == extraout_RBX_05) {
      runtime_memequal();
      if (extraout_AL_01 == '\0') {
        bVar9 = false;
      }
      else {
        reflect_resolveTypeOff(piStack0000000000000010,off,~r0_00);
        local_38[0] = extraout_RAX_03;
        reflect_resolveTypeOff
                  (piStack0000000000000008,*(int32 *)((int)local_10 + (int)pvVar4 * 8 + 4),pvVar4);
        bVar9 = extraout_RAX_04 == local_38[0];
      }
    }
    else {
      bVar9 = false;
    }
    if (bVar9) {
      if ((*local_18.Bytes & 1) == 0) {
        reflect_pkgPath(local_18,in_stack_ffffffffffffff48);
        iVar6 = extraout_RBX_07;
        if (extraout_RBX_07 == 0) {
          internal_abi_Name_Name
                    ((uint8 *)piStack0000000000000008[1].Size_,in_stack_ffffffffffffff48);
          iVar6 = extraout_RBX_08;
        }
        reflect_pkgPath(local_28,in_stack_ffffffffffffff48);
        iVar7 = extraout_RBX_09;
        if (extraout_RBX_09 == 0) {
          reflect_resolveNameOff(piStack0000000000000010,v->PkgPath,v);
          internal_abi_Name_Name(n_01,in_stack_ffffffffffffff48);
          iVar7 = extraout_RBX_10;
        }
        if ((iVar6 != iVar7) || (runtime_memequal(), extraout_AL_02 == '\0')) goto LAB_004cc7a6;
      }
      pvVar4 = (void *)((int)pvVar4 + 1);
      iVar1._0_4_ = piStack0000000000000008[1].Hash;
      iVar1._4_1_ = piStack0000000000000008[1].TFlag;
      iVar1._5_1_ = piStack0000000000000008[1].Align_;
      iVar1._6_1_ = piStack0000000000000008[1].FieldAlign_;
      iVar1._7_1_ = piStack0000000000000008[1].Kind_;
      if (iVar1 <= (int)pvVar4) {
        return;
      }
    }
LAB_004cc7a6:
    uVar2 = uVar2 + 1;
  } while( true );
}



// Local variable ch:internal/abi.ChanType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt:internal/abi.ArrayType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_1:internal/abi.ChanType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_2:internal/abi.MapType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_3:internal/abi.PtrType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_4:internal/abi.SliceType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_5:internal/abi.ArrayType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_6:internal/abi.ChanType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_7:internal/abi.MapType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_8:internal/abi.PtrType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_9:internal/abi.SliceType *[RBX:8] conflicts with parameter, skipped.

void reflect_specialChannelAssignability(internal_abi_Type *T,internal_abi_Type *V,bool ~r0)

{
  byte bVar1;
  uintptr uVar2;
  internal_abi_Type *T_00;
  int extraout_RBX;
  int extraout_RBX_00;
  internal_abi_Type *V_00;
  undefined in_DIL;
  undefined extraout_DIL;
  undefined extraout_DIL_00;
  undefined extraout_DIL_01;
  int unaff_R14;
  bool bVar3;
  string in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_DIL = extraout_DIL_01;
  }
  if ((V->Kind_ & 0x1f) == 0x12) {
    uVar2 = V[1].PtrBytes;
  }
  else {
    uVar2 = 0;
  }
  if (uVar2 == 3) {
    reflect___rtype__Name((reflect_rtype *)T,in_stack_ffffffffffffffe0);
    if (extraout_RBX == 0) {
      bVar3 = true;
      in_DIL = extraout_DIL;
    }
    else {
      reflect___rtype__Name((reflect_rtype *)V,in_stack_ffffffffffffffe0);
      bVar3 = extraout_RBX_00 == 0;
      in_DIL = extraout_DIL_00;
    }
  }
  else {
    bVar3 = false;
  }
  if (!bVar3) {
    return;
  }
  bVar1 = T->Kind_ & 0x1f;
  if (bVar1 < 0x13) {
    if (bVar1 == 0x11) {
      T_00 = (internal_abi_Type *)T[1].Size_;
    }
    else if (bVar1 == 0x12) {
      T_00 = (internal_abi_Type *)T[1].Size_;
    }
    else {
LAB_004ccae4:
      T_00 = (internal_abi_Type *)0x0;
    }
  }
  else if (bVar1 == 0x15) {
    T_00 = (internal_abi_Type *)T[1].PtrBytes;
  }
  else if (bVar1 == 0x16) {
    T_00 = (internal_abi_Type *)T[1].Size_;
  }
  else {
    if (bVar1 != 0x17) goto LAB_004ccae4;
    T_00 = (internal_abi_Type *)T[1].Size_;
  }
  bVar1 = V->Kind_ & 0x1f;
  if (bVar1 < 0x13) {
    if (bVar1 == 0x11) {
      V_00 = (internal_abi_Type *)V[1].Size_;
      goto LAB_004ccb32;
    }
    if (bVar1 == 0x12) {
      V_00 = (internal_abi_Type *)V[1].Size_;
      goto LAB_004ccb32;
    }
  }
  else {
    if (bVar1 == 0x15) {
      V_00 = (internal_abi_Type *)V[1].PtrBytes;
      goto LAB_004ccb32;
    }
    if (bVar1 == 0x16) {
      V_00 = (internal_abi_Type *)V[1].Size_;
      goto LAB_004ccb32;
    }
    if (bVar1 == 0x17) {
      V_00 = (internal_abi_Type *)V[1].Size_;
      goto LAB_004ccb32;
    }
  }
  V_00 = (internal_abi_Type *)0x0;
LAB_004ccb32:
  reflect_haveIdenticalType(T_00,V_00,true,(bool)in_DIL);
  return;
}



void reflect_directlyAssignable(internal_abi_Type *T,internal_abi_Type *V,bool ~r0)

{
  char extraout_AL;
  uint uVar1;
  uint extraout_RCX;
  byte bVar2;
  undefined in_DIL;
  undefined extraout_DIL;
  undefined extraout_DIL_00;
  int unaff_R14;
  
  uVar1 = (uint)~r0;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    uVar1 = extraout_RCX;
    in_DIL = extraout_DIL_00;
  }
  if (T == V) {
    return;
  }
  if ((((T->TFlag & 4) == 0) || ((V->TFlag & 4) == 0)) &&
     (bVar2 = T->Kind_ & 0x1f, (V->Kind_ & 0x1f) == bVar2)) {
    if ((bVar2 == 0x12) &&
       (reflect_specialChannelAssignability(T,V,SUB81(uVar1,0)), in_DIL = extraout_DIL,
       extraout_AL != '\0')) {
      return;
    }
    reflect_haveIdenticalUnderlyingType(T,V,true,(bool)in_DIL);
    return;
  }
  return;
}



void reflect_haveIdenticalType(internal_abi_Type *T,internal_abi_Type *V,bool cmpTags,bool ~r0)

{
  byte extraout_AL;
  byte extraout_AL_00;
  byte bVar1;
  int extraout_RBX;
  int extraout_RBX_00;
  int extraout_RBX_01;
  int extraout_RBX_02;
  undefined extraout_DIL;
  undefined extraout_DIL_00;
  undefined ~r0_00;
  int unaff_R14;
  internal_abi_Type *piStack0000000000000008;
  internal_abi_Type *piStack0000000000000010;
  string in_stack_ffffffffffffffc0;
  
  piStack0000000000000008 = T;
  piStack0000000000000010 = V;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
