  int unaff_R14;
  runtime_Frame *prStack0000000000000008;
  runtime_Frame *prStack0000000000000010;
  
  prStack0000000000000008 = p;
  prStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((((prStack0000000000000010->PC == prStack0000000000000008->PC) &&
       (prStack0000000000000010->Func == prStack0000000000000008->Func)) &&
      ((prStack0000000000000010->Function).len == (prStack0000000000000008->Function).len)) &&
     ((((prStack0000000000000010->File).len == (prStack0000000000000008->File).len &&
       (runtime_memequal(), extraout_AL != '\0')) && (runtime_memequal(), extraout_AL_00 != '\0'))))
  {
    runtime_memequal();
  }
  return;
}



void type__eq__2_runtime_Frame(runtime_Frame (*p) [2],runtime_Frame (*q) [2],bool r)

{
  char extraout_AL;
  char cVar1;
  char extraout_AL_00;
  char extraout_AL_01;
  char extraout_AL_02;
  char extraout_AL_03;
  int unaff_R14;
  runtime_Frame (*parStack0000000000000008) [2];
  runtime_Frame (*parStack0000000000000010) [2];
  
  parStack0000000000000008 = p;
  parStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (((((*parStack0000000000000010)[0].PC == (*parStack0000000000000008)[0].PC) &&
       ((*parStack0000000000000010)[0].Func == (*parStack0000000000000008)[0].Func)) &&
      ((*parStack0000000000000010)[0].Function.len == (*parStack0000000000000008)[0].Function.len))
     && ((((*parStack0000000000000008)[0].File.len == (*parStack0000000000000010)[0].File.len &&
          ((*parStack0000000000000010)[1].PC == (*parStack0000000000000008)[1].PC)) &&
         (((*parStack0000000000000010)[1].Func == (*parStack0000000000000008)[1].Func &&
          (((*parStack0000000000000008)[1].Function.len ==
            (*parStack0000000000000010)[1].Function.len &&
           ((*parStack0000000000000010)[1].File.len == (*parStack0000000000000008)[1].File.len))))))
        )) {
    runtime_memequal();
    if (extraout_AL == '\0') {
      cVar1 = '\0';
    }
    else {
      runtime_memequal();
      if (extraout_AL_00 == '\0') {
        cVar1 = '\0';
      }
      else {
        runtime_memequal();
        cVar1 = extraout_AL_01;
      }
    }
    if (((cVar1 != '\0') && (runtime_memequal(), extraout_AL_02 != '\0')) &&
       (runtime_memequal(), extraout_AL_03 != '\0')) {
      runtime_memequal();
    }
  }
  return;
}



void type__eq_runtime_PanicNilError(runtime_PanicNilError *p,runtime_PanicNilError *q,bool r)

{
  return;
}



void type__eq_runtime_TypeAssertionError
               (runtime_TypeAssertionError *p,runtime_TypeAssertionError *q,bool r)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((((q->_interface == p->_interface) && (q->concrete == p->concrete)) &&
      (q->asserted == p->asserted)) && ((q->missingMethod).len == (p->missingMethod).len)) {
    runtime_memequal();
  }
  return;
}



void type__eq_runtime__panic(runtime__panic *p,runtime__panic *q,bool r)

{
  internal_abi_Type *t;
  undefined in_DIL;
  undefined extraout_DIL;
  int unaff_R14;
  runtime__panic *prStack0000000000000008;
  runtime__panic *prStack0000000000000010;
  
  prStack0000000000000008 = p;
  prStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_DIL = extraout_DIL;
  }
  if ((prStack0000000000000010->argp == prStack0000000000000008->argp) &&
     (t = (prStack0000000000000008->arg)._type, (prStack0000000000000010->arg)._type == t)) {
    runtime_efaceeq(t,(prStack0000000000000008->arg).data,(prStack0000000000000010->arg).data,
                    (bool)in_DIL);
  }
  return;
}



void type__eq_runtime_mSpanList(runtime_mSpanList *p,runtime_mSpanList *q,bool r)

{
  if (q->first == p->first) {
    return;
  }
  return;
}



void type__eq_runtime_gcBits(runtime_gcBits *p,runtime_gcBits *q,bool r)

{
  return;
}



void type__eq_runtime_special(runtime_special *p,runtime_special *q,bool r)

{
  if ((q->next == p->next) && (q->offset == p->offset)) {
    return;
  }
  return;
}



void type__eq_runtime_mspan(runtime_mspan *p,runtime_mspan *q,bool r)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_memequal();
  return;
}



void type__eq_runtime_boundsError(runtime_boundsError *p,runtime_boundsError *q,bool r)

{
  if (((q->x == p->x) && (q->y == p->y)) && (q->signed == p->signed)) {
    return;
  }
  return;
}



void type__eq_runtime_sysmontick(runtime_sysmontick *p,runtime_sysmontick *q,bool r)

{
  if (((q->schedtick == p->schedtick) && (q->schedwhen == p->schedwhen)) &&
     (q->syscalltick == p->syscalltick)) {
    return;
  }
  return;
}



void type__eq_runtime_mcache(runtime_mcache *p,runtime_mcache *q,bool r)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_memequal();
  return;
}



// DWARF original name: type:.eq.struct { runtime.gList; runtime.n int32 }

void type__eq_struct___runtime_gList__runtime_n_int32__
               (struct___runtime_gList__runtime_n_int32__ *p,
               struct___runtime_gList__runtime_n_int32__ *q,bool r)

{
  if ((q->gList).head == (p->gList).head) {
    return;
  }
  return;
}



void type__eq_runtime_hchan(runtime_hchan *p,runtime_hchan *q,bool r)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((((q->qcount == p->qcount) && (q->dataqsiz == p->dataqsiz)) && (q->buf == p->buf)) &&
     (q->elemsize == p->elemsize)) {
    runtime_memequal();
  }
  return;
}



void type__eq_runtime_sudog(runtime_sudog *p,runtime_sudog *q,bool r)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((((q->parent == p->parent) && (q->waitlink == p->waitlink)) && (q->waittail == p->waittail))
     && (q->c == p->c)) {
    runtime_memequal();
  }
  return;
}



void type__eq_runtime_pTraceState(runtime_pTraceState *p,runtime_pTraceState *q,bool r)

{
  if (((q->buf == p->buf) && (q->inSweep == p->inSweep)) && (q->swept == p->swept)) {
    return;
  }
  return;
}



void type__eq_runtime_notInHeap(runtime_notInHeap *p,runtime_notInHeap *q,bool r)

{
  return;
}



void type__eq_runtime_limiterEvent(runtime_limiterEvent *p,runtime_limiterEvent *q,bool r)

{
  return;
}



void type__eq_runtime_workbuf(runtime_workbuf *p,runtime_workbuf *q,bool r)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_memequal();
  return;
}



void type__eq_runtime_gcWork(runtime_gcWork *p,runtime_gcWork *q,bool r)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_memequal();
  return;
}



void type__eq_runtime_mOS(runtime_mOS *p,runtime_mOS *q,bool r)

{
  if ((q->profileTimer == p->profileTimer) &&
     ((q->profileTimerValid).u.value == (p->profileTimerValid).u.value)) {
    return;
  }
  return;
}



void type__eq_runtime_gTraceState(runtime_gTraceState *p,runtime_gTraceState *q,bool r)

{
  if (((q->sysExitTime == p->sysExitTime) && (q->tracedSyscallEnter == p->tracedSyscallEnter)) &&
     (q->seq == p->seq)) {
    return;
  }
  return;
}



void type__eq_runtime_errorAddressString
               (runtime_errorAddressString *p,runtime_errorAddressString *q,bool r)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (((q->msg).len == (p->msg).len) && (q->addr == p->addr)) {
    runtime_memequal();
  }
  return;
}



void type__eq_runtime_funcinl(runtime_funcinl *p,runtime_funcinl *q,bool r)

{
  char extraout_AL;
  int unaff_R14;
  runtime_funcinl *prStack0000000000000008;
  runtime_funcinl *prStack0000000000000010;
  
  prStack0000000000000008 = p;
  prStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((((prStack0000000000000010->ones == prStack0000000000000008->ones) &&
       (prStack0000000000000010->entry == prStack0000000000000008->entry)) &&
      ((prStack0000000000000010->name).len == (prStack0000000000000008->name).len)) &&
     ((((prStack0000000000000010->file).len == (prStack0000000000000008->file).len &&
       (prStack0000000000000010->line == prStack0000000000000008->line)) &&
      ((prStack0000000000000010->startLine == prStack0000000000000008->startLine &&
       (runtime_memequal(), extraout_AL != '\0')))))) {
    runtime_memequal();
  }
  return;
}



void type__eq_runtime_piController(runtime_piController *p,runtime_piController *q,bool r)

{
  if ((((((double)q->kp == (double)p->kp) && (!NAN((double)q->kp) && !NAN((double)p->kp))) &&
       ((double)q->ti == (double)p->ti)) &&
      (((!NAN((double)q->ti) && !NAN((double)p->ti) && ((double)q->tt == (double)p->tt)) &&
       ((!NAN((double)q->tt) && !NAN((double)p->tt) &&
        (((double)p->min == (double)q->min && (!NAN((double)p->min) && !NAN((double)q->min)))))))))
     && (((double)p->max == (double)q->max &&
         ((((!NAN((double)p->max) && !NAN((double)q->max) &&
            ((double)p->errIntegral == (double)q->errIntegral)) &&
           (!NAN((double)p->errIntegral) && !NAN((double)q->errIntegral))) &&
          (q->errOverflow == p->errOverflow)))))) {
    return;
  }
  return;
}



void type__eq__2_string(string (*p) [2],string (*q) [2],bool r)

{
  char extraout_AL;
  int iVar1;
  int unaff_R14;
  string (*pasStack0000000000000008) [2];
  string (*pasStack0000000000000010) [2];
  
  pasStack0000000000000008 = p;
  pasStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (((*pasStack0000000000000008)[0].len == (*pasStack0000000000000010)[0].len) &&
     ((*pasStack0000000000000010)[1].len == (*pasStack0000000000000008)[1].len)) {
    iVar1 = 0;
    while ((iVar1 < 2 && (runtime_memequal(), extraout_AL != '\0'))) {
      iVar1 = iVar1 + 1;
    }
  }
  return;
}



void sync_atomic___Bool__Load(sync_atomic_Bool *x,bool ~r0)

{
  return;
}



// WARNING: Unknown calling convention

void sync_atomic___Bool__Store(sync_atomic_Bool *x,bool val)

{
  LOCK();
  x->v = (dword)val;
  UNLOCK();
  return;
}



void sync_atomic___Bool__Swap(sync_atomic_Bool *x,bool new,bool old)

{
  LOCK();
  x->v = (dword)new;
  UNLOCK();
  return;
}



void sync_atomic___Bool__CompareAndSwap(sync_atomic_Bool *x,bool old,bool new,bool swapped)

{
  LOCK();
  if ((dword)old == x->v) {
    x->v = (dword)new;
  }
  UNLOCK();
  return;
}



void sync_atomic___Int32__Load(sync_atomic_Int32 *x,int32 ~r0)

{
  return;
}



// WARNING: Unknown calling convention

void sync_atomic___Int32__Store(sync_atomic_Int32 *x,int32 val)

{
  LOCK();
  x->v = val;
  UNLOCK();
  return;
}



void sync_atomic___Int32__Swap(sync_atomic_Int32 *x,int32 new,int32 old)

{
  LOCK();
  x->v = new;
  UNLOCK();
  return;
}



void sync_atomic___Int32__CompareAndSwap(sync_atomic_Int32 *x,int32 old,int32 new,bool swapped)

{
  LOCK();
  if (old == x->v) {
    x->v = new;
  }
  UNLOCK();
  return;
}



void sync_atomic___Int32__Add(sync_atomic_Int32 *x,int32 delta,int32 new)

{
  LOCK();
  x->v = x->v + delta;
  UNLOCK();
  return;
}



void sync_atomic___Int64__Load(sync_atomic_Int64 *x,int64 ~r0)

{
  return;
}



// WARNING: Unknown calling convention

void sync_atomic___Int64__Store(sync_atomic_Int64 *x,int64 val)

{
  LOCK();
  x->v = val;
  UNLOCK();
  return;
}



void sync_atomic___Int64__Swap(sync_atomic_Int64 *x,int64 new,int64 old)

{
  LOCK();
  x->v = new;
  UNLOCK();
  return;
}



void sync_atomic___Int64__CompareAndSwap(sync_atomic_Int64 *x,int64 old,int64 new,bool swapped)

{
  LOCK();
  if (old == x->v) {
    x->v = new;
  }
  UNLOCK();
  return;
}



void sync_atomic___Int64__Add(sync_atomic_Int64 *x,int64 delta,int64 new)

{
  LOCK();
  x->v = x->v + delta;
  UNLOCK();
  return;
}



void sync_atomic___Uint32__Load(sync_atomic_Uint32 *x,uint32 ~r0)

{
  return;
}



// WARNING: Unknown calling convention

void sync_atomic___Uint32__Store(sync_atomic_Uint32 *x,uint32 val)

{
  LOCK();
  x->v = val;
  UNLOCK();
  return;
}



void sync_atomic___Uint32__Swap(sync_atomic_Uint32 *x,uint32 new,uint32 old)

{
  LOCK();
  x->v = new;
  UNLOCK();
  return;
}



void sync_atomic___Uint32__CompareAndSwap(sync_atomic_Uint32 *x,uint32 old,uint32 new,bool swapped)

{
  LOCK();
  if (old == x->v) {
    x->v = new;
  }
  UNLOCK();
  return;
}



void sync_atomic___Uint32__Add(sync_atomic_Uint32 *x,uint32 delta,uint32 new)

{
  LOCK();
  x->v = x->v + delta;
  UNLOCK();
  return;
}



void sync_atomic___Uint64__Load(sync_atomic_Uint64 *x,uint64 ~r0)

{
  return;
}



// WARNING: Unknown calling convention

void sync_atomic___Uint64__Store(sync_atomic_Uint64 *x,uint64 val)

{
  LOCK();
  x->v = val;
  UNLOCK();
  return;
}



void sync_atomic___Uint64__Swap(sync_atomic_Uint64 *x,uint64 new,uint64 old)

{
  LOCK();
  x->v = new;
  UNLOCK();
  return;
}



void sync_atomic___Uint64__CompareAndSwap(sync_atomic_Uint64 *x,uint64 old,uint64 new,bool swapped)

{
  LOCK();
  if (old == x->v) {
    x->v = new;
  }
  UNLOCK();
  return;
}



void sync_atomic___Uint64__Add(sync_atomic_Uint64 *x,uint64 delta,uint64 new)

{
  LOCK();
  x->v = x->v + delta;
  UNLOCK();
  return;
}



// WARNING: Unknown calling convention

void sync_atomic___noCopy__Lock(void)

{
  return;
}



// WARNING: Unknown calling convention

void sync_atomic___noCopy__Unlock(void)

{
  return;
}



// Local variable vp:sync/atomic.efaceWords *[RAX:8] conflicts with parameter, skipped.

void sync_atomic___Value__Load(sync_atomic_Value *v,interface___ val)

{
  internal_abi_Type *piVar1;
  void *typ;
  void *data;
  interface___ val_local;
  
  piVar1 = (v->v)._type;
  if ((piVar1 != (internal_abi_Type *)0x0) &&
     (piVar1 != (internal_abi_Type *)&sync_atomic_firstStoreInProgress)) {
    return;
  }
  return;
}



// Local variable vp:sync/atomic.efaceWords *[RAX:8] conflicts with parameter, skipped.

void sync_atomic___Value__Store(sync_atomic_Value *v,interface___ val)

{
  internal_abi_Type *piVar1;
  char extraout_AL;
  void *in_RCX;
  void *typ;
  internal_abi_Type *in_RBX;
  bool ~r0;
  int unaff_R14;
  void *pvStack0000000000000018;
  interface___ in_stack_ffffffffffffffe0;
  
  pvStack0000000000000018 = in_RCX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RBX == (internal_abi_Type *)0x0) {
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffffe0);
  }
  do {
    while (piVar1 = (v->v)._type, piVar1 == (internal_abi_Type *)0x0) {
      sync_atomic_runtime_procPin((int)v);
      sync_atomic_CompareAndSwapPointer
                ((void **)v,(void *)0x0,&sync_atomic_firstStoreInProgress,~r0);
      if (extraout_AL != '\0') {
        sync_atomic_StorePointer(&(v->v).data,pvStack0000000000000018);
        sync_atomic_StorePointer((void **)v,in_RBX);
        sync_atomic_runtime_procUnpin();
        return;
      }
      sync_atomic_runtime_procUnpin();
    }
  } while (piVar1 == (internal_abi_Type *)&sync_atomic_firstStoreInProgress);
  if (in_RBX != piVar1) {
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffffe0);
  }
  sync_atomic_StorePointer(&(v->v).data,pvStack0000000000000018);
  return;
}



// Local variable vp:sync/atomic.efaceWords *[RAX:8] conflicts with parameter, skipped.

void sync_atomic___Value__Swap(sync_atomic_Value *v,interface___ new,interface___ old)

{
  internal_abi_Type *~r0;
  char extraout_AL;
  void *in_RCX;
  void *typ;
  internal_abi_Type *in_RBX;
  bool ~r0_00;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffd0;
  interface___ old_local;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RBX == (internal_abi_Type *)0x0) {
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffffd0);
  }
  do {
    while (~r0 = (v->v)._type, ~r0 == (internal_abi_Type *)0x0) {
      sync_atomic_runtime_procPin((int)v);
      sync_atomic_CompareAndSwapPointer
                ((void **)v,(void *)0x0,&sync_atomic_firstStoreInProgress,~r0_00);
      if (extraout_AL != '\0') {
        sync_atomic_StorePointer(&(v->v).data,in_RCX);
        sync_atomic_StorePointer((void **)v,in_RBX);
        sync_atomic_runtime_procUnpin();
        return;
      }
      sync_atomic_runtime_procUnpin();
    }
  } while (~r0 == (internal_abi_Type *)&sync_atomic_firstStoreInProgress);
  if (in_RBX != ~r0) {
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffffd0);
  }
  sync_atomic_SwapPointer(&(v->v).data,in_RCX,~r0);
  return;
}



// Local variable vp:sync/atomic.efaceWords *[RAX:8] conflicts with parameter, skipped.

void sync_atomic___Value__CompareAndSwap
               (sync_atomic_Value *v,interface___ old,interface___ new,bool swapped)

{
  internal_abi_Type *t;
  void *x;
  char extraout_AL;
  char extraout_AL_00;
  void *in_RCX;
  void *typ;
  undefined7 in_register_00000019;
  internal_abi_Type *piVar1;
  void *data;
  void *in_RSI;
  bool ~r0;
  bool ~r0_00;
  internal_abi_Type *in_RDI;
  internal_abi_Type *piVar2;
  internal_abi_Type *extraout_RDI;
  int unaff_R14;
  void *pvStack0000000000000028;
  interface___ in_stack_ffffffffffffffc8;
  interface___ i;
  
  piVar1 = (internal_abi_Type *)CONCAT71(in_register_00000019,swapped);
  pvStack0000000000000028 = in_RSI;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RDI == (internal_abi_Type *)0x0) {
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffffc8);
  }
  piVar2 = in_RDI;
  if ((piVar1 != (internal_abi_Type *)0x0) && (in_RDI != piVar1)) {
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffffc8);
  }
  while( true ) {
    while (t = (v->v)._type, t != (internal_abi_Type *)0x0) {
      if (t != (internal_abi_Type *)&sync_atomic_firstStoreInProgress) {
        if (in_RDI != t) {
                    // WARNING: Subroutine does not return
          runtime_gopanic(in_stack_ffffffffffffffc8);
        }
        x = (v->v).data;
        if ((piVar1 == t) && (runtime_efaceeq(t,x,in_RCX,SUB81(piVar2,0)), extraout_AL_00 != '\0'))
        {
          sync_atomic_CompareAndSwapPointer(&(v->v).data,x,pvStack0000000000000028,~r0_00);
          return;
        }
        return;
      }
    }
    if (piVar1 != (internal_abi_Type *)0x0) {
      return;
    }
    sync_atomic_runtime_procPin((int)v);
    sync_atomic_CompareAndSwapPointer((void **)v,(void *)0x0,&sync_atomic_firstStoreInProgress,~r0);
    if (extraout_AL != '\0') break;
    sync_atomic_runtime_procUnpin();
    piVar2 = extraout_RDI;
  }
  sync_atomic_StorePointer(&(v->v).data,pvStack0000000000000028);
  sync_atomic_StorePointer((void **)v,in_RDI);
  sync_atomic_runtime_procUnpin();
  return;
}



void sync_atomic_SwapUintptr(uintptr *addr,uintptr new,uintptr old)

{
  LOCK();
  *addr = new;
  UNLOCK();
  return;
}



void sync_atomic_CompareAndSwapUintptr(uintptr *addr,uintptr old,uintptr new,bool swapped)

{
  LOCK();
  if (old == *addr) {
    *addr = new;
  }
  UNLOCK();
  return;
}



// WARNING: Unknown calling convention

void sync_atomic_StoreUint32(uint32 *addr,uint32 val)

{
  LOCK();
  *addr = val;
  UNLOCK();
  return;
}



// WARNING: Unknown calling convention

void sync_atomic_StoreUintptr(uintptr *addr,uintptr val)

{
  LOCK();
  *addr = val;
  UNLOCK();
  return;
}



void type__eq_sync_atomic_Bool(sync_atomic_Bool *p,sync_atomic_Bool *q,bool r)

{
  return;
}



void type__eq_sync_atomic_Int32(sync_atomic_Int32 *p,sync_atomic_Int32 *q,bool r)

{
  return;
}



void type__eq_sync_atomic_Int64(sync_atomic_Int64 *p,sync_atomic_Int64 *q,bool r)

{
  return;
}



void type__eq_sync_atomic_Uint32(sync_atomic_Uint32 *p,sync_atomic_Uint32 *q,bool r)

{
  return;
}



void type__eq_sync_atomic_Uint64(sync_atomic_Uint64 *p,sync_atomic_Uint64 *q,bool r)

{
  return;
}



void type__eq_internal_godebugs_Info(internal_godebugs_Info *p,internal_godebugs_Info *q,bool r)

{
  char extraout_AL;
  char extraout_AL_00;
  int unaff_R14;
  internal_godebugs_Info *piStack0000000000000008;
  internal_godebugs_Info *piStack0000000000000010;
  
  piStack0000000000000008 = p;
