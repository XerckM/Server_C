};

typedef struct struct_{_runtime.lock_runtime.mutex;_runtime.stack_runtime.gList;_runtime.noStack_runtime.gList;_runtime.n_int32_} struct_{_runtime.lock_runtime.mutex;_runtime.stack_runtime.gList;_runtime.noStack_runtime.gList;_runtime.n_int32_}, *Pstruct_{_runtime.lock_runtime.mutex;_runtime.stack_runtime.gList;_runtime.noStack_runtime.gList;_runtime.n_int32_};

struct struct_{_runtime.lock_runtime.mutex;_runtime.stack_runtime.gList;_runtime.noStack_runtime.gList;_runtime.n_int32_} { // Original name: struct { runtime.lock runtime.mutex; runtime.stack runtime.gList; runtime.noStack runtime.gList; runtime.n int32 }
    struct runtime.mutex lock;
    struct runtime.gList stack;
    struct runtime.gList noStack;
    int32 n;
};

typedef struct net/http.unsupportedTEError net/http.unsupportedTEError, *Pnet/http.unsupportedTEError;

struct net/http.unsupportedTEError {
    struct string err;
};

typedef struct noalg.struct_{_F_uintptr;_X0_**regexp.onePassProg;_X1_*regexp.queueOnePass;_X2_*func(uint32,_[]bool)_bool;_X3_[][]int32;_X4_*regexp.queueOnePass_} noalg.struct_{_F_uintptr;_X0_**regexp.onePassProg;_X1_*regexp.queueOnePass;_X2_*func(uint32,_[]bool)_bool;_X3_[][]int32;_X4_*regexp.queueOnePass_}, *Pnoalg.struct_{_F_uintptr;_X0_**regexp.onePassProg;_X1_*regexp.queueOnePass;_X2_*func(uint32,_[]bool)_bool;_X3_[][]int32;_X4_*regexp.queueOnePass_};

typedef struct []bool []bool, *P[]bool;

struct noalg.struct_{_F_uintptr;_X0_**regexp.onePassProg;_X1_*regexp.queueOnePass;_X2_*func(uint32,_[]bool)_bool;_X3_[][]int32;_X4_*regexp.queueOnePass_} { // Original name: noalg.struct { F uintptr; X0 **regexp.onePassProg; X1 *regexp.queueOnePass; X2 *func(uint32, []bool) bool; X3 [][]int32; X4 *regexp.queueOnePass }
    uintptr F;
    struct regexp.onePassProg **X0;
    struct regexp.queueOnePass *X1;
    void (***X2)(uint32, struct []bool, bool *);
    struct [][]int32 X3;
    struct regexp.queueOnePass *X4;
};

struct []bool {
    bool *array;
    int len;
    int cap;
};

typedef struct text/template/parse.StringNode text/template/parse.StringNode, *Ptext/template/parse.StringNode;

struct text/template/parse.StringNode {
    text/template/parse.NodeType NodeType;
    text/template/parse.Pos Pos;
    struct text/template/parse.Tree *tr;
    struct string Quoted;
    struct string Text;
};

typedef struct google.golang.org/grpc/internal/resolver.RPCConfig google.golang.org/grpc/internal/resolver.RPCConfig, *Pgoogle.golang.org/grpc/internal/resolver.RPCConfig;

typedef struct runtime.iface google.golang.org/grpc/internal/resolver.ClientInterceptor;

struct google.golang.org/grpc/internal/resolver.RPCConfig {
    context.Context Context;
    struct google.golang.org/grpc/internal/serviceconfig.MethodConfig MethodConfig;
    void (**OnCommitted)(void);
    google.golang.org/grpc/internal/resolver.ClientInterceptor Interceptor;
};

typedef struct vendor/golang.org/x/net/dns/dnsmessage.NSResource vendor/golang.org/x/net/dns/dnsmessage.NSResource, *Pvendor/golang.org/x/net/dns/dnsmessage.NSResource;

struct vendor/golang.org/x/net/dns/dnsmessage.NSResource {
    struct vendor/golang.org/x/net/dns/dnsmessage.Name NS;
};

typedef struct net.UDPAddr net.UDPAddr, *Pnet.UDPAddr;

struct net.UDPAddr {
    struct net.IP IP;
    int Port;
    struct string Zone;
};

typedef struct noalg.map.iter[google.golang.org/protobuf/reflect/protoreflect.Name]int noalg.map.iter[google.golang.org/protobuf/reflect/protoreflect.Name]int, *Pnoalg.map.iter[google.golang.org/protobuf/reflect/protoreflect.Name]int;

struct noalg.map.iter[google.golang.org/protobuf/reflect/protoreflect.Name]int {
    struct google.golang.org/protobuf/reflect/protoreflect.Name *key;
    int *elem;
    void *t;
    struct noalg.map.hdr[google.golang.org/protobuf/reflect/protoreflect.Name]int *h;
    struct noalg.map.bucket[google.golang.org/protobuf/reflect/protoreflect.Name]int *buckets;
    struct noalg.map.bucket[google.golang.org/protobuf/reflect/protoreflect.Name]int *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct struct_{_sync.Mutex;_math/big.table_[64]math/big.divisor_} struct_{_sync.Mutex;_math/big.table_[64]math/big.divisor_}, *Pstruct_{_sync.Mutex;_math/big.table_[64]math/big.divisor_};

struct struct_{_sync.Mutex;_math/big.table_[64]math/big.divisor_} { // Original name: struct { sync.Mutex; math/big.table [64]math/big.divisor }
    struct sync.Mutex Mutex;
    struct math/big.divisor table[64];
};

typedef struct noalg.struct_{_F_uintptr;_X0_*net._Ctype_struct_addrinfo_} noalg.struct_{_F_uintptr;_X0_*net._Ctype_struct_addrinfo_}, *Pnoalg.struct_{_F_uintptr;_X0_*net._Ctype_struct_addrinfo_};

struct noalg.struct_{_F_uintptr;_X0_*net._Ctype_struct_addrinfo_} { // Original name: noalg.struct { F uintptr; X0 *net._Ctype_struct_addrinfo }
    uintptr F;
    struct net._Ctype_struct_addrinfo *X0;
};

typedef struct []*crypto/internal/edwards25519.Point []*crypto/internal/edwards25519.Point, *P[]*crypto/internal/edwards25519.Point;

struct []*crypto/internal/edwards25519.Point {
    struct crypto/internal/edwards25519.Point **array;
    int len;
    int cap;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*bool;_X1_*runtime.p;_X2_*runtime.g_} noalg.struct_{_F_uintptr;_X0_*bool;_X1_*runtime.p;_X2_*runtime.g_}, *Pnoalg.struct_{_F_uintptr;_X0_*bool;_X1_*runtime.p;_X2_*runtime.g_};

struct noalg.struct_{_F_uintptr;_X0_*bool;_X1_*runtime.p;_X2_*runtime.g_} { // Original name: noalg.struct { F uintptr; X0 *bool; X1 *runtime.p; X2 *runtime.g }
    uintptr F;
    bool *X0;
    struct runtime.p *X1;
    struct runtime.g *X2;
};

typedef hash/crc32.Table hash/crc32.slicing8Table[8];

typedef struct runtime.iface google.golang.org/grpc/internal/channelz.tracedChannel;

typedef struct internal/nettrace.TraceKey internal/nettrace.TraceKey, *Pinternal/nettrace.TraceKey;

struct internal/nettrace.TraceKey {
};

typedef struct runtime.mProfCycleHolder runtime.mProfCycleHolder, *Pruntime.mProfCycleHolder;

struct runtime.mProfCycleHolder {
    struct runtime/internal/atomic.Uint32 value;
};

typedef struct hash<vendor/golang.org/x/net/http2/hpack.pairNameValue,uint64> *map[vendor/golang.org/x/net/http2/hpack.pairNameValue]uint64;

typedef struct noalg.map.hdr[reflect.Type]bool noalg.map.hdr[reflect.Type]bool, *Pnoalg.map.hdr[reflect.Type]bool;

struct noalg.map.hdr[reflect.Type]bool {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[reflect.Type]bool *buckets;
    struct noalg.map.bucket[reflect.Type]bool *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.ClientConn_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.ClientConn_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.ClientConn_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.ClientConn_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc.ClientConn }
    uintptr F;
    struct google.golang.org/grpc.ClientConn *X0;
};

typedef struct google.golang.org/grpc.serverKey google.golang.org/grpc.serverKey, *Pgoogle.golang.org/grpc.serverKey;

struct google.golang.org/grpc.serverKey {
};

typedef struct []sync.poolLocal []sync.poolLocal, *P[]sync.poolLocal;

struct []sync.poolLocal {
    struct sync.poolLocal *array;
    int len;
    int cap;
};

typedef struct google.golang.org/grpc/grpclog.loggerT google.golang.org/grpc/grpclog.loggerT, *Pgoogle.golang.org/grpc/grpclog.loggerT;

struct google.golang.org/grpc/grpclog.loggerT {
    struct []*log.Logger m;
    int v;
    bool jsonFormat;
};

typedef struct hash<*reflect.structType,bool> *map[*reflect.structType]bool;

typedef struct runtime.iface interface_{_XXX_MessageName()_string_};

typedef struct runtime/internal/atomic.Pointer[string] runtime/internal/atomic.Pointer[string], *Pruntime/internal/atomic.Pointer[string];

struct runtime/internal/atomic.Pointer[string] {
    struct runtime/internal/atomic.UnsafePointer u;
};

typedef struct hchan<net.result[[]string].1> hchan<net.result[[]string].1>, *Phchan<net.result[[]string].1>;

struct hchan<net.result[[]string].1> { // Original name: hchan<net.result[[]string]Â·1>
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<net.result[[]string].1> recvq;
    struct waitq<net.result[[]string].1> sendq;
    struct runtime.mutex lock;
};

typedef struct runtime.cgothreadstart runtime.cgothreadstart, *Pruntime.cgothreadstart;

struct runtime.cgothreadstart {
    runtime.guintptr g;
    uint64 *tls;
    void *fn;
};

typedef struct runtime.plainError runtime.plainError, *Pruntime.plainError;

struct runtime.plainError {
    uint8 *str;
    int len;
};

typedef struct runtime.sigevent runtime.sigevent, *Pruntime.sigevent;

struct runtime.sigevent {
    struct runtime.sigeventFields sigeventFields;
    uint8 _[40];
};

typedef struct hash<string,map[string]string> *map[string]map[string]string;

typedef struct noalg.struct_{_F_uintptr;_X0_*error;_X1_net.Conn_} noalg.struct_{_F_uintptr;_X0_*error;_X1_net.Conn_}, *Pnoalg.struct_{_F_uintptr;_X0_*error;_X1_net.Conn_};

struct noalg.struct_{_F_uintptr;_X0_*error;_X1_net.Conn_} { // Original name: noalg.struct { F uintptr; X0 *error; X1 net.Conn }
    uintptr F;
    error *X0;
    net.Conn X1;
};

typedef struct runtime.stackmap runtime.stackmap, *Pruntime.stackmap;

struct runtime.stackmap {
    int32 n;
    int32 nbit;
    uint8 bytedata[1];
};

typedef struct vendor/golang.org/x/net/idna.labelError vendor/golang.org/x/net/idna.labelError, *Pvendor/golang.org/x/net/idna.labelError;

struct vendor/golang.org/x/net/idna.labelError {
    struct string label;
    struct string code_;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*error_} noalg.struct_{_F_uintptr;_X0_*error_}, *Pnoalg.struct_{_F_uintptr;_X0_*error_};

struct noalg.struct_{_F_uintptr;_X0_*error_} { // Original name: noalg.struct { F uintptr; X0 *error }
    uintptr F;
    error *X0;
};

typedef struct runtime.stackScanState runtime.stackScanState, *Pruntime.stackScanState;

struct runtime.stackScanState {
    struct runtime.pcvalueCache cache;
    struct runtime.stack stack;
    bool conservative;
    struct runtime.stackWorkBuf *buf;
    struct runtime.stackWorkBuf *freeBuf;
    struct runtime.stackWorkBuf *cbuf;
    struct runtime.stackObjectBuf *head;
    struct runtime.stackObjectBuf *tail;
    int nobjs;
    struct runtime.stackObject *root;
};

typedef struct auth/auth_grpc.LogoutResponse auth/auth_grpc.LogoutResponse, *Pauth/auth_grpc.LogoutResponse;

struct auth/auth_grpc.LogoutResponse {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    bool Success;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*struct_{}_} noalg.struct_{_F_uintptr;_X0_*struct_{}_}, *Pnoalg.struct_{_F_uintptr;_X0_*struct_{}_};

struct noalg.struct_{_F_uintptr;_X0_*struct_{}_} { // Original name: noalg.struct { F uintptr; X0 *struct {} }
    uintptr F;
    struct struct_{} *X0;
};

typedef struct noalg.struct_{_google.golang.org/grpc.c_unsafe.Pointer;_google.golang.org/grpc.elem_unsafe.Pointer_} noalg.[3]struct_{_google.golang.org/grpc.c_unsafe.Pointer;_google.golang.org/grpc.elem_unsafe.Pointer_}[3];

typedef struct runtime.cpuProfile runtime.cpuProfile, *Pruntime.cpuProfile;

struct runtime.cpuProfile {
    struct runtime.mutex lock;
    bool on;
    struct runtime.profBuf *log;
    uintptr extra[1000];
    int numExtra;
    uint64 lostExtra;
    uint64 lostAtomic;
};

typedef struct runtime.metricFloat64Histogram runtime.metricFloat64Histogram, *Pruntime.metricFloat64Histogram;

struct runtime.metricFloat64Histogram {
    struct []uint64 counts;
    struct []float64 buckets;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_runtime.stwReason_} noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_runtime.stwReason_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_runtime.stwReason_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_runtime.stwReason_} { // Original name: noalg.struct { F uintptr; X0 *runtime.g; X1 runtime.stwReason }
    uintptr F;
    struct runtime.g *X0;
    runtime.stwReason X1;
};

typedef struct google.golang.org/grpc/internal/backoff.Exponential google.golang.org/grpc/internal/backoff.Exponential, *Pgoogle.golang.org/grpc/internal/backoff.Exponential;

struct google.golang.org/grpc/internal/backoff.Exponential {
    struct google.golang.org/grpc/backoff.Config Config;
};

typedef struct runtime.spanSetBlock runtime.spanSetBlock, *Pruntime.spanSetBlock;

struct runtime.spanSetBlock {
    struct runtime.lfnode lfnode;
    struct runtime/internal/atomic.Uint32 popped;
    struct runtime.atomicMSpanPointer spans[512];
};

typedef struct net.rawListener net.rawListener, *Pnet.rawListener;

struct net.rawListener {
    struct net.rawConn rawConn;
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/order.FieldOrder;_X1_*[]google.golang.org/protobuf/internal/order.messageField_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/order.FieldOrder;_X1_*[]google.golang.org/protobuf/internal/order.messageField_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/order.FieldOrder;_X1_*[]google.golang.org/protobuf/internal/order.messageField_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/order.FieldOrder;_X1_*[]google.golang.org/protobuf/internal/order.messageField_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/internal/order.FieldOrder; X1 *[]google.golang.org/protobuf/internal/order.messageField }
    uintptr F;
    void (**X0)(google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor, google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor, bool *);
    struct []google.golang.org/protobuf/internal/order.messageField *X1;
};

typedef struct net/http.bodyLocked net/http.bodyLocked, *Pnet/http.bodyLocked;

struct net/http.bodyLocked {
    struct net/http.body *b;
};

typedef struct vendor/golang.org/x/net/dns/dnsmessage.TXTResource vendor/golang.org/x/net/dns/dnsmessage.TXTResource, *Pvendor/golang.org/x/net/dns/dnsmessage.TXTResource;

struct vendor/golang.org/x/net/dns/dnsmessage.TXTResource {
    struct []string TXT;
};

typedef struct noalg.struct_{_F_uintptr;_X0_[]uint8_} noalg.struct_{_F_uintptr;_X0_[]uint8_}, *Pnoalg.struct_{_F_uintptr;_X0_[]uint8_};

struct noalg.struct_{_F_uintptr;_X0_[]uint8_} { // Original name: noalg.struct { F uintptr; X0 []uint8 }
    uintptr F;
    struct []uint8 X0;
};

typedef struct hchan<error> *chan<-_error;

typedef struct auth/auth_grpc.RefreshTokenResponse auth/auth_grpc.RefreshTokenResponse, *Pauth/auth_grpc.RefreshTokenResponse;

struct auth/auth_grpc.RefreshTokenResponse {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    struct string Token;
};

typedef struct google.golang.org/grpc/internal/transport.ping google.golang.org/grpc/internal/transport.ping, *Pgoogle.golang.org/grpc/internal/transport.ping;

struct google.golang.org/grpc/internal/transport.ping {
    bool ack;
    uint8 data[8];
};

typedef struct crypto/ecdsa.nistCurve[*crypto/internal/nistec.P521Point] crypto/ecdsa.nistCurve[*crypto/internal/nistec.P521Point], *Pcrypto/ecdsa.nistCurve[*crypto/internal/nistec.P521Point];

struct crypto/ecdsa.nistCurve[*crypto/internal/nistec.P521Point] {
    void (**newPoint)(struct crypto/internal/nistec.P521Point **);
    crypto/elliptic.Curve curve;
    struct crypto/internal/bigmod.Modulus *N;
    struct []uint8 nMinus2;
};

typedef struct runtime.fixalloc runtime.fixalloc, *Pruntime.fixalloc;

struct runtime.fixalloc {
    uintptr size;
    void (**first)(void *, void *);
    void *arg;
    struct runtime.mlink *list;
    uintptr chunk;
    uint32 nchunk;
    uint32 nalloc;
    uintptr inuse;
    runtime.sysMemStat *stat;
    bool zero;
};

typedef struct noalg.struct_{_F_uintptr;_X0_uintptr;_X1_*runtime.g_} noalg.struct_{_F_uintptr;_X0_uintptr;_X1_*runtime.g_}, *Pnoalg.struct_{_F_uintptr;_X0_uintptr;_X1_*runtime.g_};

struct noalg.struct_{_F_uintptr;_X0_uintptr;_X1_*runtime.g_} { // Original name: noalg.struct { F uintptr; X0 uintptr; X1 *runtime.g }
    uintptr F;
    uintptr X0;
    struct runtime.g *X1;
};

typedef struct noalg.map.hdr[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool noalg.map.hdr[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool, *Pnoalg.map.hdr[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool;

struct noalg.map.hdr[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool *buckets;
    struct noalg.map.bucket[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct google.golang.org/grpc.defaultConfigSelector google.golang.org/grpc.defaultConfigSelector, *Pgoogle.golang.org/grpc.defaultConfigSelector;

struct google.golang.org/grpc.defaultConfigSelector {
    struct google.golang.org/grpc.ServiceConfig *sc;
};

typedef struct runtime.stringStructDWARF runtime.stringStructDWARF, *Pruntime.stringStructDWARF;

struct runtime.stringStructDWARF {
    uint8 *str;
    int len;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*internal/poll.splicePipe_} noalg.struct_{_F_uintptr;_X0_*internal/poll.splicePipe_}, *Pnoalg.struct_{_F_uintptr;_X0_*internal/poll.splicePipe_};

struct noalg.struct_{_F_uintptr;_X0_*internal/poll.splicePipe_} { // Original name: noalg.struct { F uintptr; X0 *internal/poll.splicePipe }
    uintptr F;
    struct internal/poll.splicePipe *X0;
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal/transport.ServerTransport;_X1_*google.golang.org/grpc.Server;_X2_context.Context_} noalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal/transport.ServerTransport;_X1_*google.golang.org/grpc.Server;_X2_context.Context_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal/transport.ServerTransport;_X1_*google.golang.org/grpc.Server;_X2_context.Context_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal/transport.ServerTransport;_X1_*google.golang.org/grpc.Server;_X2_context.Context_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/grpc/internal/transport.ServerTransport; X1 *google.golang.org/grpc.Server; X2 context.Context }
    uintptr F;
    google.golang.org/grpc/internal/transport.ServerTransport X0;
    struct google.golang.org/grpc.Server *X1;
    context.Context X2;
};

typedef struct noalg.struct_{_net.started_bool;_net.heap_bool;_net.openDefer_bool;_net.sp_uintptr;_net.pc_uintptr;_net.fn_uintptr;_net._panic_uintptr;_net.link_uintptr;_net.fd_uintptr;_net.varp_uintptr;_net.framepc_uintptr_} noalg.struct_{_net.started_bool;_net.heap_bool;_net.openDefer_bool;_net.sp_uintptr;_net.pc_uintptr;_net.fn_uintptr;_net._panic_uintptr;_net.link_uintptr;_net.fd_uintptr;_net.varp_uintptr;_net.framepc_uintptr_}, *Pnoalg.struct_{_net.started_bool;_net.heap_bool;_net.openDefer_bool;_net.sp_uintptr;_net.pc_uintptr;_net.fn_uintptr;_net._panic_uintptr;_net.link_uintptr;_net.fd_uintptr;_net.varp_uintptr;_net.framepc_uintptr_};

struct noalg.struct_{_net.started_bool;_net.heap_bool;_net.openDefer_bool;_net.sp_uintptr;_net.pc_uintptr;_net.fn_uintptr;_net._panic_uintptr;_net.link_uintptr;_net.fd_uintptr;_net.varp_uintptr;_net.framepc_uintptr_} { // Original name: noalg.struct { net.started bool; net.heap bool; net.openDefer bool; net.sp uintptr; net.pc uintptr; net.fn uintptr; net._panic uintptr; net.link uintptr; net.fd uintptr; net.varp uintptr; net.framepc uintptr }
    bool started;
    bool heap;
    bool openDefer;
    uintptr sp;
    uintptr pc;
    uintptr fn;
    uintptr _panic;
    uintptr link;
    uintptr fd;
    uintptr varp;
    uintptr framepc;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*int;_X1_*int;_X2_*int;_X3_*int_} noalg.struct_{_F_uintptr;_X0_*int;_X1_*int;_X2_*int;_X3_*int_}, *Pnoalg.struct_{_F_uintptr;_X0_*int;_X1_*int;_X2_*int;_X3_*int_};

struct noalg.struct_{_F_uintptr;_X0_*int;_X1_*int;_X2_*int;_X3_*int_} { // Original name: noalg.struct { F uintptr; X0 *int; X1 *int; X2 *int; X3 *int }
    uintptr F;
    int *X0;
    int *X1;
    int *X2;
    int *X3;
};

typedef struct syscall.Timespec syscall.Timespec, *Psyscall.Timespec;

struct syscall.Timespec {
    int64 Sec;
    int64 Nsec;
};

typedef struct regexp.runeSlice regexp.runeSlice, *Pregexp.runeSlice;

struct regexp.runeSlice {
    int32 *array;
    int len;
    int cap;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.mspan;_X1_*runtime.mheap_} noalg.struct_{_F_uintptr;_X0_*runtime.mspan;_X1_*runtime.mheap_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.mspan;_X1_*runtime.mheap_};

typedef struct runtime.mheap runtime.mheap, *Pruntime.mheap;

typedef struct []*runtime.mspan []*runtime.mspan, *P[]*runtime.mspan;

typedef struct struct_{_runtime.base_uintptr;_runtime.end_uintptr_} struct_{_runtime.base_uintptr;_runtime.end_uintptr_}, *Pstruct_{_runtime.base_uintptr;_runtime.end_uintptr_};

typedef struct struct_{_runtime.arenaHints_*runtime.arenaHint;_runtime.quarantineList_runtime.mSpanList;_runtime.readyList_runtime.mSpanList_} struct_{_runtime.arenaHints_*runtime.arenaHint;_runtime.quarantineList_runtime.mSpanList;_runtime.readyList_runtime.mSpanList_}, *Pstruct_{_runtime.arenaHints_*runtime.arenaHint;_runtime.quarantineList_runtime.mSpanList;_runtime.readyList_runtime.mSpanList_};

struct []*runtime.mspan {
    struct runtime.mspan **array;
    int len;
    int cap;
};

struct struct_{_runtime.arenaHints_*runtime.arenaHint;_runtime.quarantineList_runtime.mSpanList;_runtime.readyList_runtime.mSpanList_} { // Original name: struct { runtime.arenaHints *runtime.arenaHint; runtime.quarantineList runtime.mSpanList; runtime.readyList runtime.mSpanList }
    struct runtime.arenaHint *arenaHints;
    struct runtime.mSpanList quarantineList;
    struct runtime.mSpanList readyList;
};

struct struct_{_runtime.base_uintptr;_runtime.end_uintptr_} { // Original name: struct { runtime.base uintptr; runtime.end uintptr }
    uintptr base;
    uintptr end;
};

struct runtime.mheap {
    struct runtime/internal/sys.NotInHeap _;
    struct runtime.mutex lock;
    struct runtime.pageAlloc pages;
    uint32 sweepgen;
    struct []*runtime.mspan allspans;
    struct runtime/internal/atomic.Uintptr pagesInUse;
    struct runtime/internal/atomic.Uint64 pagesSwept;
    struct runtime/internal/atomic.Uint64 pagesSweptBasis;
    uint64 sweepHeapLiveBasis;
    float64 sweepPagesPerByte;
    struct runtime/internal/atomic.Uint64 reclaimIndex;
    struct runtime/internal/atomic.Uintptr reclaimCredit;
    struct runtime.heapArena *(*arenas[1])[4194304];
    bool arenasHugePages;
    struct runtime.linearAlloc heapArenaAlloc;
    struct runtime.arenaHint *arenaHints;
    struct runtime.linearAlloc arena;
    struct []runtime.arenaIdx allArenas;
    struct []runtime.arenaIdx sweepArenas;
    struct []runtime.arenaIdx markArenas;
    struct struct_{_runtime.base_uintptr;_runtime.end_uintptr_} curArena;
    struct struct_{_runtime.mcentral_runtime.mcentral;_runtime.pad_[24]uint8_} central[136];
    struct runtime.fixalloc spanalloc;
    struct runtime.fixalloc cachealloc;
    struct runtime.fixalloc specialfinalizeralloc;
    struct runtime.fixalloc specialprofilealloc;
    struct runtime.fixalloc specialReachableAlloc;
    struct runtime.fixalloc specialPinCounterAlloc;
    struct runtime.mutex speciallock;
    struct runtime.fixalloc arenaHintAlloc;
    struct struct_{_runtime.arenaHints_*runtime.arenaHint;_runtime.quarantineList_runtime.mSpanList;_runtime.readyList_runtime.mSpanList_} userArena;
    struct runtime.specialfinalizer *unused;
};

struct noalg.struct_{_F_uintptr;_X0_*runtime.mspan;_X1_*runtime.mheap_} { // Original name: noalg.struct { F uintptr; X0 *runtime.mspan; X1 *runtime.mheap }
    uintptr F;
    struct runtime.mspan *X0;
    struct runtime.mheap *X1;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.controlBuffer;_X1_google.golang.org/grpc/internal/transport.cbItem_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.controlBuffer;_X1_google.golang.org/grpc/internal/transport.cbItem_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.controlBuffer;_X1_google.golang.org/grpc/internal/transport.cbItem_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.controlBuffer;_X1_google.golang.org/grpc/internal/transport.cbItem_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc/internal/transport.controlBuffer; X1 google.golang.org/grpc/internal/transport.cbItem }
    uintptr F;
    struct google.golang.org/grpc/internal/transport.controlBuffer *X0;
    google.golang.org/grpc/internal/transport.cbItem X1;
};

typedef struct noalg.struct_{_F_uintptr;_X0_unsafe.Pointer;_X1_int32;_X2_uint8_} noalg.struct_{_F_uintptr;_X0_unsafe.Pointer;_X1_int32;_X2_uint8_}, *Pnoalg.struct_{_F_uintptr;_X0_unsafe.Pointer;_X1_int32;_X2_uint8_};

struct noalg.struct_{_F_uintptr;_X0_unsafe.Pointer;_X1_int32;_X2_uint8_} { // Original name: noalg.struct { F uintptr; X0 unsafe.Pointer; X1 int32; X2 uint8 }
    uintptr F;
    void *X0;
    int32 X1;
    uint8 X2;
};

typedef struct bufio.Scanner bufio.Scanner, *Pbufio.Scanner;

struct bufio.Scanner {
    io.Reader r;
    void (**split)(struct []uint8, bool, int *, struct []uint8 *, error *);
    int maxTokenSize;
    struct []uint8 token;
    struct []uint8 buf;
    int start;
    int end;
    error err;
    int empties;
    bool scanCalled;
    bool done;
};

typedef struct syscall.Stat_t syscall.Stat_t, *Psyscall.Stat_t;

struct syscall.Stat_t {
    uint64 Dev;
    uint64 Ino;
    uint64 Nlink;
    uint32 Mode;
    uint32 Uid;
    uint32 Gid;
    int32 X__pad0;
    uint64 Rdev;
    int64 Size;
    int64 Blksize;
    int64 Blocks;
    struct syscall.Timespec Atim;
    struct syscall.Timespec Mtim;
    struct syscall.Timespec Ctim;
    int64 X__unused[3];
};

typedef struct noalg.struct_{_net/http.started_bool;_net/http.heap_bool;_net/http.openDefer_bool;_net/http.sp_uintptr;_net/http.pc_uintptr;_net/http.fn_uintptr;_net/http._panic_uintptr;_net/http.link_uintptr;_net/http.fd_uintptr;_net/http.varp_uintptr;_net/http.framepc_uintptr_} noalg.struct_{_net/http.started_bool;_net/http.heap_bool;_net/http.openDefer_bool;_net/http.sp_uintptr;_net/http.pc_uintptr;_net/http.fn_uintptr;_net/http._panic_uintptr;_net/http.link_uintptr;_net/http.fd_uintptr;_net/http.varp_uintptr;_net/http.framepc_uintptr_}, *Pnoalg.struct_{_net/http.started_bool;_net/http.heap_bool;_net/http.openDefer_bool;_net/http.sp_uintptr;_net/http.pc_uintptr;_net/http.fn_uintptr;_net/http._panic_uintptr;_net/http.link_uintptr;_net/http.fd_uintptr;_net/http.varp_uintptr;_net/http.framepc_uintptr_};

struct noalg.struct_{_net/http.started_bool;_net/http.heap_bool;_net/http.openDefer_bool;_net/http.sp_uintptr;_net/http.pc_uintptr;_net/http.fn_uintptr;_net/http._panic_uintptr;_net/http.link_uintptr;_net/http.fd_uintptr;_net/http.varp_uintptr;_net/http.framepc_uintptr_} { // Original name: noalg.struct { net/http.started bool; net/http.heap bool; net/http.openDefer bool; net/http.sp uintptr; net/http.pc uintptr; net/http.fn uintptr; net/http._panic uintptr; net/http.link uintptr; net/http.fd uintptr; net/http.varp uintptr; net/http.framepc uintptr }
    bool started;
    bool heap;
    bool openDefer;
    uintptr sp;
    uintptr pc;
    uintptr fn;
    uintptr _panic;
    uintptr link;
    uintptr fd;
    uintptr varp;
    uintptr framepc;
};

typedef struct google.golang.org/protobuf/types/known/timestamppb.x.1 google.golang.org/protobuf/types/known/timestamppb.x.1, *Pgoogle.golang.org/protobuf/types/known/timestamppb.x.1;

struct google.golang.org/protobuf/types/known/timestamppb.x.1 { // Original name: google.golang.org/protobuf/types/known/timestamppb.xÂ·1
};

typedef struct golang.org/x/net/http2.UnknownFrame golang.org/x/net/http2.UnknownFrame, *Pgolang.org/x/net/http2.UnknownFrame;

struct golang.org/x/net/http2.UnknownFrame {
    struct golang.org/x/net/http2.FrameHeader FrameHeader;
    struct []uint8 p;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client;_X1_*google.golang.org/grpc/internal/transport.headerFrame;_X2_*error_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client;_X1_*google.golang.org/grpc/internal/transport.headerFrame;_X2_*error_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client;_X1_*google.golang.org/grpc/internal/transport.headerFrame;_X2_*error_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Client;_X1_*google.golang.org/grpc/internal/transport.headerFrame;_X2_*error_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc/internal/transport.http2Client; X1 *google.golang.org/grpc/internal/transport.headerFrame; X2 *error }
    uintptr F;
    struct google.golang.org/grpc/internal/transport.http2Client *X0;
    struct google.golang.org/grpc/internal/transport.headerFrame *X1;
    error *X2;
};

typedef struct struct_{_runtime.root_runtime.semaRoot;_runtime.pad_[40]uint8_} runtime.semTable[251];

typedef struct runtime.iface google.golang.org/protobuf/internal/order.EntryRanger;

typedef struct auth/auth_grpc.x.1 auth/auth_grpc.x.1, *Pauth/auth_grpc.x.1;

struct auth/auth_grpc.x.1 { // Original name: auth/auth_grpc.xÂ·1
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.Names;

typedef struct noalg.struct_{_F_uintptr;_X0_**runtime.mspan_} noalg.struct_{_F_uintptr;_X0_**runtime.mspan_}, *Pnoalg.struct_{_F_uintptr;_X0_**runtime.mspan_};

struct noalg.struct_{_F_uintptr;_X0_**runtime.mspan_} { // Original name: noalg.struct { F uintptr; X0 **runtime.mspan }
    uintptr F;
    struct runtime.mspan **X0;
};

typedef struct net.onlyValuesCtx net.onlyValuesCtx, *Pnet.onlyValuesCtx;

struct net.onlyValuesCtx {
    context.Context Context;
    context.Context lookupValues;
};

typedef struct []struct_{_net.laddr_net.TCPAddr;_net.value_int_} []struct_{_net.laddr_net.TCPAddr;_net.value_int_}, *P[]struct_{_net.laddr_net.TCPAddr;_net.value_int_};

struct []struct_{_net.laddr_net.TCPAddr;_net.value_int_} { // Original name: []struct { net.laddr net.TCPAddr; net.value int }
    struct struct_{_net.laddr_net.TCPAddr;_net.value_int_} *array;
    int len;
    int cap;
};

typedef struct noalg.struct_{_context.c_unsafe.Pointer;_context.elem_unsafe.Pointer_} noalg.[2]struct_{_context.c_unsafe.Pointer;_context.elem_unsafe.Pointer_}[2];

typedef struct hash<string,float64> *map[string]float64;

typedef struct []int8 []int8, *P[]int8;

struct []int8 {
    int8 *array;
    int len;
    int cap;
};

typedef struct runtime.iface encoding/json.Marshaler;

typedef struct noalg.map.bucket[google.golang.org/protobuf/reflect/protoreflect.FullName]interface_{} noalg.map.bucket[google.golang.org/protobuf/reflect/protoreflect.FullName]interface_{}, *Pnoalg.map.bucket[google.golang.org/protobuf/reflect/protoreflect.FullName]interface_{};

struct noalg.map.bucket[google.golang.org/protobuf/reflect/protoreflect.FullName]interface_{} { // Original name: noalg.map.bucket[google.golang.org/protobuf/reflect/protoreflect.FullName]interface {}
    uint8 topbits[8];
    noalg.[8]google.golang.org/protobuf/reflect/protoreflect.FullName keys;
    noalg.[8]interface_{} elems;
    void *overflow;
};

typedef struct google.golang.org/protobuf/reflect/protoreflect.FullName noalg.[8]google.golang.org/protobuf/reflect/protoreflect.FullName[8];

typedef struct hash<golang.org/x/net/http2.FrameType,map[golang.org/x/net/http2.Flags]string> *map[golang.org/x/net/http2.FrameType]map[golang.org/x/net/http2.Flags]string;

typedef struct noalg.struct_{_google.golang.org/grpc/internal/transport.started_bool;_google.golang.org/grpc/internal/transport.heap_bool;_google.golang.org/grpc/internal/transport.openDefer_bool;_google.golang.org/grpc/internal/transport.sp_uintptr;_google.golang.org/grpc/internal/transport.pc_uintptr;_google.golang.org/grpc/internal/transport.fn_uintptr;_google.golang.org/grpc/internal/transport._panic_uintptr;_google.golang.org/grpc/internal/transport.link_uintptr;_google.golang.org/grpc/internal/transport.fd_uintptr;_google.golang.org/grpc/internal/transport.varp_uintptr;_google.golang.org/grpc/internal/transport.framepc_uintptr_} noalg.struct_{_google.golang.org/grpc/internal/transport.started_bool;_google.golang.org/grpc/internal/transport.heap_bool;_google.golang.org/grpc/internal/transport.openDefer_bool;_google.golang.org/grpc/internal/transport.sp_uintptr;_google.golang.org/grpc/internal/transport.pc_uintptr;_google.golang.org/grpc/internal/transport.fn_uintptr;_google.golang.org/grpc/internal/transport._panic_uintptr;_google.golang.org/grpc/internal/transport.link_uintptr;_google.golang.org/grpc/internal/transport.fd_uintptr;_google.golang.org/grpc/internal/transport.varp_uintptr;_google.golang.org/grpc/internal/transport.framepc_uintptr_}, *Pnoalg.struct_{_google.golang.org/grpc/internal/transport.started_bool;_google.golang.org/grpc/internal/transport.heap_bool;_google.golang.org/grpc/internal/transport.openDefer_bool;_google.golang.org/grpc/internal/transport.sp_uintptr;_google.golang.org/grpc/internal/transport.pc_uintptr;_google.golang.org/grpc/internal/transport.fn_uintptr;_google.golang.org/grpc/internal/transport._panic_uintptr;_google.golang.org/grpc/internal/transport.link_uintptr;_google.golang.org/grpc/internal/transport.fd_uintptr;_google.golang.org/grpc/internal/transport.varp_uintptr;_google.golang.org/grpc/internal/transport.framepc_uintptr_};

struct noalg.struct_{_google.golang.org/grpc/internal/transport.started_bool;_google.golang.org/grpc/internal/transport.heap_bool;_google.golang.org/grpc/internal/transport.openDefer_bool;_google.golang.org/grpc/internal/transport.sp_uintptr;_google.golang.org/grpc/internal/transport.pc_uintptr;_google.golang.org/grpc/internal/transport.fn_uintptr;_google.golang.org/grpc/internal/transport._panic_uintptr;_google.golang.org/grpc/internal/transport.link_uintptr;_google.golang.org/grpc/internal/transport.fd_uintptr;_google.golang.org/grpc/internal/transport.varp_uintptr;_google.golang.org/grpc/internal/transport.framepc_uintptr_} { // Original name: noalg.struct { google.golang.org/grpc/internal/transport.started bool; google.golang.org/grpc/internal/transport.heap bool; google.golang.org/grpc/internal/transport.openDefer bool; google.golang.org/grpc/internal/transport.sp uintptr; google.golang.org/grpc/internal/transport.pc uintptr; google.golang.org/grpc/internal/transport.fn uintptr; google.golang.org/grpc/internal/transport._panic uintptr; google.golang.org/grpc/internal/transport.link uintptr; google.golang.org/grpc/internal/transport.fd uintptr; google.golang.org/grpc/internal/transport.varp uintptr; google.golang.org/grpc/internal/transport.framepc uintptr }
    bool started;
    bool heap;
    bool openDefer;
    uintptr sp;
    uintptr pc;
    uintptr fn;
    uintptr _panic;
    uintptr link;
    uintptr fd;
    uintptr varp;
    uintptr framepc;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.MessageDescriptors;

typedef struct google.golang.org/grpc.idler google.golang.org/grpc.idler, *Pgoogle.golang.org/grpc.idler;

struct google.golang.org/grpc.idler {
    context.Context ctx;
    void (**cancel)(void);
    struct string target;
    struct google.golang.org/grpc/resolver.Target parsedTarget;
    struct string authority;
    struct google.golang.org/grpc.dialOptions dopts;
    struct google.golang.org/grpc/internal/channelz.Channel *channelz;
    google.golang.org/grpc/resolver.Builder resolverBuilder;
    struct google.golang.org/grpc/internal/idle.Manager *idlenessMgr;
    struct google.golang.org/grpc.connectivityStateManager *csMgr;
    struct google.golang.org/grpc.pickerWrapper *pickerWrapper;
    struct google.golang.org/grpc/internal/resolver.SafeConfigSelector safeConfigSelector;
    struct sync/atomic.Value retryThrottler;
    struct sync.RWMutex mu;
    struct google.golang.org/grpc.ccResolverWrapper *resolverWrapper;
    struct google.golang.org/grpc.ccBalancerWrapper *balancerWrapper;
    struct google.golang.org/grpc.ServiceConfig *sc;
    map[*google.golang.org/grpc.addrConn]struct_{} conns;
    struct google.golang.org/grpc/keepalive.ClientParameters mkp;
    struct google.golang.org/grpc/internal/grpcsync.Event *firstResolveEvent;
    struct sync.Mutex lceMu;
    error lastConnectionError;
};

typedef struct auth/auth_grpc.LogoutRequest auth/auth_grpc.LogoutRequest, *Pauth/auth_grpc.LogoutRequest;

struct auth/auth_grpc.LogoutRequest {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    struct string Token;
};

typedef struct google.golang.org/protobuf/reflect/protoregistry.packageDescriptor google.golang.org/protobuf/reflect/protoregistry.packageDescriptor, *Pgoogle.golang.org/protobuf/reflect/protoregistry.packageDescriptor;

struct google.golang.org/protobuf/reflect/protoregistry.packageDescriptor {
    struct []google.golang.org/protobuf/reflect/protoreflect.FileDescriptor files;
};

typedef struct hash<reflect.Type,bool> *map[reflect.Type]bool;

typedef struct []vendor/golang.org/x/sys/cpu.option []vendor/golang.org/x/sys/cpu.option, *P[]vendor/golang.org/x/sys/cpu.option;

struct []vendor/golang.org/x/sys/cpu.option {
    struct vendor/golang.org/x/sys/cpu.option *array;
    int len;
    int cap;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.OneofDescriptors;

typedef struct google.golang.org/grpc/stats.ConnEnd google.golang.org/grpc/stats.ConnEnd, *Pgoogle.golang.org/grpc/stats.ConnEnd;

struct google.golang.org/grpc/stats.ConnEnd {
    bool Client;
};

typedef struct hchan<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> *chan_net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1;

typedef struct noalg.map.hdr[interface_{}]interface_{} noalg.map.hdr[interface_{}]interface_{}, *Pnoalg.map.hdr[interface_{}]interface_{};

struct noalg.map.hdr[interface_{}]interface_{} { // Original name: noalg.map.hdr[interface {}]interface {}
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[interface_{}]interface_{} *buckets;
    struct noalg.map.bucket[interface_{}]interface_{} *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct auth/auth_grpc.VerifyOTPRequest auth/auth_grpc.VerifyOTPRequest, *Pauth/auth_grpc.VerifyOTPRequest;

struct auth/auth_grpc.VerifyOTPRequest {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    struct string Username;
    int64 Otp;
};

typedef struct os.fileStat os.fileStat, *Pos.fileStat;

struct os.fileStat {
    struct string name;
    int64 size;
    io/fs.FileMode mode;
    struct time.Time modTime;
    struct syscall.Stat_t sys;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*os.File_} noalg.struct_{_F_uintptr;_X0_*os.File_}, *Pnoalg.struct_{_F_uintptr;_X0_*os.File_};

struct noalg.struct_{_F_uintptr;_X0_*os.File_} { // Original name: noalg.struct { F uintptr; X0 *os.File }
    uintptr F;
    struct os.File *X0;
};

typedef struct []reflect.Method []reflect.Method, *P[]reflect.Method;

struct []reflect.Method {
    struct reflect.Method *array;
    int len;
    int cap;
};

typedef struct []int16 []int16, *P[]int16;

struct []int16 {
    int16 *array;
    int len;
    int cap;
};

typedef struct vendor/golang.org/x/net/http/httpproxy.domainMatch vendor/golang.org/x/net/http/httpproxy.domainMatch, *Pvendor/golang.org/x/net/http/httpproxy.domainMatch;

struct vendor/golang.org/x/net/http/httpproxy.domainMatch {
    struct string host;
    struct string port;
    bool matchHost;
};

typedef struct hash<string,google.golang.org/grpc.ServiceInfo> hash<string,google.golang.org/grpc.ServiceInfo>, *Phash<string,google.golang.org/grpc.ServiceInfo>;

struct hash<string,google.golang.org/grpc.ServiceInfo> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,google.golang.org/grpc.ServiceInfo> *buckets;
    struct bucket<string,google.golang.org/grpc.ServiceInfo> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct runtime.iface google.golang.org/grpc/grpclog.LoggerV2;

typedef struct reflect.cacheKey reflect.cacheKey, *Preflect.cacheKey;

struct reflect.cacheKey {
    reflect.Kind kind;
    struct internal/abi.Type *t1;
    struct internal/abi.Type *t2;
    uintptr extra;
};

typedef struct []struct_{_crypto/x509.algo_crypto/x509.SignatureAlgorithm;_crypto/x509.name_string;_crypto/x509.oid_encoding/asn1.ObjectIdentifier;_crypto/x509.pubKeyAlgo_crypto/x509.PublicKeyAlgorithm;_crypto/x509.hash_crypto.Hash_} []struct_{_crypto/x509.algo_crypto/x509.SignatureAlgorithm;_crypto/x509.name_string;_crypto/x509.oid_encoding/asn1.ObjectIdentifier;_crypto/x509.pubKeyAlgo_crypto/x509.PublicKeyAlgorithm;_crypto/x509.hash_crypto.Hash_}, *P[]struct_{_crypto/x509.algo_crypto/x509.SignatureAlgorithm;_crypto/x509.name_string;_crypto/x509.oid_encoding/asn1.ObjectIdentifier;_crypto/x509.pubKeyAlgo_crypto/x509.PublicKeyAlgorithm;_crypto/x509.hash_crypto.Hash_};

struct []struct_{_crypto/x509.algo_crypto/x509.SignatureAlgorithm;_crypto/x509.name_string;_crypto/x509.oid_encoding/asn1.ObjectIdentifier;_crypto/x509.pubKeyAlgo_crypto/x509.PublicKeyAlgorithm;_crypto/x509.hash_crypto.Hash_} { // Original name: []struct { crypto/x509.algo crypto/x509.SignatureAlgorithm; crypto/x509.name string; crypto/x509.oid encoding/asn1.ObjectIdentifier; crypto/x509.pubKeyAlgo crypto/x509.PublicKeyAlgorithm; crypto/x509.hash crypto.Hash }
    struct struct_{_crypto/x509.algo_crypto/x509.SignatureAlgorithm;_crypto/x509.name_string;_crypto/x509.oid_encoding/asn1.ObjectIdentifier;_crypto/x509.pubKeyAlgo_crypto/x509.PublicKeyAlgorithm;_crypto/x509.hash_crypto.Hash_} *array;
    int len;
    int cap;
};

typedef struct os.fileWithoutReadFrom os.fileWithoutReadFrom, *Pos.fileWithoutReadFrom;

struct os.fileWithoutReadFrom {
    struct os.File *File;
};

typedef struct []math/big.Word []math/big.Word, *P[]math/big.Word;

struct []math/big.Word {
    math/big.Word *array;
    int len;
    int cap;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*int64_} noalg.struct_{_F_uintptr;_X0_*int64_}, *Pnoalg.struct_{_F_uintptr;_X0_*int64_};

struct noalg.struct_{_F_uintptr;_X0_*int64_} { // Original name: noalg.struct { F uintptr; X0 *int64 }
    uintptr F;
    int64 *X0;
};

typedef struct noalg.map.hdr[string]string noalg.map.hdr[string]string, *Pnoalg.map.hdr[string]string;

struct noalg.map.hdr[string]string {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string]string *buckets;
    struct noalg.map.bucket[string]string *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct sync/atomic.Pointer[go.shape.struct_{_net.servers_[]string;_net.search_[]string;_net.ndots_int;_net.timeout_time.Duration;_net.attempts_int;_net.rotate_bool;_net.unknownOpt_bool;_net.lookup_[]string;_net.err_error;_net.mtime_time.Time;_net.soffset_uint32;_net.singleRequest_bool;_net.useTCP_bool;_net.trustAD_bool;_net.noReload_bool_}] sync/atomic.Pointer[go.shape.struct_{_net.servers_[]string;_net.search_[]string;_net.ndots_int;_net.timeout_time.Duration;_net.attempts_int;_net.rotate_bool;_net.unknownOpt_bool;_net.lookup_[]string;_net.err_error;_net.mtime_time.Time;_net.soffset_uint32;_net.singleRequest_bool;_net.useTCP_bool;_net.trustAD_bool;_net.noReload_bool_}], *Psync/atomic.Pointer[go.shape.struct_{_net.servers_[]string;_net.search_[]string;_net.ndots_int;_net.timeout_time.Duration;_net.attempts_int;_net.rotate_bool;_net.unknownOpt_bool;_net.lookup_[]string;_net.err_error;_net.mtime_time.Time;_net.soffset_uint32;_net.singleRequest_bool;_net.useTCP_bool;_net.trustAD_bool;_net.noReload_bool_}];

struct sync/atomic.Pointer[go.shape.struct_{_net.servers_[]string;_net.search_[]string;_net.ndots_int;_net.timeout_time.Duration;_net.attempts_int;_net.rotate_bool;_net.unknownOpt_bool;_net.lookup_[]string;_net.err_error;_net.mtime_time.Time;_net.soffset_uint32;_net.singleRequest_bool;_net.useTCP_bool;_net.trustAD_bool;_net.noReload_bool_}] { // Original name: sync/atomic.Pointer[go.shape.struct { net.servers []string; net.search []string; net.ndots int; net.timeout time.Duration; net.attempts int; net.rotate bool; net.unknownOpt bool; net.lookup []string; net.err error; net.mtime time.Time; net.soffset uint32; net.singleRequest bool; net.useTCP bool; net.trustAD bool; net.noReload bool }]
    struct sync/atomic.noCopy _;
    struct go.shape.struct_{_net.servers_[]string;_net.search_[]string;_net.ndots_int;_net.timeout_time.Duration;_net.attempts_int;_net.rotate_bool;_net.unknownOpt_bool;_net.lookup_[]string;_net.err_error;_net.mtime_time.Time;_net.soffset_uint32;_net.singleRequest_bool;_net.useTCP_bool;_net.trustAD_bool;_net.noReload_bool_} *_[0];
    void *v;
};

typedef struct encoding/json.sliceEncoder encoding/json.sliceEncoder, *Pencoding/json.sliceEncoder;

struct encoding/json.sliceEncoder {
    void (**arrayEnc)(struct encoding/json.encodeState *, struct reflect.Value, struct encoding/json.encOpts);
};

typedef struct hash<string,google.golang.org/grpc/encoding.Compressor> hash<string,google.golang.org/grpc/encoding.Compressor>, *Phash<string,google.golang.org/grpc/encoding.Compressor>;

typedef struct bucket<string,google.golang.org/grpc/encoding.Compressor> bucket<string,google.golang.org/grpc/encoding.Compressor>, *Pbucket<string,google.golang.org/grpc/encoding.Compressor>;

struct hash<string,google.golang.org/grpc/encoding.Compressor> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,google.golang.org/grpc/encoding.Compressor> *buckets;
    struct bucket<string,google.golang.org/grpc/encoding.Compressor> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<string,google.golang.org/grpc/encoding.Compressor> {
    uint8 tophash[8];
    struct string keys[8];
    google.golang.org/grpc/encoding.Compressor values[8];
    struct bucket<string,google.golang.org/grpc/encoding.Compressor> *overflow;
};

typedef struct hash<golang.org/x/net/http2.SettingID,bool> *map[golang.org/x/net/http2.SettingID]bool;

typedef struct google.golang.org/protobuf/internal/impl.errInvalidUTF8 google.golang.org/protobuf/internal/impl.errInvalidUTF8, *Pgoogle.golang.org/protobuf/internal/impl.errInvalidUTF8;

struct google.golang.org/protobuf/internal/impl.errInvalidUTF8 {
};

typedef struct google.golang.org/grpc/internal/transport.connectionKey google.golang.org/grpc/internal/transport.connectionKey, *Pgoogle.golang.org/grpc/internal/transport.connectionKey;

struct google.golang.org/grpc/internal/transport.connectionKey {
};

typedef struct noalg.struct_{_F_uintptr;_X0_**runtime.notInHeap;_X1_uintptr;_X2_uintptr;_X3_*runtime.sysMemStat_} noalg.struct_{_F_uintptr;_X0_**runtime.notInHeap;_X1_uintptr;_X2_uintptr;_X3_*runtime.sysMemStat_}, *Pnoalg.struct_{_F_uintptr;_X0_**runtime.notInHeap;_X1_uintptr;_X2_uintptr;_X3_*runtime.sysMemStat_};

struct noalg.struct_{_F_uintptr;_X0_**runtime.notInHeap;_X1_uintptr;_X2_uintptr;_X3_*runtime.sysMemStat_} { // Original name: noalg.struct { F uintptr; X0 **runtime.notInHeap; X1 uintptr; X2 uintptr; X3 *runtime.sysMemStat }
    uintptr F;
    struct runtime.notInHeap **X0;
    uintptr X1;
    uintptr X2;
    runtime.sysMemStat *X3;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.SourceLocations;

typedef struct []internal/godebugs.Info []internal/godebugs.Info, *P[]internal/godebugs.Info;

struct []internal/godebugs.Info {
    struct internal/godebugs.Info *array;
    int len;
    int cap;
