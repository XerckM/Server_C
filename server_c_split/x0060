    runtime_getempty(prStack0000000000000008);
    *(undefined8 *)(extraout_RAX + 0x18) = 0;
    prStack0000000000000008->obj[0x23] = extraout_RAX;
    prStack0000000000000008->obj[0x24] = extraout_RAX;
    uVar2 = extraout_RAX;
  }
  sVar3 = (sdword)uStack0000000000000010;
  iVar4 = *(int *)(uVar2 + 0x10);
  if (0 < iVar4) {
    if (0x3e < iVar4 - 1U) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    iVar5 = (iVar4 - 1U) * 0x20;
    if ((dword)(sVar3 - (sdword)prStack0000000000000008->obj[0x1d]) <
        (dword)(*(sdword *)(uVar2 + 0x20 + iVar5) + *(sdword *)(uVar2 + 0x24 + iVar5))) {
                    // WARNING: Subroutine does not return
      runtime_throw(in_stack_ffffffffffffffe0);
    }
    if (iVar4 == 0x3f) {
      runtime_getempty(prStack0000000000000008);
      *(undefined8 *)(extraout_RAX_00 + 0x18) = 0;
      *(uintptr *)(uVar2 + 0x18) = extraout_RAX_00;
      prStack0000000000000008->obj[0x24] = extraout_RAX_00;
      sVar3 = (sdword)uStack0000000000000010;
      uVar2 = extraout_RAX_00;
    }
  }
  uVar1 = *(uint *)(uVar2 + 0x10);
  if (0x3e < uVar1) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  iVar4 = uVar1 * 0x20;
  *(uint *)(uVar2 + 0x10) = uVar1 + 1;
  *(sdword *)(uVar2 + 0x20 + iVar4) = sVar3 - (sdword)prStack0000000000000008->obj[0x1d];
  *(int32 *)(uVar2 + 0x24 + iVar4) = prStack0000000000000018->size;
  *(runtime_stackObjectRecord **)(uVar2 + 0x28 + iVar4) = prStack0000000000000018;
  prStack0000000000000008->obj[0x25] = prStack0000000000000008->obj[0x25] + 1;
  return;
}



void runtime_binarySearchTree
               (runtime_stackObjectBuf *x,int idx,int n,runtime_stackObject *root,
               runtime_stackObjectBuf *restBuf,int restIdx)

{
  runtime_stackObject *extraout_RAX;
  runtime_stackObject *left;
  runtime_stackObject *extraout_RAX_00;
  runtime_stackObject *right;
  runtime_stackObjectBuf *restBuf_00;
  uint extraout_RCX;
  runtime_stackObjectBuf *x_00;
  runtime_stackObjectBuf *extraout_RBX;
  runtime_stackObjectBuf *extraout_RSI;
  int root_00;
  runtime_stackObject *extraout_RDI;
  int restIdx_00;
  int extraout_R8;
  int unaff_R14;
  int iStack0000000000000018;
  
  iStack0000000000000018 = n;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    restBuf = extraout_RSI;
    root = extraout_RDI;
    restIdx = extraout_R8;
  }
  if (iStack0000000000000018 == 0) {
    return;
  }
  restBuf_00 = (runtime_stackObjectBuf *)(iStack0000000000000018 / 2);
  runtime_binarySearchTree(x,idx,(int)restBuf_00,root,restBuf,restIdx);
  if (0x3e < extraout_RCX) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  root_00 = extraout_RCX + 1;
  x_00 = extraout_RBX;
  if (extraout_RCX == 0x3e) {
    x_00 = (extraout_RBX->stackObjectBufHdr).next;
    root_00 = 0;
  }
  runtime_binarySearchTree
            (x_00,root_00,(iStack0000000000000018 - (int)restBuf_00) + -1,
             (runtime_stackObject *)root_00,restBuf_00,restIdx_00);
  extraout_RBX->obj[extraout_RCX].left = extraout_RAX;
  extraout_RBX->obj[extraout_RCX].right = extraout_RAX_00;
  return;
}



// WARNING: Removing unreachable block (ram,0x0042965e)
// WARNING: Removing unreachable block (ram,0x0042968b)
// WARNING: Removing unreachable block (ram,0x00429672)
// WARNING: Removing unreachable block (ram,0x00429643)

void runtime___mheap__nextSpanForSweep(runtime_mheap *h,runtime_mspan *~r0)

{
  runtime_spanSet *prVar1;
  dword dVar2;
  int extraout_RAX;
  runtime_mspan *s;
  int extraout_RAX_00;
  int iVar3;
  runtime_sweepClass sOld;
  runtime_sweepClass sOld_1;
  uint32 sg;
  runtime_sweepClass sc;
  uint uVar4;
  runtime_sweepClass rVar5;
  uint uVar6;
  int unaff_R14;
  runtime_mheap *prStack0000000000000008;
  
  prStack0000000000000008 = h;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  dVar2 = prStack0000000000000008->sweepgen;
  rVar5 = runtime_sweep.centralIndex;
  while( true ) {
    if (0x10f < rVar5) {
      if (runtime_sweep.centralIndex != 0xffffffff) {
        LOCK();
        runtime_sweep.centralIndex = 0xffffffff;
        UNLOCK();
      }
      return;
    }
    uVar6 = (uint)(rVar5 >> 1 & 0xff);
    if (0x87 < uVar6) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    if ((rVar5 & 1) == 0) {
      uVar4 = (uint)(dword)-((dVar2 >> 1 & 1) - 1);
      prVar1 = prStack0000000000000008->central[uVar6].mcentral.full;
      if (1 < uVar4) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      runtime___spanSet__pop
                ((runtime_spanSet *)(&prVar1->spineLock + uVar4 * 5),(runtime_mspan *)prVar1);
      iVar3 = extraout_RAX;
    }
    else {
      uVar4 = (uint)(dword)-((dVar2 >> 1 & 1) - 1);
      prVar1 = prStack0000000000000008->central[uVar6].mcentral.partial;
      if (1 < uVar4) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      runtime___spanSet__pop
                ((runtime_spanSet *)(&prVar1->spineLock + uVar4 * 5),(runtime_mspan *)prVar1);
      iVar3 = extraout_RAX_00;
    }
    if (iVar3 != 0) break;
    rVar5 = rVar5 + 1;
  }
  if (runtime_sweep.centralIndex < rVar5) {
    LOCK();
    UNLOCK();
    runtime_sweep.centralIndex = rVar5;
  }
  return;
}



void runtime___activeSweep__end(runtime_activeSweep *a,runtime_sweepLocker sl)

{
  dword dVar1;
  runtime_internal_atomic_Uint64 v;
  float64 v_00;
  uint64 live;
  uint32 state;
  uint uVar2;
  int unaff_R14;
  bool bVar3;
  string in_stack_ffffffffffffffc8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    sl = (runtime_sweepLocker)((uint)sl & 0xffffffff);
  }
  if (runtime_mheap_.sweepgen != sl.sweepGen) {
                    // WARNING: Subroutine does not return
    runtime_throw(in_stack_ffffffffffffffc8);
  }
  do {
    dVar1 = (a->state).value;
    state = dVar1 & 0x7fffffff;
    if (0x7fffffff < (dword)(state - 1)) {
                    // WARNING: Subroutine does not return
      runtime_throw(in_stack_ffffffffffffffc8);
    }
    LOCK();
    bVar3 = dVar1 == (a->state).value;
    if (bVar3) {
      (a->state).value = dVar1 - 1;
    }
    v_00 = runtime_mheap_.sweepPagesPerByte;
    v.value = runtime_mheap_.pagesSwept.value;
    UNLOCK();
  } while (!bVar3);
  if (dVar1 != 0x80000000) {
    return;
  }
  if (0 < runtime_debug.gcpacertrace) {
    live = runtime_gcController.heapLive.value >> 0x14;
    uVar2 = runtime_gcController.heapLive.value - runtime_mheap_.sweepHeapLiveBasis;
    runtime_printlock();
    runtime_printstring(in_stack_ffffffffffffffc8);
    runtime_printuint(live);
    runtime_printstring(in_stack_ffffffffffffffc8);
    runtime_printuint(uVar2 >> 0x14);
    runtime_printstring(in_stack_ffffffffffffffc8);
    runtime_printuint(v.value);
    runtime_printstring(in_stack_ffffffffffffffc8);
    runtime_printfloat(v_00);
    runtime_printstring(in_stack_ffffffffffffffc8);
    runtime_printunlock();
  }
  return;
}



// WARNING: Unknown calling convention

void runtime_finishsweep_m(void)

{
  uint32 uVar1;
  uint32 sg;
  uintptr in_RAX;
  uintptr extraout_RAX;
  uintptr extraout_RAX_00;
  int iVar2;
  int iVar3;
  uint uVar4;
  int unaff_R14;
  string in_stack_ffffffffffffffc8;
  int i;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RAX = extraout_RAX_00;
  }
  while (runtime_sweepone(in_RAX), uVar1 = runtime_mheap_.sweepgen,
        extraout_RAX != 0xffffffffffffffff) {
    runtime_sweep.npausesweep = runtime_sweep.npausesweep + 1;
    in_RAX = extraout_RAX;
  }
  if (((dword)runtime_sweep.active.state.value & 0x7fffffff) != 0) {
                    // WARNING: Subroutine does not return
    runtime_throw(in_stack_ffffffffffffffc8);
  }
  iVar2 = 0;
  while( true ) {
    if (0x87 < iVar2) {
      runtime___scavengerState__wake(&runtime_scavenger);
      runtime_nextMarkBitArenaEpoch();
      return;
    }
    iVar3 = iVar2 * 0xc0;
    uVar4 = (uint)(dword)-((uVar1 >> 1 & 1) - 1);
    if (1 < uVar4) break;
    runtime___spanSet__reset(runtime_mheap_.central[iVar2].mcentral.partial + uVar4);
    iVar2 = iVar2 + 1;
    runtime___spanSet__reset((runtime_spanSet *)(iVar3 + 0xc848a0 + uVar4 * 0x28));
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



// WARNING: Unknown calling convention

void runtime_bgsweep(chan_int c)

{
  int iVar1;
  int iVar2;
  char extraout_AL;
  int nSwept;
  int extraout_RAX;
  undefined8 extraout_RBX;
  undefined8 extraout_RBX_00;
  undefined8 uVar3;
  int *extraout_R11;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = unaff_R14;
    extraout_R11[1] = (int)runtime_sweep.g;
  }
  runtime_lock2(&runtime_sweep.lock);
  runtime_sweep.parked = true;
  runtime_chansend1((runtime_hchan *)c,&runtime_gcbits__);
  runtime_gopark((func__runtime_g__unsafe_Pointer__bool **)&PTR_runtime_parkunlock_c_008eb588,
                 &runtime_sweep,0xc,0x14,1);
  do {
    nSwept = 0;
    while (runtime_sweepone(nSwept), uVar3 = extraout_RBX, extraout_RAX != -1) {
      runtime_sweep.nbgsweep = runtime_sweep.nbgsweep + 1;
      iVar1 = nSwept + 1;
      iVar2 = nSwept + SUB168(SEXT816(-0x3333333333333333) * SEXT816(iVar1),8);
      nSwept = iVar1;
      if (((iVar2 + 1 >> 3) - (iVar1 >> 0x3f)) * 10 == iVar1) {
        runtime_goschedIfBusy();
      }
    }
    while (runtime_freeSomeWbufs(true,SUB81(uVar3,0)), extraout_AL != '\0') {
      runtime_goschedIfBusy();
      uVar3 = extraout_RBX_00;
    }
    runtime_lock2(&runtime_sweep.lock);
    if (runtime_sweep.active.state.value == 0x80000000) {
      runtime_sweep.parked = true;
      runtime_gopark((func__runtime_g__unsafe_Pointer__bool **)&PTR_runtime_parkunlock_c_008eb588,
                     &runtime_sweep,0xc,0x14,1);
    }
    else {
      runtime_unlock2(&runtime_sweep.lock);
    }
  } while( true );
}



void runtime___sweepLocker__tryAcquire
               (runtime_sweepLocker *l,runtime_mspan *s,runtime_sweepLocked ~r0,bool ~r1)

{
  uint32 uVar1;
  int unaff_R14;
  bool bVar2;
  string in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (l->valid == false) {
                    // WARNING: Subroutine does not return
    runtime_throw(in_stack_ffffffffffffffe8);
  }
  uVar1 = l->sweepGen - 2;
  if (s->sweepgen != uVar1) {
    return;
  }
  LOCK();
  bVar2 = uVar1 == s->sweepgen;
  if (bVar2) {
    s->sweepgen = l->sweepGen - 1;
  }
  UNLOCK();
  if (!bVar2) {
    return;
  }
  return;
}



// WARNING: Variable defined which should be unmapped: gp
// WARNING: Removing unreachable block (ram,0x00429c1e)
// WARNING: Removing unreachable block (ram,0x00429d02)

void runtime_sweepone(uintptr ~r0)

{
  int32 *piVar1;
  byte bVar2;
  dword dVar3;
  string s_00;
  string s_01;
  string s_02;
  string s_03;
  uint32 state_1;
  uint32 state_2;
  char extraout_AL;
  runtime_mspan *s_04;
  runtime_mspan *s;
  int extraout_RAX;
  runtime_mSpanState state;
  dword dVar4;
  undefined8 extraout_RCX;
  runtime_sweepLocked ~r0_00;
  uintptr npages;
  bool noMoreWork;
  bool ok;
  runtime_mspan *in_RBX;
  runtime_mspan *extraout_RBX;
  runtime_sweepLocker sl;
  runtime_mspan *extraout_RBX_00;
  bool ~r1;
  runtime_g *unaff_R14;
  bool bVar5;
  uint8 *in_stack_ffffffffffffffb8;
  int in_stack_ffffffffffffffc0;
  runtime_sweepLocker local_28;
  runtime_sweepLocked local_20;
  int local_18;
  runtime_g *gp;
  
  while (&stack0x00000000 <= (undefined *)unaff_R14->stackguard0) {
    runtime_morestack_noctxt();
    in_RBX = extraout_RBX_00;
  }
  piVar1 = &unaff_R14->m->locks;
  *piVar1 = *piVar1 + 1;
  dVar4 = (dword)runtime_sweep.active.state.value & 0x80000000;
  if (dVar4 == 0) {
    runtime_sweep.active.state.value =
         (runtime_internal_atomic_Uint32)((sdword)runtime_sweep.active.state.value + 1);
    in_RBX = (runtime_mspan *)&runtime_sweep.active;
    LOCK();
    UNLOCK();
  }
  local_28.sweepGen = runtime_mheap_.sweepgen;
  local_28.valid = dVar4 == 0;
  gp = unaff_R14;
  if (!local_28.valid) {
    piVar1 = &unaff_R14->m->locks;
    *piVar1 = *piVar1 + -1;
    return;
  }
  do {
    while( true ) {
      runtime___mheap__nextSpanForSweep(&runtime_mheap_,in_RBX);
      dVar4 = local_28.sweepGen;
      if (s_04 == (runtime_mspan *)0x0) {
        dVar4 = (dword)runtime_sweep.active.state.value & 0x80000000;
        if (dVar4 == 0) {
          runtime_sweep.active.state.value =
               (runtime_internal_atomic_Uint32)
               ((dword)runtime_sweep.active.state.value | 0x80000000);
          LOCK();
          UNLOCK();
        }
        bVar5 = dVar4 == 0;
        local_18 = -1;
        goto LAB_00429d1b;
      }
      bVar2 = (s_04->state).s.value;
      ~r0_00.mspan._1_7_ = (undefined7)((uint)extraout_RCX >> 8);
      ~r0_00.mspan._0_1_ = bVar2;
      if (bVar2 == 1) break;
      dVar3 = s_04->sweepgen;
      in_RBX = (runtime_mspan *)(uint)local_28.sweepGen;
      if ((local_28.sweepGen != dVar3) && (dVar3 != (dword)(local_28.sweepGen + 3))) {
        runtime_printlock();
        s_00.len = in_stack_ffffffffffffffc0;
        s_00.str = in_stack_ffffffffffffffb8;
        runtime_printstring(s_00);
        runtime_printuint((uint)bVar2);
        s_01.len = in_stack_ffffffffffffffc0;
        s_01.str = in_stack_ffffffffffffffb8;
        runtime_printstring(s_01);
        runtime_printuint((uint)dVar3);
        s_02.len = in_stack_ffffffffffffffc0;
        s_02.str = in_stack_ffffffffffffffb8;
        runtime_printstring(s_02);
        runtime_printuint((uint)dVar4);
        runtime_printnl();
        runtime_printunlock();
        s_03.len = in_stack_ffffffffffffffc0;
        s_03.str = in_stack_ffffffffffffffb8;
                    // WARNING: Subroutine does not return
        runtime_throw(s_03);
      }
    }
    runtime___sweepLocker__tryAcquire(&local_28,s_04,~r0_00,~r1);
    in_RBX = extraout_RBX;
  } while ((char)extraout_RBX == '\0');
  local_18 = *(int *)(extraout_RAX + 0x20);
  runtime___sweepLocked__sweep(&local_20,false,SUB81(local_18,0));
  if (extraout_AL == '\0') {
    local_18 = 0;
  }
  else {
    LOCK();
    runtime_mheap_.reclaimCredit.value = runtime_mheap_.reclaimCredit.value + local_18;
    UNLOCK();
  }
  bVar5 = false;
LAB_00429d1b:
  sl._4_4_ = 0;
  sl.sweepGen = local_28.sweepGen;
  runtime___activeSweep__end(&runtime_sweep.active,sl);
  if (bVar5) {
    if (0 < runtime_debug.scavtrace) {
      runtime_systemstack();
    }
    LOCK();
    runtime_scavenger.sysmonWake.value = 1;
    UNLOCK();
  }
  piVar1 = &gp->m->locks;
  *piVar1 = *piVar1 + -1;
  return;
}



// WARNING: Removing unreachable block (ram,0x00429e9b)
// WARNING: Removing unreachable block (ram,0x00429e76)
// WARNING: Unknown calling convention

void runtime___mspan__ensureSwept(runtime_mspan *s)

{
  int *piVar1;
  uint32 spangen;
  bool ~r0;
  uint32 state;
  char extraout_BL;
  bool ok;
  runtime_sweepLocker sl;
  runtime_sweepLocker sl_00;
  undefined ~r1;
  undefined8 in_RDI;
  undefined8 extraout_RDI;
  int unaff_R14;
  runtime_g *gp;
  string in_stack_ffffffffffffffd0;
  runtime_sweepLocker local_20;
  runtime_sweepLocked local_18;
  runtime_mspan *local_10;
  runtime_sweepLocked ~r0_00;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  piVar1 = *(int **)(unaff_R14 + 0x30);
  if (((*(sdword *)(piVar1 + 0x21) == 0) && (*(sdword *)(piVar1 + 0x1e) == 0)) &&
     (*piVar1 != unaff_R14)) {
                    // WARNING: Subroutine does not return
    runtime_throw(in_stack_ffffffffffffffd0);
  }
  ~r1 = (undefined)in_RDI;
  state = (dword)runtime_sweep.active.state.value & 0x80000000;
  ~r0_00.mspan._4_4_ = 0;
  state = state;
  if (state == 0) {
    runtime_sweep.active.state.value =
         (runtime_internal_atomic_Uint32)((sdword)runtime_sweep.active.state.value + 1);
    ~r1 = 0xdc;
    LOCK();
    UNLOCK();
  }
  local_20.valid = state == 0;
  local_20.sweepGen = runtime_mheap_.sweepgen;
  local_10 = s;
  if (local_20.valid) {
    runtime___sweepLocker__tryAcquire(&local_20,s,~r0_00,(bool)~r1);
    if (extraout_BL != '\0') {
      runtime___sweepLocked__sweep(&local_18,false,~r0);
      sl_00._4_4_ = 0;
      sl_00.sweepGen = local_20.sweepGen;
      runtime___activeSweep__end(&runtime_sweep.active,sl_00);
      return;
    }
    sl._4_4_ = 0;
    sl.sweepGen = local_20.sweepGen;
    runtime___activeSweep__end(&runtime_sweep.active,sl);
  }
  while ((local_10->sweepgen != local_20.sweepGen &&
         (local_10->sweepgen != (uint32)(local_20.sweepGen + 3)))) {
    runtime_osyield();
  }
  return;
}



void runtime___sweepLocked__sweep(runtime_sweepLocked *sl,bool preserve,bool ~r0)

{
  sdword sVar1;
  uint8 *puVar2;
  byte bVar3;
  byte bVar4;
  ushort uVar5;
  sdword sVar6;
  int *piVar7;
  runtime_heapStatsDelta *~r0_00;
  uint64 x_00;
  runtime_special *prVar8;
  undefined auVar9 [16];
  string s_00;
  string s_01;
  string s_02;
  string s_03;
  string s_04;
  string s_05;
  string s_06;
  string s_07;
  string s_08;
  string s_09;
  string s_10;
  string s_11;
  string s_12;
  string s_13;
  string s_14;
  string s_15;
  bool bVar10;
  uint32 uVar11;
  bool hasFin;
  uint uVar12;
  uintptr objIndex;
  uint uVar13;
  uintptr arenaPage;
  uint uVar14;
  uintptr i_2;
  int extraout_RAX;
  undefined8 extraout_RAX_00;
  int extraout_RAX_01;
  runtime_heapStatsDelta *stats;
  uint uVar15;
  int extraout_RAX_02;
  runtime_heapStatsDelta *stats_1;
  uintptr i;
  uint16 nfreed;
  runtime_mSpanState state_1;
  uintptr i_1;
  ushort uVar16;
  uintptr i_3;
  runtime_mspan *s;
  char cVar17;
  undefined7 in_register_00000019;
  runtime_gcBits *prVar18;
  runtime_gcBits *~r0_01;
  uintptr p_1;
  uint32 sweepgen;
  runtime_mSpanState state;
  ushort uVar19;
  runtime_heapArena *ha;
  void *p_00;
  uintptr x;
  runtime_special *prVar20;
  uint64 mrkBits;
  int iVar21;
  runtime_special *tmp;
  runtime_spanClass spc;
  uint8 mask;
  uintptr endOffset;
  uintptr size;
  uintptr p;
  int unaff_R14;
  runtime_g *gp;
  dword dVar22;
  uint8 *in_stack_ffffffffffffff00;
  int in_stack_ffffffffffffff08;
  int count;
  uint64 local_80;
  runtime_special *local_78;
  undefined local_70 [16];
  undefined local_60 [16];
  runtime_mheap *local_50;
  runtime_specialsIter siter;
  runtime_markBits mbits;
  runtime_markBits abits;
  
  prVar18 = (runtime_gcBits *)CONCAT71(in_register_00000019,preserve);
  while (cVar17 = (char)prVar18, &local_80 <= *(uint **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    prVar18 = (runtime_gcBits *)((uint)prVar18 & 0xff);
  }
  piVar7 = *(int **)(unaff_R14 + 0x30);
  if (((*(sdword *)(piVar7 + 0x21) == 0) && (*(sdword *)(piVar7 + 0x1e) == 0)) &&
     (*piVar7 != unaff_R14)) {
    s_15.len = in_stack_ffffffffffffff08;
    s_15.str = in_stack_ffffffffffffff00;
                    // WARNING: Subroutine does not return
    runtime_throw(s_15);
  }
  ~r0_00 = (runtime_heapStatsDelta *)sl->mspan;
  if (cVar17 == '\0') {
    sl->mspan = (runtime_mspan *)0x0;
  }
  uVar11 = runtime_mheap_.sweepgen;
  bVar3 = ~r0_00->smallAllocCount[0];
  if ((bVar3 != 1) ||
     (sVar1 = runtime_mheap_.sweepgen - 1, *(sdword *)~r0_00->smallAllocCount != sVar1)) {
    dVar22 = *(dword *)~r0_00->smallAllocCount;
    runtime_printlock();
    s_11.len = in_stack_ffffffffffffff08;
    s_11.str = in_stack_ffffffffffffff00;
    runtime_printstring(s_11);
    runtime_printuint((uint)bVar3);
    s_12.len = in_stack_ffffffffffffff08;
    s_12.str = in_stack_ffffffffffffff00;
    runtime_printstring(s_12);
    runtime_printuint((uint)dVar22);
    s_13.len = in_stack_ffffffffffffff08;
    s_13.str = in_stack_ffffffffffffff00;
    runtime_printstring(s_13);
    runtime_printuint((uint)uVar11);
    runtime_printnl();
    runtime_printunlock();
    s_14.len = in_stack_ffffffffffffff08;
    s_14.str = in_stack_ffffffffffffff00;
                    // WARNING: Subroutine does not return
    runtime_throw(s_14);
  }
  ~r0_01 = prVar18;
  if (runtime_trace.enabled != false) {
    runtime_traceGCSweepSpan(~r0_00->inWorkBufs << 0xd);
    ~r0_01 = (runtime_gcBits *)((uint)prVar18 & 0xff);
  }
  siter.pprev = (runtime_special **)~r0_00->smallAllocCount;
  LOCK();
  runtime_mheap_.pagesSwept.value = runtime_mheap_.pagesSwept.value + ~r0_00->inWorkBufs;
  UNLOCK();
  prVar20 = *(runtime_special **)~r0_00->smallAllocCount;
  bVar3 = ~r0_00->smallAllocCount[0];
  uVar15 = *(uint *)~r0_00->smallAllocCount;
  local_78 = prVar20;
  siter.s = prVar20;
  do {
    prVar8 = siter.s;
    if (siter.s == (runtime_special *)0x0) {
      if ((prVar20 != (runtime_special *)0x0) && (*(int *)~r0_00->smallAllocCount == 0)) {
        uVar12 = ~r0_00->inStacks + 0x800000000000U >> 0x1a;
        if (0x3fffff < uVar12) {
                    // WARNING: Subroutine does not return
          runtime_panicIndexU();
        }
        uVar13 = (uint)~r0_00->inStacks >> 0xd;
        uVar14 = (uint)(((dword)uVar13 & 0x1fff) >> 3);
        if (0x3ff < uVar14) {
                    // WARNING: Subroutine does not return
          runtime_panicIndexU();
        }
        puVar2 = (*runtime_mheap_.arenas[0])[uVar12]->pageSpecials + uVar14;
        LOCK();
        *puVar2 = *puVar2 & ~(byte)(1 << ((byte)uVar13 & 7));
        UNLOCK();
      }
      if ((runtime_debug.allocfreetrace != 0) || (runtime_debug.clobberfree != 0)) {
        mbits.bytep = *(uint8 **)~r0_00->smallAllocCount;
        mbits.mask = 1;
        abits.bytep = (uint8 *)~r0_00->smallAllocCount[0];
        abits.mask = 1;
        abits.index = 0;
        for (i = 0; i < ~r0_00->largeAlloc; i = i + 1) {
          if (((*mbits.bytep & mbits.mask) == 0) &&
             ((abits.index < ~r0_00->tinyAllocCount || ((*abits.bytep & abits.mask) != 0)))) {
            p_00 = (void *)(*(int *)~r0_00->smallAllocCount * i + ~r0_00->inStacks);
            if (runtime_debug.allocfreetrace != 0) {
              runtime_tracefree(p_00,uVar15);
              ~r0_01 = (runtime_gcBits *)((uint)prVar18 & 0xff);
            }
            if (runtime_debug.clobberfree != 0) {
              for (i_3 = 0; i_3 < uVar15; i_3 = i_3 + 4) {
                *(undefined4 *)((int)p_00 + i_3) = 0xdeadbeef;
              }
            }
          }
          if (mbits.mask == 0x80) {
            mbits.bytep = mbits.bytep + 1;
            mbits.mask = 1;
          }
          else {
            mbits.mask = mbits.mask << 1;
          }
          if (abits.mask == 0x80) {
            abits.bytep = abits.bytep + 1;
            abits.mask = 1;
          }
          else {
            abits.mask = abits.mask << 1;
          }
          abits.index = abits.index + 1;
        }
      }
      uVar12 = ~r0_00->tinyAllocCount;
      if (uVar12 < ~r0_00->largeAlloc) {
        uVar13 = uVar12 >> 3;
        if ((byte)((~*(byte *)(~r0_00->smallAllocCount[0] + uVar13) &
                   *(byte *)(*(int *)~r0_00->smallAllocCount + uVar13)) >> ((byte)uVar12 & 7)) != 0)
        {
          local_80 = uVar13;
          runtime___mspan__reportZombies((runtime_mspan *)~r0_00);
          ~r0_01 = (runtime_gcBits *)((uint)prVar18 & 0xff);
          uVar13 = local_80;
        }
        while (uVar13 = uVar13 + 1, uVar13 < ~r0_00->largeAlloc + 7 >> 3) {
          if ((*(byte *)(*(int *)~r0_00->smallAllocCount + uVar13) &
              ~*(byte *)(~r0_00->smallAllocCount[0] + uVar13)) != 0) {
            runtime___mspan__reportZombies((runtime_mspan *)~r0_00);
            ~r0_01 = (runtime_gcBits *)((uint)prVar18 & 0xff);
          }
        }
      }
      uVar12 = ~r0_00->largeAlloc + 7 >> 3;
      uVar14 = 0;
      local_80 = uVar12;
      for (uVar13 = 0; uVar13 < uVar12; uVar13 = uVar13 + 8) {
        x_00 = *(uint64 *)(*(int *)~r0_00->smallAllocCount + uVar13);
        if (runtime_x86HasPOPCNT == false) {
          runtime_internal_sys_OnesCount64(x_00,(int)~r0_01);
          ~r0_01 = (runtime_gcBits *)((uint)prVar18 & 0xff);
          uVar12 = local_80;
          iVar21 = extraout_RAX;
        }
        else {
          iVar21 = POPCOUNT(x_00);
        }
        uVar14 = uVar14 + iVar21;
      }
      uVar5 = *(ushort *)~r0_00->smallAllocCount;
      dVar22 = (dword)uVar5 - (sdword)uVar14;
      uVar19 = (ushort)uVar14;
      uVar16 = (ushort)dVar22;
      if (uVar5 < uVar19) {
        local_80 = ~r0_00->largeAlloc;
        runtime_printlock();
        s_06.len = in_stack_ffffffffffffff08;
        s_06.str = in_stack_ffffffffffffff00;
        runtime_printstring(s_06);
        runtime_printuint(local_80);
        s_07.len = in_stack_ffffffffffffff08;
        s_07.str = in_stack_ffffffffffffff00;
        runtime_printstring(s_07);
        runtime_printuint(uVar14 & 0xffff);
        s_08.len = in_stack_ffffffffffffff08;
        s_08.str = in_stack_ffffffffffffff00;
        runtime_printstring(s_08);
        runtime_printuint((uint)uVar5);
        s_09.len = in_stack_ffffffffffffff08;
        s_09.str = in_stack_ffffffffffffff00;
        runtime_printstring(s_09);
        runtime_printuint((uint)(dVar22 & 0xffff));
        runtime_printnl();
        runtime_printunlock();
        s_10.len = in_stack_ffffffffffffff08;
        s_10.str = in_stack_ffffffffffffff00;
                    // WARNING: Subroutine does not return
        runtime_throw(s_10);
      }
      *(ushort *)~r0_00->smallAllocCount = uVar19;
      ~r0_00->tinyAllocCount = 0;
      *(undefined8 *)~r0_00->smallAllocCount = 0;
      if (runtime_trace.enabled != false) {
        piVar7 = (int *)(*(int *)(*(int *)(unaff_R14 + 0x30) + 0xd0) + 0x11f0);
        *piVar7 = *piVar7 + *(int *)~r0_00->smallAllocCount * (uint)(dVar22 & 0xffff);
      }
      ~r0_00->smallAllocCount[0] = *(uint64 *)~r0_00->smallAllocCount;
      runtime_newMarkBits(~r0_00->largeAlloc,~r0_01);
      *(undefined8 *)~r0_00->smallAllocCount = extraout_RAX_00;
      if (*(int *)~r0_00->smallAllocCount != 0) {
        runtime___mspan__refreshPinnerBits((runtime_mspan *)~r0_00);
      }
      runtime___mspan__refillAllocCache((runtime_mspan *)~r0_00,0);
      bVar4 = ~r0_00->smallAllocCount[0];
      if ((bVar4 != 1) || (sVar6 = *(sdword *)~r0_00->smallAllocCount, sVar6 != sVar1)) {
        dVar22 = *(dword *)~r0_00->smallAllocCount;
        runtime_printlock();
        s_02.len = in_stack_ffffffffffffff08;
        s_02.str = in_stack_ffffffffffffff00;
        runtime_printstring(s_02);
        runtime_printuint((uint)bVar4);
        s_03.len = in_stack_ffffffffffffff08;
        s_03.str = in_stack_ffffffffffffff00;
        runtime_printstring(s_03);
        runtime_printuint((uint)dVar22);
        s_04.len = in_stack_ffffffffffffff08;
        s_04.str = in_stack_ffffffffffffff00;
        runtime_printstring(s_04);
        runtime_printuint((uint)uVar11);
        runtime_printnl();
        runtime_printunlock();
        s_05.len = in_stack_ffffffffffffff08;
        s_05.str = in_stack_ffffffffffffff00;
                    // WARNING: Subroutine does not return
        runtime_throw(s_05);
      }
      if ((sVar6 == (uint32)(uVar11 + 1)) || (sVar6 == (uint32)(uVar11 + 3))) {
        s_01.len = in_stack_ffffffffffffff08;
        s_01.str = in_stack_ffffffffffffff00;
                    // WARNING: Subroutine does not return
        runtime_throw(s_01);
      }
      LOCK();
      *(uint32 *)~r0_00->smallAllocCount = uVar11;
      UNLOCK();
      if (~r0_00->smallAllocCount[0] == '\0') {
        if (bVar3 >> 1 == 0) {
          if (cVar17 == '\0') {
            if (uVar16 != 0) {
              runtime___consistentHeapStats__acquire(&runtime_memstats.heapStats,~r0_00);
              LOCK();
              *(int *)(extraout_RAX_02 + 0x270) = *(int *)(extraout_RAX_02 + 0x270) + 1;
              UNLOCK();
              LOCK();
              *(int *)(extraout_RAX_02 + 0x268) = *(int *)(extraout_RAX_02 + 0x268) + uVar15;
              UNLOCK();
              runtime___consistentHeapStats__release(&runtime_memstats.heapStats);
              LOCK();
              runtime_gcController.totalFree.value = runtime_gcController.totalFree.value + uVar15;
              UNLOCK();
              if (runtime_debug.efence < 1) {
                local_60._8_8_ = ~r0_00;
                local_60._0_8_ = runtime___sweepLocked__sweep___mheap__freeSpan_func3;
                local_50 = &runtime_mheap_;
                runtime_systemstack();
              }
              else {
                *(undefined8 *)~r0_00->smallAllocCount = 0;
                runtime_sysFault((void *)~r0_00->inStacks,uVar15);
              }
              return;
            }
            if (0x87 < bVar3) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            runtime___spanSet__push
                      ((runtime_spanSet *)
                       ((uint)bVar3 * 0xc0 + 0xc848a0 + (uint)(uVar11 >> 1 & 1) * 0x28),
                       (runtime_mspan *)~r0_00);
          }
        }
        else {
          if (uVar16 != 0) {
            ~r0_00->smallAllocCount[0] = 1;
            runtime___consistentHeapStats__acquire(&runtime_memstats.heapStats,~r0_00);
            if (0x43 < (uint)(int)(char)(bVar3 >> 1)) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            piVar7 = (int *)(extraout_RAX_01 + (char)(bVar3 >> 1) * 8 + 0x278);
            LOCK();
            *piVar7 = *piVar7 + (uint)uVar16;
            UNLOCK();
            runtime___consistentHeapStats__release(&runtime_memstats.heapStats);
            LOCK();
            runtime_gcController.totalFree.value =
                 runtime_gcController.totalFree.value +
                 (uint)uVar16 * *(int *)~r0_00->smallAllocCount;
            UNLOCK();
          }
          uVar15 = (uint)bVar3;
          if (cVar17 == '\0') {
            if (uVar19 == 0) {
              local_60._8_8_ = ~r0_00;
              local_60._0_8_ = runtime___sweepLocked__sweep___mheap__freeSpan_func2;
              local_50 = &runtime_mheap_;
              runtime_systemstack();
              return;
            }
            if (~r0_00->largeAlloc == (uVar14 & 0xffff)) {
              if (0x87 < uVar15) {
                    // WARNING: Subroutine does not return
                runtime_panicIndex();
              }
              runtime___spanSet__push
                        ((runtime_spanSet *)
                         (uVar15 * 0xc0 + 0xc848a0 + (uint)(uVar11 >> 1 & 1) * 0x28),
                         (runtime_mspan *)~r0_00);
            }
            else {
              if (0x87 < uVar15) {
                    // WARNING: Subroutine does not return
                runtime_panicIndex();
              }
              runtime___spanSet__push
                        ((runtime_spanSet *)
                         (uVar15 * 0xc0 + 0xc84850 + (uint)(uVar11 >> 1 & 1) * 0x28),
                         (runtime_mspan *)~r0_00);
            }
          }
        }
        return;
      }
      if (cVar17 != '\0') {
        s_00.len = in_stack_ffffffffffffff08;
        s_00.str = in_stack_ffffffffffffff00;
                    // WARNING: Subroutine does not return
        runtime_throw(s_00);
      }
      if (uVar19 == 0) {
        LOCK();
