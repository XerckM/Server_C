  }
  return;
}



void internal_abi___FuncType__StructType(internal_abi_StructType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__Uncommon(internal_abi_UncommonType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  if ((*(byte *)&~r0[1].Mcount & 1) != 0) {
    switch(*(byte *)((int)&~r0[1].Xcount + 1) & 0x1f) {
    case 0x11:
      break;
    case 0x12:
      break;
    case 0x13:
      break;
    case 0x14:
      break;
    case 0x15:
      break;
    case 0x16:
      break;
    case 0x17:
      break;
    case 0x19:
    }
  }
  return;
}



void internal_abi___InterfaceType__Align(int ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__ArrayType(internal_abi_ArrayType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__ChanDir(internal_abi_ChanDir ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__Common(internal_abi_Type *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__Elem(internal_abi_Type *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void internal_abi___InterfaceType__ExportedMethods(__internal_abi_Method ~r0)

{
  __internal_abi_Method **pp_Var1;
  __internal_abi_Method ~r0_00;
  internal_abi_Type *in_RAX;
  undefined8 unaff_RBP;
  int unaff_R14;
  int unaff_retaddr;
  internal_abi_Method *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = (internal_abi_Method *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (internal_abi_Type *)~r0.array;
  }
  pp_Var1 = *(__internal_abi_Method ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__internal_abi_Method **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__internal_abi_Method *)&stack0xfffffffffffffff0;
  }
  ~r0_00.len = unaff_RBP;
  ~r0_00.array = in_stack_fffffffffffffff0;
  ~r0_00.cap = unaff_retaddr;
  internal_abi___Type__ExportedMethods(in_RAX,~r0_00);
  return;
}



void internal_abi___InterfaceType__FieldAlign(int ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__FuncType(internal_abi_FuncType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__GcSlice(uintptr begin,uintptr end,__uint8 ~r0)

{
  __uint8 **pp_Var1;
  uint in_RCX;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = (uint8 *)begin;
    ~r0.len = end;
    ~r0.cap = in_RCX;
    runtime_morestack_noctxt();
    begin = (uintptr)~r0.array;
    in_RCX = ~r0.cap;
    end = ~r0.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffe8;
  }
  if ((int)in_RCX < 0) {
                    // WARNING: Subroutine does not return
    runtime_panicunsafeslicelen();
  }
  if ((uint)-*(int *)(begin + 0x20) < in_RCX) {
    if (*(int *)(begin + 0x20) != 0) {
                    // WARNING: Subroutine does not return
      runtime_panicunsafeslicelen();
    }
                    // WARNING: Subroutine does not return
    runtime_panicunsafeslicenilptr();
  }
  if (end <= in_RCX) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceBU();
}



void internal_abi___InterfaceType__HasName(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__IfaceIndir(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__InterfaceType(internal_abi_InterfaceType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__IsDirectIface(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__Key(internal_abi_Type *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__Kind(internal_abi_Kind ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__Len(int ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__MapType(internal_abi_MapType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__Pointers(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__Size(uintptr ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__StructType(internal_abi_StructType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___InterfaceType__Uncommon(internal_abi_UncommonType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  if ((*(byte *)&~r0[1].Mcount & 1) != 0) {
    switch(*(byte *)((int)&~r0[1].Xcount + 1) & 0x1f) {
    case 0x11:
      break;
    case 0x12:
      break;
    case 0x13:
      break;
    case 0x14:
      break;
    case 0x15:
      break;
    case 0x16:
      break;
    case 0x17:
      break;
    case 0x19:
    }
  }
  return;
}



void internal_abi___PtrType__Align(int ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__ArrayType(internal_abi_ArrayType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__ChanDir(internal_abi_ChanDir ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__Common(internal_abi_Type *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void internal_abi___PtrType__ExportedMethods(__internal_abi_Method ~r0)

{
  __internal_abi_Method **pp_Var1;
  __internal_abi_Method ~r0_00;
  internal_abi_Type *in_RAX;
  undefined8 unaff_RBP;
  int unaff_R14;
  int unaff_retaddr;
  internal_abi_Method *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = (internal_abi_Method *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (internal_abi_Type *)~r0.array;
  }
  pp_Var1 = *(__internal_abi_Method ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__internal_abi_Method **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__internal_abi_Method *)&stack0xfffffffffffffff0;
  }
  ~r0_00.len = unaff_RBP;
  ~r0_00.array = in_stack_fffffffffffffff0;
  ~r0_00.cap = unaff_retaddr;
  internal_abi___Type__ExportedMethods(in_RAX,~r0_00);
  return;
}



void internal_abi___PtrType__FieldAlign(int ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__FuncType(internal_abi_FuncType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__GcSlice(uintptr begin,uintptr end,__uint8 ~r0)

{
  __uint8 **pp_Var1;
  uint in_RCX;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = (uint8 *)begin;
    ~r0.len = end;
    ~r0.cap = in_RCX;
    runtime_morestack_noctxt();
    begin = (uintptr)~r0.array;
    in_RCX = ~r0.cap;
    end = ~r0.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffe8;
  }
  if ((int)in_RCX < 0) {
                    // WARNING: Subroutine does not return
    runtime_panicunsafeslicelen();
  }
  if ((uint)-*(int *)(begin + 0x20) < in_RCX) {
    if (*(int *)(begin + 0x20) != 0) {
                    // WARNING: Subroutine does not return
      runtime_panicunsafeslicelen();
    }
                    // WARNING: Subroutine does not return
    runtime_panicunsafeslicenilptr();
  }
  if (end <= in_RCX) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceBU();
}



void internal_abi___PtrType__HasName(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__IfaceIndir(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__InterfaceType(internal_abi_InterfaceType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__IsDirectIface(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__Key(internal_abi_Type *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__Kind(internal_abi_Kind ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__Len(int ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__MapType(internal_abi_MapType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__NumMethod(int ~r0)

{
  int *piVar1;
  int in_RBX;
  int extraout_RBX;
  int unaff_R14;
  internal_abi_Type *in_stack_00000008;
  undefined auStack_10 [8];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = (internal_abi_Type *)~r0;
    runtime_morestack_noctxt();
    ~r0 = (int)in_stack_00000008;
    in_RBX = extraout_RBX;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((internal_abi_Type **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  internal_abi___Type__NumMethod((internal_abi_Type *)~r0,in_RBX);
  return;
}



void internal_abi___PtrType__Pointers(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__Size(uintptr ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__StructType(internal_abi_StructType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___PtrType__Uncommon(internal_abi_UncommonType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  if ((*(byte *)&~r0[1].Mcount & 1) != 0) {
    switch(*(byte *)((int)&~r0[1].Xcount + 1) & 0x1f) {
    case 0x11:
      break;
    case 0x12:
      break;
    case 0x13:
      break;
    case 0x14:
      break;
    case 0x15:
      break;
    case 0x16:
      break;
    case 0x17:
      break;
    case 0x19:
    }
  }
  return;
}



void type__eq_internal_abi_UncommonType
               (internal_abi_UncommonType *p,internal_abi_UncommonType *q,bool r)

{
  if (((q->PkgPath == p->PkgPath) && (q->Mcount == p->Mcount)) && (q->Xcount == p->Xcount)) {
    return;
  }
  return;
}



void type__eq_internal_abi_RegArgs(internal_abi_RegArgs *p,internal_abi_RegArgs *q,bool r)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_memequal();
  return;
}



void internal_cpu_Initialize(string env)

{
  int unaff_R14;
  string in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  internal_cpu_doinit();
  internal_cpu_processOptions(in_stack_ffffffffffffffe8);
  return;
}



void internal_cpu_processOptions(string env)

{
  int iVar1;
  char extraout_AL;
  sdword *in_RAX;
  sdword *psVar2;
  internal_cpu_option *piVar3;
  int i_2;
  int i_1;
  int i;
  int iVar4;
  int i_3;
  int i_4;
  uint in_RBX;
  uint uVar5;
  bool enable;
  uint uVar6;
  int unaff_R14;
  string in_stack_ffffffffffffff78;
  
  while (&stack0xfffffffffffffff8 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
LAB_00405728:
  do {
    do {
      psVar2 = in_RAX;
      iVar1 = internal_cpu_options.len;
      if (in_RBX == 0) {
        piVar3 = internal_cpu_options.array;
        for (iVar4 = 0; iVar4 < iVar1; iVar4 = iVar4 + 1) {
          if (piVar3->Specified != false) {
            if ((piVar3->Enable == false) || (*piVar3->Feature != false)) {
              *piVar3->Feature = piVar3->Enable;
            }
            else {
              runtime_printlock();
              runtime_printstring(in_stack_ffffffffffffff78);
              runtime_printstring(in_stack_ffffffffffffff78);
              runtime_printstring(in_stack_ffffffffffffff78);
              runtime_printunlock();
            }
          }
          piVar3 = piVar3 + 1;
        }
        return;
      }
      for (i_3 = 0; i_3 < (int)in_RBX; i_3 = i_3 + 1) {
        i = i_3;
        if (*(char *)((int)psVar2 + i_3) == ',') goto LAB_00405740;
      }
      i = -1;
LAB_00405740:
      if (i < 0) {
        in_RAX = (sdword *)0x0;
        i = in_RBX;
        in_RBX = 0;
      }
      else {
        if (in_RBX < (uint)i) {
                    // WARNING: Subroutine does not return
          runtime_panicSliceAlen();
        }
        if (in_RBX < i + 1U) {
                    // WARNING: Subroutine does not return
          runtime_panicSliceB();
        }
        in_RBX = (in_RBX - i) - 1;
        in_RAX = (sdword *)((i + 1U & (int)-in_RBX >> 0x3f) + (int)psVar2);
      }
    } while ((i < 4) || (*psVar2 != 0x2e757063));
    for (i_4 = 0; i_4 < i; i_4 = i_4 + 1) {
      if (*(char *)((int)psVar2 + i_4) == '=') goto LAB_0040579c;
    }
    i_4 = 0xffffffffffffffff;
LAB_0040579c:
    if (-1 < i_4) {
      if ((uint)i < (uint)i_4) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceAlen();
      }
      if ((uint)i_4 < 4) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      uVar5 = (uint)((dword)((int)-(i_4 - 4U) >> 0x3f) & 4);
      if ((uint)i < i_4 + 1U) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      iVar4 = i - i_4;
      uVar6 = i_4 + 1U & -(iVar4 + -1) >> 0x3f;
      if (iVar4 == 3) {
        if (*(short *)((int)psVar2 + uVar6) != 0x6e6f) {
LAB_004058a5:
          runtime_printlock();
          runtime_printstring(in_stack_ffffffffffffff78);
          runtime_printstring(in_stack_ffffffffffffff78);
          runtime_printstring(in_stack_ffffffffffffff78);
          runtime_printstring(in_stack_ffffffffffffff78);
          runtime_printstring(in_stack_ffffffffffffff78);
          runtime_printunlock();
          goto LAB_00405728;
        }
      }
      else if (((iVar4 != 4) || (*(short *)((int)psVar2 + uVar6) != 0x666f)) ||
              (*(char *)((int)psVar2 + uVar6 + 2) != 'f')) goto LAB_004058a5;
      if (((i_4 == 7) && (*(short *)((int)psVar2 + uVar5) == 0x6c61)) &&
         (*(char *)((int)psVar2 + uVar5 + 2) == 'l')) {
        for (i_1 = 0; i_1 < iVar1; i_1 = i_1 + 1) {
          if ((uint)internal_cpu_options.len <= (uint)i_1) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          internal_cpu_options.array[i_1].Specified = true;
          if ((uint)internal_cpu_options.len <= (uint)i_1) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          internal_cpu_options.array[i_1].Enable = iVar4 == 3;
        }
      }
      else {
        for (i_2 = 0; i_2 < iVar1; i_2 = i_2 + 1) {
          if ((uint)internal_cpu_options.len <= (uint)i_2) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          if ((internal_cpu_options.array[i_2].Name.len == i_4 - 4U) &&
             (runtime_memequal(), extraout_AL != '\0')) {
            if ((uint)internal_cpu_options.len <= (uint)i_2) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            internal_cpu_options.array[i_2].Specified = true;
            if ((uint)internal_cpu_options.len <= (uint)i_2) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
