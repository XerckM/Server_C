  int in_RBX;
  int pos;
  int iVar4;
  int val;
  int unaff_R14;
  undefined4 local_9c;
  undefined local_88 [16];
  undefined local_78 [8];
  undefined8 uStack_70;
  undefined4 uStack_60;
  undefined4 uStack_5c;
  undefined local_58 [16];
  undefined local_48 [8];
  undefined8 uStack_40;
  undefined local_38 [12];
  undefined4 uStack_2c;
  undefined local_28 [8];
  undefined8 uStack_20;
  undefined local_18 [12];
  undefined4 uStack_c;
  
  while (local_38 + 8 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  local_9c = 0;
  uVar3 = 0;
  digLen = 0;
  pos = 0;
  iVar4 = 0;
  do {
    if (in_RBX <= (int)uVar3) {
      if (pos < 3) {
        uStack_20 = 0x16;
        local_28 = (undefined  [8])&DAT_008ba36b;
        runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,&DAT_008ba36b);
        return;
      }
      return;
    }
    bVar1 = *(byte *)(in_RAX + uVar3);
    uStack_60 = (undefined4)in_RBX;
    uStack_5c = (undefined4)((uint)in_RBX >> 0x20);
    if (bVar1 < 0x30) {
      if (bVar1 != 0x2e) goto LAB_005c11f2;
      if (((uVar3 == 0) || (uVar3 == in_RBX - 1U)) || (*(char *)((uVar3 - 1) + in_RAX) == '.')) {
        local_58._8_8_ = 0x27;
        local_58._0_8_ = &DAT_008c420b;
        uStack_40 = in_RBX - uVar3;
        local_48 = (undefined  [8])((uVar3 & -uStack_40 >> 0x3f) + in_RAX);
        auVar2 = _local_48;
        local_38._8_4_ = uStack_60;
        local_38._0_8_ = in_RAX;
        uStack_2c = uStack_5c;
        uStack_20._0_4_ = 0x27;
        local_28 = (undefined  [8])&DAT_008c420b;
        uStack_20._4_4_ = 0;
        uStack_40._4_4_ = (undefined4)((uint)uStack_40 >> 0x20);
        local_18._8_4_ = (undefined4)uStack_40;
        local_18._0_8_ = local_48;
        uStack_c = uStack_40._4_4_;
        _local_48 = auVar2;
        runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,(void *)local_48);
        return;
      }
      if (pos == 3) {
        uStack_20 = 0x15;
        local_28 = (undefined  [8])&DAT_008b9a2a;
        runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,&DAT_008b9a2a);
        return;
      }
      if (3 < (uint)pos) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      *(char *)((int)&local_9c + pos) = (char)iVar4;
      pos = pos + 1;
      digLen = 0;
      iVar4 = 0;
    }
    else {
      if (0x39 < bVar1) {
LAB_005c11f2:
        local_88._8_8_ = 0x14;
        local_88._0_8_ = &DAT_008b9207;
        uStack_70 = in_RBX - uVar3;
        local_78 = (undefined  [8])((uVar3 & -uStack_70 >> 0x3f) + in_RAX);
        auVar2 = _local_78;
        local_38._8_4_ = uStack_60;
        local_38._0_8_ = in_RAX;
        uStack_2c = uStack_5c;
        uStack_20._0_4_ = 0x14;
        local_28 = (undefined  [8])&DAT_008b9207;
        uStack_20._4_4_ = 0;
        uStack_70._4_4_ = (undefined4)((uint)uStack_70 >> 0x20);
        local_18._8_4_ = (undefined4)uStack_70;
        local_18._0_8_ = local_78;
        uStack_c = uStack_70._4_4_;
        _local_78 = auVar2;
        runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,(void *)local_78);
        return;
      }
      if ((digLen == 1) && (iVar4 == 0)) {
        uStack_20 = 0x26;
        local_28 = (undefined  [8])&DAT_008c3a89;
        runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,&DAT_008c3a89);
        return;
      }
      iVar4 = (uint)bVar1 + iVar4 * 10 + -0x30;
      if (0xff < iVar4) {
        uStack_20 = 0x19;
        local_28 = (undefined  [8])&DAT_008bbf23;
        runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,&DAT_008bbf23);
        return;
      }
      digLen = digLen + 1;
    }
    uVar3 = uVar3 + 1;
  } while( true );
}



void net_netip_parseIPv6(string in,net_netip_Addr ~r0,error ~r1)

{
  char *pcVar1;
  char cVar2;
  string s;
  net_netip_Addr ip;
  net_netip_Addr ip_00;
  net_netip_Addr ~r0_00;
  net_netip_Addr ip_01;
  string zone;
  string zone_00;
  error err;
  net_netip_Addr ~r0_01;
  net_netip_Addr ~r0_02;
  undefined auVar3 [16];
  char *in_RAX;
  int ellipsis;
  int i;
  internal_intern_Value *piVar4;
  internal_intern_Value *piVar5;
  int iVar6;
  int j;
  undefined4 extraout_EBX;
  uint8 *in_RBX;
  int j_1;
  int off;
  uint32 acc;
  undefined8 extraout_RSI;
  uint8 c;
  int extraout_RDI;
  runtime_itab *prVar7;
  uint uVar8;
  int unaff_R14;
  undefined4 uVar9;
  undefined4 uVar10;
  undefined4 uVar11;
  undefined4 uVar12;
  undefined4 uVar13;
  undefined4 uVar14;
  undefined4 uVar15;
  undefined4 uVar16;
  undefined4 uVar17;
  undefined4 uVar18;
  undefined uVar19;
  undefined7 in_stack_fffffffffffffdb9;
  uint8 *in_stack_fffffffffffffdc0;
  internal_intern_Value *in_stack_fffffffffffffdc8;
  uint64 in_stack_fffffffffffffdd0;
  uint8 *in_stack_fffffffffffffdd8;
  internal_intern_Value *in_stack_fffffffffffffde0;
  uint8 uStack_209;
  undefined local_208 [2];
  undefined auStack_206 [2];
  undefined auStack_204 [2];
  undefined uStack_202;
  undefined uStack_201;
  undefined8 uStack_200;
  undefined8 local_1f8;
  char *local_1f0;
  uint8 auStack_1e1 [9];
  undefined local_1d8 [16];
  undefined local_1c8 [8];
  undefined8 uStack_1c0;
  undefined local_1a8 [16];
  undefined local_198 [8];
  undefined8 uStack_190;
  undefined local_178 [16];
  undefined local_168 [8];
  undefined8 uStack_160;
  undefined local_148 [16];
  undefined local_138 [32];
  undefined local_118 [16];
  undefined local_108 [8];
  undefined8 uStack_100;
  undefined local_e8 [16];
  undefined local_d8 [32];
  undefined local_b8 [16];
  undefined local_a8 [32];
  undefined local_88 [16];
  undefined local_78 [32];
  undefined local_58 [16];
  undefined local_48 [8];
  undefined8 uStack_40;
  undefined local_38 [12];
  undefined4 uStack_2c;
  undefined local_28 [8];
  undefined8 uStack_20;
  undefined local_18 [12];
  undefined4 uStack_c;
  
  while (local_1d8 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar13 = SUB84(in_RAX,0);
  uVar15 = (undefined4)((uint)in_RAX >> 0x20);
  uVar17 = SUB84(in_RBX,0);
  uVar18 = (undefined4)((uint)in_RBX >> 0x20);
  uVar19 = 0x25;
  uVar14 = uVar17;
  uVar16 = uVar18;
  internal_bytealg_IndexByteString();
  uVar9 = 0;
  uVar10 = 0;
  uVar11 = 0;
  uVar12 = 0;
  if (in_stack_fffffffffffffdc0 == (uint8 *)0xffffffffffffffff) {
    prVar7 = (runtime_itab *)0x0;
    local_1f8 = (char *)0x0;
  }
  else {
    if (in_RBX < in_stack_fffffffffffffdc0) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAlen();
    }
    if (in_RBX < in_stack_fffffffffffffdc0 + 1) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    iVar6 = (int)in_RBX - (int)in_stack_fffffffffffffdc0;
    prVar7 = (runtime_itab *)(iVar6 + -1);
    local_1f8 = in_RAX + (-(int)prVar7 >> 0x3f & (uint)(in_stack_fffffffffffffdc0 + 1));
    in_RBX = in_stack_fffffffffffffdc0;
    if (iVar6 == 1) {
      _local_18 = ZEXT816(0);
      uStack_20 = 0x1f;
      local_28 = (undefined  [8])&DAT_008bf9ca;
      runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,&DAT_008bf9ca);
      return;
    }
  }
  local_208[0] = 0;
  local_208[1] = 0;
  auStack_206[0] = 0;
  auStack_206[1] = 0;
  auStack_204[0] = 0;
  auStack_204[1] = 0;
  uStack_202 = 0;
  uStack_201 = 0;
  uStack_200._0_1_ = 0;
  uStack_200._1_1_ = 0;
  uStack_200._2_1_ = 0;
  uStack_200._3_1_ = 0;
  uStack_200._4_1_ = 0;
  uStack_200._5_1_ = 0;
  uStack_200._6_1_ = 0;
  uStack_200._7_1_ = 0;
  local_48 = (undefined  [8])in_RAX;
  if ((int)in_RBX < 2) {
    ellipsis = -1;
  }
  else if (*in_RAX == ':') {
    if (in_RAX[1] == ':') {
      if (in_RBX == (uint8 *)0x2) {
        ip.addr.hi._4_4_ = uVar15;
        ip.addr.hi._0_4_ = uVar13;
        ip.addr.lo._0_4_ = uVar14;
        ip.addr.lo._4_4_ = uVar16;
        ip.z._0_1_ = uVar19;
        ip.z._1_7_ = in_stack_fffffffffffffdb9;
        zone.len = (int)in_stack_fffffffffffffdc8;
        zone.str = in_stack_fffffffffffffdc0;
        ~r0_01.addr.lo = (uint64)in_stack_fffffffffffffdd8;
        ~r0_01.addr.hi = in_stack_fffffffffffffdd0;
        ~r0_01.z = in_stack_fffffffffffffde0;
        net_netip_Addr_WithZone(ip,zone,~r0_01);
        return;
      }
      ellipsis = 0;
      local_48 = (undefined  [8])(in_RAX + ((dword)(-(int)(in_RBX + -2) >> 0x3f) & 2));
      in_RBX = in_RBX + -2;
    }
    else {
      ellipsis = -1;
    }
  }
  else {
    ellipsis = -1;
  }
  piVar4 = (internal_intern_Value *)0x0;
  do {
    do {
      piVar5 = piVar4;
      local_138._0_8_ = local_48;
      if (0xf < (int)piVar4) goto LAB_005c1640;
      off = 0;
      acc = 0;
      while( true ) {
        uStack_40._0_4_ = SUB84(in_RBX,0);
        local_18._8_4_ = (undefined4)uStack_40;
        uStack_40._4_4_ = (undefined4)((uint)in_RBX >> 0x20);
        uStack_c = uStack_40._4_4_;
        if ((int)in_RBX <= off) break;
        cVar2 = *(char *)((int)local_48 + off);
        if ((byte)(cVar2 - 0x30U) < 10) {
          acc = acc * 0x10 + (dword)(byte)(cVar2 - 0x30U);
        }
        else if ((byte)(cVar2 + 0x9fU) < 6) {
          acc = acc * 0x10 + (dword)(byte)(cVar2 + 0xa9);
        }
        else {
          if (5 < (byte)(cVar2 + 0xbfU)) break;
          acc = acc * 0x10 + (dword)(byte)(cVar2 - 0x37);
        }
        if (0xffff < acc) {
          local_58._8_8_ = 0x1b;
          local_58._0_8_ = &DAT_008bd291;
          uStack_40 = in_RBX;
          local_38._8_4_ = uVar17;
          local_38._0_8_ = in_RAX;
          uStack_2c = uVar18;
          uStack_20._0_4_ = 0x1b;
          local_28 = (undefined  [8])&DAT_008bd291;
          uStack_20._4_4_ = 0;
          local_18._0_8_ = local_48;
          runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,&DAT_008bd291);
          return;
        }
        off = off + 1;
      }
      if (off == 0) {
        local_88._8_8_ = 0x37;
        local_88._0_8_ = &DAT_008ca26d;
        local_78._8_8_ = in_RBX;
        local_78._0_8_ = local_48;
        local_38._8_4_ = uVar17;
        local_38._0_8_ = in_RAX;
        uStack_2c = uVar18;
        uStack_20._0_4_ = 0x37;
        local_28 = (undefined  [8])&DAT_008ca26d;
        uStack_20._4_4_ = 0;
        local_18._0_8_ = local_48;
        runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,&DAT_008ca26d);
        return;
      }
      if (off < (int)in_RBX) {
        if (in_RBX <= (uint)off) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        if (*(char *)((int)local_48 + off) == '.') {
          if ((ellipsis < 0) && (piVar4 != (internal_intern_Value *)0xc)) {
            local_b8._8_8_ = 0x44;
            local_b8._0_8_ =
                 "embedded IPv4 address must replace the final 2 fields of the addressinvalid descriptor: using edition features in a proto with syntax %sextension %v does not implement protoreflect.ExtensionTypeDescriptor2695994666715063979466701508701963067355791626002630814351006629888126959946667150639794667015087019625940457807714424391721682722368061big: invalid 2nd argument to Int.Jacobi: need odd integer but got %sreflect: embedded interface with unexported method(s) not implementedtoo many hex fields to fit an embedded IPv4 at the end of the addressedwards25519: internal error: setShortBytes called with a long stringblockingPicker: the picked transport is not ready, loop back to repickgrpc: received message after decompression larger than max (%d vs. %d)invalid retry throttling config: maxTokens (%v) out of range (0, 1000]sync/atomic: compare and swap of inconsistently typed value into Valuebytes.Buffer: UnreadByte: previous operation was not a successful readgot %s for stream %d; expected CONTINUATION following %s for stream %dx509: certificate relies on legacy Common Name field, use SANs insteadtransport: set send compressor called after headers sent or stream donegrpc: error unmarshalling service config %s due to methodConfig[%d]: %vtoo many concurrent operations on a single file or socket (max 1048575)json: invalid use of ,string struct tag, trying to unmarshal %q into %vdynamic table size update MUST occur at the beginning of a header blockx509: issuer has name constraints but leaf doesn\'t have a SAN extensiongrpc: Server.RegisterService found duplicate service registration for %qreflect: embedded type with methods not implemented for non-pointer typecrypto/ecdh: internal error: nistec ScalarBaseMult returned the identityReceived a RST_STREAM frame with code %q, but found no mapped gRPC statusbytes.Buffer: UnreadRune: previous operation was not a successful ReadRuneheader list size to send violates the maximum size (%d bytes) set by serverHeader list size to send violates the maximum size (%d bytes) set by clienttran..." /* TRUNCATED STRING LITERAL */
            ;
            local_a8._8_8_ = in_RBX;
            local_a8._0_8_ = local_48;
            local_38._8_4_ = uVar17;
            local_38._0_8_ = in_RAX;
            uStack_2c = uVar18;
            uStack_20._0_4_ = 0x44;
            local_28 = (undefined  [8])
                       "embedded IPv4 address must replace the final 2 fields of the addressinvalid descriptor: using edition features in a proto with syntax %sextension %v does not implement protoreflect.ExtensionTypeDescriptor2695994666715063979466701508701963067355791626002630814351006629888126959946667150639794667015087019625940457807714424391721682722368061big: invalid 2nd argument to Int.Jacobi: need odd integer but got %sreflect: embedded interface with unexported method(s) not implementedtoo many hex fields to fit an embedded IPv4 at the end of the addressedwards25519: internal error: setShortBytes called with a long stringblockingPicker: the picked transport is not ready, loop back to repickgrpc: received message after decompression larger than max (%d vs. %d)invalid retry throttling config: maxTokens (%v) out of range (0, 1000]sync/atomic: compare and swap of inconsistently typed value into Valuebytes.Buffer: UnreadByte: previous operation was not a successful readgot %s for stream %d; expected CONTINUATION following %s for stream %dx509: certificate relies on legacy Common Name field, use SANs insteadtransport: set send compressor called after headers sent or stream donegrpc: error unmarshalling service config %s due to methodConfig[%d]: %vtoo many concurrent operations on a single file or socket (max 1048575)json: invalid use of ,string struct tag, trying to unmarshal %q into %vdynamic table size update MUST occur at the beginning of a header blockx509: issuer has name constraints but leaf doesn\'t have a SAN extensiongrpc: Server.RegisterService found duplicate service registration for %qreflect: embedded type with methods not implemented for non-pointer typecrypto/ecdh: internal error: nistec ScalarBaseMult returned the identityReceived a RST_STREAM frame with code %q, but found no mapped gRPC statusbytes.Buffer: UnreadRune: previous operation was not a successful ReadRuneheader list size to send violates the maximum size (%d bytes) set by serverHeader list size to send violates the maximum size (%d bytes) set by clienttran..." /* TRUNCATED STRING LITERAL */
            ;
            uStack_20._4_4_ = 0;
            local_18._0_8_ = local_48;
            runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,
                          "embedded IPv4 address must replace the final 2 fields of the addressinvalid descriptor: using edition features in a proto with syntax %sextension %v does not implement protoreflect.ExtensionTypeDescriptor2695994666715063979466701508701963067355791626002630814351006629888126959946667150639794667015087019625940457807714424391721682722368061big: invalid 2nd argument to Int.Jacobi: need odd integer but got %sreflect: embedded interface with unexported method(s) not implementedtoo many hex fields to fit an embedded IPv4 at the end of the addressedwards25519: internal error: setShortBytes called with a long stringblockingPicker: the picked transport is not ready, loop back to repickgrpc: received message after decompression larger than max (%d vs. %d)invalid retry throttling config: maxTokens (%v) out of range (0, 1000]sync/atomic: compare and swap of inconsistently typed value into Valuebytes.Buffer: UnreadByte: previous operation was not a successful readgot %s for stream %d; expected CONTINUATION following %s for stream %dx509: certificate relies on legacy Common Name field, use SANs insteadtransport: set send compressor called after headers sent or stream donegrpc: error unmarshalling service config %s due to methodConfig[%d]: %vtoo many concurrent operations on a single file or socket (max 1048575)json: invalid use of ,string struct tag, trying to unmarshal %q into %vdynamic table size update MUST occur at the beginning of a header blockx509: issuer has name constraints but leaf doesn\'t have a SAN extensiongrpc: Server.RegisterService found duplicate service registration for %qreflect: embedded type with methods not implemented for non-pointer typecrypto/ecdh: internal error: nistec ScalarBaseMult returned the identityReceived a RST_STREAM frame with code %q, but found no mapped gRPC statusbytes.Buffer: UnreadRune: previous operation was not a successful ReadRuneheader list size to send violates the maximum size (%d bytes) set by serverHeader list size to send violates the maximum size (%d bytes) set by clienttran..." /* TRUNCATED STRING LITERAL */
                         );
            return;
          }
          piVar5 = (internal_intern_Value *)((int)&(piVar4->cmpVal)._type + 4);
          if (0x10 < (int)piVar5) {
            local_e8._8_8_ = 0x45;
            local_e8._0_8_ =
                 "too many hex fields to fit an embedded IPv4 at the end of the addressedwards25519: internal error: setShortBytes called with a long stringblockingPicker: the picked transport is not ready, loop back to repickgrpc: received message after decompression larger than max (%d vs. %d)invalid retry throttling config: maxTokens (%v) out of range (0, 1000]sync/atomic: compare and swap of inconsistently typed value into Valuebytes.Buffer: UnreadByte: previous operation was not a successful readgot %s for stream %d; expected CONTINUATION following %s for stream %dx509: certificate relies on legacy Common Name field, use SANs insteadtransport: set send compressor called after headers sent or stream donegrpc: error unmarshalling service config %s due to methodConfig[%d]: %vtoo many concurrent operations on a single file or socket (max 1048575)json: invalid use of ,string struct tag, trying to unmarshal %q into %vdynamic table size update MUST occur at the beginning of a header blockx509: issuer has name constraints but leaf doesn\'t have a SAN extensiongrpc: Server.RegisterService found duplicate service registration for %qreflect: embedded type with methods not implemented for non-pointer typecrypto/ecdh: internal error: nistec ScalarBaseMult returned the identityReceived a RST_STREAM frame with code %q, but found no mapped gRPC statusbytes.Buffer: UnreadRune: previous operation was not a successful ReadRuneheader list size to send violates the maximum size (%d bytes) set by serverHeader list size to send violates the maximum size (%d bytes) set by clienttransport: http2Server.HandleStreams received bogus greeting from client: %qtransport: http2Server.HandleStreams saw invalid preface type %T from clienttransport: trying to send header list size larger than the limit set by peergrpc: credentials.Bundle may not be used with individual TransportCredentialsClientConn\'s authority from transport creds %q and dial option %q don\'t matchMapIter.Next called on an iterator that does not have an associated map Valuereflect: embedded type..." /* TRUNCATED STRING LITERAL */
            ;
            local_d8._8_8_ = in_RBX;
            local_d8._0_8_ = local_48;
            local_38._8_4_ = uVar17;
            local_38._0_8_ = in_RAX;
            uStack_2c = uVar18;
            uStack_20._0_4_ = 0x45;
            local_28 = (undefined  [8])
                       "too many hex fields to fit an embedded IPv4 at the end of the addressedwards25519: internal error: setShortBytes called with a long stringblockingPicker: the picked transport is not ready, loop back to repickgrpc: received message after decompression larger than max (%d vs. %d)invalid retry throttling config: maxTokens (%v) out of range (0, 1000]sync/atomic: compare and swap of inconsistently typed value into Valuebytes.Buffer: UnreadByte: previous operation was not a successful readgot %s for stream %d; expected CONTINUATION following %s for stream %dx509: certificate relies on legacy Common Name field, use SANs insteadtransport: set send compressor called after headers sent or stream donegrpc: error unmarshalling service config %s due to methodConfig[%d]: %vtoo many concurrent operations on a single file or socket (max 1048575)json: invalid use of ,string struct tag, trying to unmarshal %q into %vdynamic table size update MUST occur at the beginning of a header blockx509: issuer has name constraints but leaf doesn\'t have a SAN extensiongrpc: Server.RegisterService found duplicate service registration for %qreflect: embedded type with methods not implemented for non-pointer typecrypto/ecdh: internal error: nistec ScalarBaseMult returned the identityReceived a RST_STREAM frame with code %q, but found no mapped gRPC statusbytes.Buffer: UnreadRune: previous operation was not a successful ReadRuneheader list size to send violates the maximum size (%d bytes) set by serverHeader list size to send violates the maximum size (%d bytes) set by clienttransport: http2Server.HandleStreams received bogus greeting from client: %qtransport: http2Server.HandleStreams saw invalid preface type %T from clienttransport: trying to send header list size larger than the limit set by peergrpc: credentials.Bundle may not be used with individual TransportCredentialsClientConn\'s authority from transport creds %q and dial option %q don\'t matchMapIter.Next called on an iterator that does not have an associated map Valuereflect: embedded type..." /* TRUNCATED STRING LITERAL */
            ;
            uStack_20._4_4_ = 0;
            local_18._0_8_ = local_48;
            runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,
                          "too many hex fields to fit an embedded IPv4 at the end of the addressedwards25519: internal error: setShortBytes called with a long stringblockingPicker: the picked transport is not ready, loop back to repickgrpc: received message after decompression larger than max (%d vs. %d)invalid retry throttling config: maxTokens (%v) out of range (0, 1000]sync/atomic: compare and swap of inconsistently typed value into Valuebytes.Buffer: UnreadByte: previous operation was not a successful readgot %s for stream %d; expected CONTINUATION following %s for stream %dx509: certificate relies on legacy Common Name field, use SANs insteadtransport: set send compressor called after headers sent or stream donegrpc: error unmarshalling service config %s due to methodConfig[%d]: %vtoo many concurrent operations on a single file or socket (max 1048575)json: invalid use of ,string struct tag, trying to unmarshal %q into %vdynamic table size update MUST occur at the beginning of a header blockx509: issuer has name constraints but leaf doesn\'t have a SAN extensiongrpc: Server.RegisterService found duplicate service registration for %qreflect: embedded type with methods not implemented for non-pointer typecrypto/ecdh: internal error: nistec ScalarBaseMult returned the identityReceived a RST_STREAM frame with code %q, but found no mapped gRPC statusbytes.Buffer: UnreadRune: previous operation was not a successful ReadRuneheader list size to send violates the maximum size (%d bytes) set by serverHeader list size to send violates the maximum size (%d bytes) set by clienttransport: http2Server.HandleStreams received bogus greeting from client: %qtransport: http2Server.HandleStreams saw invalid preface type %T from clienttransport: trying to send header list size larger than the limit set by peergrpc: credentials.Bundle may not be used with individual TransportCredentialsClientConn\'s authority from transport creds %q and dial option %q don\'t matchMapIter.Next called on an iterator that does not have an associated map Valuereflect: embedded type..." /* TRUNCATED STRING LITERAL */
                         );
            return;
          }
          s.str._4_4_ = uVar15;
          s.str._0_4_ = uVar13;
          s.len._0_4_ = uVar14;
          s.len._4_4_ = uVar16;
          ip_01.addr.hi._1_7_ = in_stack_fffffffffffffdb9;
          ip_01.addr.hi._0_1_ = uVar19;
          ip_01.addr.lo = (uint64)in_stack_fffffffffffffdc0;
          ip_01.z = in_stack_fffffffffffffdc8;
          err.data = in_RBX;
          err.tab = prVar7;
          in_stack_fffffffffffffdd8 = in_RBX;
          local_1f0 = (char *)local_48;
          net_netip_parseIPv4(s,ip_01,err);
          if (extraout_RDI != 0) {
            local_118 = (**(code **)(extraout_RDI + 0x18))(extraout_RSI);
            uStack_100 = in_stack_fffffffffffffdd8;
            local_108 = (undefined  [8])local_1f0;
            auVar3 = _local_108;
            local_38._8_4_ = uVar17;
            local_38._0_8_ = in_RAX;
            uStack_2c = uVar18;
            uStack_100._0_4_ = SUB84(in_stack_fffffffffffffdd8,0);
            uStack_100._4_4_ = (undefined4)((uint)in_stack_fffffffffffffdd8 >> 0x20);
            local_18._8_4_ = (undefined4)uStack_100;
            local_18._0_8_ = local_1f0;
            uStack_c = uStack_100._4_4_;
            _local_108 = auVar3;
            _local_28 = local_118;
            runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,in_stack_fffffffffffffdd8);
            return;
          }
          local_208[(int)piVar4] = (uint8)((dword)extraout_EBX >> 0x18);
          (local_208 + 1)[(int)piVar4] = (uint8)((dword)extraout_EBX >> 0x10);
          if ((undefined *)0xf < (undefined *)((int)&(piVar4->cmpVal)._type + 2U)) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          (local_208 + 2)[(int)piVar4] = (uint8)((dword)extraout_EBX >> 8);
          if ((undefined *)0xf < (undefined *)((int)&(piVar4->cmpVal)._type + 3U)) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          (local_208 + 3)[(int)piVar4] = (uint8)extraout_EBX;
          in_RBX = (uint8 *)0x0;
          local_138._0_8_ = (char *)0x0;
          in_stack_fffffffffffffde0 = piVar4;
          goto LAB_005c1640;
        }
      }
      local_208[(int)piVar4] = (uint8)(acc >> 8);
      (local_208 + 1)[(int)piVar4] = (uint8)acc;
      if (in_RBX < (uint)off) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      local_138._8_8_ = (int)in_RBX - off;
      uVar8 = (int)-local_138._8_8_ >> 0x3f & off;
      piVar5 = (internal_intern_Value *)((int)&(piVar4->cmpVal)._type + 2);
      local_138._0_8_ = (int)local_48 + uVar8;
      if (local_138._8_8_ == 0) {
        in_RBX = (uint8 *)0x0;
        goto LAB_005c1640;
      }
      uStack_160._0_4_ = (undefined4)local_138._8_8_;
      local_18._8_4_ = (undefined4)uStack_160;
      uStack_160._4_4_ = (undefined4)((uint)local_138._8_8_ >> 0x20);
      uStack_c = uStack_160._4_4_;
      if (*(char *)((int)local_48 + uVar8) != ':') {
        local_148._8_8_ = 0x20;
        local_148._0_8_ = &DAT_008c0313;
        local_38._8_4_ = uVar17;
        local_38._0_8_ = in_RAX;
        uStack_2c = uVar18;
        uStack_20._0_4_ = 0x20;
        local_28 = (undefined  [8])&DAT_008c0313;
        uStack_20._4_4_ = 0;
        local_18._0_8_ = local_138._0_8_;
        runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,&DAT_008c0313);
        return;
      }
      if (local_138._8_8_ == 1) {
        local_178._8_8_ = 0x29;
        local_178._0_8_ = &DAT_008c52cc;
        uStack_160 = 1;
        local_168 = (undefined  [8])local_138._0_8_;
        local_38._8_4_ = uVar17;
        local_38._0_8_ = in_RAX;
        uStack_2c = uVar18;
        uStack_20._0_4_ = 0x29;
        local_28 = (undefined  [8])&DAT_008c52cc;
        uStack_20._4_4_ = 0;
        local_18._0_8_ = local_138._0_8_;
        runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,&DAT_008c52cc);
        return;
      }
      in_RBX = (uint8 *)(local_138._8_8_ + -1);
      local_198 = (undefined  [8])((int)local_48 + uVar8 + 1);
      if (in_RBX == (uint8 *)0x0) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      pcVar1 = (char *)((int)local_48 + uVar8 + 1);
      piVar4 = piVar5;
      local_48 = local_198;
    } while (*pcVar1 != ':');
    if (-1 < ellipsis) {
      local_1a8._8_8_ = 0x16;
      local_1a8._0_8_ = &DAT_008ba381;
      uStack_190 = in_RBX;
      auVar3 = _local_198;
      local_38._8_4_ = uVar17;
      local_38._0_8_ = in_RAX;
      uStack_2c = uVar18;
      uStack_20._0_4_ = 0x16;
      local_28 = (undefined  [8])&DAT_008ba381;
      uStack_20._4_4_ = 0;
      uStack_190._0_4_ = SUB84(in_RBX,0);
      uStack_190._4_4_ = (undefined4)((uint)in_RBX >> 0x20);
      local_18._8_4_ = (undefined4)uStack_190;
      local_18._0_8_ = local_198;
      uStack_c = uStack_190._4_4_;
      _local_198 = auVar3;
      runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,&DAT_008ba381);
      return;
    }
    in_RBX = (uint8 *)(local_138._8_8_ + -2);
    local_138._0_8_ = (int)local_198 + (uint)((dword)(-(int)in_RBX >> 0x3f) & 1);
    ellipsis = (int)piVar5;
    local_48 = (undefined  [8])local_138._0_8_;
  } while (local_138._8_8_ != 2);
LAB_005c1640:
  if (in_RBX != (uint8 *)0x0) {
    local_1d8._8_8_ = 0x1e;
    local_1d8._0_8_ = &DAT_008bf0cb;
    uStack_1c0 = in_RBX;
    local_1c8 = (undefined  [8])local_138._0_8_;
    auVar3 = _local_1c8;
    local_38._8_4_ = uVar17;
    local_38._0_8_ = in_RAX;
    uStack_2c = uVar18;
    uStack_20._0_4_ = 0x1e;
    local_28 = (undefined  [8])&DAT_008bf0cb;
    uStack_20._4_4_ = 0;
    uStack_1c0._0_4_ = SUB84(in_RBX,0);
    uStack_1c0._4_4_ = (undefined4)((uint)in_RBX >> 0x20);
    local_18._8_4_ = (undefined4)uStack_1c0;
    local_18._0_8_ = local_138._0_8_;
    uStack_c = uStack_1c0._4_4_;
    _local_1c8 = auVar3;
    runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,&DAT_008bf0cb);
    return;
  }
  local_18._8_4_ = uVar11;
  uStack_c = uVar12;
  if ((int)piVar5 < 0x10) {
    piVar4 = piVar5;
    if (ellipsis < 0) {
      local_18._4_4_ = uVar10;
      local_18._0_4_ = uVar9;
      uStack_20 = 0x18;
      local_28 = (undefined  [8])&DAT_008bb5f5;
      runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,&DAT_008bb5f5);
      return;
    }
    while (piVar4 = (internal_intern_Value *)&piVar4[-1].field_0x17, ellipsis <= (int)piVar4) {
      if ((undefined *)0xf < piVar4) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      if ((undefined *)0xf < (undefined *)((int)piVar4 + (0x10 - (int)piVar5))) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      *(undefined *)((int)piVar4 + ((int)&local_1f8 - (int)piVar5)) = local_208[(int)piVar4];
    }
    for (uVar8 = ellipsis + (0xf - (int)piVar5); ellipsis <= (int)uVar8; uVar8 = uVar8 - 1) {
      if (0xf < uVar8) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      local_208[uVar8] = 0;
    }
  }
  else if (-1 < ellipsis) {
    local_18._4_4_ = uVar10;
    local_18._0_4_ = uVar9;
    uStack_20 = 0x31;
    local_28 = (undefined  [8])&DAT_008c882e;
    runtime_convT((internal_abi_Type *)&DAT_00872860,local_38,&DAT_008c882e);
    return;
  }
  ~r0_00.addr.hi._1_7_ = in_stack_fffffffffffffdb9;
  ~r0_00.addr.hi._0_1_ = uVar19;
  ~r0_00.addr.lo = (uint64)in_stack_fffffffffffffdc0;
  ~r0_00.z = in_stack_fffffffffffffdc8;
  uVar14 = _local_208;
  uVar16 = _auStack_204;
  uVar9 = (undefined4)uStack_200;
  uVar10 = uStack_200._4_4_;
  net_netip_AddrFrom16(_local_208,~r0_00);
  ip_00.addr.hi._4_4_ = uVar16;
  ip_00.addr.hi._0_4_ = uVar14;
  ip_00.addr.lo._0_4_ = uVar9;
  ip_00.addr.lo._4_4_ = uVar10;
  ip_00.z._0_1_ = uVar19;
  ip_00.z._1_7_ = in_stack_fffffffffffffdb9;
  zone_00.len = (int)in_stack_fffffffffffffdc8;
  zone_00.str = in_stack_fffffffffffffdc0;
  ~r0_02.addr.lo = (uint64)in_stack_fffffffffffffdd8;
  ~r0_02.addr.hi = (uint64)prVar7;
  ~r0_02.z = in_stack_fffffffffffffde0;
  net_netip_Addr_WithZone(ip_00,zone_00,~r0_02);
  return;
}



void net_netip_AddrFromSlice(__uint8 slice,net_netip_Addr ip,bool ok)

{
  net_netip_Addr ~r0;
  undefined7 in_register_00000001;
  int in_RBX;
  internal_intern_Value *unaff_RBP;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RBX != 4) {
    if (in_RBX == 0x10) {
      ~r0.z = unaff_RBP;
      ~r0.addr = *(net_netip_uint128 *)CONCAT71(in_register_00000001,ok);
      net_netip_AddrFrom16((uint8  [16])*(net_netip_uint128 *)CONCAT71(in_register_00000001,ok),~r0)
      ;
      return;
    }
    return;
  }
  return;
}



void net_netip_Addr_IsValid(net_netip_Addr ip,bool ~r0)

{
  return;
}



void net_netip_Addr_BitLen(net_netip_Addr ip,int ~r0)

{
  internal_intern_Value *in_RCX;
  
  if (net_netip_z0 == in_RCX) {
    return;
  }
  if (net_netip_z4 == in_RCX) {
    return;
  }
  return;
}



void net_netip_Addr_Zone(net_netip_Addr ip,string ~r0)

{
  int in_RCX;
  
  if (in_RCX != 0) {
    return;
  }
  return;
}



void net_netip_Addr_Compare(net_netip_Addr ip,net_netip_Addr ip2,int ~r0)

{
  int extraout_RAX;
  int extraout_RAX_00;
  internal_intern_Value *in_RCX;
  uint in_RBX;
  uint64 lo1;
  uint in_RSI;
  uint64 lo2;
  uint in_RDI;
  uint64 hi2;
  internal_intern_Value *in_R8;
  int f1;
  int f2;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RCX == net_netip_z0) {
    f1 = 0;
  }
  else if (net_netip_z4 == in_RCX) {
    f1 = 0x20;
  }
  else {
    f1 = 0x80;
  }
  if (in_R8 == net_netip_z0) {
    f2 = 0;
  }
  else if (net_netip_z4 == in_R8) {
    f2 = 0x20;
  }
  else {
    f2 = 0x80;
  }
  if ((uint)f1 < (uint)f2) {
    return;
  }
  if ((uint)f2 < (uint)f1) {
    return;
  }
  if ((uint)~r0 < in_RDI) {
    return;
  }
  if (in_RDI < (uint)~r0) {
    return;
  }
  if (in_RBX < in_RSI) {
    return;
  }
  if (in_RSI < in_RBX) {
    return;
  }
  if ((in_RCX != net_netip_z0) && (net_netip_z4 != in_RCX)) {
    runtime_cmpstring();
    if (extraout_RAX < 0) {
      return;
    }
    runtime_cmpstring();
    if (0 < extraout_RAX_00) {
      return;
    }
  }
  return;
}



void net_netip_Addr_Less(net_netip_Addr ip,net_netip_Addr ip2,bool ~r0)

{
  undefined7 in_register_00000001;
  int unaff_R14;
  net_netip_Addr in_stack_ffffffffffffffc8;
  net_netip_Addr in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  net_netip_Addr_Compare
            (in_stack_ffffffffffffffc8,in_stack_ffffffffffffffe0,CONCAT71(in_register_00000001,~r0))
  ;
  return;
}



void net_netip_Addr_Is4(net_netip_Addr ip,bool ~r0)

{
  return;
}



void net_netip_Addr_Is4In6(net_netip_Addr ip,bool ~r0)

{
  return;
}



void net_netip_Addr_Is6(net_netip_Addr ip,bool ~r0)

{
  return;
}



void net_netip_Addr_Unmap(net_netip_Addr ip,net_netip_Addr ~r0)

{
  return;
}



void net_netip_Addr_WithZone(net_netip_Addr ip,string zone,net_netip_Addr ~r0)

{
  internal_intern_Value *in_RCX;
  internal_intern_Value *in_RSI;
  internal_intern_Value *in_RDI;
  int unaff_R14;
  internal_intern_key in_stack_ffffffffffffff98;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((net_netip_z0 != in_RCX) && (net_netip_z4 != in_RCX)) {
    if (in_RSI == (internal_intern_Value *)0x0) {
      return;
    }
    internal_intern_get(in_stack_ffffffffffffff98,in_RDI,in_RSI);
    return;
  }
  return;
}



void net_netip_Addr_IsLinkLocalUnicast(net_netip_Addr ip,bool ~r0)

{
  undefined7 in_register_00000001;
  internal_intern_Value *in_RCX;
  uint in_RBX;
  
  if ((((in_RCX != net_netip_z0) && (in_RCX != net_netip_z4)) &&
      (CONCAT71(in_register_00000001,~r0) == 0)) && (in_RBX >> 0x20 == 0xffff)) {
    in_RCX = net_netip_z4;
  }
  if (net_netip_z4 == in_RCX) {
    return;
  }
  if (in_RCX != net_netip_z0) {
    return;
  }
  return;
}



void net_netip_Addr_IsLoopback(net_netip_Addr ip,bool ~r0)

{
  undefined7 in_register_00000001;
  internal_intern_Value *in_RCX;
  uint in_RBX;
  
  if ((((in_RCX != net_netip_z0) && (in_RCX != net_netip_z4)) &&
      (CONCAT71(in_register_00000001,~r0) == 0)) && (in_RBX >> 0x20 == 0xffff)) {
    in_RCX = net_netip_z4;
  }
  if (net_netip_z4 != in_RCX) {
    if (in_RCX != net_netip_z0) {
      return;
    }
    return;
  }
  return;
}



void net_netip_Addr_IsMulticast(net_netip_Addr ip,bool ~r0)

{
  undefined7 in_register_00000001;
  internal_intern_Value *in_RCX;
  uint in_RBX;
  
  if ((((in_RCX != net_netip_z0) && (in_RCX != net_netip_z4)) &&
      (CONCAT71(in_register_00000001,~r0) == 0)) && (in_RBX >> 0x20 == 0xffff)) {
    in_RCX = net_netip_z4;
  }
  if (net_netip_z4 == in_RCX) {
    return;
  }
  if (in_RCX == net_netip_z0) {
    return;
  }
  return;
}



void net_netip_Addr_IsInterfaceLocalMulticast(net_netip_Addr ip,bool ~r0)

{
  undefined7 in_register_00000001;
  internal_intern_Value *in_RCX;
  uint in_RBX;
  
  if (((net_netip_z0 != in_RCX) && (net_netip_z4 != in_RCX)) &&
     ((CONCAT71(in_register_00000001,~r0) != 0 || (in_RBX >> 0x20 != 0xffff)))) {
    return;
  }
  return;
}



void net_netip_Addr_IsLinkLocalMulticast(net_netip_Addr ip,bool ~r0)

{
  undefined7 in_register_00000001;
  internal_intern_Value *in_RCX;
  uint in_RBX;
  
  if ((((in_RCX != net_netip_z0) && (in_RCX != net_netip_z4)) &&
      (CONCAT71(in_register_00000001,~r0) == 0)) && (in_RBX >> 0x20 == 0xffff)) {
    in_RCX = net_netip_z4;
  }
  if (net_netip_z4 != in_RCX) {
    if (in_RCX == net_netip_z0) {
      return;
    }
    return;
  }
  return;
}



void net_netip_Addr_IsGlobalUnicast(net_netip_Addr ip,bool ~r0)

{
  byte extraout_AL;
  byte bVar1;
  char extraout_AL_00;
  undefined7 in_register_00000001;
  int iVar2;
  internal_intern_Value *in_RCX;
  uint in_RBX;
  int unaff_R14;
  bool bVar3;
  net_netip_Addr in_stack_ffffffffffffffc8;
  
  iVar2 = CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (net_netip_z0 == in_RCX) {
    return;
  }
  if (((in_RCX != net_netip_z4) && (iVar2 == 0)) && (in_RBX >> 0x20 == 0xffff)) {
    iVar2 = 0;
    in_RCX = net_netip_z4;
  }
  if (net_netip_z4 == in_RCX) {
    if (((iVar2 == 0) && (in_RBX == 0xffff00000000)) && (in_RCX == net_netip_z4)) {
      bVar3 = true;
    }
    else if ((iVar2 == 0) && (in_RBX == 0xffffffffffff)) {
      bVar3 = in_RCX == net_netip_z4;
    }
    else {
      bVar3 = false;
    }
    if (bVar3) {
      return;
    }
  }
  bVar3 = SUB81(iVar2,0);
  if (((iVar2 == 0) && (in_RBX == 0)) && (in_RCX == net_netip_z6noz)) {
    bVar1 = 0;
  }
  else {
    net_netip_Addr_IsLoopback(in_stack_ffffffffffffffc8,bVar3);
    bVar1 = extraout_AL ^ 1;
  }
  if ((bVar1 != 0) &&
     (net_netip_Addr_IsMulticast(in_stack_ffffffffffffffc8,bVar3), extraout_AL_00 == '\0')) {
    net_netip_Addr_IsLinkLocalUnicast(in_stack_ffffffffffffffc8,bVar3);
  }
  return;
}



void net_netip_Addr_IsPrivate(net_netip_Addr ip,bool ~r0)

{
  undefined7 in_register_00000001;
  internal_intern_Value *in_RCX;
  uint in_RBX;
  
