struct log/slog.Attr {
    struct string Key;
    struct log/slog.Value Value;
};

struct log/slog.HandlerOptions {
    bool AddSource;
    log/slog.Leveler Level;
    void (**ReplaceAttr)(struct []string, struct log/slog.Attr, struct log/slog.Attr *);
};

struct log/slog.commonHandler {
    bool json;
    struct log/slog.HandlerOptions opts;
    struct []uint8 preformattedAttrs;
    struct string groupPrefix;
    struct []string groups;
    int nOpenGroups;
    struct sync.Mutex *mu;
    io.Writer w;
};

typedef struct runtime.iface mime/multipart.File;

typedef struct noalg.map.bucket[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType noalg.map.bucket[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType, *Pnoalg.map.bucket[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType;

typedef google.golang.org/protobuf/encoding/protowire.Number noalg.[8]google.golang.org/protobuf/encoding/protowire.Number[8];

struct noalg.map.bucket[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType {
    uint8 topbits[8];
    noalg.[8]google.golang.org/protobuf/encoding/protowire.Number keys;
    noalg.[8]google.golang.org/protobuf/reflect/protoreflect.ExtensionType elems;
    void *overflow;
};

typedef google.golang.org/protobuf/reflect/protoreflect.ExtensionType noalg.[8]google.golang.org/protobuf/reflect/protoreflect.ExtensionType[8];

typedef struct bucket<string,*google.golang.org/grpc/grpclog.componentData> bucket<string,*google.golang.org/grpc/grpclog.componentData>, *Pbucket<string,*google.golang.org/grpc/grpclog.componentData>;

typedef struct google.golang.org/grpc/grpclog.componentData google.golang.org/grpc/grpclog.componentData, *Pgoogle.golang.org/grpc/grpclog.componentData;

struct bucket<string,*google.golang.org/grpc/grpclog.componentData> {
    uint8 tophash[8];
    struct string keys[8];
    struct google.golang.org/grpc/grpclog.componentData *values[8];
    struct bucket<string,*google.golang.org/grpc/grpclog.componentData> *overflow;
};

struct google.golang.org/grpc/grpclog.componentData {
    struct string name;
};

typedef struct runtime.spanSetSpinePointer runtime.spanSetSpinePointer, *Pruntime.spanSetSpinePointer;

struct runtime.spanSetSpinePointer {
    void *p;
};

typedef struct unicode/utf8.acceptRange unicode/utf8.acceptRange, *Punicode/utf8.acceptRange;

struct unicode/utf8.acceptRange {
    uint8 lo;
    uint8 hi;
};

typedef struct mime/multipart.Form mime/multipart.Form, *Pmime/multipart.Form;

typedef struct hash<string,[]string> *map[string][]string;

typedef struct hash<string,[]*mime/multipart.FileHeader> hash<string,[]*mime/multipart.FileHeader>, *Phash<string,[]*mime/multipart.FileHeader>;

typedef struct hash<string,[]*mime/multipart.FileHeader> *map[string][]*mime/multipart.FileHeader;

typedef struct bucket<string,[]*mime/multipart.FileHeader> bucket<string,[]*mime/multipart.FileHeader>, *Pbucket<string,[]*mime/multipart.FileHeader>;

struct hash<string,[]*mime/multipart.FileHeader> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,[]*mime/multipart.FileHeader> *buckets;
    struct bucket<string,[]*mime/multipart.FileHeader> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<string,[]*mime/multipart.FileHeader> {
    uint8 tophash[8];
    struct string keys[8];
    struct []*mime/multipart.FileHeader values[8];
    struct bucket<string,[]*mime/multipart.FileHeader> *overflow;
};

struct mime/multipart.Form {
    map[string][]string Value;
    map[string][]*mime/multipart.FileHeader File;
};

typedef struct internal/abi.RegArgs internal/abi.RegArgs, *Pinternal/abi.RegArgs;

typedef uint8 internal/abi.IntArgRegBitmap[2];

struct internal/abi.RegArgs {
    uintptr Ints[9];
    uint64 Floats[15];
    void *Ptrs[9];
    internal/abi.IntArgRegBitmap ReturnIsPtr;
};

typedef struct hash<runtime._typePair,struct_{}> hash<runtime._typePair,struct_{}>, *Phash<runtime._typePair,struct_{}>;

typedef struct hash<runtime._typePair,struct_{}> *map[runtime._typePair]struct_{};

typedef struct bucket<runtime._typePair,struct_{}> bucket<runtime._typePair,struct_{}>, *Pbucket<runtime._typePair,struct_{}>;

struct hash<runtime._typePair,struct_{}> { // Original name: hash<runtime._typePair,struct {}>
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<runtime._typePair,struct_{}> *buckets;
    struct bucket<runtime._typePair,struct_{}> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<runtime._typePair,struct_{}> { // Original name: bucket<runtime._typePair,struct {}>
    uint8 tophash[8];
    struct runtime._typePair keys[8];
    struct struct_{} values[0];
    struct bucket<runtime._typePair,struct_{}> *overflow;
};

typedef struct []runtime.exitHook []runtime.exitHook, *P[]runtime.exitHook;

typedef struct runtime.exitHook runtime.exitHook, *Pruntime.exitHook;

struct runtime.exitHook {
    void (**f)(void);
    bool runOnNonZeroExit;
};

struct []runtime.exitHook {
    struct runtime.exitHook *array;
    int len;
    int cap;
};

typedef struct syscall.IPMreq syscall.IPMreq, *Psyscall.IPMreq;

struct syscall.IPMreq {
    uint8 Multiaddr[4];
    uint8 Interface[4];
};

typedef struct runtime.pinnerBits runtime.pinnerBits, *Pruntime.pinnerBits;

struct runtime.pinnerBits {
    struct runtime/internal/sys.NotInHeap _;
    uint8 x;
};

typedef struct crypto/ecdsa.nistCurve[go.shape.*uint8] crypto/ecdsa.nistCurve[go.shape.*uint8], *Pcrypto/ecdsa.nistCurve[go.shape.*uint8];

typedef uint8 *go.shape.*uint8;

typedef struct runtime.iface crypto/elliptic.Curve;

typedef struct crypto/internal/bigmod.Modulus crypto/internal/bigmod.Modulus, *Pcrypto/internal/bigmod.Modulus;

typedef struct crypto/internal/bigmod.Nat crypto/internal/bigmod.Nat, *Pcrypto/internal/bigmod.Nat;

typedef struct []uint []uint, *P[]uint;

struct crypto/ecdsa.nistCurve[go.shape.*uint8] {
    void (**newPoint)(go.shape.*uint8 *);
    crypto/elliptic.Curve curve;
    struct crypto/internal/bigmod.Modulus *N;
    struct []uint8 nMinus2;
};

struct []uint {
    uint *array;
    int len;
    int cap;
};

struct crypto/internal/bigmod.Nat {
    struct []uint limbs;
};

struct crypto/internal/bigmod.Modulus {
    struct crypto/internal/bigmod.Nat *nat;
    int leading;
    uint m0inv;
    struct crypto/internal/bigmod.Nat *rr;
};

typedef struct bucket<google.golang.org/grpc/internal/transport.ServerTransport,bool> bucket<google.golang.org/grpc/internal/transport.ServerTransport,bool>, *Pbucket<google.golang.org/grpc/internal/transport.ServerTransport,bool>;

struct bucket<google.golang.org/grpc/internal/transport.ServerTransport,bool> {
    uint8 tophash[8];
    google.golang.org/grpc/internal/transport.ServerTransport keys[8];
    bool values[8];
    struct bucket<google.golang.org/grpc/internal/transport.ServerTransport,bool> *overflow;
};

typedef struct struct_{_runtime.lock_runtime.mutex;_runtime.free_[35]runtime.mSpanList_} struct_{_runtime.lock_runtime.mutex;_runtime.free_[35]runtime.mSpanList_}, *Pstruct_{_runtime.lock_runtime.mutex;_runtime.free_[35]runtime.mSpanList_};

typedef struct runtime.mSpanList runtime.mSpanList, *Pruntime.mSpanList;

typedef struct runtime.mspan runtime.mspan, *Pruntime.mspan;

typedef struct runtime.mSpanStateBox runtime.mSpanStateBox, *Pruntime.mSpanStateBox;

typedef struct runtime.special runtime.special, *Pruntime.special;

typedef struct runtime.addrRange runtime.addrRange, *Pruntime.addrRange;

typedef struct runtime.offAddr runtime.offAddr, *Pruntime.offAddr;

struct runtime.special {
    struct runtime/internal/sys.NotInHeap _;
    struct runtime.special *next;
    uint16 offset;
    uint8 kind;
};

struct runtime.mSpanStateBox {
    struct runtime/internal/atomic.Uint8 s;
};

struct runtime.offAddr {
    uintptr a;
};

struct runtime.addrRange {
    struct runtime.offAddr base;
    struct runtime.offAddr limit;
};

struct runtime.mspan {
    struct runtime/internal/sys.NotInHeap _;
    struct runtime.mspan *next;
    struct runtime.mspan *prev;
    struct runtime.mSpanList *list;
    uintptr startAddr;
    uintptr npages;
    runtime.gclinkptr manualFreeList;
    uintptr freeindex;
    uintptr nelems;
    uint64 allocCache;
    struct runtime.gcBits *allocBits;
    struct runtime.gcBits *gcmarkBits;
    struct runtime.gcBits *pinnerBits;
    uint32 sweepgen;
    uint32 divMul;
    uint16 allocCount;
    runtime.spanClass spanclass;
    struct runtime.mSpanStateBox state;
    uint8 needzero;
    bool isUserArenaChunk;
    uint16 allocCountBeforeCache;
    uintptr elemsize;
    uintptr limit;
    struct runtime.mutex speciallock;
    struct runtime.special *specials;
    struct runtime.addrRange userArenaChunkFree;
    uintptr freeIndexForScan;
};

struct runtime.mSpanList {
    struct runtime/internal/sys.NotInHeap _;
    struct runtime.mspan *first;
    struct runtime.mspan *last;
};

struct struct_{_runtime.lock_runtime.mutex;_runtime.free_[35]runtime.mSpanList_} { // Original name: struct { runtime.lock runtime.mutex; runtime.free [35]runtime.mSpanList }
    struct runtime.mutex lock;
    struct runtime.mSpanList free[35];
};

typedef struct google.golang.org/grpc/internal/binarylog.ClientHeader google.golang.org/grpc/internal/binarylog.ClientHeader, *Pgoogle.golang.org/grpc/internal/binarylog.ClientHeader;

struct google.golang.org/grpc/internal/binarylog.ClientHeader {
    bool OnClientSide;
    google.golang.org/grpc/metadata.MD Header;
    struct string MethodName;
    struct string Authority;
    time.Duration Timeout;
    net.Addr PeerAddr;
};

typedef struct bucket<int,string> bucket<int,string>, *Pbucket<int,string>;

struct bucket<int,string> {
    uint8 tophash[8];
    int keys[8];
    struct string values[8];
    struct bucket<int,string> *overflow;
};

typedef struct hash<google.golang.org/protobuf/reflect/protoreflect.Kind,reflect.Type> hash<google.golang.org/protobuf/reflect/protoreflect.Kind,reflect.Type>, *Phash<google.golang.org/protobuf/reflect/protoreflect.Kind,reflect.Type>;

typedef struct hash<google.golang.org/protobuf/reflect/protoreflect.Kind,reflect.Type> *map[google.golang.org/protobuf/reflect/protoreflect.Kind]reflect.Type;

typedef struct bucket<google.golang.org/protobuf/reflect/protoreflect.Kind,reflect.Type> bucket<google.golang.org/protobuf/reflect/protoreflect.Kind,reflect.Type>, *Pbucket<google.golang.org/protobuf/reflect/protoreflect.Kind,reflect.Type>;

struct hash<google.golang.org/protobuf/reflect/protoreflect.Kind,reflect.Type> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/protobuf/reflect/protoreflect.Kind,reflect.Type> *buckets;
    struct bucket<google.golang.org/protobuf/reflect/protoreflect.Kind,reflect.Type> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<google.golang.org/protobuf/reflect/protoreflect.Kind,reflect.Type> {
    uint8 tophash[8];
    google.golang.org/protobuf/reflect/protoreflect.Kind keys[8];
    reflect.Type values[8];
    struct bucket<google.golang.org/protobuf/reflect/protoreflect.Kind,reflect.Type> *overflow;
};

typedef struct net.dnsConfig net.dnsConfig, *Pnet.dnsConfig;

struct net.dnsConfig {
    struct []string servers;
    struct []string search;
    int ndots;
    time.Duration timeout;
    int attempts;
    bool rotate;
    bool unknownOpt;
    struct []string lookup;
    error err;
    struct time.Time mtime;
    uint32 soffset;
    bool singleRequest;
    bool useTCP;
    bool trustAD;
    bool noReload;
};

typedef struct crypto/sha256.digest crypto/sha256.digest, *Pcrypto/sha256.digest;

struct crypto/sha256.digest {
    uint32 h[8];
    uint8 x[64];
    int nx;
    uint64 len;
    bool is224;
};

typedef struct runtime.mcache runtime.mcache, *Pruntime.mcache;

typedef struct runtime.stackfreelist runtime.stackfreelist, *Pruntime.stackfreelist;

struct runtime.stackfreelist {
    runtime.gclinkptr list;
    uintptr size;
};

struct runtime.mcache {
    struct runtime/internal/sys.NotInHeap _;
    uintptr nextSample;
    uintptr scanAlloc;
    uintptr tiny;
    uintptr tinyoffset;
    uintptr tinyAllocs;
    struct runtime.mspan *alloc[136];
    struct runtime.stackfreelist stackcache[4];
    struct runtime/internal/atomic.Uint32 flushGen;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*struct_{_runtime.base_runtime.offAddr;_runtime.bound_runtime.offAddr_}_} noalg.struct_{_F_uintptr;_X0_*struct_{_runtime.base_runtime.offAddr;_runtime.bound_runtime.offAddr_}_}, *Pnoalg.struct_{_F_uintptr;_X0_*struct_{_runtime.base_runtime.offAddr;_runtime.bound_runtime.offAddr_}_};

typedef struct struct_{_runtime.base_runtime.offAddr;_runtime.bound_runtime.offAddr_} struct_{_runtime.base_runtime.offAddr;_runtime.bound_runtime.offAddr_}, *Pstruct_{_runtime.base_runtime.offAddr;_runtime.bound_runtime.offAddr_};

struct struct_{_runtime.base_runtime.offAddr;_runtime.bound_runtime.offAddr_} { // Original name: struct { runtime.base runtime.offAddr; runtime.bound runtime.offAddr }
    struct runtime.offAddr base;
    struct runtime.offAddr bound;
};

struct noalg.struct_{_F_uintptr;_X0_*struct_{_runtime.base_runtime.offAddr;_runtime.bound_runtime.offAddr_}_} { // Original name: noalg.struct { F uintptr; X0 *struct { runtime.base runtime.offAddr; runtime.bound runtime.offAddr } }
    uintptr F;
    struct struct_{_runtime.base_runtime.offAddr;_runtime.bound_runtime.offAddr_} *X0;
};

typedef struct google.golang.org/grpc/internal/resolver/unix.builder google.golang.org/grpc/internal/resolver/unix.builder, *Pgoogle.golang.org/grpc/internal/resolver/unix.builder;

struct google.golang.org/grpc/internal/resolver/unix.builder {
    struct string scheme;
};

typedef struct runtime.linearAlloc runtime.linearAlloc, *Pruntime.linearAlloc;

struct runtime.linearAlloc {
    uintptr next;
    uintptr mapped;
    uintptr end;
    bool mapMemory;
};

typedef struct google.golang.org/grpc/credentials/insecure.info google.golang.org/grpc/credentials/insecure.info, *Pgoogle.golang.org/grpc/credentials/insecure.info;

struct google.golang.org/grpc/credentials/insecure.info {
    struct google.golang.org/grpc/credentials.CommonAuthInfo CommonAuthInfo;
};

typedef struct hash<internal/intern.key,*internal/intern.Value> hash<internal/intern.key,*internal/intern.Value>, *Phash<internal/intern.key,*internal/intern.Value>;

typedef struct bucket<internal/intern.key,*internal/intern.Value> bucket<internal/intern.key,*internal/intern.Value>, *Pbucket<internal/intern.key,*internal/intern.Value>;

typedef struct internal/intern.key internal/intern.key, *Pinternal/intern.key;

struct hash<internal/intern.key,*internal/intern.Value> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<internal/intern.key,*internal/intern.Value> *buckets;
    struct bucket<internal/intern.key,*internal/intern.Value> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct internal/intern.key {
    struct string s;
    interface_{} cmpVal;
    bool isString;
};

struct bucket<internal/intern.key,*internal/intern.Value> {
    uint8 tophash[8];
    struct internal/intern.key keys[8];
    struct internal/intern.Value *values[8];
    struct bucket<internal/intern.key,*internal/intern.Value> *overflow;
};

typedef struct []float64 []float64, *P[]float64;

struct []float64 {
    float64 *array;
    int len;
    int cap;
};

typedef struct encoding/json.UnmarshalTypeError encoding/json.UnmarshalTypeError, *Pencoding/json.UnmarshalTypeError;

struct encoding/json.UnmarshalTypeError {
    struct string Value;
    reflect.Type Type;
    int64 Offset;
    struct string Struct;
    struct string Field;
};

typedef struct runtime.iface google.golang.org/protobuf/internal/impl.legacyMerger;

typedef struct hash<string,google.golang.org/grpc/balancer.Builder> hash<string,google.golang.org/grpc/balancer.Builder>, *Phash<string,google.golang.org/grpc/balancer.Builder>;

typedef struct hash<string,google.golang.org/grpc/balancer.Builder> *map[string]google.golang.org/grpc/balancer.Builder;

typedef struct bucket<string,google.golang.org/grpc/balancer.Builder> bucket<string,google.golang.org/grpc/balancer.Builder>, *Pbucket<string,google.golang.org/grpc/balancer.Builder>;

struct bucket<string,google.golang.org/grpc/balancer.Builder> {
    uint8 tophash[8];
    struct string keys[8];
    google.golang.org/grpc/balancer.Builder values[8];
    struct bucket<string,google.golang.org/grpc/balancer.Builder> *overflow;
};

struct hash<string,google.golang.org/grpc/balancer.Builder> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,google.golang.org/grpc/balancer.Builder> *buckets;
    struct bucket<string,google.golang.org/grpc/balancer.Builder> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct hash<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.ExtensionType> hash<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.ExtensionType>, *Phash<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.ExtensionType>;

struct hash<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.ExtensionType> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.ExtensionType> *buckets;
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.ExtensionType> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct hash<internal/intern.key,uintptr> hash<internal/intern.key,uintptr>, *Phash<internal/intern.key,uintptr>;

typedef struct bucket<internal/intern.key,uintptr> bucket<internal/intern.key,uintptr>, *Pbucket<internal/intern.key,uintptr>;

struct hash<internal/intern.key,uintptr> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<internal/intern.key,uintptr> *buckets;
    struct bucket<internal/intern.key,uintptr> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<internal/intern.key,uintptr> {
    uint8 tophash[8];
    struct internal/intern.key keys[8];
    uintptr values[8];
    struct bucket<internal/intern.key,uintptr> *overflow;
};

typedef struct hash<string,map[string]bool> hash<string,map[string]bool>, *Phash<string,map[string]bool>;

typedef struct bucket<string,map[string]bool> bucket<string,map[string]bool>, *Pbucket<string,map[string]bool>;

struct hash<string,map[string]bool> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,map[string]bool> *buckets;
    struct bucket<string,map[string]bool> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<string,map[string]bool> {
    uint8 tophash[8];
    struct string keys[8];
    map[string]bool values[8];
    struct bucket<string,map[string]bool> *overflow;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_*runtime.p_} noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_*runtime.p_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_*runtime.p_};

typedef struct runtime.p runtime.p, *Pruntime.p;

typedef struct runtime.sysmontick runtime.sysmontick, *Pruntime.sysmontick;

typedef struct runtime.pageCache runtime.pageCache, *Pruntime.pageCache;

typedef struct []*runtime._defer []*runtime._defer, *P[]*runtime._defer;

typedef struct struct_{_runtime.gList;_runtime.n_int32_} struct_{_runtime.gList;_runtime.n_int32_}, *Pstruct_{_runtime.gList;_runtime.n_int32_};

typedef struct []*runtime.sudog []*runtime.sudog, *P[]*runtime.sudog;

typedef struct struct_{_runtime.len_int;_runtime.buf_[128]*runtime.mspan_} struct_{_runtime.len_int;_runtime.buf_[128]*runtime.mspan_}, *Pstruct_{_runtime.len_int;_runtime.buf_[128]*runtime.mspan_};

typedef struct runtime.pinner runtime.pinner, *Pruntime.pinner;

typedef struct runtime.pTraceState runtime.pTraceState, *Pruntime.pTraceState;

typedef struct runtime.persistentAlloc runtime.persistentAlloc, *Pruntime.persistentAlloc;

typedef struct runtime/internal/atomic.Int64 runtime/internal/atomic.Int64, *Pruntime/internal/atomic.Int64;

typedef struct runtime.limiterEvent runtime.limiterEvent, *Pruntime.limiterEvent;

typedef struct runtime.gcWork runtime.gcWork, *Pruntime.gcWork;

typedef struct runtime.wbBuf runtime.wbBuf, *Pruntime.wbBuf;

typedef struct []*runtime.timer []*runtime.timer, *P[]*runtime.timer;

typedef struct runtime.pageTraceBuf runtime.pageTraceBuf, *Pruntime.pageTraceBuf;

typedef struct runtime.gList runtime.gList, *Pruntime.gList;

typedef struct runtime.notInHeap runtime.notInHeap, *Pruntime.notInHeap;

typedef struct runtime/internal/atomic.align64 runtime/internal/atomic.align64, *Pruntime/internal/atomic.align64;

typedef struct runtime/internal/atomic.Uint64 runtime/internal/atomic.Uint64, *Pruntime/internal/atomic.Uint64;

typedef struct runtime.workbuf runtime.workbuf, *Pruntime.workbuf;

struct runtime/internal/atomic.align64 {
};

struct runtime/internal/atomic.Uint64 {
    struct runtime/internal/atomic.align64 _;
    struct runtime/internal/atomic.noCopy noCopy;
    uint64 value;
};

struct runtime.wbBuf {
    uintptr next;
    uintptr end;
    uintptr buf[512];
};

struct runtime.pTraceState {
    runtime.traceBufPtr buf;
    bool inSweep;
    uintptr swept;
    uintptr reclaimed;
};

struct runtime.gList {
    runtime.guintptr head;
};

struct []*runtime.sudog {
    struct runtime.sudog **array;
    int len;
    int cap;
};

struct struct_{_runtime.gList;_runtime.n_int32_} { // Original name: struct { runtime.gList; runtime.n int32 }
    struct runtime.gList gList;
    int32 n;
};

struct []*runtime.timer {
    struct runtime.timer **array;
    int len;
    int cap;
};

struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_*runtime.p_} { // Original name: noalg.struct { F uintptr; X0 *runtime.g; X1 *runtime.p }
    uintptr F;
    struct runtime.g *X0;
    struct runtime.p *X1;
};

struct runtime.limiterEvent {
    struct runtime/internal/atomic.Uint64 stamp;
};

struct runtime/internal/atomic.Int64 {
    struct runtime/internal/atomic.align64 _;
    struct runtime/internal/atomic.noCopy noCopy;
    int64 value;
};

struct runtime.pageCache {
    uintptr base;
    uint64 cache;
    uint64 scav;
};

struct []*runtime._defer {
    struct runtime._defer **array;
    int len;
    int cap;
};

struct runtime.gcWork {
    struct runtime.workbuf *wbuf1;
    struct runtime.workbuf *wbuf2;
    uint64 bytesMarked;
    int64 heapScanWork;
    bool flushedWork;
};

struct runtime.pinner {
    struct []unsafe.Pointer refs;
    void *refStore[5];
};

struct runtime.pageTraceBuf {
};

struct runtime.persistentAlloc {
    struct runtime.notInHeap *base;
    uintptr off;
};

struct runtime.sysmontick {
    uint32 schedtick;
    int64 schedwhen;
    uint32 syscalltick;
    int64 syscallwhen;
};

struct runtime.notInHeap {
    struct runtime/internal/sys.NotInHeap _;
};

struct runtime.workbuf {
    struct runtime/internal/sys.NotInHeap _;
    struct runtime.workbufhdr workbufhdr;
    uintptr obj[253];
};

struct struct_{_runtime.len_int;_runtime.buf_[128]*runtime.mspan_} { // Original name: struct { runtime.len int; runtime.buf [128]*runtime.mspan }
    int len;
    struct runtime.mspan *buf[128];
};

struct runtime.p {
    int32 id;
    uint32 status;
    runtime.puintptr link;
    uint32 schedtick;
    uint32 syscalltick;
    struct runtime.sysmontick sysmontick;
    runtime.muintptr m;
    struct runtime.mcache *mcache;
    struct runtime.pageCache pcache;
    uintptr raceprocctx;
    struct []*runtime._defer deferpool;
    struct runtime._defer *deferpoolbuf[32];
    uint64 goidcache;
    uint64 goidcacheend;
    uint32 runqhead;
    uint32 runqtail;
    runtime.guintptr runq[256];
    runtime.guintptr runnext;
    struct struct_{_runtime.gList;_runtime.n_int32_} gFree;
    struct []*runtime.sudog sudogcache;
    struct runtime.sudog *sudogbuf[128];
    struct struct_{_runtime.len_int;_runtime.buf_[128]*runtime.mspan_} mspancache;
    struct runtime.pinner *pinnerCache;
    struct runtime.pTraceState trace;
    struct runtime.persistentAlloc palloc;
    struct runtime/internal/atomic.Int64 timer0When;
    struct runtime/internal/atomic.Int64 timerModifiedEarliest;
    int64 gcAssistTime;
    int64 gcFractionalMarkTime;
    struct runtime.limiterEvent limiterEvent;
    runtime.gcMarkWorkerMode gcMarkWorkerMode;
    int64 gcMarkWorkerStartTime;
    struct runtime.gcWork gcw;
    struct runtime.wbBuf wbBuf;
    uint32 runSafePointFn;
    struct runtime/internal/atomic.Uint32 statsSeq;
    struct runtime.mutex timersLock;
    struct []*runtime.timer timers;
    struct runtime/internal/atomic.Uint32 numTimers;
    struct runtime/internal/atomic.Uint32 deletedTimers;
    uintptr timerRaceCtx;
    int64 maxStackScanDelta;
    uint64 scannedStackSize;
    uint64 scannedStacks;
    bool preempt;
    struct runtime.pageTraceBuf pageTraceBuf;
};

typedef struct google.golang.org/protobuf/internal/impl.messageIfaceWrapper google.golang.org/protobuf/internal/impl.messageIfaceWrapper, *Pgoogle.golang.org/protobuf/internal/impl.messageIfaceWrapper;

struct google.golang.org/protobuf/internal/impl.messageIfaceWrapper {
    struct google.golang.org/protobuf/internal/impl.pointer p;
    struct google.golang.org/protobuf/internal/impl.MessageInfo *mi;
};

typedef struct vendor/golang.org/x/text/unicode/norm.Properties vendor/golang.org/x/text/unicode/norm.Properties, *Pvendor/golang.org/x/text/unicode/norm.Properties;

struct vendor/golang.org/x/text/unicode/norm.Properties {
    uint8 pos;
    uint8 size;
    uint8 ccc;
    uint8 tccc;
    uint8 nLead;
    vendor/golang.org/x/text/unicode/norm.qcInfo flags;
    uint16 index;
};

typedef struct internal/poll.SysFile internal/poll.SysFile, *Pinternal/poll.SysFile;

typedef struct []syscall.Iovec []syscall.Iovec, *P[]syscall.Iovec;

struct []syscall.Iovec {
    struct syscall.Iovec *array;
    int len;
    int cap;
};

struct internal/poll.SysFile {
    struct []syscall.Iovec *iovecs;
};

typedef struct runtime.iface net.Listener;

typedef struct runtime.randomEnum runtime.randomEnum, *Pruntime.randomEnum;

struct runtime.randomEnum {
    uint32 i;
    uint32 count;
    uint32 pos;
    uint32 inc;
};

typedef struct sudog<net.result[go.shape.[]string].1> sudog<net.result[go.shape.[]string].1>, *Psudog<net.result[go.shape.[]string].1>;

struct sudog<net.result[go.shape.[]string].1> { // Original name: sudog<net.result[go.shape.[]string]·1>
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    struct net.result[go.shape.[]string].1 *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

typedef struct []float32 []float32, *P[]float32;

struct []float32 {
    float32 *array;
    int len;
    int cap;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.MessageType;

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_google.golang.org/protobuf/internal/impl.Converter_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_google.golang.org/protobuf/internal/impl.Converter_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_google.golang.org/protobuf/internal/impl.Converter_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_google.golang.org/protobuf/internal/impl.Converter_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/internal/impl.offset; X1 reflect.StructField; X2 google.golang.org/protobuf/internal/impl.Converter }
    uintptr F;
    google.golang.org/protobuf/internal/impl.offset X0;
    struct reflect.StructField X1;
    google.golang.org/protobuf/internal/impl.Converter X2;
};

typedef struct golang.org/x/net/trace.data golang.org/x/net/trace.data, *Pgolang.org/x/net/trace.data;

typedef struct []*golang.org/x/net/trace.bucketData []*golang.org/x/net/trace.bucketData, *P[]*golang.org/x/net/trace.bucketData;

typedef struct golang.org/x/net/trace.bucketData golang.org/x/net/trace.bucketData, *Pgolang.org/x/net/trace.bucketData;

struct []*golang.org/x/net/trace.bucketData {
    struct golang.org/x/net/trace.bucketData **array;
    int len;
    int cap;
};

struct golang.org/x/net/trace.data {
    struct []*golang.org/x/net/trace.bucketData Buckets;
    int64 Count;
    int64 Median;
    float64 Mean;
    float64 StandardDeviation;
};

struct golang.org/x/net/trace.bucketData {
    int64 Lower;
    int64 Upper;
    int64 N;
    float64 Pct;
    float64 CumulativePct;
    int GraphWidth;
};

typedef struct net/url.InvalidHostError net/url.InvalidHostError, *Pnet/url.InvalidHostError;

struct net/url.InvalidHostError {
    uint8 *str;
    int len;
};

typedef struct runtime.elfDyn runtime.elfDyn, *Pruntime.elfDyn;

struct runtime.elfDyn {
    int64 d_tag;
    uint64 d_val;
};

typedef struct hash<*regexp/syntax.Regexp,int> hash<*regexp/syntax.Regexp,int>, *Phash<*regexp/syntax.Regexp,int>;

typedef struct hash<*regexp/syntax.Regexp,int> *map[*regexp/syntax.Regexp]int;

typedef struct bucket<*regexp/syntax.Regexp,int> bucket<*regexp/syntax.Regexp,int>, *Pbucket<*regexp/syntax.Regexp,int>;

typedef struct regexp/syntax.Regexp regexp/syntax.Regexp, *Pregexp/syntax.Regexp;

typedef struct []*regexp/syntax.Regexp []*regexp/syntax.Regexp, *P[]*regexp/syntax.Regexp;

struct hash<*regexp/syntax.Regexp,int> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<*regexp/syntax.Regexp,int> *buckets;
    struct bucket<*regexp/syntax.Regexp,int> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct []*regexp/syntax.Regexp {
    struct regexp/syntax.Regexp **array;
    int len;
    int cap;
};

struct bucket<*regexp/syntax.Regexp,int> {
    uint8 tophash[8];
    struct regexp/syntax.Regexp *keys[8];
    int values[8];
    struct bucket<*regexp/syntax.Regexp,int> *overflow;
};

struct regexp/syntax.Regexp {
    regexp/syntax.Op Op;
    regexp/syntax.Flags Flags;
    struct []*regexp/syntax.Regexp Sub;
    struct regexp/syntax.Regexp *Sub0[1];
    struct []int32 Rune;
    int32 Rune0[2];
    int Min;
    int Max;
    int Cap;
    struct string Name;
};

typedef struct google.golang.org/grpc/internal/binarylog.ServerMessage google.golang.org/grpc/internal/binarylog.ServerMessage, *Pgoogle.golang.org/grpc/internal/binarylog.ServerMessage;

struct google.golang.org/grpc/internal/binarylog.ServerMessage {
    bool OnClientSide;
    interface_{} Message;
};

typedef struct noalg.struct_{_F_uintptr;_X0_func();_X1_*google.golang.org/grpc.Server;_X2_*google.golang.org/grpc/internal/transport.Stream;_X3_[]uint8;_X4_[]google.golang.org/grpc/stats.Handler;_X5_*context.Context;_X6_*google.golang.org/grpc.payloadInfo;_X7_[]google.golang.org/grpc/internal/binarylog.MethodLogger;_X8_*google.golang.org/grpc.traceInfo_} noalg.struct_{_F_uintptr;_X0_func();_X1_*google.golang.org/grpc.Server;_X2_*google.golang.org/grpc/internal/transport.Stream;_X3_[]uint8;_X4_[]google.golang.org/grpc/stats.Handler;_X5_*context.Context;_X6_*google.golang.org/grpc.payloadInfo;_X7_[]google.golang.org/grpc/internal/binarylog.MethodLogger;_X8_*google.golang.org/grpc.traceInfo_}, *Pnoalg.struct_{_F_uintptr;_X0_func();_X1_*google.golang.org/grpc.Server;_X2_*google.golang.org/grpc/internal/transport.Stream;_X3_[]uint8;_X4_[]google.golang.org/grpc/stats.Handler;_X5_*context.Context;_X6_*google.golang.org/grpc.payloadInfo;_X7_[]google.golang.org/grpc/internal/binarylog.MethodLogger;_X8_*google.golang.org/grpc.traceInfo_};

typedef struct google.golang.org/grpc.Server google.golang.org/grpc.Server, *Pgoogle.golang.org/grpc.Server;

typedef struct google.golang.org/grpc.payloadInfo google.golang.org/grpc.payloadInfo, *Pgoogle.golang.org/grpc.payloadInfo;

typedef struct google.golang.org/grpc.serverOptions google.golang.org/grpc.serverOptions, *Pgoogle.golang.org/grpc.serverOptions;

typedef struct google.golang.org/grpc.StreamServerInfo google.golang.org/grpc.StreamServerInfo, *Pgoogle.golang.org/grpc.StreamServerInfo;

typedef struct hash<net.Listener,bool> hash<net.Listener,bool>, *Phash<net.Listener,bool>;

typedef struct hash<net.Listener,bool> *map[net.Listener]bool;

typedef struct hash<string,map[google.golang.org/grpc/internal/transport.ServerTransport]bool> hash<string,map[google.golang.org/grpc/internal/transport.ServerTransport]bool>, *Phash<string,map[google.golang.org/grpc/internal/transport.ServerTransport]bool>;

typedef struct hash<string,map[google.golang.org/grpc/internal/transport.ServerTransport]bool> *map[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool;

typedef struct hash<string,*google.golang.org/grpc.serviceInfo> hash<string,*google.golang.org/grpc.serviceInfo>, *Phash<string,*google.golang.org/grpc.serviceInfo>;

typedef struct hash<string,*google.golang.org/grpc.serviceInfo> *map[string]*google.golang.org/grpc.serviceInfo;

typedef struct runtime.iface google.golang.org/grpc.traceEventLog;

typedef struct sync.WaitGroup sync.WaitGroup, *Psync.WaitGroup;

typedef struct hchan<func()> hchan<func()>, *Phchan<func()>;

typedef struct hchan<func()> *chan_func();

typedef struct []google.golang.org/grpc.UnaryServerInterceptor []google.golang.org/grpc.UnaryServerInterceptor, *P[]google.golang.org/grpc.UnaryServerInterceptor;

typedef struct []google.golang.org/grpc.StreamServerInterceptor []google.golang.org/grpc.StreamServerInterceptor, *P[]google.golang.org/grpc.StreamServerInterceptor;

typedef struct bucket<net.Listener,bool> bucket<net.Listener,bool>, *Pbucket<net.Listener,bool>;

typedef struct bucket<string,map[google.golang.org/grpc/internal/transport.ServerTransport]bool> bucket<string,map[google.golang.org/grpc/internal/transport.ServerTransport]bool>, *Pbucket<string,map[google.golang.org/grpc/internal/transport.ServerTransport]bool>;

typedef struct bucket<string,*google.golang.org/grpc.serviceInfo> bucket<string,*google.golang.org/grpc.serviceInfo>, *Pbucket<string,*google.golang.org/grpc.serviceInfo>;

typedef struct sync/atomic.Uint64 sync/atomic.Uint64, *Psync/atomic.Uint64;

typedef struct waitq<func()> waitq<func()>, *Pwaitq<func()>;

typedef struct hash<google.golang.org/grpc/internal/transport.ServerTransport,bool> hash<google.golang.org/grpc/internal/transport.ServerTransport,bool>, *Phash<google.golang.org/grpc/internal/transport.ServerTransport,bool>;

typedef struct hash<google.golang.org/grpc/internal/transport.ServerTransport,bool> *map[google.golang.org/grpc/internal/transport.ServerTransport]bool;

typedef struct google.golang.org/grpc.serviceInfo google.golang.org/grpc.serviceInfo, *Pgoogle.golang.org/grpc.serviceInfo;

typedef struct sudog<func()> sudog<func()>, *Psudog<func()>;

typedef struct hash<string,*google.golang.org/grpc.MethodDesc> hash<string,*google.golang.org/grpc.MethodDesc>, *Phash<string,*google.golang.org/grpc.MethodDesc>;

typedef struct hash<string,*google.golang.org/grpc.MethodDesc> *map[string]*google.golang.org/grpc.MethodDesc;

typedef struct hash<string,*google.golang.org/grpc.StreamDesc> hash<string,*google.golang.org/grpc.StreamDesc>, *Phash<string,*google.golang.org/grpc.StreamDesc>;

typedef struct hash<string,*google.golang.org/grpc.StreamDesc> *map[string]*google.golang.org/grpc.StreamDesc;

typedef struct bucket<string,*google.golang.org/grpc.MethodDesc> bucket<string,*google.golang.org/grpc.MethodDesc>, *Pbucket<string,*google.golang.org/grpc.MethodDesc>;

typedef struct bucket<string,*google.golang.org/grpc.StreamDesc> bucket<string,*google.golang.org/grpc.StreamDesc>, *Pbucket<string,*google.golang.org/grpc.StreamDesc>;
