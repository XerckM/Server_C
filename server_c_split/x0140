  t.wall = d;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  d_00 = in_RDI / 1000000000;
  sVar1 = (sdword)in_RDI + (sdword)d_00 * -1000000000;
  dVar2 = (dword)t.wall & 0x3fffffff;
  sVar3 = dVar2 + sVar1;
  if (sVar3 < 1000000000) {
    if (sVar3 < 0) {
      d_00 = d_00 + -1;
      sVar3 = dVar2 + sVar1 + 1000000000;
    }
  }
  else {
    d_00 = d_00 + 1;
    sVar3 = dVar2 + sVar1 + -1000000000;
  }
  t.wall = t.wall & 0xffffffffc0000000 | (int)sVar3;
  time___Time__addSec(&t,d_00);
  return;
}



void time_Time_Sub(time_Time t,time_Time u,time_Duration ~r0)

{
  bool ~r0_00;
  char extraout_AL;
  char extraout_AL_00;
  int64 te;
  time_Duration d_1;
  time_Duration d;
  int in_RBX;
  int in_RSI;
  uint in_RDI;
  int unaff_R14;
  time_Time in_stack_ffffffffffffffc0;
  time_Time in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (-1 < (int)(~r0 & in_RDI)) {
    time_Time_Add(in_stack_ffffffffffffffc0,in_RDI,in_stack_ffffffffffffffd8);
    time_Time_Equal(in_stack_ffffffffffffffc0,in_stack_ffffffffffffffd8,~r0_00);
    if (extraout_AL != '\0') {
      return;
    }
    time_Time_Before(in_stack_ffffffffffffffc0,in_stack_ffffffffffffffd8,SUB81(~r0,0));
    if (extraout_AL_00 != '\0') {
      return;
    }
    return;
  }
  if ((in_RBX - in_RSI < 0) && (in_RSI < in_RBX)) {
    return;
  }
  if ((in_RBX != in_RSI && -1 < in_RBX - in_RSI) && (in_RBX < in_RSI)) {
    return;
  }
  return;
}



void time_Since(time_Time t,time_Duration ~r0)

{
  time_Duration extraout_RAX;
  time_Duration ~r0_00;
  int unaff_R14;
  time_Time in_stack_ffffffffffffffb0;
  time_Time in_stack_ffffffffffffffc8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (~r0 < 0) {
    runtime_nanotime(~r0);
    ~r0_00 = -0x8000000000000000;
  }
  else {
    time_Now(in_stack_ffffffffffffffb0);
    ~r0_00 = extraout_RAX;
  }
  time_Time_Sub(in_stack_ffffffffffffffb0,in_stack_ffffffffffffffc8,~r0_00);
  return;
}



void time_Until(time_Time t,time_Duration ~r0)

{
  int unaff_R14;
  time_Time in_stack_ffffffffffffffb0;
  time_Time in_stack_ffffffffffffffc8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (~r0 < 0) {
    runtime_nanotime(~r0);
  }
  else {
    time_Now(in_stack_ffffffffffffffb0);
  }
  time_Time_Sub(in_stack_ffffffffffffffb0,in_stack_ffffffffffffffc8,~r0);
  return;
}



void time_Time_AddDate(time_Time t,int years,int months,int days,time_Time ~r0)

{
  int extraout_RAX;
  int year;
  int hour_00;
  int hour;
  int extraout_RCX;
  int day;
  int sec_00;
  int sec;
  time_Location *l;
  int extraout_RBX;
  time_Month month;
  int min_00;
  int min;
  int in_RSI;
  int in_RDI;
  int in_R8;
  int unaff_R14;
  time_Time in_stack_ffffffffffffffa0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  time_Time_date(in_stack_ffffffffffffffa0,SUB81(years,0),months,days,1,in_RSI);
  time_Time_Clock(in_stack_ffffffffffffffa0,years,months,days);
  l = (time_Location *)days;
  if (days == 0) {
    l = time_UTC;
  }
  time_Date(extraout_RAX + in_RDI,in_RSI + extraout_RBX,extraout_RCX + in_R8,hour_00,min_00,sec_00,
            (int)(sdword)((dword)years & 0x3fffffff),l,in_stack_ffffffffffffffa0);
  return;
}



void time_Time_date(time_Time t,bool full,int year,time_Month month,int day,int yday)

{
  undefined7 in_register_00000001;
  uint64 abs;
  int year_00;
  int day_00;
  time_Month month_00;
  int yday_00;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    day = day & 0xff;
  }
  abs = time_Time_abs(CONCAT71(in_register_00000001,full));
  time_absDate(abs,SUB81(day,0),year_00,month_00,day_00,yday_00);
  return;
}



void time_absDate(uint64 abs,bool full,int year,time_Month month,int day,int yday)

{
  undefined auVar1 [16];
  undefined auVar2 [16];
  uint uVar3;
  uint64 d;
  uint uVar4;
  int iVar5;
  uint64 n;
  uint uVar6;
  int iVar7;
  int iVar8;
  uint64 y;
  int begin;
  
  uVar3 = (abs / 0x15180) % 0x23ab1;
  uVar4 = uVar3 >> 1;
  iVar5 = uVar4 / 0x4756 - uVar4 / 0x11d58;
  uVar3 = uVar3 + iVar5 * -0x8eac;
  auVar1._8_8_ = 0;
  auVar1._0_8_ = uVar3;
  uVar4 = SUB168(ZEXT816(0x66db072f2284d191) * auVar1,8);
  uVar4 = (uVar4 + uVar3 >> 1 | (uint)CARRY8(uVar4,uVar3) << 0x3f) >> 10;
  uVar3 = uVar3 + uVar4 * -0x5b5;
  auVar2._8_8_ = 0;
  auVar2._0_8_ = uVar3;
  uVar6 = SUB168(ZEXT816(0x6719f36016719f37) * auVar2,8);
  uVar6 = uVar6 + uVar3 >> 1 | (uint)CARRY8(uVar6,uVar3) << 0x3f;
  iVar7 = (uVar6 >> 8) - (uVar6 >> 10);
  iVar8 = ((abs / 0x15180) / 0x23ab1) * 400 + iVar5 * 100 + uVar4 * 4 + iVar7;
  uVar4 = iVar8 - 0x440d116ebf;
  iVar5 = uVar3 + iVar7 * -0x16d;
  if (!full) {
    return;
  }
  if ((uVar4 & 3) == 0) {
    iVar8 = SUB168(SEXT816(-0x5c28f5c28f5c28f5) * SEXT816((int)uVar4),8) + iVar8 + -0x440d116ebf;
    if ((((iVar8 >> 6) - ((int)uVar4 >> 0x3f)) * 100 - uVar4 != 0) ||
       (((iVar8 >> 8) - ((int)uVar4 >> 0x3f)) * 400 - uVar4 == 0)) {
      if (iVar5 < 0x3c) {
        if (iVar5 == 0x3b) {
          return;
        }
      }
      else {
        iVar5 = iVar5 + -1;
      }
    }
  }
  uVar4 = (iVar5 + SUB168(SEXT816(-0x7bdef7bdef7bdef7) * SEXT816(iVar5),8) >> 4) - (iVar5 >> 0x3f);
  if (uVar4 + 1 < 0xd) {
    if ((iVar5 < time_daysBefore[uVar4 + 1]) && (0xc < uVar4)) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void time_Now(time_Time ~r0)

{
  int extraout_RAX;
  int64 sec;
  int64 mono;
  int32 nsec;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  time_now();
  if (extraout_RAX + 0x9fe07780U >> 0x21 != 0) {
    return;
  }
  return;
}



void time_Time_UTC(time_Time t,time_Time ~r0)

{
  return;
}



void time_Time_Local(time_Time t,time_Time ~r0)

{
  return;
}



void time_Time_In(time_Time t,time_Location *loc,time_Time ~r0)

{
  int in_RDI;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RDI != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffe8);
}



void time_Time_Location(time_Time t,time_Location *~r0)

{
  time_Location *l;
  
  return;
}



void time_Time_Zone(time_Time t,string name,int offset)

{
  time_Location *in_RCX;
  int in_RBX;
  int64 in_RSI;
  int64 extraout_RSI;
  int64 in_RDI;
  int64 extraout_RDI;
  undefined in_R8B;
  undefined extraout_R8B;
  int unaff_R14;
  string in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RSI = extraout_RSI;
    in_RDI = extraout_RDI;
    in_R8B = extraout_R8B;
  }
  if (offset < 0) {
    in_RSI = 0xdd7b17f80;
    in_RBX = ((uint)(offset << 1) >> 0x1f) + 0xdd7b17f80;
  }
  time___Location__lookup
            (in_RCX,in_RBX + -0xe7791f700,in_stack_ffffffffffffffe8,(int)in_RCX,in_RDI,in_RSI,
             (bool)in_R8B);
  return;
}



void time_Time_ZoneBounds(time_Time t,time_Time start,time_Time end)

{
  int in_RAX;
  time_Location *in_RCX;
  int in_RBX;
  int64 in_RSI;
  int64 endSec;
  int64 extraout_RSI;
  int64 in_RDI;
  int64 startSec;
  int64 extraout_RDI;
  undefined8 in_R8;
  undefined8 extraout_R8;
  int unaff_R14;
  string in_stack_ffffffffffffffb8;
  time_Time start_local;
  time_Time end_local;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RSI = extraout_RSI;
    in_RDI = extraout_RDI;
    in_R8 = extraout_R8;
  }
  if (in_RAX < 0) {
    in_RBX = ((uint)(in_RAX << 1) >> 0x1f) + 0xdd7b17f80;
  }
  time___Location__lookup
            (in_RCX,in_RBX + -0xe7791f700,in_stack_ffffffffffffffb8,in_RBX,in_RDI,in_RSI,
             SUB81(in_R8,0));
  return;
}



void time_Time_Unix(time_Time t,int64 ~r0)

{
  return;
}



void time_Time_UnixMilli(time_Time t,int64 ~r0)

{
  return;
}



void time_Time_UnixMicro(time_Time t,int64 ~r0)

{
  return;
}



void time_Time_UnixNano(time_Time t,int64 ~r0)

{
  return;
}



void time_Time_MarshalBinary(time_Time t,__uint8 ~r0,error ~r1)

{
  uint8 version;
  int in_RAX;
  undefined8 *extraout_RAX;
  uint8 *oldPtr;
  int extraout_RAX_00;
  time_Location *in_RCX;
  time_Location *l;
  time_Location *ptVar1;
  int extraout_RCX;
  int offset;
  int64 sec;
  int16 offsetMin;
  int iVar2;
  int8 offsetSec;
  void *~r0_00;
  dword dVar3;
  int unaff_R14;
  runtime_slice in_stack_ffffffffffffff58;
  string in_stack_ffffffffffffff70;
  int local_28;
  int local_20;
  void *local_18;
  int local_10;
  
  while (&local_28 <= *(int **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ptVar1 = time_UTC;
  if (in_RCX != (time_Location *)0x0) {
    ptVar1 = in_RCX;
  }
  if (time_UTC == ptVar1) {
    version = 1;
    iVar2 = 0xffffffff;
    ~r0_00 = (void *)0x0;
  }
  else {
    time_Time_Zone((time_Time)in_stack_ffffffffffffff58,in_stack_ffffffffffffff70,in_RAX);
    iVar2 = (SUB168(SEXT816(-0x7777777777777777) * SEXT816(extraout_RCX),8) + extraout_RCX >> 5) -
            (extraout_RCX >> 0x3f);
    if (extraout_RCX == iVar2 * 0x3c) {
      version = 1;
      ~r0_00 = (void *)0x0;
    }
    else {
      ~r0_00 = (void *)(extraout_RCX + iVar2 * -0x3c);
      version = 2;
    }
    if (((iVar2 < -0x8000) || (iVar2 == -1)) || (0x7fff < iVar2)) {
      runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_00);
      extraout_RAX[1] = 0x2a;
      *extraout_RAX = &DAT_008c55b3;
      return;
    }
  }
  if (in_RAX < 0) {
    sec = ((uint)(in_RAX << 1) >> 0x1f) + 0xdd7b17f80;
  }
  local_10 = sec >> 0x38;
  local_18 = (void *)(sec >> 0x30);
  local_20 = sec >> 0x28;
  local_28 = sec >> 0x20;
  dVar3 = (dword)in_RAX & 0x3fffffff;
  runtime_newobject((internal_abi_Type *)&DAT_00812ac0,local_18);
  *oldPtr = version;
  oldPtr[1] = (uint8)local_10;
  oldPtr[2] = (uint8)local_18;
  oldPtr[3] = (uint8)local_20;
  oldPtr[4] = (uint8)local_28;
  oldPtr[5] = (uint8)((uint)sec >> 0x18);
  oldPtr[6] = (uint8)((uint)sec >> 0x10);
  oldPtr[7] = (uint8)((uint)sec >> 8);
  oldPtr[8] = (uint8)sec;
  oldPtr[9] = (uint8)(dVar3 >> 0x18);
  oldPtr[10] = (uint8)(dVar3 >> 0x10);
  oldPtr[0xb] = (uint8)(dVar3 >> 8);
  oldPtr[0xc] = (uint8)dVar3;
  oldPtr[0xd] = (uint8)((uint)iVar2 >> 8);
  oldPtr[0xe] = (uint8)iVar2;
  if (version == 2) {
    runtime_growslice(oldPtr,0x10,0xf,1,(internal_abi_Type *)&DAT_00807920,in_stack_ffffffffffffff58
                     );
    *(char *)(extraout_RAX_00 + 0xf) = (char)~r0_00;
  }
  return;
}



void time___Time__UnmarshalBinary(time_Time *t,__uint8 data,error ~r0)

{
  char cVar1;
  dword dVar2;
  int iVar3;
  undefined8 *extraout_RAX;
  time_Time *extraout_RAX_00;
  time_Time *extraout_RAX_01;
  time_Location *extraout_RAX_02;
  time_Location *extraout_RAX_03;
  undefined8 *extraout_RAX_04;
  undefined8 *extraout_RAX_05;
  int in_RCX;
  undefined8 extraout_RCX;
  uint64 uVar4;
  undefined8 extraout_RCX_00;
  int extraout_RCX_01;
  int localoff;
  time_Location *ptVar5;
  time_Location *extraout_RCX_02;
  uint8 version;
  char *in_RBX;
  int wantLen;
  uint uVar6;
  uint extraout_RSI;
  uint uVar7;
  int in_RDI;
  uint extraout_RDI;
  dword extraout_R8D;
  dword dVar8;
  uint uVar9;
  int iVar10;
  int offset;
  int extraout_R9;
  undefined8 *extraout_R11;
  undefined8 *extraout_R11_00;
  time_Location **extraout_R11_01;
  time_Location **extraout_R11_02;
  int unaff_R14;
  string in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RCX == 0) {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,in_RBX);
    extraout_RAX_05[1] = 0x1d;
    *extraout_RAX_05 = &DAT_008bdfae;
    return;
  }
  cVar1 = *in_RBX;
  if ((cVar1 != '\x01') && (cVar1 != '\x02')) {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,in_RBX);
    extraout_RAX[1] = 0x29;
    *extraout_RAX = &DAT_008c4ecb;
    return;
  }
  wantLen = 0xf;
  if (cVar1 == '\x02') {
    wantLen = 0x10;
  }
  if (in_RCX == wantLen) {
    uVar6 = (uint)((dword)(-(in_RDI + -1) >> 0x3f) & 1);
    if (in_RCX - 1U < 8) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    uVar9 = (uint)((dword)(-(in_RDI + -9) >> 0x3f) & 8);
    uVar7 = *(uint *)(in_RBX + uVar6);
    iVar3 = uVar9 + uVar6;
    if (3 < in_RCX - 9U) {
      dVar8 = *(dword *)(in_RBX + uVar9 + uVar6);
      if (in_RCX - 0xdU < 2) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      uVar6 = (uint)((dword)(-(in_RDI + -0xd) >> 0x3f) & 4);
      iVar10 = (short)(*(ushort *)(in_RBX + uVar6 + iVar3) << 8 |
                      *(ushort *)(in_RBX + uVar6 + iVar3) >> 8) * 0x3c;
      if (cVar1 == '\x02') {
        if (in_RCX - 0xdU < 3) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        iVar10 = iVar10 + (uint)(byte)in_RBX[uVar6 + iVar3 + 2];
      }
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier1();
        *extraout_R11 = extraout_RCX;
        t = extraout_RAX_00;
        uVar7 = extraout_RSI;
        uVar6 = extraout_RDI;
        iVar10 = extraout_R9;
        dVar8 = extraout_R8D;
      }
      t->loc = (time_Location *)0x0;
      uVar7 = uVar7 >> 0x38 | (uVar7 & 0xff000000000000) >> 0x28 | (uVar7 & 0xff0000000000) >> 0x18
              | (uVar7 & 0xff00000000) >> 8 | (uVar7 & 0xff000000) << 8 | (uVar7 & 0xff0000) << 0x18
              | (uVar7 & 0xff00) << 0x28 | uVar7 << 0x38;
      dVar2 = dVar8 >> 0x18 | (dVar8 & 0xff0000) >> 8 | (dVar8 & 0xff00) << 8;
      uVar4 = (uint64)(sdword)(dVar2 | dVar8 << 0x18);
      t->wall = uVar4;
      t->ext = uVar7;
      if (iVar10 == -0x3c) {
        if ((int)uVar4 < 0) {
          t->ext = ((uVar4 << 1) >> 0x1f) + 0xdd7b17f80;
          t->wall = (uint)(dVar2 | dVar8 << 0x18 & 0x3fffffff);
        }
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier1();
          *extraout_R11_00 = extraout_RCX_00;
          t = extraout_RAX_01;
        }
        t->loc = (time_Location *)0x0;
      }
      else {
        if ((int)uVar4 < 0) {
          uVar7 = ((uVar4 << 1) >> 0x1f) + 0xdd7b17f80;
        }
        time___Location__lookup
                  (time_Local,uVar7 - 0xe7791f700,in_stack_ffffffffffffffd8,-0xe7791f700,uVar6,uVar7
                   ,SUB41(dVar8 >> 0x18,0));
        if (extraout_RCX_01 == iVar10) {
          ptVar5 = time_Local;
          if (time_Local == &time_utcLoc) {
            ptVar5 = (time_Location *)0x0;
          }
          if ((int)t->wall < 0) {
            t->ext = ((t->wall << 1) >> 0x1f) + 0xdd7b17f80;
            t->wall = t->wall & 0x3fffffff;
          }
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_01 = extraout_RCX_02;
            extraout_R11_01[1] = t->loc;
            ptVar5 = extraout_RCX_02;
          }
          t->loc = ptVar5;
        }
        else {
          time_FixedZone(in_stack_ffffffffffffffd8,0,(time_Location *)0x0);
          ptVar5 = extraout_RAX_02;
          if (extraout_RAX_02 == &time_utcLoc) {
            ptVar5 = (time_Location *)0x0;
          }
          if ((int)t->wall < 0) {
            t->ext = ((t->wall << 1) >> 0x1f) + 0xdd7b17f80;
            t->wall = t->wall & 0x3fffffff;
          }
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_02 = extraout_RAX_03;
            extraout_R11_02[1] = t->loc;
            ptVar5 = extraout_RAX_03;
          }
          t->loc = ptVar5;
        }
      }
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,in_RBX);
  extraout_RAX_04[1] = 0x24;
  *extraout_RAX_04 = &DAT_008c22f7;
  return;
}


/*
Unable to decompile 'time.Time.GobEncode'
Cause: 
Low-level Error: Overlapping input varnodes
*/


void time___Time__GobDecode(time_Time *t,__uint8 data,error ~r0)

{
  error ~r0_00;
  void *unaff_RBP;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd8;
  runtime_itab *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ~r0_00.data = unaff_RBP;
  ~r0_00.tab = in_stack_fffffffffffffff0;
  time___Time__UnmarshalBinary(t,in_stack_ffffffffffffffd8,~r0_00);
  return;
}



void time_Time_MarshalJSON(time_Time t,__uint8 ~r0,error ~r1)

{
  time_Time t_00;
  runtime_slice ~r0_00;
  string a1;
  __uint8 b;
  __uint8 ~r0_01;
  error ~r1_00;
  undefined *extraout_RAX;
  void *oldPtr;
  void *extraout_RAX_00;
  void *pvVar1;
  undefined8 extraout_RAX_01;
  undefined8 *extraout_RAX_02;
  undefined8 *extraout_RAX_03;
  undefined8 *puVar2;
  uint oldCap;
  void *in_RBX;
  int extraout_RBX;
  uint newLen;
  uint extraout_RBX_00;
  void *~r0_02;
  undefined8 extraout_RSI;
  void *in_RDI;
  int extraout_RDI;
  int iVar3;
  void *extraout_RDI_00;
  undefined8 *extraout_R11;
  int unaff_R14;
  string in_stack_ffffffffffffff80;
  time_Location *in_stack_ffffffffffffff90;
  uint8 *in_stack_ffffffffffffff98;
  string in_stack_ffffffffffffffa0;
  undefined in_stack_ffffffffffffffb0 [16];
  int in_stack_ffffffffffffffc0;
  runtime_itab *in_stack_ffffffffffffffc8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI_00;
  }
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,0,0x25,in_RDI);
  *extraout_RAX = 0x22;
  t_00.loc = in_stack_ffffffffffffff90;
  t_00.wall = (uint64)in_stack_ffffffffffffff80.str;
  t_00.ext = in_stack_ffffffffffffff80.len;
  b.len = (int)in_stack_ffffffffffffffa0.str;
  b.cap = in_stack_ffffffffffffffa0.len;
  b.array = in_stack_ffffffffffffff98;
  ~r0_01.cap = in_stack_ffffffffffffffc0;
  ~r0_01.array = (uint8 *)in_stack_ffffffffffffffb0._0_8_;
  ~r0_01.len = in_stack_ffffffffffffffb0._8_8_;
  ~r1_00.data = in_RBX;
  ~r1_00.tab = in_stack_ffffffffffffffc8;
  time_Time_appendStrictRFC3339(t_00,b,~r0_01,~r1_00);
  newLen = extraout_RBX + 1;
  pvVar1 = oldPtr;
  iVar3 = extraout_RDI;
  if (oldCap < newLen) {
    ~r0_00.cap = (int)in_stack_ffffffffffffff90;
    ~r0_00.array = in_stack_ffffffffffffff80.str;
    ~r0_00.len = in_stack_ffffffffffffff80.len;
    runtime_growslice(oldPtr,newLen,oldCap,1,(internal_abi_Type *)&DAT_00807920,~r0_00);
    pvVar1 = extraout_RAX_00;
    newLen = extraout_RBX_00;
  }
  *(undefined *)((newLen - 1) + (int)pvVar1) = 0x22;
  if (iVar3 == 0) {
    return;
  }
  (**(code **)(iVar3 + 0x18))(extraout_RSI);
  a1.len = (int)in_stack_ffffffffffffff98;
  a1.str = (uint8 *)in_stack_ffffffffffffff90;
  runtime_concatstring2
            ((runtime_tmpBuf *)0x0,in_stack_ffffffffffffff80,a1,in_stack_ffffffffffffffa0);
  pvVar1 = ~r0_02;
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_02);
  extraout_RAX_02[1] = pvVar1;
  puVar2 = extraout_RAX_02;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11 = extraout_RAX_01;
    puVar2 = extraout_RAX_03;
  }
  *puVar2 = extraout_RAX_01;
  return;
}


/*
Unable to decompile 'time.(*Time).UnmarshalJSON'
Cause: 
Low-level Error: Overlapping input varnodes
*/


void time_Time_MarshalText(time_Time t,__uint8 ~r0,error ~r1)

{
  time_Time t_00;
  string a1;
  __uint8 b;
  __uint8 ~r0_00;
  error ~r1_00;
  undefined8 in_RAX;
  undefined8 extraout_RAX;
  undefined8 *extraout_RAX_00;
  undefined8 *extraout_RAX_01;
  undefined8 *puVar1;
  void *in_RCX;
  undefined8 uVar2;
  int in_RBX;
  void *~r0_01;
  undefined8 extraout_RSI;
  void *in_RDI;
  int extraout_RDI;
  void *extraout_RDI_00;
  undefined8 *extraout_R11;
  int unaff_R14;
  string in_stack_ffffffffffffffa0;
  time_Location *in_stack_ffffffffffffffb0;
  uint8 *in_stack_ffffffffffffffb8;
  string in_stack_ffffffffffffffc0;
  undefined8 in_stack_ffffffffffffffd0;
  void *pvVar3;
  runtime_itab *in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI_00;
  }
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,0,0x23,in_RDI);
  t_00.loc = in_stack_ffffffffffffffb0;
  t_00.wall = (uint64)in_stack_ffffffffffffffa0.str;
  t_00.ext = in_stack_ffffffffffffffa0.len;
  b.len = (int)in_stack_ffffffffffffffc0.str;
  b.cap = in_stack_ffffffffffffffc0.len;
  b.array = in_stack_ffffffffffffffb8;
  ~r0_00.len = in_RAX;
  ~r0_00.array = (uint8 *)in_stack_ffffffffffffffd0;
  ~r0_00.cap = in_RBX;
  ~r1_00.data = in_RCX;
  ~r1_00.tab = in_stack_ffffffffffffffe8;
  time_Time_appendStrictRFC3339(t_00,b,~r0_00,~r1_00);
  if (extraout_RDI == 0) {
    return;
  }
  (**(code **)(extraout_RDI + 0x18))(extraout_RSI);
  a1.len = (int)in_stack_ffffffffffffffb8;
  a1.str = (uint8 *)in_stack_ffffffffffffffb0;
  runtime_concatstring2
            ((runtime_tmpBuf *)0x0,in_stack_ffffffffffffffa0,a1,in_stack_ffffffffffffffc0);
  pvVar3 = ~r0_01;
  uVar2 = extraout_RAX;
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_01);
  extraout_RAX_00[1] = pvVar3;
  puVar1 = extraout_RAX_00;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11 = uVar2;
    puVar1 = extraout_RAX_01;
  }
  *puVar1 = uVar2;
  return;
}


/*
Unable to decompile 'time.(*Time).UnmarshalText'
Cause: 
Low-level Error: Overlapping input varnodes
*/


void time_Time_IsDST(time_Time t,bool ~r0)

{
  uint7 in_register_00000001;
  time_Location *in_RCX;
  int in_RBX;
  int64 in_RSI;
  int64 extraout_RSI;
  int64 in_RDI;
  int64 extraout_RDI;
  bool isDST;
  undefined4 in_R8D;
  undefined4 extraout_R8D;
  int unaff_R14;
  string in_stack_ffffffffffffffd0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RSI = extraout_RSI;
    in_RDI = extraout_RDI;
    in_R8D = extraout_R8D;
  }
  if ((int7)in_register_00000001 < 0) {
    in_RSI = 0xdd7b17f80;
    in_RBX = (((uint)in_register_00000001 << 9) >> 0x1f) + 0xdd7b17f80;
  }
  time___Location__lookup
            (in_RCX,in_RBX + -0xe7791f700,in_stack_ffffffffffffffd0,(int)in_RCX,in_RDI,in_RSI,
             SUB41(in_R8D,0));
  return;
}



void time_Date(int year,time_Month month,int day,int hour,int min,int sec,int nsec,
              time_Location *loc,time_Time ~r0)

{
  uint uVar1;
  uint64 abs;
  int offset_00;
  int offset;
  int m;
  int iVar2;
  uint uVar3;
  uint64 d_1;
  uint uVar4;
  uint64 d;
  int64 unix;
  int64 utc;
  int64 end_00;
  int64 end;
  int64 start_00;
  int64 start;
  uint uVar5;
  uint64 y;
  uint64 n;
  int iVar6;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffb0;
  time_Time t;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (loc == (time_Location *)0x0) {
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffffb0);
  }
  uVar5 = month - 1;
  if ((int)uVar5 < 0) {
    iVar2 = (SUB168(SEXT816(-0x5555555555555555) * SEXT816(-month),8) - month >> 3) -
            (-month >> 0x3f);
    year = (year - iVar2) - 1;
    uVar5 = month + iVar2 * 0xc + 0xb;
  }
  if (0xb < (int)uVar5) {
    iVar2 = (int)(SUB168(SEXT816(-0x5555555555555555) * SEXT816((int)uVar5),8) + uVar5) >> 3;
    year = iVar2 + year;
    uVar5 = uVar5 + iVar2 * -0xc;
  }
  if (nsec < 0) {
    iVar2 = -(nsec + 1) / 1000000000;
    sec = (sec - iVar2) + -1;
    nsec = nsec + iVar2 * 1000000000 + 1000000000;
  }
  if (999999999 < nsec) {
    sec = sec + nsec / 1000000000 + (nsec >> 0x3f);
  }
  if (sec < 0) {
    iVar2 = ((SUB168(SEXT816(-0x7777777777777777) * SEXT816(-(sec + 1)),8) - sec) + -1 >> 5) -
            (-(sec + 1) >> 0x3f);
    min = (min - iVar2) + -1;
    sec = sec + iVar2 * 0x3c + 0x3c;
  }
  if (0x3b < sec) {
    iVar2 = SUB168(SEXT816(-0x7777777777777777) * SEXT816(sec),8) + sec >> 5;
    min = min + iVar2;
    sec = sec + iVar2 * -0x3c;
  }
  if (min < 0) {
    iVar2 = ((SUB168(SEXT816(-0x7777777777777777) * SEXT816(-(min + 1)),8) - min) + -1 >> 5) -
            (-(min + 1) >> 0x3f);
    hour = (hour - iVar2) + -1;
    min = min + iVar2 * 0x3c + 0x3c;
  }
  if (0x3b < min) {
    iVar2 = SUB168(SEXT816(-0x7777777777777777) * SEXT816(min),8) + min >> 5;
    hour = hour + iVar2;
    min = min + iVar2 * -0x3c;
  }
  if (hour < 0) {
    iVar2 = ((SUB168(SEXT816(-0x5555555555555555) * SEXT816(-(hour + 1)),8) - hour) + -1 >> 4) -
            (-(hour + 1) >> 0x3f);
    day = (day - iVar2) + -1;
    hour = hour + iVar2 * 0x18 + 0x18;
  }
  if (0x17 < hour) {
    iVar2 = SUB168(SEXT816(-0x5555555555555555) * SEXT816(hour),8) + hour >> 4;
    day = day + iVar2;
    hour = hour + iVar2 * -0x18;
  }
  uVar3 = (year + 0x440d116ebfU) / 400;
  iVar2 = year + uVar3 * -400;
  uVar4 = (iVar2 + 0x440d116ebfU) / 100;
  iVar2 = iVar2 + uVar4 * -100;
  uVar1 = iVar2 + 0x440d116ebf;
  iVar2 = uVar4 * 0x8eac + uVar3 * 0x23ab1 + (uVar1 >> 2) * 0x5b5 +
          ((iVar2 - (uVar1 & 0xfffffffffffffffc)) + 0x440d116ebf) * 0x16d;
  if (uVar5 < 0xd) {
