    oldPtr[newLen - 1] = ctxt;
    if (newLen == 0) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    if (runtime_writeBarrier.enabled != false) {
      local_80 = newLen;
      local_78 = oldCap;
      local_68 = oldPtr;
      runtime_atomicwb(&(gp->cgoCtxt).array,oldPtr);
      oldCap = local_78;
      newLen = local_80;
      oldPtr = local_68;
    }
    LOCK();
    (gp->cgoCtxt).array = oldPtr;
    UNLOCK();
    (gp->cgoCtxt).cap = oldCap;
    (gp->cgoCtxt).len = newLen;
    local_38._8_8_ = &PTR_runtime_cgocallbackg1_func1_008eb278;
    local_38._0_8_ = runtime_cgocallbackg1_func2;
    ppcStack_18 = (code **)local_38;
    local_81 = 3;
    local_82 = 3;
  }
  if (gp->m->ncgo == 0) {
    runtime_chanrecv1((runtime_hchan *)runtime_main_init_done,(void *)0x0);
  }
  if (gp->m->profilehz != runtime_sched.profilehz) {
    runtime_setThreadCPUProfiler(runtime_sched.profilehz);
  }
  local_83 = 1;
  local_82 = local_82 | 4;
  local_48._8_8_ = &local_83;
  local_48._0_8_ = runtime_cgocallbackg1_func3;
  local_20 = (code **)local_48;
  cb = &local_70;
  local_81 = local_82;
  local_70 = (func_unsafe_Pointer_ *)fn;
  (*(code *)fn)(local_50);
  local_83 = 0;
  if ((local_82 & 4) != 0) {
    local_82 = local_82 & 0xfb;
    local_81 = local_82;
    (**local_20)();
  }
  if ((local_82 & 2) != 0) {
    local_82 = local_82 & 0xfd;
    local_81 = local_82;
    (**ppcStack_18)();
  }
  if ((local_82 & 1) != 0) {
    local_81 = local_82 & 0xfe;
    runtime_unlockOSThread();
  }
  return;
}



// WARNING: Unknown calling convention

void runtime_cgocallbackg1_func3(void)

{
  int *piVar1;
  int in_RDX;
  int unaff_R14;
  undefined auStack_10 [8];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  runtime_unwindm(*(bool **)(in_RDX + 8));
  return;
}



// WARNING: Unknown calling convention

void runtime_cgocallbackg1_func2(void)

{
  int *piVar1;
  int in_RDX;
  int unaff_R14;
  undefined auStack_10 [8];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  (***(code ***)(in_RDX + 8))(*(undefined8 *)(in_RDX + 0x10));
  return;
}



// WARNING: Unknown calling convention

void runtime_unwindm(bool *restore)

{
  sdword *psVar1;
  sdword sVar2;
  int *piVar3;
  runtime_m *mp;
  int unaff_R14;
  runtime_g *gp;
  runtime_g *gp_1;
  
  if (*restore != false) {
    psVar1 = (sdword *)(*(int *)(unaff_R14 + 0x30) + 0x108);
    *psVar1 = *psVar1 + 1;
    piVar3 = *(int **)(unaff_R14 + 0x30);
    *(undefined8 *)(*piVar3 + 0x38) = **(undefined8 **)(*piVar3 + 0x38);
    if (0 < *(sdword *)(piVar3 + 0x27)) {
      *(undefined *)(piVar3 + 0x23) = 0;
      *(sdword *)(piVar3 + 0x27) = *(sdword *)(piVar3 + 0x27) + -1;
    }
    sVar2 = *(sdword *)(piVar3 + 0x21);
    *(sdword *)(piVar3 + 0x21) = sVar2 + -1;
    if ((sVar2 == 1) && (*(char *)(unaff_R14 + 0xb1) != '\0')) {
      *(undefined8 *)(unaff_R14 + 0x10) = 0xfffffffffffffade;
    }
  }
  return;
}



void runtime_cgoCheckPointer(interface___ ptr,interface___ arg)

{
  char extraout_AL;
  bool top;
  internal_abi_Type *in_RAX;
  internal_abi_Type *in_RCX;
  runtime_eface *ep;
  internal_abi_Type *t;
  void *p;
  void *in_RDI;
  byte bVar1;
  int unaff_R14;
  string in_stack_ffffffffffffffc0;
  
  ptr._type = in_RAX;
  arg._type = in_RCX;
  arg.data = in_RDI;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ptr.data = p;
    runtime_morestack_noctxt();
    p = ptr.data;
  }
  ptr.data = p;
  if (runtime_debug.cgocheck == 0) {
    return;
  }
  if (arg._type == (internal_abi_Type *)0x0) {
    top = true;
    ep = &ptr;
  }
  else {
    bVar1 = (ptr._type)->Kind_ & 0x1f;
    if ((bVar1 == 0x16) || (bVar1 == 0x1a)) {
      if (((ptr._type)->Kind_ & 0x20) == 0) {
                    // WARNING: Load size is inaccurate
        p = *p;
      }
      if (p != (void *)0x0) {
        runtime_cgoIsGoPointer(p,SUB81(p,0));
        if (extraout_AL != '\0') {
          bVar1 = (arg._type)->Kind_ & 0x1f;
          if (bVar1 == 1) {
            if (((ptr._type)->Kind_ & 0x1f) != 0x1a) {
              runtime_cgoCheckArg((internal_abi_Type *)ptr._type[1].Size_,p,true,false,
                                  in_stack_ffffffffffffffc0);
              return;
            }
            top = true;
            ep = &ptr;
          }
          else {
            ptr._type = arg._type;
            if (bVar1 == 0x11) {
              top = false;
              ep = &arg;
            }
            else {
              if (bVar1 != 0x17) {
                    // WARNING: Subroutine does not return
                runtime_throw(in_stack_ffffffffffffffc0);
              }
              top = true;
              ep = &arg;
            }
          }
          goto LAB_00409b90;
        }
      }
      return;
    }
    top = true;
    ep = &ptr;
  }
LAB_00409b90:
  runtime_cgoCheckArg(ptr._type,ep->data,((ptr._type)->Kind_ & 0x20) == 0,top,
                      in_stack_ffffffffffffffc0);
  return;
}



// Local variable at:internal/abi.ArrayType *[RAX:8] conflicts with parameter, skipped.
// Local variable st:internal/abi.SliceType *[RAX:8] conflicts with parameter, skipped.
// Local variable s:runtime.slice *[RBX:8] conflicts with parameter, skipped.
// Local variable ss:runtime.stringStruct *[RBX:8] conflicts with parameter, skipped.
// Local variable st_1:internal/abi.StructType *[RAX:8] conflicts with parameter, skipped.

void runtime_cgoCheckArg(internal_abi_Type *t,void *p,bool indir,bool top,string msg)

{
  int iVar1;
  internal_abi_Type *piVar2;
  uint uVar3;
  int iVar4;
  char extraout_AL;
  internal_abi_Type *it;
  char extraout_AL_00;
  char extraout_AL_01;
  char extraout_AL_02;
  char extraout_AL_03;
  char extraout_AL_04;
  char extraout_AL_05;
  char extraout_AL_06;
  char extraout_AL_07;
  int extraout_RAX;
  int iVar5;
  void *pvVar6;
  uint uVar7;
  dword dVar8;
  uintptr uVar9;
  bool ~r0;
  bool ~r0_00;
  bool ~r0_01;
  bool ~r0_02;
  bool ~r0_03;
  bool ~r0_04;
  void *in_RSI;
  uintptr in_R8;
  int unaff_R14;
  void *pvStack0000000000000020;
  interface___ in_stack_ffffffffffffff90;
  int i_1;
  uintptr i;
  
  pvStack0000000000000020 = in_RSI;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((t->PtrBytes == 0) || (p == (void *)0x0)) {
    return;
  }
  dVar8 = t->Kind_ & 0x1f;
  if (9 < dVar8 - 0x11) {
                    // WARNING: Subroutine does not return
    runtime_throw((string)in_stack_ffffffffffffff90);
  }
  ~r0 = SUB81(p,0);
  switch(dVar8) {
  case 0x11:
    if (!indir) {
      iVar4._0_4_ = t[1].Hash;
      iVar4._4_1_ = t[1].TFlag;
      iVar4._5_1_ = t[1].Align_;
      iVar4._6_1_ = t[1].FieldAlign_;
      iVar4._7_1_ = t[1].Kind_;
      if (iVar4 != 1) {
                    // WARNING: Subroutine does not return
        runtime_throw((string)in_stack_ffffffffffffff90);
      }
      runtime_cgoCheckArg((internal_abi_Type *)t[1].Size_,p,
                          (((internal_abi_Type *)t[1].Size_)->Kind_ & 0x20) == 0,top,
                          (string)in_stack_ffffffffffffff90);
      return;
    }
    for (uVar7 = 0; uVar3._0_4_ = t[1].Hash, uVar3._4_1_ = t[1].TFlag, uVar3._5_1_ = t[1].Align_,
        uVar3._6_1_ = t[1].FieldAlign_, uVar3._7_1_ = t[1].Kind_, uVar7 < uVar3; uVar7 = uVar7 + 1)
    {
      runtime_cgoCheckArg((internal_abi_Type *)t[1].Size_,p,true,top,
                          (string)in_stack_ffffffffffffff90);
      p = (void *)((int)p + *(int *)t[1].Size_);
    }
    break;
  default:
    runtime_convTstring((string)in_stack_ffffffffffffff90,pvStack0000000000000020);
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffff90);
  case 0x13:
    if (indir) {
                    // WARNING: Load size is inaccurate
      p = *p;
    }
    runtime_cgoIsGoPointer(p,SUB81(p,0));
    if (extraout_AL != '\0') {
      runtime_convTstring((string)in_stack_ffffffffffffff90,pvStack0000000000000020);
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffff90);
    }
    return;
  case 0x14:
                    // WARNING: Load size is inaccurate
    piVar2 = *p;
    if (piVar2 == (internal_abi_Type *)0x0) {
      return;
    }
    runtime_spanOfHeap((uintptr)piVar2,(runtime_mspan *)p);
    if (extraout_RAX != 0) {
      runtime_convTstring((string)in_stack_ffffffffffffff90,pvStack0000000000000020);
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffff90);
    }
    pvVar6 = *(void **)((int)p + 8);
    runtime_cgoIsGoPointer(pvVar6,~r0_00);
    if (extraout_AL_00 == '\0') {
      return;
    }
    if ((!top) && (runtime_isPinned(pvVar6,~r0_01), extraout_AL_01 == '\0')) {
      runtime_convTstring((string)in_stack_ffffffffffffff90,pvStack0000000000000020);
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffff90);
    }
    runtime_cgoCheckArg(piVar2,pvVar6,(piVar2->Kind_ & 0x20) == 0,false,
                        (string)in_stack_ffffffffffffff90);
    break;
  case 0x16:
  case 0x1a:
                    // WARNING: Load size is inaccurate
    if ((indir) && (p = *p, p == (void *)0x0)) {
      return;
    }
    runtime_cgoIsGoPointer(p,~r0);
    if (extraout_AL_06 == '\0') {
      return;
    }
    if ((!top) && (runtime_isPinned(p,~r0_04), extraout_AL_07 == '\0')) {
      runtime_convTstring((string)in_stack_ffffffffffffff90,pvStack0000000000000020);
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffff90);
    }
    runtime_cgoCheckUnknownPointer
              (p,(string)in_stack_ffffffffffffff90,(uintptr)pvStack0000000000000020,in_R8);
    break;
  case 0x17:
                    // WARNING: Load size is inaccurate
    pvVar6 = *p;
    if ((pvVar6 == (void *)0x0) || (runtime_cgoIsGoPointer(pvVar6,~r0), extraout_AL_02 == '\0')) {
      return;
    }
    if ((!top) && (runtime_isPinned(pvVar6,~r0_02), extraout_AL_03 == '\0')) {
      runtime_convTstring((string)in_stack_ffffffffffffff90,pvStack0000000000000020);
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffff90);
    }
    if (*(int *)(t[1].Size_ + 8) == 0) {
      return;
    }
    for (iVar5 = 0; iVar5 < *(int *)((int)p + 0x10); iVar5 = iVar5 + 1) {
      runtime_cgoCheckArg((internal_abi_Type *)t[1].Size_,pvVar6,true,false,
                          (string)in_stack_ffffffffffffff90);
      pvVar6 = (void *)((int)pvVar6 + *(int *)t[1].Size_);
    }
    break;
  case 0x18:
                    // WARNING: Load size is inaccurate
    runtime_cgoIsGoPointer(*p,~r0);
    if (extraout_AL_04 == '\0') {
      return;
    }
                    // WARNING: Load size is inaccurate
    if ((!top) && (runtime_isPinned(*p,~r0_03), extraout_AL_05 == '\0')) {
      runtime_convTstring((string)in_stack_ffffffffffffff90,pvStack0000000000000020);
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffff90);
    }
    break;
  case 0x19:
    if (!indir) {
      iVar5._0_4_ = t[1].Hash;
      iVar5._4_1_ = t[1].TFlag;
      iVar5._5_1_ = t[1].Align_;
      iVar5._6_1_ = t[1].FieldAlign_;
      iVar5._7_1_ = t[1].Kind_;
      if (iVar5 != 1) {
                    // WARNING: Subroutine does not return
        runtime_throw((string)in_stack_ffffffffffffff90);
      }
      piVar2 = *(internal_abi_Type **)(t[1].PtrBytes + 8);
      runtime_cgoCheckArg(piVar2,p,(piVar2->Kind_ & 0x20) == 0,top,(string)in_stack_ffffffffffffff90
                         );
      return;
    }
    uVar9 = t[1].PtrBytes;
    iVar1._0_4_ = t[1].Hash;
    iVar1._4_1_ = t[1].TFlag;
    iVar1._5_1_ = t[1].Align_;
    iVar1._6_1_ = t[1].FieldAlign_;
    iVar1._7_1_ = t[1].Kind_;
    for (iVar5 = 0; iVar5 < iVar1; iVar5 = iVar5 + 1) {
      if ((*(internal_abi_Type **)(uVar9 + 8))->PtrBytes != 0) {
        runtime_cgoCheckArg(*(internal_abi_Type **)(uVar9 + 8),
                            (void *)(*(int *)(uVar9 + 0x10) + (int)p),true,top,
                            (string)in_stack_ffffffffffffff90);
      }
      uVar9 = uVar9 + 0x18;
    }
  }
  return;
}



void runtime_cgoCheckUnknownPointer(void *p,string msg,uintptr base,uintptr i)

{
  void *p_00;
  runtime_moduledata *prVar1;
  runtime_heapBits ~r0;
  runtime_heapBits h;
  runtime_heapBits ~r0_00;
  char extraout_AL;
  char extraout_AL_00;
  int extraout_RAX;
  uintptr addr_00;
  uintptr b;
  uintptr extraout_RAX_00;
  uintptr extraout_RAX_01;
  void *pp;
  int iVar2;
  ___runtime_moduledata *p_1;
  int iVar3;
  uintptr extraout_RCX;
  runtime_moduledata **pprVar4;
  bool ~r0_01;
  int extraout_RBX;
  runtime_mspan *span;
  uintptr n;
  undefined8 extraout_RBX_00;
  runtime_mspan *s;
  void **extraout_RSI;
  uintptr addr;
  uintptr base_00;
  runtime_moduledata *datap;
  uintptr objIndex;
  int unaff_R14;
  uintptr uStack0000000000000018;
  interface___ in_stack_ffffffffffffffa8;
  undefined in_stack_ffffffffffffffb8 [16];
  uintptr uVar5;
  uintptr in_stack_ffffffffffffffd0;
  undefined8 in_stack_ffffffffffffffd8;
  uintptr in_stack_ffffffffffffffe0;
  uintptr ~r1;
  
  uStack0000000000000018 = i;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_spanOfHeap((uintptr)p,(runtime_mspan *)base);
  if (extraout_RAX == 0) {
    if (runtime_modulesSlice == (___runtime_moduledata *)0x0) {
      iVar3 = 0;
      pprVar4 = (runtime_moduledata **)0x0;
    }
    else {
      pprVar4 = runtime_modulesSlice->array;
      iVar3 = runtime_modulesSlice->len;
    }
    iVar2 = 0;
    while( true ) {
      if (iVar3 <= iVar2) {
        return;
      }
      prVar1 = pprVar4[iVar2];
      if ((((void *)prVar1->data <= p) && (p < (void *)prVar1->edata)) ||
         (((void *)prVar1->bss <= p && (p < (void *)prVar1->ebss)))) break;
      iVar2 = iVar2 + 1;
    }
    runtime_convTstring((string)in_stack_ffffffffffffffa8,(void *)base);
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffffa8);
  }
  runtime_findObject((uintptr)p,0,0,base_00,s,objIndex);
  if (addr_00 == 0) {
    return;
  }
  ~r0.mask = in_stack_ffffffffffffffb8._0_8_;
  ~r0.valid = in_stack_ffffffffffffffb8._8_8_;
  ~r0.addr = (uintptr)in_stack_ffffffffffffffa8._type;
  ~r0.size = (uintptr)in_stack_ffffffffffffffa8.data;
  uVar5 = addr_00;
  runtime_heapBitsForAddr(addr_00,*(uintptr *)(extraout_RBX + 0x70),~r0);
  ~r1 = extraout_RAX_00;
  do {
    h.mask = in_stack_ffffffffffffffb8._0_8_;
    h.valid = in_stack_ffffffffffffffb8._8_8_;
    h.addr = (uintptr)in_stack_ffffffffffffffa8._type;
    h.size = (uintptr)in_stack_ffffffffffffffa8.data;
    ~r0_00.size = in_stack_ffffffffffffffd0;
    ~r0_00.addr = uVar5;
    ~r0_00.mask = in_stack_ffffffffffffffd8;
    ~r0_00.valid = in_stack_ffffffffffffffe0;
    runtime_heapBits_next(h,~r0_00,~r1);
    if (extraout_RSI == (void **)0x0) {
      return;
    }
    p_00 = *extraout_RSI;
    ~r1 = extraout_RAX_01;
    in_stack_ffffffffffffffd8 = extraout_RBX_00;
    in_stack_ffffffffffffffe0 = extraout_RCX;
    runtime_cgoIsGoPointer(p_00,SUB81(extraout_RBX_00,0));
    in_stack_ffffffffffffffd0 = ~r1;
  } while ((extraout_AL == '\0') ||
          (runtime_isPinned(p_00,~r0_01), in_stack_ffffffffffffffd0 = ~r1, extraout_AL_00 != '\0'));
  runtime_convTstring((string)in_stack_ffffffffffffffa8,(void *)base);
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffa8);
}



void runtime_cgoIsGoPointer(void *p,bool ~r0)

{
  runtime_moduledata *prVar1;
  char extraout_AL;
  int iVar2;
  ___runtime_moduledata *p_1;
  int iVar3;
  runtime_moduledata **pprVar4;
  runtime_moduledata *datap;
  void *pvStack0000000000000008;
  
  if (p == (void *)0x0) {
    return;
  }
  pvStack0000000000000008 = p;
  runtime_inHeapOrStack((uintptr)p,~r0);
  if (extraout_AL == '\0') {
    if (runtime_modulesSlice == (___runtime_moduledata *)0x0) {
      iVar3 = 0;
      pprVar4 = (runtime_moduledata **)0x0;
    }
    else {
      pprVar4 = runtime_modulesSlice->array;
      iVar3 = runtime_modulesSlice->len;
    }
    iVar2 = 0;
    while( true ) {
      if (iVar3 <= iVar2) {
        return;
      }
      prVar1 = pprVar4[iVar2];
      if ((((void *)prVar1->data <= pvStack0000000000000008) &&
          (pvStack0000000000000008 < (void *)prVar1->edata)) ||
         (((void *)prVar1->bss <= pvStack0000000000000008 &&
          (pvStack0000000000000008 < (void *)prVar1->ebss)))) break;
      iVar2 = iVar2 + 1;
    }
    return;
  }
  return;
}



// WARNING: Unknown calling convention

void runtime__cgo_panic_internal(uint8 *p)

{
  int in_RBX;
  int extraout_RBX;
  int unaff_R14;
  uint8 *puStack0000000000000008;
  interface___ in_stack_ffffffffffffffd8;
  runtime_stringStruct ss;
  
  puStack0000000000000008 = p;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RBX = extraout_RBX;
  }
  runtime_findnull(puStack0000000000000008,in_RBX);
  runtime_convTstring((string)in_stack_ffffffffffffffd8,puStack0000000000000008);
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffd8);
}



void runtime_makechan(internal_abi_ChanType *t,int size,runtime_hchan *~r0)

{
  undefined auVar1 [16];
  undefined auVar2 [16];
  uint size_00;
  uintptr mem;
  int extraout_RAX;
  runtime_hchan *c;
  int extraout_RAX_00;
  int iVar3;
  int extraout_RAX_01;
  undefined8 extraout_RAX_02;
  undefined8 extraout_RAX_03;
  undefined8 uVar4;
  int extraout_RAX_04;
  int extraout_RAX_05;
  int extraout_RAX_06;
  internal_abi_Type *extraout_RCX;
  internal_abi_Type *typ;
  internal_abi_Type *elem;
  int iVar5;
  void *in_RDI;
  void *~r0_00;
  void *extraout_RDI;
  int *extraout_R11;
  undefined8 *extraout_R11_00;
  int *extraout_R11_01;
  internal_abi_Type **extraout_R11_02;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffc8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  typ = t->Elem;
  if (0xffff < typ->Size_) {
                    // WARNING: Subroutine does not return
    runtime_throw((string)in_stack_ffffffffffffffc8);
  }
  if (8 < typ->Align_) {
                    // WARNING: Subroutine does not return
    runtime_throw((string)in_stack_ffffffffffffffc8);
  }
  auVar1._8_8_ = 0;
  auVar1._0_8_ = size;
  auVar2._8_8_ = 0;
  auVar2._0_8_ = typ->Size_;
  size_00 = SUB168(auVar1 * auVar2,0);
  if (((SUB168(auVar1 * auVar2,8) == 0) && (size_00 < 0xffffffffffa1)) && (-1 < size)) {
    if (size_00 == 0) {
      runtime_mallocgc(0x60,(internal_abi_Type *)0x0,true,in_RDI);
      iVar5 = extraout_RAX_04 + 0x10;
      iVar3 = extraout_RAX_04;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_01 = iVar5;
        extraout_R11_01[1] = *(int *)(extraout_RAX_05 + 0x10);
        iVar3 = extraout_RAX_05;
      }
      *(int *)(iVar3 + 0x10) = iVar5;
    }
    else if (typ->PtrBytes == 0) {
      runtime_mallocgc(size_00 + 0x60,(internal_abi_Type *)0x0,true,in_RDI);
      iVar5 = extraout_RAX + 0x60;
      iVar3 = extraout_RAX;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11 = iVar5;
        extraout_R11[1] = *(int *)(extraout_RAX_00 + 0x10);
        iVar3 = extraout_RAX_00;
      }
      *(int *)(iVar3 + 0x10) = iVar5;
    }
    else {
      runtime_newobject((internal_abi_Type *)&DAT_00895520,(void *)size);
      runtime_mallocgc(size_00,typ,true,~r0_00);
      uVar4 = extraout_RAX_02;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_00 = extraout_RAX_03;
        extraout_R11_00[1] = *(undefined8 *)(extraout_RAX_01 + 0x10);
        uVar4 = extraout_RAX_03;
      }
      *(undefined8 *)(extraout_RAX_01 + 0x10) = uVar4;
      iVar3 = extraout_RAX_01;
    }
    *(short *)(iVar3 + 0x18) = (short)typ->Size_;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_02 = extraout_RCX;
      extraout_R11_02[1] = *(internal_abi_Type **)(extraout_RAX_06 + 0x20);
      iVar3 = extraout_RAX_06;
      typ = extraout_RCX;
    }
    *(internal_abi_Type **)(iVar3 + 0x20) = typ;
    *(int *)(iVar3 + 8) = size;
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffc8);
}



// WARNING: Unknown calling convention

void runtime_chansend1(runtime_hchan *c,void *elem)

{
  bool in_SIL;
  uintptr unaff_retaddr;
  
  runtime_chansend(c,elem,true,unaff_retaddr,in_SIL);
  return;
}



void runtime_chansend(runtime_hchan *c,void *ep,bool block,uintptr callerpc,bool ~r0)

{
  runtime_mutex *l;
  runtime_internal_atomic_Uint32 *prVar1;
  dword dVar2;
  runtime_waitq rVar3;
  string s;
  string s_00;
  interface___ e;
  string s_01;
  interface___ e_00;
  int64 t0;
  runtime_hchan *extraout_RAX;
  runtime_hchan *extraout_RAX_00;
  runtime_hchan *prVar4;
  runtime_sudog *extraout_RAX_01;
  runtime_sudog *mysg;
  runtime_sudog *extraout_RAX_02;
  runtime_sudog *extraout_RAX_03;
  runtime_sudog *extraout_RAX_04;
  runtime_sudog *extraout_RAX_05;
  runtime_sudog *prVar5;
  runtime_sudog *extraout_RAX_06;
  runtime_sudog *prVar6;
  runtime_sudog *extraout_RAX_07;
  runtime_sudog *extraout_RAX_08;
  runtime_sudog *extraout_RAX_09;
  runtime_sudog *extraout_RAX_10;
  runtime_sudog *prVar7;
  char extraout_CL;
  char cVar8;
  undefined8 extraout_RCX;
  internal_abi_Type *piVar9;
  runtime_sudog *sgp;
  runtime_sudog *sg;
  void *qp;
  undefined8 extraout_RSI;
  uint uVar10;
  runtime_sudog *y;
  runtime_sudog *extraout_R8;
  undefined8 extraout_R8_00;
  runtime_g *extraout_R8_01;
  runtime_g *extraout_R8_02;
  runtime_g *extraout_R8_03;
  runtime_g *extraout_R8_04;
  runtime_g *prVar11;
  runtime_g *extraout_R8_05;
  undefined8 extraout_R9;
  runtime_hchan *extraout_R9_00;
  runtime_hchan *extraout_R9_01;
  runtime_hchan *extraout_R9_02;
  runtime_hchan *extraout_R9_03;
  undefined8 extraout_R10;
  runtime_sudog *x;
  runtime_sudog *extraout_R10_00;
  undefined8 extraout_R10_01;
  undefined8 *extraout_R11;
  undefined8 *extraout_R11_00;
  void **extraout_R11_01;
  runtime_hchan **extraout_R11_02;
  runtime_sudog **extraout_R11_03;
  undefined8 *extraout_R11_04;
  runtime_sudog **extraout_R11_05;
  undefined8 *extraout_R11_06;
  undefined8 *extraout_R11_07;
  undefined8 *extraout_R11_08;
  runtime_hchan **extraout_R11_09;
  runtime_g *unaff_R14;
  int in_FS_OFFSET;
  bool bVar12;
  undefined4 in_XMM15_Da;
  undefined4 in_XMM15_Db;
  undefined4 in_XMM15_Dc;
  undefined4 in_XMM15_Dd;
  internal_abi_Type *in_stack_ffffffffffffff98;
  void *in_stack_ffffffffffffffa0;
  runtime_g *gp;
  undefined local_18 [16];
  
  while (&stack0x00000000 <= (undefined *)unaff_R14->stackguard0) {
    runtime_morestack_noctxt();
  }
  if (c == (runtime_hchan *)0x0) {
    if (block) {
      runtime_gopark((func__runtime_g__unsafe_Pointer__bool **)0x0,(void *)0x0,4,0x10,2);
      s.len = (int)in_stack_ffffffffffffffa0;
      s.str = (uint8 *)in_stack_ffffffffffffff98;
                    // WARNING: Subroutine does not return
      runtime_throw(s);
    }
    return;
  }
  if ((!block) && (c->closed == 0)) {
    if (c->dataqsiz == 0) {
      bVar12 = (c->recvq).first == (runtime_sudog *)0x0;
    }
    else {
      bVar12 = c->qcount == c->dataqsiz;
    }
    if (bVar12) {
      return;
    }
  }
  if (runtime_blockprofilerate == 0) {
    piVar9 = (internal_abi_Type *)0x0;
  }
  else {
    piVar9 = in_stack_ffffffffffffff98;
    runtime_cputicks();
    in_XMM15_Da = 0;
    in_XMM15_Db = 0;
    in_XMM15_Dc = 0;
    in_XMM15_Dd = 0;
    unaff_R14 = *(runtime_g **)(in_FS_OFFSET + -8);
    in_stack_ffffffffffffff98 = piVar9;
  }
  l = &c->lock;
  runtime_lock2(l);
  local_18._8_8_ = c;
  if (c->closed != 0) {
    runtime_unlock2(l);
    e_00.data = in_stack_ffffffffffffffa0;
    e_00._type = in_stack_ffffffffffffff98;
                    // WARNING: Subroutine does not return
    runtime_gopanic(e_00);
  }
  do {
    sg = ((runtime_waitq *)(local_18._8_8_ + 0x38))->first;
    if (sg == (runtime_sudog *)0x0) {
      sg = (runtime_sudog *)0x0;
      prVar4 = (runtime_hchan *)local_18._8_8_;
      break;
    }
    prVar5 = sg->next;
    if (prVar5 == (runtime_sudog *)0x0) {
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_00 = extraout_R8_00;
        extraout_R11_00[1] = (extraout_RAX_00->recvq).last;
        local_18._8_8_ = extraout_RAX_00;
      }
      rVar3.first._4_4_ = in_XMM15_Db;
      rVar3.first._0_4_ = in_XMM15_Da;
      rVar3.last._0_4_ = in_XMM15_Dc;
      rVar3.last._4_4_ = in_XMM15_Dd;
      *(runtime_waitq *)(local_18._8_8_ + 0x38) = rVar3;
    }
    else {
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier4();
        *extraout_R11 = extraout_R9;
        extraout_R11[1] = extraout_R8;
        extraout_R11[2] = (extraout_RAX->recvq).first;
        extraout_R11[3] = sg->next;
        local_18._8_8_ = extraout_RAX;
        prVar5 = extraout_R8;
      }
      prVar5->prev = (runtime_sudog *)0x0;
      ((runtime_waitq *)(local_18._8_8_ + 0x38))->first = prVar5;
      sg->next = (runtime_sudog *)0x0;
    }
    if (sg->isSelect == false) {
      bVar12 = false;
      prVar4 = (runtime_hchan *)local_18._8_8_;
    }
    else {
      prVar4 = (runtime_hchan *)0x0;
      prVar1 = &sg->g->selectDone;
      LOCK();
      dVar2 = prVar1->value;
      if (dVar2 == 0) {
        prVar1->value = 1;
      }
      else {
        prVar4 = (runtime_hchan *)(uint)dVar2;
      }
      UNLOCK();
      bVar12 = dVar2 != 0;
    }
  } while (bVar12);
  if (sg != (runtime_sudog *)0x0) {
    local_18._0_8_ = runtime_chansend_func1;
    runtime_send(local_18._8_8_,sg,(size_t)ep,(int)local_18);
    return;
  }
  if (*(uint *)local_18._8_8_ < *(uint *)(local_18._8_8_ + 8)) {
    runtime_typedmemmove
              (*(internal_abi_Type **)(local_18._8_8_ + 0x20),
               (void *)(*(uint *)(local_18._8_8_ + 0x28) * (uint)*(uint16 *)(local_18._8_8_ + 0x18)
                       + (int)*(void **)(local_18._8_8_ + 0x10)),ep);
    uVar10 = c->sendx + 1;
    c->sendx = uVar10;
    if (c->dataqsiz == uVar10) {
      c->sendx = 0;
    }
    c->qcount = c->qcount + 1;
    runtime_unlock2(l);
    return;
  }
  if (!block) {
    runtime_unlock2(l);
    return;
  }
  runtime_acquireSudog((runtime_sudog *)prVar4);
  extraout_RAX_01->releasetime = 0;
  if (piVar9 != (internal_abi_Type *)0x0) {
    extraout_RAX_01->releasetime = -1;
  }
  prVar5 = extraout_RAX_01;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier5();
    *extraout_R11_01 = ep;
    extraout_R11_01[1] = extraout_RAX_02->elem;
    extraout_R11_01[2] = extraout_RAX_02->waitlink;
    extraout_R11_01[3] = unaff_R14;
    extraout_R11_01[4] = extraout_RAX_02->g;
    prVar5 = extraout_RAX_02;
  }
  prVar5->elem = ep;
  prVar5->waitlink = (runtime_sudog *)0x0;
  prVar5->g = unaff_R14;
  prVar5->isSelect = false;
  prVar11 = unaff_R14;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_02 = c;
    extraout_R11_02[1] = extraout_RAX_03->c;
    prVar5 = extraout_RAX_03;
    prVar11 = extraout_R8_01;
  }
  prVar5->c = c;
  prVar4 = c;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier3();
    *extraout_R11_03 = extraout_RAX_04;
    extraout_R11_03[1] = extraout_R8_02->waiting;
    extraout_R11_03[2] = (runtime_sudog *)extraout_R8_02->param;
    prVar5 = extraout_RAX_04;
    prVar11 = extraout_R8_02;
    prVar4 = extraout_R9_00;
  }
  prVar11->waiting = prVar5;
  prVar11->param = (void *)0x0;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11_04 = extraout_R10;
    prVar5 = extraout_RAX_05;
    prVar11 = extraout_R8_03;
    prVar4 = extraout_R9_01;
  }
  prVar5->next = (runtime_sudog *)0x0;
  prVar7 = (prVar4->sendq).last;
  if (prVar7 == (runtime_sudog *)0x0) {
    prVar7 = prVar5;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier4();
      *extraout_R11_06 = extraout_R10_01;
      extraout_R11_06[1] = extraout_RAX_07;
      extraout_R11_06[2] = (extraout_R9_03->sendq).first;
      extraout_R11_06[3] = (extraout_R9_03->sendq).last;
      prVar7 = extraout_RAX_07;
      prVar11 = extraout_R8_05;
      prVar4 = extraout_R9_03;
    }
    prVar7->prev = (runtime_sudog *)0x0;
    (prVar4->sendq).first = prVar7;
    (prVar4->sendq).last = prVar7;
  }
  else {
    prVar6 = prVar5;
