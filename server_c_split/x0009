};

struct bucket<golang.org/x/net/http2.FrameType,map[golang.org/x/net/http2.Flags]string> {
    uint8 tophash[8];
    golang.org/x/net/http2.FrameType keys[8];
    map[golang.org/x/net/http2.Flags]string values[8];
    struct bucket<golang.org/x/net/http2.FrameType,map[golang.org/x/net/http2.Flags]string> *overflow;
};

struct bucket<golang.org/x/net/http2.Flags,string> {
    uint8 tophash[8];
    golang.org/x/net/http2.Flags keys[8];
    struct string values[8];
    struct bucket<golang.org/x/net/http2.Flags,string> *overflow;
};

typedef struct net.IPAddr net.IPAddr, *Pnet.IPAddr;

typedef struct net.IP net.IP, *Pnet.IP;

struct net.IP {
    uint8 *array;
    int len;
    int cap;
};

struct net.IPAddr {
    struct net.IP IP;
    struct string Zone;
};

typedef struct noalg.map.hdr[string][]string noalg.map.hdr[string][]string, *Pnoalg.map.hdr[string][]string;

typedef struct noalg.map.bucket[string][]string noalg.map.bucket[string][]string, *Pnoalg.map.bucket[string][]string;

struct noalg.map.bucket[string][]string {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8][]string elems;
    void *overflow;
};

struct noalg.map.hdr[string][]string {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string][]string *buckets;
    struct noalg.map.bucket[string][]string *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct []string noalg.[8][]string[8];

typedef struct runtime.iface google.golang.org/protobuf/runtime/protoiface.MessageV1;

typedef struct reflect.Method reflect.Method, *Preflect.Method;

struct reflect.Method {
    struct string Name;
    struct string PkgPath;
    reflect.Type Type;
    struct reflect.Value Func;
    int Index;
};

typedef struct sync/atomic.Pointer[go.shape.string] sync/atomic.Pointer[go.shape.string], *Psync/atomic.Pointer[go.shape.string];

typedef struct go.shape.string go.shape.string, *Pgo.shape.string;

struct sync/atomic.Pointer[go.shape.string] {
    struct sync/atomic.noCopy _;
    struct go.shape.string *_[0];
    void *v;
};

struct go.shape.string {
    uint8 *str;
    int len;
};

typedef struct google.golang.org/protobuf/internal/strs.Builder google.golang.org/protobuf/internal/strs.Builder, *Pgoogle.golang.org/protobuf/internal/strs.Builder;

struct google.golang.org/protobuf/internal/strs.Builder {
    struct []uint8 buf;
};

typedef struct runtime.iface golang.org/x/net/trace.EventLog;

typedef struct net/http/internal.chunkedWriter net/http/internal.chunkedWriter, *Pnet/http/internal.chunkedWriter;

struct net/http/internal.chunkedWriter {
    io.Writer Wire;
};

typedef struct noalg.struct_{_F_uintptr;_R_*google.golang.org/grpc.clientStream_} noalg.struct_{_F_uintptr;_R_*google.golang.org/grpc.clientStream_}, *Pnoalg.struct_{_F_uintptr;_R_*google.golang.org/grpc.clientStream_};

struct noalg.struct_{_F_uintptr;_R_*google.golang.org/grpc.clientStream_} { // Original name: noalg.struct { F uintptr; R *google.golang.org/grpc.clientStream }
    uintptr F;
    struct google.golang.org/grpc.clientStream *R;
};

typedef struct sync/atomic.Pointer[go.shape.int] sync/atomic.Pointer[go.shape.int], *Psync/atomic.Pointer[go.shape.int];

struct sync/atomic.Pointer[go.shape.int] {
    struct sync/atomic.noCopy _;
    go.shape.int *_[0];
    void *v;
};

typedef struct crypto/internal/nistec.p256AffinePoint crypto/internal/nistec.p256AffinePoint, *Pcrypto/internal/nistec.p256AffinePoint;

typedef uint64 crypto/internal/nistec.p256Element[4];

struct crypto/internal/nistec.p256AffinePoint {
    crypto/internal/nistec.p256Element x;
    crypto/internal/nistec.p256Element y;
};

typedef struct crypto/internal/nistec.p256AffinePoint crypto/internal/nistec.p256AffineTable[32];

typedef struct google.golang.org/protobuf/internal/impl.legacyEnumType google.golang.org/protobuf/internal/impl.legacyEnumType, *Pgoogle.golang.org/protobuf/internal/impl.legacyEnumType;

typedef struct sync.Map sync.Map, *Psync.Map;

typedef struct sync/atomic.Pointer[sync.readOnly] sync/atomic.Pointer[sync.readOnly], *Psync/atomic.Pointer[sync.readOnly];

typedef struct sync.readOnly sync.readOnly, *Psync.readOnly;

struct sync/atomic.Pointer[sync.readOnly] {
    struct sync/atomic.noCopy _;
    struct sync.readOnly *_[0];
    void *v;
};

struct sync.readOnly {
    map[interface_{}]*sync.entry m;
    bool amended;
};

struct sync.Map {
    struct sync.Mutex mu;
    struct sync/atomic.Pointer[sync.readOnly] read;
    map[interface_{}]*sync.entry dirty;
    int misses;
};

struct google.golang.org/protobuf/internal/impl.legacyEnumType {
    google.golang.org/protobuf/reflect/protoreflect.EnumDescriptor desc;
    reflect.Type goType;
    struct sync.Map m;
};

typedef struct hash<string,encoding/json.RawMessage> hash<string,encoding/json.RawMessage>, *Phash<string,encoding/json.RawMessage>;

typedef struct bucket<string,encoding/json.RawMessage> bucket<string,encoding/json.RawMessage>, *Pbucket<string,encoding/json.RawMessage>;

typedef struct encoding/json.RawMessage encoding/json.RawMessage, *Pencoding/json.RawMessage;

struct encoding/json.RawMessage {
    uint8 *array;
    int len;
    int cap;
};

struct bucket<string,encoding/json.RawMessage> {
    uint8 tophash[8];
    struct string keys[8];
    struct encoding/json.RawMessage values[8];
    struct bucket<string,encoding/json.RawMessage> *overflow;
};

struct hash<string,encoding/json.RawMessage> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,encoding/json.RawMessage> *buckets;
    struct bucket<string,encoding/json.RawMessage> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct crypto/internal/nistec.P256Point crypto/internal/nistec.P256Point, *Pcrypto/internal/nistec.P256Point;

struct crypto/internal/nistec.P256Point {
    crypto/internal/nistec.p256Element x;
    crypto/internal/nistec.p256Element y;
    crypto/internal/nistec.p256Element z;
};

typedef struct noalg.map.iter[*text/template/parse.TextNode][]uint8 noalg.map.iter[*text/template/parse.TextNode][]uint8, *Pnoalg.map.iter[*text/template/parse.TextNode][]uint8;

typedef struct noalg.map.hdr[*text/template/parse.TextNode][]uint8 noalg.map.hdr[*text/template/parse.TextNode][]uint8, *Pnoalg.map.hdr[*text/template/parse.TextNode][]uint8;

typedef struct noalg.map.bucket[*text/template/parse.TextNode][]uint8 noalg.map.bucket[*text/template/parse.TextNode][]uint8, *Pnoalg.map.bucket[*text/template/parse.TextNode][]uint8;

typedef struct text/template/parse.TextNode *noalg.[8]*text/template/parse.TextNode[8];

struct noalg.map.iter[*text/template/parse.TextNode][]uint8 {
    struct text/template/parse.TextNode **key;
    struct []uint8 *elem;
    void *t;
    struct noalg.map.hdr[*text/template/parse.TextNode][]uint8 *h;
    struct noalg.map.bucket[*text/template/parse.TextNode][]uint8 *buckets;
    struct noalg.map.bucket[*text/template/parse.TextNode][]uint8 *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

struct noalg.map.hdr[*text/template/parse.TextNode][]uint8 {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[*text/template/parse.TextNode][]uint8 *buckets;
    struct noalg.map.bucket[*text/template/parse.TextNode][]uint8 *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.bucket[*text/template/parse.TextNode][]uint8 {
    uint8 topbits[8];
    noalg.[8]*text/template/parse.TextNode keys;
    noalg.[8][]uint8 elems;
    void *overflow;
};

typedef struct struct_{_runtime.signalLock_runtime/internal/atomic.Uint32;_runtime.hz_runtime/internal/atomic.Int32_} struct_{_runtime.signalLock_runtime/internal/atomic.Uint32;_runtime.hz_runtime/internal/atomic.Int32_}, *Pstruct_{_runtime.signalLock_runtime/internal/atomic.Uint32;_runtime.hz_runtime/internal/atomic.Int32_};

typedef struct runtime/internal/atomic.Int32 runtime/internal/atomic.Int32, *Pruntime/internal/atomic.Int32;

struct runtime/internal/atomic.Int32 {
    struct runtime/internal/atomic.noCopy noCopy;
    int32 value;
};

struct struct_{_runtime.signalLock_runtime/internal/atomic.Uint32;_runtime.hz_runtime/internal/atomic.Int32_} { // Original name: struct { runtime.signalLock runtime/internal/atomic.Uint32; runtime.hz runtime/internal/atomic.Int32 }
    struct runtime/internal/atomic.Uint32 signalLock;
    struct runtime/internal/atomic.Int32 hz;
};

typedef struct bucket<string,go/token.Token> bucket<string,go/token.Token>, *Pbucket<string,go/token.Token>;

struct bucket<string,go/token.Token> {
    uint8 tophash[8];
    struct string keys[8];
    go/token.Token values[8];
    struct bucket<string,go/token.Token> *overflow;
};

typedef struct google.golang.org/protobuf/internal/impl.extensionTypeDescriptor google.golang.org/protobuf/internal/impl.extensionTypeDescriptor, *Pgoogle.golang.org/protobuf/internal/impl.extensionTypeDescriptor;

typedef struct google.golang.org/protobuf/internal/impl.ExtensionInfo google.golang.org/protobuf/internal/impl.ExtensionInfo, *Pgoogle.golang.org/protobuf/internal/impl.ExtensionInfo;

struct google.golang.org/protobuf/internal/impl.extensionTypeDescriptor {
    google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor ExtensionDescriptor;
    struct google.golang.org/protobuf/internal/impl.ExtensionInfo *xi;
};

struct google.golang.org/protobuf/internal/impl.ExtensionInfo {
    uint32 init;
    struct sync.Mutex mu;
    reflect.Type goType;
    struct google.golang.org/protobuf/internal/impl.extensionTypeDescriptor desc;
    google.golang.org/protobuf/internal/impl.Converter conv;
    struct google.golang.org/protobuf/internal/impl.extensionFieldInfo *info;
    google.golang.org/protobuf/runtime/protoiface.MessageV1 ExtendedType;
    interface_{} ExtensionType;
    int32 Field;
    struct string Name;
    struct string Tag;
    struct string Filename;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.vdsoInfo;_X1_int32_} noalg.struct_{_F_uintptr;_X0_*runtime.vdsoInfo;_X1_int32_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.vdsoInfo;_X1_int32_};

typedef struct runtime.vdsoInfo runtime.vdsoInfo, *Pruntime.vdsoInfo;

typedef struct runtime.elfSym runtime.elfSym, *Pruntime.elfSym;

typedef struct runtime.elfVerdef runtime.elfVerdef, *Pruntime.elfVerdef;

struct runtime.vdsoInfo {
    bool valid;
    uintptr loadAddr;
    uintptr loadOffset;
    struct runtime.elfSym (*symtab)[1];
    uint8 (*symstrings)[1];
    struct []uint32 chain;
    struct []uint32 bucket;
    uint32 symOff;
    bool isGNUHash;
    uint16 (*versym)[1];
    struct runtime.elfVerdef *verdef;
};

struct runtime.elfVerdef {
    uint16 vd_version;
    uint16 vd_flags;
    uint16 vd_ndx;
    uint16 vd_cnt;
    uint32 vd_hash;
    uint32 vd_aux;
    uint32 vd_next;
};

struct noalg.struct_{_F_uintptr;_X0_*runtime.vdsoInfo;_X1_int32_} { // Original name: noalg.struct { F uintptr; X0 *runtime.vdsoInfo; X1 int32 }
    uintptr F;
    struct runtime.vdsoInfo *X0;
    int32 X1;
};

struct runtime.elfSym {
    uint32 st_name;
    uint8 st_info;
    uint8 st_other;
    uint16 st_shndx;
    uint64 st_value;
    uint64 st_size;
};

typedef struct runtime.PanicNilError runtime.PanicNilError, *Pruntime.PanicNilError;

struct runtime.PanicNilError {
    struct runtime.PanicNilError *_[0];
};

typedef struct flag.Flag flag.Flag, *Pflag.Flag;

typedef struct runtime.iface flag.Value;

struct flag.Flag {
    struct string Name;
    struct string Usage;
    flag.Value Value;
    struct string DefValue;
};

typedef struct fmt.ssave fmt.ssave, *Pfmt.ssave;

struct fmt.ssave {
    bool validSave;
    bool nlIsEnd;
    bool nlIsSpace;
    int argLimit;
    int limit;
    int maxWid;
};

typedef struct hash<uint8,uint8> hash<uint8,uint8>, *Phash<uint8,uint8>;

typedef struct hash<uint8,uint8> *map[uint8]uint8;

typedef struct bucket<uint8,uint8> bucket<uint8,uint8>, *Pbucket<uint8,uint8>;

struct bucket<uint8,uint8> {
    uint8 tophash[8];
    uint8 keys[8];
    uint8 values[8];
    struct bucket<uint8,uint8> *overflow;
};

struct hash<uint8,uint8> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<uint8,uint8> *buckets;
    struct bucket<uint8,uint8> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct bucket<string,net/http.muxEntry> bucket<string,net/http.muxEntry>, *Pbucket<string,net/http.muxEntry>;

struct bucket<string,net/http.muxEntry> {
    uint8 tophash[8];
    struct string keys[8];
    struct net/http.muxEntry values[8];
    struct bucket<string,net/http.muxEntry> *overflow;
};

typedef struct google.golang.org/protobuf/reflect/protoreflect.MapKey google.golang.org/protobuf/reflect/protoreflect.MapKey, *Pgoogle.golang.org/protobuf/reflect/protoreflect.MapKey;

struct google.golang.org/protobuf/reflect/protoreflect.MapKey {
    google.golang.org/protobuf/internal/pragma.DoNotCompare DoNotCompare;
    void *typ;
    void *ptr;
    uint64 num;
};

typedef struct google.golang.org/grpc/internal/binarylog.ServerHeader google.golang.org/grpc/internal/binarylog.ServerHeader, *Pgoogle.golang.org/grpc/internal/binarylog.ServerHeader;

struct google.golang.org/grpc/internal/binarylog.ServerHeader {
    bool OnClientSide;
    google.golang.org/grpc/metadata.MD Header;
    net.Addr PeerAddr;
};

typedef struct noalg.struct_{_google.golang.org/grpc/internal/grpcsync.c_unsafe.Pointer;_google.golang.org/grpc/internal/grpcsync.elem_unsafe.Pointer_} noalg.struct_{_google.golang.org/grpc/internal/grpcsync.c_unsafe.Pointer;_google.golang.org/grpc/internal/grpcsync.elem_unsafe.Pointer_}, *Pnoalg.struct_{_google.golang.org/grpc/internal/grpcsync.c_unsafe.Pointer;_google.golang.org/grpc/internal/grpcsync.elem_unsafe.Pointer_};

struct noalg.struct_{_google.golang.org/grpc/internal/grpcsync.c_unsafe.Pointer;_google.golang.org/grpc/internal/grpcsync.elem_unsafe.Pointer_} { // Original name: noalg.struct { google.golang.org/grpc/internal/grpcsync.c unsafe.Pointer; google.golang.org/grpc/internal/grpcsync.elem unsafe.Pointer }
    void *c;
    void *elem;
};

typedef struct noalg.struct_{_google.golang.org/grpc/internal/grpcsync.c_unsafe.Pointer;_google.golang.org/grpc/internal/grpcsync.elem_unsafe.Pointer_} noalg.[2]struct_{_google.golang.org/grpc/internal/grpcsync.c_unsafe.Pointer;_google.golang.org/grpc/internal/grpcsync.elem_unsafe.Pointer_}[2];

typedef struct go.shape.struct_{_internal/godebug.text_string;_internal/godebug.bisect_*internal/bisect.Matcher_} go.shape.struct_{_internal/godebug.text_string;_internal/godebug.bisect_*internal/bisect.Matcher_}, *Pgo.shape.struct_{_internal/godebug.text_string;_internal/godebug.bisect_*internal/bisect.Matcher_};

typedef struct internal/bisect.Matcher internal/bisect.Matcher, *Pinternal/bisect.Matcher;

typedef struct []internal/bisect.cond []internal/bisect.cond, *P[]internal/bisect.cond;

typedef struct internal/bisect.atomicPointerDedup internal/bisect.atomicPointerDedup, *Pinternal/bisect.atomicPointerDedup;

typedef struct internal/bisect.cond internal/bisect.cond, *Pinternal/bisect.cond;

struct go.shape.struct_{_internal/godebug.text_string;_internal/godebug.bisect_*internal/bisect.Matcher_} { // Original name: go.shape.struct { internal/godebug.text string; internal/godebug.bisect *internal/bisect.Matcher }
    struct string text;
    struct internal/bisect.Matcher *bisect;
};

struct internal/bisect.atomicPointerDedup {
    void *p;
};

struct []internal/bisect.cond {
    struct internal/bisect.cond *array;
    int len;
    int cap;
};

struct internal/bisect.Matcher {
    bool verbose;
    bool quiet;
    bool enable;
    struct []internal/bisect.cond list;
    struct internal/bisect.atomicPointerDedup dedup;
};

struct internal/bisect.cond {
    uint64 mask;
    uint64 bits;
    bool result;
};

typedef struct noalg.map.iter[string]*text/template.Template noalg.map.iter[string]*text/template.Template, *Pnoalg.map.iter[string]*text/template.Template;

typedef struct noalg.map.hdr[string]*text/template.Template noalg.map.hdr[string]*text/template.Template, *Pnoalg.map.hdr[string]*text/template.Template;

typedef struct noalg.map.bucket[string]*text/template.Template noalg.map.bucket[string]*text/template.Template, *Pnoalg.map.bucket[string]*text/template.Template;

typedef struct text/template.Template *noalg.[8]*text/template.Template[8];

struct noalg.map.iter[string]*text/template.Template {
    struct string *key;
    struct text/template.Template **elem;
    void *t;
    struct noalg.map.hdr[string]*text/template.Template *h;
    struct noalg.map.bucket[string]*text/template.Template *buckets;
    struct noalg.map.bucket[string]*text/template.Template *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

struct noalg.map.hdr[string]*text/template.Template {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string]*text/template.Template *buckets;
    struct noalg.map.bucket[string]*text/template.Template *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.bucket[string]*text/template.Template {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8]*text/template.Template elems;
    void *overflow;
};

typedef struct golang.org/x/text/unicode/norm.valueRange golang.org/x/text/unicode/norm.valueRange, *Pgolang.org/x/text/unicode/norm.valueRange;

struct golang.org/x/text/unicode/norm.valueRange {
    uint16 value;
    uint8 lo;
    uint8 hi;
};

typedef struct noalg.struct_{_net.c_unsafe.Pointer;_net.elem_unsafe.Pointer_} noalg.struct_{_net.c_unsafe.Pointer;_net.elem_unsafe.Pointer_}, *Pnoalg.struct_{_net.c_unsafe.Pointer;_net.elem_unsafe.Pointer_};

struct noalg.struct_{_net.c_unsafe.Pointer;_net.elem_unsafe.Pointer_} { // Original name: noalg.struct { net.c unsafe.Pointer; net.elem unsafe.Pointer }
    void *c;
    void *elem;
};

typedef struct noalg.struct_{_net.c_unsafe.Pointer;_net.elem_unsafe.Pointer_} noalg.[2]struct_{_net.c_unsafe.Pointer;_net.elem_unsafe.Pointer_}[2];

typedef struct hash<string,runtime.metricData> hash<string,runtime.metricData>, *Phash<string,runtime.metricData>;

typedef struct bucket<string,runtime.metricData> bucket<string,runtime.metricData>, *Pbucket<string,runtime.metricData>;

struct hash<string,runtime.metricData> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,runtime.metricData> *buckets;
    struct bucket<string,runtime.metricData> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<string,runtime.metricData> {
    uint8 tophash[8];
    struct string keys[8];
    struct runtime.metricData values[8];
    struct bucket<string,runtime.metricData> *overflow;
};

typedef uint64 runtime.pallocBits[8];

typedef struct google.golang.org/grpc/credentials.TLSInfo google.golang.org/grpc/credentials.TLSInfo, *Pgoogle.golang.org/grpc/credentials.TLSInfo;

typedef struct crypto/tls.ConnectionState crypto/tls.ConnectionState, *Pcrypto/tls.ConnectionState;

typedef struct google.golang.org/grpc/credentials.CommonAuthInfo google.golang.org/grpc/credentials.CommonAuthInfo, *Pgoogle.golang.org/grpc/credentials.CommonAuthInfo;

typedef struct []*crypto/x509.Certificate []*crypto/x509.Certificate, *P[]*crypto/x509.Certificate;

typedef struct [][]*crypto/x509.Certificate [][]*crypto/x509.Certificate, *P[][]*crypto/x509.Certificate;

typedef struct [][]uint8 [][]uint8, *P[][]uint8;

typedef struct crypto/x509.Certificate crypto/x509.Certificate, *Pcrypto/x509.Certificate;

typedef struct crypto/x509/pkix.Name crypto/x509/pkix.Name, *Pcrypto/x509/pkix.Name;

typedef struct []encoding/asn1.ObjectIdentifier []encoding/asn1.ObjectIdentifier, *P[]encoding/asn1.ObjectIdentifier;

typedef struct []crypto/x509.ExtKeyUsage []crypto/x509.ExtKeyUsage, *P[]crypto/x509.ExtKeyUsage;

typedef struct []net.IP []net.IP, *P[]net.IP;

typedef struct []*net/url.URL []*net/url.URL, *P[]*net/url.URL;

typedef struct []*net.IPNet []*net.IPNet, *P[]*net.IPNet;

typedef struct []crypto/x509/pkix.AttributeTypeAndValue []crypto/x509/pkix.AttributeTypeAndValue, *P[]crypto/x509/pkix.AttributeTypeAndValue;

typedef struct net.IPNet net.IPNet, *Pnet.IPNet;

typedef struct net.IPMask net.IPMask, *Pnet.IPMask;

struct [][]uint8 {
    struct []uint8 *array;
    int len;
    int cap;
};

struct []*net/url.URL {
    struct net/url.URL **array;
    int len;
    int cap;
};

struct []crypto/x509.ExtKeyUsage {
    crypto/x509.ExtKeyUsage *array;
    int len;
    int cap;
};

struct []net.IP {
    struct net.IP *array;
    int len;
    int cap;
};

struct []crypto/x509/pkix.AttributeTypeAndValue {
    struct crypto/x509/pkix.AttributeTypeAndValue *array;
    int len;
    int cap;
};

struct crypto/x509/pkix.Name {
    struct []string Country;
    struct []string Organization;
    struct []string OrganizationalUnit;
    struct []string Locality;
    struct []string Province;
    struct []string StreetAddress;
    struct []string PostalCode;
    struct string SerialNumber;
    struct string CommonName;
    struct []crypto/x509/pkix.AttributeTypeAndValue Names;
    struct []crypto/x509/pkix.AttributeTypeAndValue ExtraNames;
};

struct []*net.IPNet {
    struct net.IPNet **array;
    int len;
    int cap;
};

struct []encoding/asn1.ObjectIdentifier {
    struct encoding/asn1.ObjectIdentifier *array;
    int len;
    int cap;
};

struct crypto/x509.Certificate {
    struct []uint8 Raw;
    struct []uint8 RawTBSCertificate;
    struct []uint8 RawSubjectPublicKeyInfo;
    struct []uint8 RawSubject;
    struct []uint8 RawIssuer;
    struct []uint8 Signature;
    crypto/x509.SignatureAlgorithm SignatureAlgorithm;
    crypto/x509.PublicKeyAlgorithm PublicKeyAlgorithm;
    interface_{} PublicKey;
    int Version;
    struct math/big.Int *SerialNumber;
    struct crypto/x509/pkix.Name Issuer;
    struct crypto/x509/pkix.Name Subject;
    struct time.Time NotBefore;
    struct time.Time NotAfter;
    crypto/x509.KeyUsage KeyUsage;
    struct []crypto/x509/pkix.Extension Extensions;
    struct []crypto/x509/pkix.Extension ExtraExtensions;
    struct []encoding/asn1.ObjectIdentifier UnhandledCriticalExtensions;
    struct []crypto/x509.ExtKeyUsage ExtKeyUsage;
    struct []encoding/asn1.ObjectIdentifier UnknownExtKeyUsage;
    bool BasicConstraintsValid;
    bool IsCA;
    int MaxPathLen;
    bool MaxPathLenZero;
    struct []uint8 SubjectKeyId;
    struct []uint8 AuthorityKeyId;
    struct []string OCSPServer;
    struct []string IssuingCertificateURL;
    struct []string DNSNames;
    struct []string EmailAddresses;
    struct []net.IP IPAddresses;
    struct []*net/url.URL URIs;
    bool PermittedDNSDomainsCritical;
    struct []string PermittedDNSDomains;
    struct []string ExcludedDNSDomains;
    struct []*net.IPNet PermittedIPRanges;
    struct []*net.IPNet ExcludedIPRanges;
    struct []string PermittedEmailAddresses;
    struct []string ExcludedEmailAddresses;
    struct []string PermittedURIDomains;
    struct []string ExcludedURIDomains;
    struct []string CRLDistributionPoints;
    struct []encoding/asn1.ObjectIdentifier PolicyIdentifiers;
};

struct net.IPMask {
    uint8 *array;
    int len;
    int cap;
};

struct []*crypto/x509.Certificate {
    struct crypto/x509.Certificate **array;
    int len;
    int cap;
};

struct net.IPNet {
    struct net.IP IP;
    struct net.IPMask Mask;
};

struct google.golang.org/grpc/credentials.CommonAuthInfo {
    google.golang.org/grpc/credentials.SecurityLevel SecurityLevel;
};

struct [][]*crypto/x509.Certificate {
    struct []*crypto/x509.Certificate *array;
    int len;
    int cap;
};

struct crypto/tls.ConnectionState {
    uint16 Version;
    bool HandshakeComplete;
    bool DidResume;
    uint16 CipherSuite;
    struct string NegotiatedProtocol;
    bool NegotiatedProtocolIsMutual;
    struct string ServerName;
    struct []*crypto/x509.Certificate PeerCertificates;
    struct [][]*crypto/x509.Certificate VerifiedChains;
    struct [][]uint8 SignedCertificateTimestamps;
    struct []uint8 OCSPResponse;
    struct []uint8 TLSUnique;
    void (**ekm)(struct string, struct []uint8, int, struct []uint8 *, error *);
};

struct google.golang.org/grpc/credentials.TLSInfo {
    struct crypto/tls.ConnectionState State;
    struct google.golang.org/grpc/credentials.CommonAuthInfo CommonAuthInfo;
    struct net/url.URL *SPIFFEID;
};

typedef struct bucket<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.ExtensionType> bucket<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.ExtensionType>, *Pbucket<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.ExtensionType>;

struct bucket<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.ExtensionType> {
    uint8 tophash[8];
    google.golang.org/protobuf/encoding/protowire.Number keys[8];
    google.golang.org/protobuf/reflect/protoreflect.ExtensionType values[8];
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.ExtensionType> *overflow;
};

typedef struct runtime.iface google.golang.org/protobuf/internal/pragma.DoNotImplement;

typedef struct noalg.struct_{_F_uintptr;_X0_uintptr;_X1_unsafe.Pointer;_X2_*runtime.g;_X3_*runtime._defer_} noalg.struct_{_F_uintptr;_X0_uintptr;_X1_unsafe.Pointer;_X2_*runtime.g;_X3_*runtime._defer_}, *Pnoalg.struct_{_F_uintptr;_X0_uintptr;_X1_unsafe.Pointer;_X2_*runtime.g;_X3_*runtime._defer_};

struct noalg.struct_{_F_uintptr;_X0_uintptr;_X1_unsafe.Pointer;_X2_*runtime.g;_X3_*runtime._defer_} { // Original name: noalg.struct { F uintptr; X0 uintptr; X1 unsafe.Pointer; X2 *runtime.g; X3 *runtime._defer }
    uintptr F;
    uintptr X0;
    void *X1;
    struct runtime.g *X2;
    struct runtime._defer *X3;
};

typedef struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_ClientHeader google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_ClientHeader, *Pgoogle.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_ClientHeader;

typedef struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.ClientHeader google.golang.org/grpc/binarylog/grpc_binarylog_v1.ClientHeader, *Pgoogle.golang.org/grpc/binarylog/grpc_binarylog_v1.ClientHeader;

typedef struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.Metadata google.golang.org/grpc/binarylog/grpc_binarylog_v1.Metadata, *Pgoogle.golang.org/grpc/binarylog/grpc_binarylog_v1.Metadata;

typedef struct google.golang.org/protobuf/types/known/durationpb.Duration google.golang.org/protobuf/types/known/durationpb.Duration, *Pgoogle.golang.org/protobuf/types/known/durationpb.Duration;

typedef struct []*google.golang.org/grpc/binarylog/grpc_binarylog_v1.MetadataEntry []*google.golang.org/grpc/binarylog/grpc_binarylog_v1.MetadataEntry, *P[]*google.golang.org/grpc/binarylog/grpc_binarylog_v1.MetadataEntry;

typedef struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.MetadataEntry google.golang.org/grpc/binarylog/grpc_binarylog_v1.MetadataEntry, *Pgoogle.golang.org/grpc/binarylog/grpc_binarylog_v1.MetadataEntry;

struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.MetadataEntry {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    struct string Key;
    struct []uint8 Value;
};

struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.ClientHeader {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.Metadata *Metadata;
    struct string MethodName;
    struct string Authority;
    struct google.golang.org/protobuf/types/known/durationpb.Duration *Timeout;
};

struct []*google.golang.org/grpc/binarylog/grpc_binarylog_v1.MetadataEntry {
    struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.MetadataEntry **array;
    int len;
    int cap;
};

struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.Metadata {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    struct []*google.golang.org/grpc/binarylog/grpc_binarylog_v1.MetadataEntry Entry;
};

struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_ClientHeader {
    struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.ClientHeader *ClientHeader;
};

struct google.golang.org/protobuf/types/known/durationpb.Duration {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    int64 Seconds;
    int32 Nanos;
};

typedef struct google.golang.org/grpc/balancer/grpclb/state.State google.golang.org/grpc/balancer/grpclb/state.State, *Pgoogle.golang.org/grpc/balancer/grpclb/state.State;

struct google.golang.org/grpc/balancer/grpclb/state.State {
    struct []google.golang.org/grpc/resolver.Address BalancerAddresses;
};

typedef struct noalg.map.bucket[uint32][]*internal/abi.Type noalg.map.bucket[uint32][]*internal/abi.Type, *Pnoalg.map.bucket[uint32][]*internal/abi.Type;

typedef uint32 noalg.[8]uint32[8];

struct noalg.map.bucket[uint32][]*internal/abi.Type {
    uint8 topbits[8];
    noalg.[8]uint32 keys;
    noalg.[8][]*internal/abi.Type elems;
    void *overflow;
};

typedef struct []*internal/abi.Type noalg.[8][]*internal/abi.Type[8];

typedef struct google.golang.org/protobuf/internal/errors.wrapError google.golang.org/protobuf/internal/errors.wrapError, *Pgoogle.golang.org/protobuf/internal/errors.wrapError;

struct google.golang.org/protobuf/internal/errors.wrapError {
    struct string s;
    error err;
};

typedef struct waitq<*golang.org/x/net/trace.eventLog> waitq<*golang.org/x/net/trace.eventLog>, *Pwaitq<*golang.org/x/net/trace.eventLog>;

typedef struct sudog<*golang.org/x/net/trace.eventLog> sudog<*golang.org/x/net/trace.eventLog>, *Psudog<*golang.org/x/net/trace.eventLog>;

typedef struct golang.org/x/net/trace.eventLog golang.org/x/net/trace.eventLog, *Pgolang.org/x/net/trace.eventLog;

typedef struct []golang.org/x/net/trace.logEntry []golang.org/x/net/trace.logEntry, *P[]golang.org/x/net/trace.logEntry;

typedef struct golang.org/x/net/trace.logEntry golang.org/x/net/trace.logEntry, *Pgolang.org/x/net/trace.logEntry;

struct []golang.org/x/net/trace.logEntry {
    struct golang.org/x/net/trace.logEntry *array;
    int len;
    int cap;
};

struct golang.org/x/net/trace.eventLog {
    struct string Family;
    struct string Title;
    struct time.Time Start;
    struct []uintptr stack;
    struct sync.RWMutex mu;
    struct []golang.org/x/net/trace.logEntry events;
    struct time.Time LastErrorTime;
    int discarded;
    int32 refs;
};

struct golang.org/x/net/trace.logEntry {
    struct time.Time When;
    time.Duration Elapsed;
    bool NewDay;
    struct string What;
    bool IsErr;
};

struct sudog<*golang.org/x/net/trace.eventLog> {
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    struct golang.org/x/net/trace.eventLog **elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

struct waitq<*golang.org/x/net/trace.eventLog> {
    struct sudog<*golang.org/x/net/trace.eventLog> *first;
    struct sudog<*golang.org/x/net/trace.eventLog> *last;
};

typedef struct syscall.RawSockaddrInet4 syscall.RawSockaddrInet4, *Psyscall.RawSockaddrInet4;

struct syscall.RawSockaddrInet4 {
    uint16 Family;
    uint16 Port;
    uint8 Addr[4];
    uint8 Zero[8];
};

typedef struct syscall.RawSockaddrInet6 syscall.RawSockaddrInet6, *Psyscall.RawSockaddrInet6;

struct syscall.RawSockaddrInet6 {
    uint16 Family;
    uint16 Port;
    uint32 Flowinfo;
    uint8 Addr[16];
    uint32 Scope_id;
};

typedef struct noalg.map.bucket[runtime._typePair]struct_{} noalg.map.bucket[runtime._typePair]struct_{}, *Pnoalg.map.bucket[runtime._typePair]struct_{};

typedef struct runtime._typePair runtime._typePair, *Pruntime._typePair;

struct runtime._typePair {
    struct internal/abi.Type *t1;
    struct internal/abi.Type *t2;
};

struct noalg.map.bucket[runtime._typePair]struct_{} { // Original name: noalg.map.bucket[runtime._typePair]struct {}
    uint8 topbits[8];
    noalg.[8]runtime._typePair keys;
    noalg.[8]struct_{} elems;
    void *overflow;
};

typedef struct struct_{} noalg.[8]struct_{}[0];

typedef struct runtime._typePair noalg.[8]runtime._typePair[8];

typedef struct hash<string,html/template.element> hash<string,html/template.element>, *Phash<string,html/template.element>;

typedef struct hash<string,html/template.element> *map[string]html/template.element;

typedef struct bucket<string,html/template.element> bucket<string,html/template.element>, *Pbucket<string,html/template.element>;

struct hash<string,html/template.element> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,html/template.element> *buckets;
    struct bucket<string,html/template.element> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<string,html/template.element> {
    uint8 tophash[8];
    struct string keys[8];
    html/template.element values[8];
    struct bucket<string,html/template.element> *overflow;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*[]func()_} noalg.struct_{_F_uintptr;_X0_*[]func()_}, *Pnoalg.struct_{_F_uintptr;_X0_*[]func()_};

typedef struct []func() []func(), *P[]func();

struct noalg.struct_{_F_uintptr;_X0_*[]func()_} { // Original name: noalg.struct { F uintptr; X0 *[]func() }
    uintptr F;
    struct []func() *X0;
};

struct []func() {
    void (***array)(void);
    int len;
    int cap;
};

typedef struct noalg.struct_{_google.golang.org/grpc/internal/resolver/dns.c_unsafe.Pointer;_google.golang.org/grpc/internal/resolver/dns.elem_unsafe.Pointer_} noalg.struct_{_google.golang.org/grpc/internal/resolver/dns.c_unsafe.Pointer;_google.golang.org/grpc/internal/resolver/dns.elem_unsafe.Pointer_}, *Pnoalg.struct_{_google.golang.org/grpc/internal/resolver/dns.c_unsafe.Pointer;_google.golang.org/grpc/internal/resolver/dns.elem_unsafe.Pointer_};

struct noalg.struct_{_google.golang.org/grpc/internal/resolver/dns.c_unsafe.Pointer;_google.golang.org/grpc/internal/resolver/dns.elem_unsafe.Pointer_} { // Original name: noalg.struct { google.golang.org/grpc/internal/resolver/dns.c unsafe.Pointer; google.golang.org/grpc/internal/resolver/dns.elem unsafe.Pointer }
    void *c;
    void *elem;
};

typedef struct noalg.struct_{_google.golang.org/grpc/internal/resolver/dns.c_unsafe.Pointer;_google.golang.org/grpc/internal/resolver/dns.elem_unsafe.Pointer_} noalg.[2]struct_{_google.golang.org/grpc/internal/resolver/dns.c_unsafe.Pointer;_google.golang.org/grpc/internal/resolver/dns.elem_unsafe.Pointer_}[2];

typedef struct log/slog.JSONHandler log/slog.JSONHandler, *Plog/slog.JSONHandler;

typedef struct log/slog.commonHandler log/slog.commonHandler, *Plog/slog.commonHandler;

typedef struct log/slog.HandlerOptions log/slog.HandlerOptions, *Plog/slog.HandlerOptions;

typedef struct log/slog.Attr log/slog.Attr, *Plog/slog.Attr;

typedef struct runtime.iface log/slog.Leveler;

typedef struct log/slog.Value log/slog.Value, *Plog/slog.Value;

struct log/slog.JSONHandler {
    struct log/slog.commonHandler *commonHandler;
};

struct log/slog.Value {
    void (**_[0])(void);
    uint64 num;
    interface_{} any;
};

