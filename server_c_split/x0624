// WARNING: Unknown calling convention

void regexp_syntax___ranges__Swap(int i,int j)

{
  undefined4 uVar1;
  undefined4 uVar2;
  undefined4 uVar3;
  int *piVar4;
  uint uVar5;
  int iVar6;
  int **in_RAX;
  int unaff_R14;
  undefined auStack_18 [16];
  
  piVar4 = *(int **)(unaff_R14 + 0x20);
  if ((piVar4 != (int *)0x0) && ((undefined *)*piVar4 == &stack0x00000008)) {
    *piVar4 = (int)auStack_18;
  }
  if (in_RAX == (int **)0x0) {
                    // WARNING: Subroutine does not return
    runtime_panicwrap();
  }
  uVar5 = (*in_RAX)[1];
  if (uVar5 <= j * 2 + 1U) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  iVar6 = **in_RAX;
  uVar1 = *(undefined4 *)(iVar6 + 4 + j * 8);
  if ((uint)(i * 2) < uVar5) {
    uVar2 = *(undefined4 *)(iVar6 + i * 8);
    if (uVar5 <= i * 2 + 1U) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    uVar3 = *(undefined4 *)(iVar6 + 4 + i * 8);
    if ((uint)(j * 2) < uVar5) {
      *(undefined4 *)(iVar6 + i * 8) = *(undefined4 *)(iVar6 + j * 8);
      *(undefined4 *)(iVar6 + 4 + i * 8) = uVar1;
      *(undefined4 *)(iVar6 + j * 8) = uVar2;
      *(undefined4 *)(iVar6 + 4 + j * 8) = uVar3;
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



// WARNING: Unknown calling convention

void regexp_freeBitState(regexp_bitState *b)

{
  regexp_bitState *extraout_RAX;
  regexp_bitState *extraout_RAX_00;
  regexp_bitState *extraout_RAX_01;
  void *pvVar1;
  uint8 *puVar2;
  uint8 **extraout_R11;
  void **extraout_R11_00;
  uint8 **extraout_R11_01;
  int unaff_R14;
  undefined in_XMM15 [16];
  interface___ in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((b->inputs).bytes.str.array == (uint8 *)0x0) {
    if ((b->inputs).reader.r.tab == (runtime_itab *)0x0) {
      (b->inputs).string.str.len = 0;
      if (runtime_writeBarrier._0_4_ != 0) {
        puVar2 = (b->inputs).string.str.str;
        runtime_gcWriteBarrier1();
        *extraout_R11_01 = puVar2;
        b = extraout_RAX_01;
      }
      (b->inputs).string.str.str = (uint8 *)0x0;
    }
    else {
      (b->inputs).reader.r.tab = (runtime_itab *)0x0;
      if (runtime_writeBarrier._0_4_ != 0) {
        pvVar1 = (b->inputs).reader.r.data;
        runtime_gcWriteBarrier1();
        *extraout_R11_00 = pvVar1;
        b = extraout_RAX_00;
      }
      (b->inputs).reader.r.data = (void *)0x0;
    }
  }
  else {
    (b->inputs).bytes.str.len = in_XMM15._0_8_;
    (b->inputs).bytes.str.cap = in_XMM15._8_8_;
    if (runtime_writeBarrier._0_4_ != 0) {
      puVar2 = (b->inputs).bytes.str.array;
      runtime_gcWriteBarrier1();
      *extraout_R11 = puVar2;
      b = extraout_RAX;
    }
    (b->inputs).bytes.str.array = (uint8 *)0x0;
  }
  sync___Pool__Put(&regexp_bitStatePool,in_stack_ffffffffffffffe0);
  return;
}



// WARNING: Unknown calling convention

void regexp___bitState__reset(regexp_bitState *b,regexp_syntax_Prog *prog,int end,int ncap)

{
  uint uVar1;
  void *pvVar2;
  regexp_job *extraout_RAX;
  regexp_job *extraout_RAX_00;
  regexp_job *prVar3;
  uint32 *extraout_RAX_01;
  uint32 *extraout_RAX_02;
  uint32 *puVar4;
  int *extraout_RAX_03;
  int *extraout_RAX_04;
  int *extraout_RAX_05;
  int *extraout_RAX_06;
  int *piVar5;
  uint len;
  int visitedSize;
  void *extraout_RCX;
  void *pvVar6;
  int i;
  int i_1;
  int iVar7;
  regexp_bitState *extraout_RSI;
  regexp_bitState *extraout_RSI_00;
  regexp_job **extraout_R11;
  uint32 **extraout_R11_00;
  int **extraout_R11_01;
  int **extraout_R11_02;
  int unaff_R14;
  regexp_bitState *prStack0000000000000008;
  void *pvStack0000000000000020;
  
  pvStack0000000000000020 = (void *)ncap;
  while (prStack0000000000000008 = b, &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    b = prStack0000000000000008;
  }
  b->end = end;
  if ((b->jobs).cap == 0) {
    runtime_makeslice((internal_abi_Type *)&DAT_00864480,0,0x100,pvStack0000000000000020);
    (prStack0000000000000008->jobs).len = 0;
    (prStack0000000000000008->jobs).cap = 0x100;
    prVar3 = extraout_RAX;
    b = prStack0000000000000008;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RAX_00;
      extraout_R11[1] = (b->jobs).array;
      prVar3 = extraout_RAX_00;
    }
    (b->jobs).array = prVar3;
  }
  else {
    (b->jobs).len = 0;
  }
  iVar7 = (prog->Inst).len * (end + 1);
  len = (int)(((uint)(iVar7 + 0x1f >> 0x3f) >> 0x3b) + iVar7 + 0x1f) >> 5;
  uVar1 = (b->visited).cap;
  if ((int)uVar1 < (int)len) {
    runtime_makeslice((internal_abi_Type *)&DAT_008078e0,len,0x2000,pvStack0000000000000020);
    (prStack0000000000000008->visited).len = len;
    (prStack0000000000000008->visited).cap = 0x2000;
    puVar4 = extraout_RAX_01;
    b = prStack0000000000000008;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_00 = extraout_RAX_02;
      extraout_R11_00[1] = (extraout_RSI->visited).array;
      puVar4 = extraout_RAX_02;
      b = extraout_RSI;
    }
    (b->visited).array = puVar4;
  }
  else {
    if (uVar1 < len) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAcap();
    }
    (b->visited).len = len;
    if (len != 0) {
      runtime_memclrNoHeapPointers();
      b = prStack0000000000000008;
    }
  }
  pvVar6 = (void *)(b->cap).cap;
  if ((int)pvVar6 < (int)pvStack0000000000000020) {
    runtime_makeslice((internal_abi_Type *)&DAT_00807760,(int)pvStack0000000000000020,
                      (int)pvStack0000000000000020,pvStack0000000000000020);
    (prStack0000000000000008->cap).len = (int)pvStack0000000000000020;
    (prStack0000000000000008->cap).cap = (int)pvStack0000000000000020;
    piVar5 = extraout_RAX_03;
    pvVar6 = pvStack0000000000000020;
    b = prStack0000000000000008;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_01 = extraout_RAX_04;
      extraout_R11_01[1] = (b->cap).array;
      piVar5 = extraout_RAX_04;
      pvVar6 = extraout_RCX;
    }
    (b->cap).array = piVar5;
  }
  else {
    if (pvVar6 < pvStack0000000000000020) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAcap();
    }
    (b->cap).len = (int)pvStack0000000000000020;
    pvVar6 = pvStack0000000000000020;
  }
  iVar7 = (b->cap).len;
  i = 0;
  while( true ) {
    if (iVar7 <= i) {
      pvVar2 = (void *)(b->matchcap).cap;
      if ((int)pvVar2 < (int)pvVar6) {
        runtime_makeslice((internal_abi_Type *)&DAT_00807760,(int)pvVar6,(int)pvVar6,pvVar6);
        (prStack0000000000000008->matchcap).len = (int)pvStack0000000000000020;
        (prStack0000000000000008->matchcap).cap = (int)pvStack0000000000000020;
        piVar5 = extraout_RAX_05;
        b = prStack0000000000000008;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11_02 = extraout_RAX_06;
          extraout_R11_02[1] = (extraout_RSI_00->matchcap).array;
          piVar5 = extraout_RAX_06;
          b = extraout_RSI_00;
        }
        (b->matchcap).array = piVar5;
      }
      else {
        if (pvVar2 < pvVar6) {
                    // WARNING: Subroutine does not return
          runtime_panicSliceAcap();
        }
        (b->matchcap).len = (int)pvVar6;
      }
      iVar7 = (b->matchcap).len;
      i_1 = 0;
      while( true ) {
        if (iVar7 <= i_1) {
          return;
        }
        if ((uint)(b->matchcap).len <= (uint)i_1) break;
        (b->matchcap).array[i_1] = -1;
        i_1 = i_1 + 1;
      }
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    if ((uint)(b->cap).len <= (uint)i) break;
    (b->cap).array[i] = -1;
    i = i + 1;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void regexp___Regexp__tryBacktrack
               (regexp_Regexp *re,regexp_bitState *b,regexp_input i,uint32 pc,int pos,bool ~r0)

{
  regexp_syntax_Inst *prVar1;
  regexp_syntax_Inst *prVar2;
  bool bVar3;
  uint32 *puVar4;
  int *__dest;
  int *__src;
  regexp_syntax_Inst *prVar5;
  runtime_slice ~r0_00;
  runtime_slice ~r0_01;
  runtime_slice ~r0_02;
  runtime_slice ~r0_03;
  runtime_slice ~r0_04;
  dword dVar6;
  int32 r;
  int32 r_1;
  int32 r_3;
  char extraout_AL;
  regexp_job *extraout_RAX;
  regexp_job *extraout_RAX_00;
  regexp_syntax_Inst *inst;
  regexp_job *extraout_RAX_01;
  regexp_job *extraout_RAX_02;
  regexp_job *extraout_RAX_03;
  regexp_job *extraout_RAX_04;
  regexp_job *prVar8;
  regexp_job *extraout_RAX_05;
  regexp_job *extraout_RAX_06;
  regexp_job *extraout_RAX_07;
  regexp_job *extraout_RAX_08;
  regexp_lazyFlag f;
  regexp_lazyFlag flag;
  sdword sVar7;
  int32 r_2;
  int extraout_RAX_09;
  uint n_3;
  undefined4 in_register_0000000c;
  int iVar9;
  int extraout_RCX;
  uint uVar10;
  int extraout_RCX_00;
  uint n_1;
  int extraout_RCX_01;
  uint n_2;
  bool arg;
  int extraout_RCX_02;
  int extraout_RCX_03;
  char cVar11;
  uint n;
  uint uVar12;
  regexp_bitState *prVar13;
  int iVar14;
  int iVar15;
  int l;
  int old;
  uint extraout_RBX;
  uint extraout_RBX_00;
  uint extraout_RBX_01;
  uint extraout_RBX_02;
  uint extraout_RBX_03;
  uint extraout_RBX_04;
  uint extraout_RBX_05;
  uint extraout_RBX_06;
  uint extraout_RBX_07;
  uint extraout_RBX_08;
  int extraout_RBX_09;
  int width;
  int extraout_RBX_10;
  int width_1;
  int extraout_RBX_11;
  int width_3;
  int extraout_RBX_12;
  int width_2;
  undefined7 in_register_00000031;
  int in_R8;
  uint32 pc_1;
  uint uVar16;
  bool longest;
  dword dVar17;
  regexp_job **extraout_R11;
  regexp_job **extraout_R11_00;
  regexp_job **extraout_R11_01;
  regexp_job **extraout_R11_02;
  regexp_job **extraout_R11_03;
  int pos_1;
  int iVar18;
  int unaff_R14;
  dword dVar19;
  int iVar20;
  bool bVar21;
  int iStack0000000000000018;
  int iStack0000000000000020;
  interface___ in_stack_ffffffffffffff68;
  int in_stack_ffffffffffffff78;
  regexp_syntax_Inst *local_18;
  regexp_syntax_Inst *local_10;
  
  uVar10 = CONCAT71(in_register_00000031,~r0);
  iVar9 = CONCAT44(in_register_0000000c,pc);
  iStack0000000000000020 = pos;
  while (iStack0000000000000018 = iVar9, &local_18 <= *(regexp_syntax_Inst ***)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    uVar10 = uVar10 & 0xffffffff;
    iVar9 = iStack0000000000000018;
  }
  uVar16 = uVar10 & 0xffffffff;
  bVar3 = re->longest;
  if ((uint)(re->prog->Inst).len <= uVar16) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if ((re->prog->Inst).array[uVar16].Op == 5) {
    bVar21 = false;
  }
  else {
    uVar16 = in_R8 + uVar16 * (b->end + 1);
    uVar12 = uVar16 >> 5;
    if ((uint)(b->visited).len <= uVar12) {
                    // WARNING: Subroutine does not return
      runtime_panicIndexU();
    }
    puVar4 = (b->visited).array;
    dVar6 = puVar4[uVar12];
    dVar19 = 1 << ((byte)uVar16 & 0x1f) & dVar6;
    if (dVar19 == 0) {
      puVar4[uVar12] = dVar6 | 1 << ((dword)uVar16 & 0x1f);
    }
    bVar21 = dVar19 == 0;
  }
  iVar14 = iStack0000000000000020;
  if (bVar21) {
    uVar16 = (b->jobs).cap;
    uVar12 = (b->jobs).len + 1;
    prVar8 = (b->jobs).array;
    if (uVar16 < uVar12) {
      ~r0_00.cap = in_stack_ffffffffffffff78;
      ~r0_00.array = in_stack_ffffffffffffff68._type;
      ~r0_00.len = (int)in_stack_ffffffffffffff68.data;
      runtime_growslice(prVar8,uVar12,uVar16,1,(internal_abi_Type *)&DAT_00864480,~r0_00);
      (b->jobs).cap = extraout_RCX;
      prVar8 = extraout_RAX;
      prVar13 = b;
      uVar12 = extraout_RBX;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11 = extraout_RAX_00;
        extraout_R11[1] = (prVar13->jobs).array;
        prVar8 = extraout_RAX_00;
        uVar12 = extraout_RBX_00;
      }
      (prVar13->jobs).array = prVar8;
    }
    (b->jobs).len = uVar12;
    iVar14 = uVar12 - 1;
    prVar8[iVar14].pc = (uint32)uVar10;
    prVar8[iVar14].arg = false;
    prVar8[iVar14].pos = in_R8;
    iVar14 = iStack0000000000000020;
  }
LAB_006fe1bc:
  do {
    iVar15 = (b->jobs).len;
    if (iVar15 == 0) {
      return;
    }
    prVar8 = (b->jobs).array;
    iVar15 = iVar15 + -1;
    uVar10 = (uint)prVar8[iVar15].pc;
    iVar18 = prVar8[iVar15].pos;
    cVar11 = prVar8[iVar15].arg;
    (b->jobs).len = iVar15;
    do {
      uVar16 = (re->prog->Inst).len;
      if (uVar16 <= uVar10) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      prVar5 = (re->prog->Inst).array;
      prVar1 = prVar5 + uVar10;
      prVar2 = prVar5 + uVar10;
      if (10 < prVar1->Op) {
                    // WARNING: Subroutine does not return
        runtime_gopanic(in_stack_ffffffffffffff68);
      }
      local_18 = prVar2;
      local_10 = prVar5;
      switch(prVar1->Op) {
      case 0:
        if (cVar11 == '\0') {
          if (prVar1->Op != 5) {
            uVar16 = (b->jobs).cap;
            uVar12 = (b->jobs).len + 1;
            prVar8 = (b->jobs).array;
            if (uVar16 < uVar12) {
              ~r0_01.cap = in_stack_ffffffffffffff78;
              ~r0_01.array = in_stack_ffffffffffffff68._type;
              ~r0_01.len = (int)in_stack_ffffffffffffff68.data;
              runtime_growslice(prVar8,uVar12,uVar16,1,(internal_abi_Type *)&DAT_00864480,~r0_01);
              (b->jobs).cap = extraout_RCX_00;
              prVar8 = extraout_RAX_01;
              prVar13 = b;
              uVar12 = extraout_RBX_01;
              if (runtime_writeBarrier._0_4_ != 0) {
                runtime_gcWriteBarrier2();
                *extraout_R11_00 = extraout_RAX_02;
                extraout_R11_00[1] = (prVar13->jobs).array;
                prVar8 = extraout_RAX_02;
                uVar12 = extraout_RBX_02;
              }
              (prVar13->jobs).array = prVar8;
              iVar14 = iStack0000000000000020;
            }
            (b->jobs).len = uVar12;
            iVar15 = uVar12 - 1;
            prVar8[iVar15].pc = (uint32)uVar10;
            prVar8[iVar15].arg = true;
            prVar8[iVar15].pos = iVar18;
          }
          uVar10 = (uint)local_10[uVar10].Out;
        }
        else {
          uVar10 = (uint)prVar5[uVar10].Arg;
          cVar11 = '\0';
        }
        break;
      case 1:
        dVar6 = prVar5[uVar10].Out;
        uVar12 = (uint)dVar6;
        if (uVar16 <= uVar12) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        if ((byte)(prVar5[uVar12].Op - 7) < 4) {
          dVar6 = prVar5[uVar10].Arg;
          uVar12 = (uint)dVar6;
          if (uVar16 <= uVar12) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          if (prVar5[uVar12].Op == 5) {
            bVar21 = false;
          }
          else {
            uVar16 = iVar18 + (b->end + 1) * uVar12;
            uVar12 = uVar16 >> 5;
            if ((uint)(b->visited).len <= uVar12) {
                    // WARNING: Subroutine does not return
              runtime_panicIndexU();
            }
            puVar4 = (b->visited).array;
            dVar19 = puVar4[uVar12];
            dVar17 = 1 << ((byte)uVar16 & 0x1f) & dVar19;
            if (dVar17 == 0) {
              puVar4[uVar12] = dVar19 | 1 << ((dword)uVar16 & 0x1f);
            }
            bVar21 = dVar17 == 0;
          }
          if (bVar21) {
            uVar16 = (b->jobs).cap;
            uVar12 = (b->jobs).len + 1;
            prVar8 = (b->jobs).array;
            if (uVar16 < uVar12) {
              ~r0_02.cap = in_stack_ffffffffffffff78;
              ~r0_02.array = in_stack_ffffffffffffff68._type;
              ~r0_02.len = (int)in_stack_ffffffffffffff68.data;
              runtime_growslice(prVar8,uVar12,uVar16,1,(internal_abi_Type *)&DAT_00864480,~r0_02);
              (b->jobs).cap = extraout_RCX_01;
              prVar8 = extraout_RAX_03;
              prVar13 = b;
              uVar12 = extraout_RBX_03;
              if (runtime_writeBarrier._0_4_ != 0) {
                runtime_gcWriteBarrier2();
                *extraout_R11_01 = extraout_RAX_04;
                extraout_R11_01[1] = (prVar13->jobs).array;
                prVar8 = extraout_RAX_04;
                uVar12 = extraout_RBX_04;
              }
              (prVar13->jobs).array = prVar8;
              iVar14 = iStack0000000000000020;
            }
            (b->jobs).len = uVar12;
            iVar15 = uVar12 - 1;
            prVar8[iVar15].pc = dVar6;
            prVar8[iVar15].arg = false;
            prVar8[iVar15].pos = iVar18;
          }
          uVar10 = (uint)local_10[uVar10].Arg;
          iVar18 = b->end;
        }
        else {
          iVar15 = b->end;
          if (prVar5[uVar12].Op == 5) {
            bVar21 = false;
          }
          else {
            uVar16 = (iVar15 + 1) * uVar12 + iVar15;
            uVar12 = uVar16 >> 5;
            if ((uint)(b->visited).len <= uVar12) {
                    // WARNING: Subroutine does not return
              runtime_panicIndexU();
            }
            puVar4 = (b->visited).array;
            dVar19 = puVar4[uVar12];
            dVar17 = 1 << ((byte)uVar16 & 0x1f) & dVar19;
            if (dVar17 == 0) {
              puVar4[uVar12] = dVar19 | 1 << ((dword)uVar16 & 0x1f);
            }
            bVar21 = dVar17 == 0;
          }
          if (bVar21) {
            uVar16 = (b->jobs).cap;
            uVar12 = (b->jobs).len + 1;
            prVar8 = (b->jobs).array;
            if (uVar16 < uVar12) {
              ~r0_03.cap = in_stack_ffffffffffffff78;
              ~r0_03.array = in_stack_ffffffffffffff68._type;
              ~r0_03.len = (int)in_stack_ffffffffffffff68.data;
              runtime_growslice(prVar8,uVar12,uVar16,1,(internal_abi_Type *)&DAT_00864480,~r0_03);
              (b->jobs).cap = extraout_RCX_02;
              prVar8 = extraout_RAX_05;
              prVar13 = b;
              uVar12 = extraout_RBX_05;
              if (runtime_writeBarrier._0_4_ != 0) {
                runtime_gcWriteBarrier2();
                *extraout_R11_02 = extraout_RAX_06;
                extraout_R11_02[1] = (prVar13->jobs).array;
                prVar8 = extraout_RAX_06;
                uVar12 = extraout_RBX_06;
              }
              (prVar13->jobs).array = prVar8;
              iVar14 = iStack0000000000000020;
            }
            (b->jobs).len = uVar12;
            iVar20 = uVar12 - 1;
            prVar8[iVar20].pc = dVar6;
            prVar8[iVar20].arg = false;
            prVar8[iVar20].pos = iVar15;
          }
          uVar10 = (uint)local_10[uVar10].Out;
        }
        break;
      case 2:
        if (cVar11 != '\0') {
          if ((uint)(b->cap).len <= (uint)prVar5[uVar10].Arg) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          (b->cap).array[prVar5[uVar10].Arg] = iVar18;
          goto LAB_006fe1bc;
        }
        dVar6 = prVar5[uVar10].Arg;
        uVar16 = (b->cap).len;
        if (dVar6 < (dword)uVar16) {
          if (uVar16 <= dVar6) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          iVar15 = (b->cap).array[dVar6];
          if (prVar1->Op != 5) {
            uVar16 = (b->jobs).cap;
            uVar12 = (b->jobs).len + 1;
            prVar8 = (b->jobs).array;
            if (uVar16 < uVar12) {
              ~r0_04.cap = in_stack_ffffffffffffff78;
              ~r0_04.array = in_stack_ffffffffffffff68._type;
              ~r0_04.len = (int)in_stack_ffffffffffffff68.data;
              runtime_growslice(prVar8,uVar12,uVar16,1,(internal_abi_Type *)&DAT_00864480,~r0_04);
              (b->jobs).cap = extraout_RCX_03;
              prVar8 = extraout_RAX_07;
              prVar13 = b;
              uVar12 = extraout_RBX_07;
              if (runtime_writeBarrier._0_4_ != 0) {
                runtime_gcWriteBarrier2();
                *extraout_R11_03 = extraout_RAX_08;
                extraout_R11_03[1] = (prVar13->jobs).array;
                prVar8 = extraout_RAX_08;
                uVar12 = extraout_RBX_08;
              }
              (prVar13->jobs).array = prVar8;
              iVar14 = iStack0000000000000020;
            }
            (b->jobs).len = uVar12;
            iVar20 = uVar12 - 1;
            prVar8[iVar20].pc = (uint32)uVar10;
            prVar8[iVar20].arg = true;
            prVar8[iVar20].pos = iVar15;
          }
          if ((uint)(b->cap).len <= (uint)local_10[uVar10].Arg) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          (b->cap).array[local_10[uVar10].Arg] = iVar18;
        }
        uVar10 = (uint)local_10[uVar10].Out;
        break;
      case 3:
        f = (**(code **)(iVar9 + 0x20))(iVar14,iVar18);
        regexp_lazyFlag_match
                  (f,(regexp_syntax_EmptyOp)local_10[uVar10].Arg,(bool)((char)uVar10 * '\x05'));
        iVar14 = iStack0000000000000020;
        if (extraout_AL == '\0') goto LAB_006fe1bc;
        uVar10 = (uint)local_10[uVar10].Out;
        break;
      case 4:
        iVar15 = (b->cap).len;
        if (iVar15 == 0) {
          return;
        }
        if (1 < iVar15) {
          (b->cap).array[1] = iVar18;
        }
        uVar10 = (b->matchcap).len;
        if (uVar10 < 2) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        __dest = (b->matchcap).array;
        if ((__dest[1] == -1) || (((bVar3 != false && (0 < iVar18)) && (__dest[1] < iVar18)))) {
          uVar16 = (b->cap).len;
          __src = (b->cap).array;
          if ((int)uVar16 < (int)uVar10) {
            uVar10 = uVar16;
          }
          if (__src != __dest) {
            runtime_memmove(__dest,__src,uVar10 << 3);
            iVar14 = iStack0000000000000020;
          }
        }
        if (bVar3 == false) {
          return;
        }
        if (b->end == iVar18) {
          return;
        }
        goto LAB_006fe1bc;
      case 5:
                    // WARNING: Subroutine does not return
        runtime_gopanic(in_stack_ffffffffffffff68);
      case 6:
        uVar10 = (uint)prVar5[uVar10].Out;
        break;
      case 7:
        dVar6 = (**(code **)(iVar9 + 0x38))(iVar14,iVar18);
        regexp_syntax___Inst__MatchRunePos(local_18,dVar6,(uint)dVar6);
        iVar14 = iStack0000000000000020;
        if (extraout_RAX_09 == -1) goto LAB_006fe1bc;
        iVar18 = iVar18 + extraout_RBX_09;
        uVar10 = (uint)local_10[uVar10].Out;
        break;
      case 8:
        sVar7 = (**(code **)(iVar9 + 0x38))(iVar14,iVar18);
        if (local_10[uVar10].Rune.len == 0) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        iVar14 = iStack0000000000000020;
        if (*local_10[uVar10].Rune.array != sVar7) goto LAB_006fe1bc;
        iVar18 = iVar18 + extraout_RBX_10;
        uVar10 = (uint)local_10[uVar10].Out;
        break;
      case 9:
        sVar7 = (**(code **)(iVar9 + 0x38))(iVar14,iVar18);
        iVar14 = iStack0000000000000020;
        if (sVar7 == -1) goto LAB_006fe1bc;
        iVar18 = iVar18 + extraout_RBX_11;
        uVar10 = (uint)local_10[uVar10].Out;
        break;
      case 10:
        sVar7 = (**(code **)(iVar9 + 0x38))(iVar14,iVar18);
        iVar14 = iStack0000000000000020;
        if ((sVar7 == 10) || (sVar7 == -1)) goto LAB_006fe1bc;
        iVar18 = iVar18 + extraout_RBX_12;
        uVar10 = (uint)local_10[uVar10].Out;
      }
      uVar16 = iVar18 + (b->end + 1) * uVar10;
      uVar12 = uVar16 >> 5;
      if ((uint)(b->visited).len <= uVar12) {
                    // WARNING: Subroutine does not return
        runtime_panicIndexU();
      }
      puVar4 = (b->visited).array;
      dVar6 = puVar4[uVar12];
      dVar19 = (dword)uVar16;
      bVar21 = (dVar6 >> (dVar19 & 0x1f) & 1) != 0;
      if (!bVar21) {
        puVar4[uVar12] = dVar6 | 1 << (dVar19 & 0x1f);
        bVar21 = (dVar6 >> (dVar19 & 0x1f) & 1) != 0;
      }
    } while (!bVar21);
  } while( true );
}



void regexp___Regexp__backtrack
               (regexp_Regexp *re,__uint8 ib,string is,int pos,int ncap,__int dstCap,__int ~r0)

{
  byte bVar1;
  int *__src;
  runtime_slice ~r0_00;
  char extraout_AL;
  char extraout_AL_00;
  undefined *extraout_RAX;
  regexp_bitState *extraout_RAX_00;
  regexp_bitState *b_1;
  undefined1 *puVar2;
  int advance;
  uint8 *extraout_RAX_01;
  regexp_syntax_EmptyOp startCond;
  regexp_inputs *pos_00;
  regexp_bitState *~r0_01;
  regexp_bitState *b;
  regexp_bitState *extraout_RBX;
  regexp_bitState *extraout_RBX_00;
  int extraout_RBX_01;
  int width;
  uint8 *in_RSI;
  int extraout_RSI;
  int end;
  int iVar3;
  int in_RDI;
  int in_R9;
  int in_R10;
  uint8 **extraout_R11;
  uint8 **extraout_R11_00;
  int unaff_R14;
  interface___ in_stack_ffffffffffffff88;
  int in_stack_ffffffffffffff98;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  bVar1 = re->cond;
  if (bVar1 == 0xff) {
    return;
  }
  if (((bVar1 & 4) != 0) && (in_R9 != 0)) {
    return;
  }
  sync___Pool__Get(&regexp_bitStatePool,in_stack_ffffffffffffff88);
  b = ~r0_01;
  if (extraout_RAX != &DAT_00844a60) {
    runtime_newobject((internal_abi_Type *)&DAT_00886e20,~r0_01);
    b = extraout_RAX_00;
  }
  if (pos == 0) {
    (b->inputs).string.str.len = end;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_00 = in_RSI;
      extraout_R11_00[1] = (extraout_RBX_00->inputs).string.str.str;
      b = extraout_RBX_00;
    }
    (b->inputs).string.str.str = in_RSI;
    pos_00 = (regexp_inputs *)&(b->inputs).string;
    puVar2 = go_itab__regexp_inputString_regexp_input;
  }
  else {
    (b->inputs).bytes.str.len = ncap;
    (b->inputs).bytes.str.cap = in_RDI;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = (uint8 *)pos;
      extraout_R11[1] = (extraout_RBX->inputs).bytes.str.array;
      b = extraout_RBX;
      ncap = extraout_RSI;
    }
    (b->inputs).bytes.str.array = (uint8 *)pos;
    pos_00 = &b->inputs;
    puVar2 = go_itab__regexp_inputBytes_regexp_input;
    end = ncap;
  }
  regexp___bitState__reset(b,re->prog,end,in_R10);
  if ((bVar1 & 4) == 0) {
    iVar3 = -1;
    while( true ) {
      if ((end < in_R9) || (iVar3 == 0)) {
        regexp_freeBitState(b);
        return;
      }
      if ((re->prefix).len != 0) {
        iVar3 = (**(code **)(puVar2 + 0x30))(pos_00,re,in_R9);
        if (iVar3 < 0) {
          regexp_freeBitState(b);
          return;
        }
        in_R9 = in_R9 + iVar3;
      }
      if ((b->cap).len != 0) {
        *(b->cap).array = in_R9;
      }
      regexp___Regexp__tryBacktrack
                (re,b,(regexp_input)in_stack_ffffffffffffff88,(uint32)puVar2,(int)pos_00,
                 SUB81(re->prog->Start,0));
      if (extraout_AL_00 != '\0') break;
      (**(code **)(puVar2 + 0x38))(pos_00,in_R9);
      in_R9 = in_R9 + extraout_RBX_01;
      iVar3 = extraout_RBX_01;
    }
  }
  else {
    if ((b->cap).len != 0) {
      *(b->cap).array = in_R9;
    }
    regexp___Regexp__tryBacktrack
              (re,b,(regexp_input)in_stack_ffffffffffffff88,(uint32)puVar2,(int)pos_00,
               SUB81(re->prog->Start,0));
    if (extraout_AL == '\0') {
      regexp_freeBitState(b);
      return;
    }
  }
  iVar3 = (b->matchcap).len;
  __src = (b->matchcap).array;
  if ((uint)ib.cap < (uint)(iVar3 + ib.len)) {
    ~r0_00.cap = in_stack_ffffffffffffff98;
    ~r0_00.array = in_stack_ffffffffffffff88._type;
    ~r0_00.len = (int)in_stack_ffffffffffffff88.data;
    runtime_growslice(ib.array,iVar3 + ib.len,ib.cap,iVar3,(internal_abi_Type *)&DAT_00807760,~r0_00
                     );
    ib.array = extraout_RAX_01;
  }
  runtime_memmove(ib.array + ib.len * 8,__src,iVar3 << 3);
  regexp_freeBitState(b);
  return;
}



void regexp_lazyFlag_match(regexp_lazyFlag f,regexp_syntax_EmptyOp op,bool ~r0)

{
  sdword sVar1;
  
  if (op == 0) {
    return;
  }
  if ((op & 1) != 0) {
    if (((sdword)(f >> 0x20) != 10) && (-1 < (int)f)) {
      return;
    }
    op = op & 0xfe;
  }
  if ((op & 4) != 0) {
    if (-1 < (int)f) {
      return;
    }
    op = op & 0xfb;
  }
  if (op == 0) {
    return;
  }
  sVar1 = (sdword)f;
  if ((op & 2) != 0) {
    if ((sVar1 != 10) && (-1 < sVar1)) {
      return;
    }
    op = op & 0xfd;
  }
  if ((op & 8) != 0) {
    if (-1 < sVar1) {
      return;
    }
    op = op & 0xf7;
  }
  if (op != 0) {
    return;
  }
  return;
}



void regexp___machine__match(regexp_machine *m,regexp_input i,int pos,bool ~r0)

{
  byte bVar1;
  regexp_queue *prVar2;
  int32 r;
  int32 r1;
  char cVar3;
  int32 c;
  dword dVar4;
  dword dVar5;
  uint uVar6;
  int iVar7;
  int advance;
  int iVar8;
  regexp_thread **extraout_RAX;
  regexp_thread **extraout_RAX_00;
  regexp_thread **oldPtr;
  int extraout_RAX_01;
  undefined7 in_register_00000009;
  int extraout_RCX;
  regexp_syntax_EmptyOp startCond;
  int iVar9;
  regexp_machine *prVar10;
  regexp_entry *prVar11;
  int width;
  int extraout_RBX;
  int width1;
  int extraout_RBX_00;
  int extraout_RBX_01;
  int extraout_RBX_02;
  uint uVar12;
  uint extraout_RBX_03;
  uint extraout_RBX_04;
  uint extraout_RBX_05;
  regexp_queue *nextq;
  regexp_queue *extraout_RSI;
  regexp_queue *prVar13;
  int in_RDI;
  int i_1;
  int extraout_R8;
  regexp_thread *extraout_R9;
  regexp_thread *prVar14;
  regexp_thread **extraout_R10;
  void **extraout_R11;
  regexp_thread **extraout_R11_00;
  int unaff_R14;
  regexp_queue *runq;
