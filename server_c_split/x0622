  case 9:
    strconv_FormatUint((uint)prStack0000000000000010->Out,10,(string)in_stack_fffffffffffffbb0);
    local_1c8._8_8_ = 7;
    local_1c8._0_8_ = &DAT_008b0e83;
    ppvVar7 = (void **)local_1c8;
    uVar3 = 0;
    psVar9 = psStack0000000000000008;
    while ((int)uVar3 < 2) {
      pvVar11 = ppvVar7[1];
      pvVar10 = *ppvVar7;
      if (psVar9->addr == (strings_Builder *)0x0) {
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11_01 = psVar9;
          extraout_R11_01[1] = psVar9->addr;
          uVar3 = extraout_RAX_01;
          ppvVar7 = extraout_RCX_01;
          pvVar10 = extraout_RBX_02;
          pvVar11 = extraout_RDI_00;
        }
        psVar9->addr = psVar9;
      }
      else if (psVar9 != psVar9->addr) {
                    // WARNING: Subroutine does not return
        runtime_gopanic(in_stack_fffffffffffffbb0);
      }
      uVar6 = (psVar9->buf).cap;
      local_370 = (psVar9->buf).len;
      uVar8 = (int)pvVar11 + local_370;
      puVar5 = (psVar9->buf).array;
      local_368 = uVar3;
      local_230 = ppvVar7;
      if (uVar6 < uVar8) {
        ~r0_00.cap = in_stack_fffffffffffffbc0;
        ~r0_00.array = in_stack_fffffffffffffbb0._type;
        ~r0_00.len = (int)in_stack_fffffffffffffbb0.data;
        local_2b0 = pvVar10;
        runtime_growslice(puVar5,uVar8,uVar6,(int)pvVar11,(internal_abi_Type *)&DAT_00807920,~r0_00)
        ;
        pvVar10 = local_2b0;
        uVar6 = extraout_RCX_02;
        uVar8 = extraout_RBX_03;
        puVar5 = extraout_RAX_02;
      }
      puVar1 = puVar5 + local_370;
      local_378 = uVar6;
      local_370 = uVar8;
      local_238 = puVar5;
      runtime_memmove(puVar1,pvVar10,(size_t)pvVar11);
      (psStack0000000000000008->buf).len = local_370;
      (psStack0000000000000008->buf).cap = local_378;
      psVar9 = psStack0000000000000008;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_02 = local_238;
        extraout_R11_02[1] = (extraout_RSI_00->buf).array;
        psVar9 = extraout_RSI_00;
      }
      (psVar9->buf).array = local_238;
      ppvVar7 = local_230 + 2;
      uVar3 = local_368 + 1;
    }
    break;
  case 10:
    strconv_FormatUint((uint)prStack0000000000000010->Out,10,(string)in_stack_fffffffffffffbb0);
    local_1e8._8_8_ = 0xc;
    local_1e8._0_8_ =
         "anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen , not pointer != sweepgen  MB globals,  work.nproc=  work.nwait=  nStackRoots= flushedWork double unlock s.spanclass= MB) workers=min too large-byte block (runtime: val=runtime: seq= failed with timer_settimefatal error:  idlethreads= syscalltick=load64 failedxadd64 failedxchg64 failedmp.g0 stack [nil stackbase}\n\tsched={pc:, gp->status= pluginpath= : unknown pc  called from level 3 resetexchange fulltimer expiredsrmount errorreserved_namedefault_valuephp_namespace<unknown: %T>AlreadyExistsUnimplementedUNIMPLEMENTED\"UNAVAILABLE\"INVALID_STATE in host nameGrpc-Encodinggrpc-encodinggrpc-tags-bintransport: %vunix-abstractIntegrityOnlyAddr: <nil>, AuthorizationAccept-RangesIf-None-MatchLast-Modified[FrameHeader invalid base accept-rangesauthorizationcache-controlcontent-rangeif-none-matchlast-modifiedCache-ControlReset ContentLoop DetectedSTREAM_CLOSEDCONNECT_ERRORWINDOW_UPDATE3814697265625#   %s\t%s:%d\n/debug/eventsGunjala_GondiMasaram_GondiMende_KikakuiOld_Hungarianinvalid port name too longData: []byte{gocacheverifyinstallgoroothtml/templatetlsmaxrsasize for message gzip, deflate_grpc_config.SHA256-RSAPSSSH..." /* TRUNCATED STRING LITERAL */
    ;
    ppvVar7 = (void **)local_1e8;
    uVar3 = 0;
    psVar9 = psStack0000000000000008;
    while ((int)uVar3 < 2) {
      pvVar11 = ppvVar7[1];
      pvVar10 = *ppvVar7;
      if (psVar9->addr == (strings_Builder *)0x0) {
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11 = psVar9;
          extraout_R11[1] = psVar9->addr;
          uVar3 = extraout_RAX;
          ppvVar7 = extraout_RCX;
          pvVar10 = extraout_RBX_00;
          pvVar11 = extraout_RDI;
        }
        psVar9->addr = psVar9;
      }
      else if (psVar9 != psVar9->addr) {
                    // WARNING: Subroutine does not return
        runtime_gopanic(in_stack_fffffffffffffbb0);
      }
      uVar6 = (psVar9->buf).cap;
      local_370 = (psVar9->buf).len;
      uVar8 = (int)pvVar11 + local_370;
      puVar5 = (psVar9->buf).array;
      local_368 = uVar3;
      local_230 = ppvVar7;
      if (uVar6 < uVar8) {
        ~r0.cap = in_stack_fffffffffffffbc0;
        ~r0.array = in_stack_fffffffffffffbb0._type;
        ~r0.len = (int)in_stack_fffffffffffffbb0.data;
        local_2b8 = pvVar10;
        runtime_growslice(puVar5,uVar8,uVar6,(int)pvVar11,(internal_abi_Type *)&DAT_00807920,~r0);
        pvVar10 = local_2b8;
        uVar6 = extraout_RCX_00;
        uVar8 = extraout_RBX_01;
        puVar5 = extraout_RAX_00;
      }
      puVar1 = puVar5 + local_370;
      local_378 = uVar6;
      local_370 = uVar8;
      local_238 = puVar5;
      runtime_memmove(puVar1,pvVar10,(size_t)pvVar11);
      (psStack0000000000000008->buf).len = local_370;
      (psStack0000000000000008->buf).cap = local_378;
      psVar9 = psStack0000000000000008;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_00 = local_238;
        extraout_R11_00[1] = (extraout_RSI->buf).array;
        psVar9 = extraout_RSI;
      }
      (psVar9->buf).array = local_238;
      ppvVar7 = local_230 + 2;
      uVar3 = local_368 + 1;
    }
  }
  return;
}



void regexp_syntax___Regexp__Equal(regexp_syntax_Regexp *x,regexp_syntax_Regexp *y,bool ~r0)

{
  int iVar1;
  regexp_syntax_Regexp **pprVar2;
  regexp_syntax_Regexp *y_00;
  byte extraout_AL;
  byte bVar3;
  char extraout_AL_00;
  char extraout_AL_01;
  char extraout_AL_02;
  char extraout_AL_03;
  uint uVar4;
  int i;
  int32 r;
  regexp_syntax_Regexp *sub;
  int unaff_R14;
  regexp_syntax_Regexp *prStack0000000000000010;
  int i_1;
  
  prStack0000000000000010 = y;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((x == (regexp_syntax_Regexp *)0x0) || (prStack0000000000000010 == (regexp_syntax_Regexp *)0x0)
     ) {
    return;
  }
  bVar3 = x->Op;
  if (prStack0000000000000010->Op != bVar3) {
    return;
  }
  if (bVar3 < 0xe) {
    if ((byte)(bVar3 - 3) < 2) {
      iVar1 = (x->Rune).len;
      if ((prStack0000000000000010->Rune).len != iVar1) {
        return;
      }
      for (i = 0; i < iVar1; i = i + 1) {
        if ((prStack0000000000000010->Rune).array[i] != (x->Rune).array[i]) {
          return;
        }
      }
    }
    else if (bVar3 == 10) {
      if ((prStack0000000000000010->Flags & 0x100) != (x->Flags & 0x100)) {
        return;
      }
    }
    else if (bVar3 == 0xd) {
      if (prStack0000000000000010->Cap == x->Cap) {
        if ((prStack0000000000000010->Name).len == (x->Name).len) {
          runtime_memequal();
          bVar3 = extraout_AL ^ 1;
        }
        else {
          bVar3 = 1;
        }
      }
      else {
        bVar3 = 1;
      }
      if (bVar3 == 0) {
        if ((x->Sub).len == 0) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        if ((prStack0000000000000010->Sub).len == 0) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        pprVar2 = (prStack0000000000000010->Sub).array;
        regexp_syntax___Regexp__Equal(*(x->Sub).array,*pprVar2,SUB81(pprVar2,0));
        if (extraout_AL_00 != '\0') {
          return;
        }
      }
      return;
    }
  }
  else {
    if (bVar3 < 0x11) {
      if ((prStack0000000000000010->Flags & 0x20) == (x->Flags & 0x20)) {
        if ((x->Sub).len == 0) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        if ((prStack0000000000000010->Sub).len == 0) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        pprVar2 = (prStack0000000000000010->Sub).array;
        regexp_syntax___Regexp__Equal(*(x->Sub).array,*pprVar2,SUB81(pprVar2,0));
        if (extraout_AL_02 != '\0') {
          return;
        }
      }
      return;
    }
    if (bVar3 == 0x11) {
      if ((((prStack0000000000000010->Flags & 0x20) == (x->Flags & 0x20)) &&
          (prStack0000000000000010->Min == x->Min)) && (prStack0000000000000010->Max == x->Max)) {
        if ((x->Sub).len == 0) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        if ((prStack0000000000000010->Sub).len == 0) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        pprVar2 = (prStack0000000000000010->Sub).array;
        regexp_syntax___Regexp__Equal(*(x->Sub).array,*pprVar2,SUB81(pprVar2,0));
        if (extraout_AL_01 != '\0') {
          return;
        }
      }
      return;
    }
    if ((byte)(bVar3 - 0x12) < 2) {
      iVar1 = (x->Sub).len;
      if ((prStack0000000000000010->Sub).len != iVar1) {
        return;
      }
      pprVar2 = (x->Sub).array;
      for (uVar4 = 0; (int)uVar4 < iVar1; uVar4 = uVar4 + 1) {
        if ((uint)(prStack0000000000000010->Sub).len <= uVar4) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        y_00 = (prStack0000000000000010->Sub).array[uVar4];
        regexp_syntax___Regexp__Equal(pprVar2[uVar4],y_00,SUB81(y_00,0));
        if (extraout_AL_03 == '\0') {
          return;
        }
      }
    }
  }
  return;
}



void regexp_syntax___Regexp__MaxCap(regexp_syntax_Regexp *re,int ~r0)

{
  int iVar1;
  regexp_syntax_Regexp **~r0_00;
  int extraout_RAX;
  int n;
  int m;
  int iVar2;
  regexp_syntax_Regexp *sub;
  int iVar3;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (re->Op == 0xd) {
    iVar2 = re->Cap;
  }
  else {
    iVar2 = 0;
  }
  iVar1 = (re->Sub).len;
  ~r0_00 = (re->Sub).array;
  iVar3 = 0;
  while (iVar3 < iVar1) {
    regexp_syntax___Regexp__MaxCap(~r0_00[iVar3],(int)~r0_00);
    iVar3 = iVar3 + 1;
    if (iVar2 < extraout_RAX) {
      iVar2 = extraout_RAX;
    }
  }
  return;
}



void regexp_syntax___Regexp__CapNames(regexp_syntax_Regexp *re,__string ~r0)

{
  int extraout_RAX;
  int in_RBX;
  int extraout_RBX;
  void *~r0_00;
  int unaff_R14;
  __string in_stack_ffffffffffffffc0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RBX = extraout_RBX;
  }
  regexp_syntax___Regexp__MaxCap(re,in_RBX);
  runtime_makeslice((internal_abi_Type *)&DAT_008075e0,extraout_RAX + 1,extraout_RAX + 1,~r0_00);
  regexp_syntax___Regexp__capNames(re,in_stack_ffffffffffffffc0);
  return;
}



void regexp_syntax___Regexp__capNames(regexp_syntax_Regexp *re,__string names)

{
  regexp_syntax_Regexp **pprVar1;
  regexp_syntax_Regexp *extraout_RAX;
  int iVar2;
  uint in_RCX;
  int iVar3;
  int in_RBX;
  int extraout_RBX;
  regexp_syntax_Regexp *sub;
  uint8 *extraout_R8;
  uint8 *puVar4;
  uint8 **extraout_R11;
  int unaff_R14;
  __string in_stack_ffffffffffffffb8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (re->Op == 0xd) {
    if (in_RCX <= (uint)re->Cap) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    iVar3 = re->Cap * 0x10;
    puVar4 = (re->Name).str;
    *(int *)(in_RBX + 8 + iVar3) = (re->Name).len;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_R8;
      extraout_R11[1] = *(uint8 **)(extraout_RBX + iVar3);
      re = extraout_RAX;
      in_RBX = extraout_RBX;
      puVar4 = extraout_R8;
    }
    *(uint8 **)(in_RBX + iVar3) = puVar4;
  }
  pprVar1 = (re->Sub).array;
  iVar3 = (re->Sub).len;
  for (iVar2 = 0; iVar2 < iVar3; iVar2 = iVar2 + 1) {
    regexp_syntax___Regexp__capNames(pprVar1[iVar2],in_stack_ffffffffffffffb8);
  }
  return;
}



// Local variable nre:regexp/syntax.Regexp *[RAX:8] conflicts with parameter, skipped.

void regexp_syntax___Regexp__Simplify(regexp_syntax_Regexp *re,regexp_syntax_Regexp *~r0)

{
  byte bVar1;
  ushort uVar2;
  regexp_syntax_Regexp *extraout_RAX;
  regexp_syntax_Regexp *sub_1;
  byte *extraout_RAX_00;
  byte *extraout_RAX_01;
  byte *extraout_RAX_02;
  byte *pbVar3;
  undefined *extraout_RAX_03;
  regexp_syntax_Regexp *extraout_RAX_04;
  regexp_syntax_Regexp *sub_2;
  undefined *extraout_RAX_05;
  regexp_syntax_Regexp *nre_1;
  undefined *extraout_RAX_06;
  undefined *extraout_RAX_07;
  undefined *extraout_RAX_08;
  undefined *extraout_RAX_09;
  undefined *puVar4;
  undefined *extraout_RAX_10;
  undefined *extraout_RAX_11;
  undefined *extraout_RAX_12;
  undefined *extraout_RAX_13;
  regexp_syntax_Regexp *prefix;
  undefined *extraout_RAX_14;
  regexp_syntax_Regexp *sub;
  regexp_syntax_Regexp *extraout_RAX_15;
  regexp_syntax_Regexp *dst;
  int iVar5;
  int extraout_RAX_16;
  regexp_syntax_Regexp **extraout_RAX_17;
  regexp_syntax_Regexp **extraout_RAX_18;
  regexp_syntax_Regexp **extraout_RAX_19;
  regexp_syntax_Regexp *extraout_RAX_20;
  void *extraout_RAX_21;
  void *extraout_RAX_22;
  undefined *extraout_RAX_23;
  regexp_syntax_Regexp *extraout_RAX_24;
  regexp_syntax_Regexp *extraout_RAX_25;
  regexp_syntax_Regexp *extraout_RAX_26;
  regexp_syntax_Regexp *suffix;
  undefined *extraout_RAX_27;
  regexp_syntax_Regexp *extraout_RAX_28;
  regexp_syntax_Regexp *nre2;
  regexp_syntax_Regexp **extraout_RAX_29;
  regexp_syntax_Regexp **extraout_RAX_30;
  regexp_syntax_Regexp **extraout_RAX_31;
  regexp_syntax_Regexp **pprVar6;
  regexp_syntax_Regexp *extraout_RAX_32;
  regexp_syntax_Regexp *extraout_RAX_33;
  regexp_syntax_Regexp *extraout_RAX_34;
  void *extraout_RAX_35;
  void *extraout_RAX_36;
  void *pvVar7;
  regexp_syntax_Regexp *extraout_RAX_37;
  void *extraout_RAX_38;
  void *extraout_RAX_39;
  undefined *extraout_RAX_40;
  regexp_syntax_Regexp *extraout_RAX_41;
  regexp_syntax_Regexp *extraout_RAX_42;
  regexp_syntax_Regexp *extraout_RAX_43;
  regexp_syntax_Regexp *prVar8;
  undefined *puVar9;
  void *extraout_RAX_44;
  void *extraout_RAX_45;
  byte *extraout_RCX;
  byte *pbVar10;
  undefined *extraout_RCX_00;
  undefined *extraout_RCX_01;
  undefined *extraout_RCX_02;
  undefined *extraout_RCX_03;
  int extraout_RCX_04;
  uint uVar11;
  int extraout_RCX_05;
  int i_2;
  undefined8 extraout_RCX_06;
  int extraout_RCX_07;
  int extraout_RCX_08;
  int extraout_RCX_09;
  int iVar12;
  undefined8 extraout_RCX_10;
  int i_1;
  undefined8 extraout_RCX_11;
  int extraout_RCX_12;
  undefined8 extraout_RCX_13;
  regexp_syntax_Regexp **oldPtr;
  dword dVar13;
  void *~r0_00;
  void *extraout_RBX;
  void *extraout_RBX_00;
  void *extraout_RBX_01;
  void *extraout_RBX_02;
  void *~r0_01;
  uint extraout_RBX_03;
  uint newLen;
  uint extraout_RBX_04;
  uint extraout_RBX_05;
  uint extraout_RBX_06;
  void *extraout_RBX_07;
  void *extraout_RBX_08;
  void *extraout_RBX_09;
  regexp_syntax_Regexp *prVar14;
  void *extraout_RBX_10;
  void *extraout_RBX_11;
  void *extraout_RBX_12;
  void *extraout_RBX_13;
  void *extraout_RBX_14;
  void *extraout_RBX_15;
  void *pvVar15;
  void *extraout_RBX_16;
  void *extraout_RBX_17;
  void *extraout_RBX_18;
  uint extraout_RBX_19;
  uint extraout_RBX_20;
  uint extraout_RBX_21;
  regexp_syntax_Regexp *extraout_RBX_22;
  uint uVar16;
  undefined8 extraout_R8;
  regexp_syntax_Regexp *extraout_R8_00;
  regexp_syntax_Regexp *extraout_R8_01;
  regexp_syntax_Regexp **extraout_R8_02;
  int i_3;
  regexp_syntax_Regexp *extraout_R8_03;
  void *extraout_R8_04;
  regexp_syntax_Regexp *extraout_R8_05;
  void *extraout_R8_06;
  regexp_syntax_Regexp **extraout_R9;
  void *extraout_R10;
  void *extraout_R10_00;
  regexp_syntax_Regexp **extraout_R11;
  byte **extraout_R11_00;
  undefined8 *extraout_R11_01;
  regexp_syntax_Regexp **extraout_R11_02;
  undefined8 *extraout_R11_03;
  regexp_syntax_Regexp **extraout_R11_04;
  undefined8 *extraout_R11_05;
  undefined8 *extraout_R11_06;
  undefined8 *extraout_R11_07;
  undefined8 *extraout_R11_08;
  void **extraout_R11_09;
  regexp_syntax_Regexp **extraout_R11_10;
  void **extraout_R11_11;
  regexp_syntax_Regexp **extraout_R11_12;
  regexp_syntax_Regexp **extraout_R11_13;
  int *extraout_R11_14;
  regexp_syntax_Regexp **extraout_R11_15;
  int **extraout_R11_16;
  regexp_syntax_Regexp **extraout_R11_17;
  int *extraout_R11_18;
  void **extraout_R11_19;
  regexp_syntax_Regexp **extraout_R11_20;
  void **extraout_R11_21;
  regexp_syntax_Regexp **extraout_R11_22;
  regexp_syntax_Regexp **extraout_R11_23;
  int *extraout_R11_24;
  void **extraout_R11_25;
  regexp_syntax_Regexp **extraout_R11_26;
  int unaff_R14;
  undefined in_XMM15 [16];
  regexp_syntax_Regexp *prStack0000000000000008;
  runtime_slice in_stack_ffffffffffffff00;
  int i;
  int local_80;
  regexp_syntax_Regexp *local_78;
  regexp_syntax_Regexp *local_70;
  regexp_syntax_Regexp *local_68;
  regexp_syntax_Regexp *local_60;
  regexp_syntax_Regexp *local_58;
  undefined *local_50;
  regexp_syntax_Regexp *nsub;
  regexp_syntax_Regexp *local_40;
  undefined *local_38;
  regexp_syntax_Regexp *local_30;
  regexp_syntax_Regexp *local_28;
  regexp_syntax_Regexp **local_20;
  regexp_syntax_Regexp **local_18;
  regexp_syntax_Regexp **local_10;
  
  while (prStack0000000000000008 = re, &local_80 <= *(int **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    re = prStack0000000000000008;
    ~r0 = extraout_RBX_22;
  }
  if (re == (regexp_syntax_Regexp *)0x0) {
    return;
  }
  bVar1 = re->Op;
  if (bVar1 < 0x11) {
    if (bVar1 != 0xd) {
      if (bVar1 < 0xe) {
        return;
      }
      if ((re->Sub).len != 0) {
        regexp_syntax___Regexp__Simplify(*(re->Sub).array,~r0);
        if (extraout_RAX->Op != 2) {
          bVar1 = prStack0000000000000008->Op;
          uVar2 = prStack0000000000000008->Flags;
          if ((extraout_RAX->Op != bVar1) || ((extraout_RAX->Flags & 0x20) != (uVar2 & 0x20))) {
            if ((prStack0000000000000008->Sub).len == 0) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            if (*(prStack0000000000000008->Sub).array != extraout_RAX) {
              local_60 = extraout_RAX;
              runtime_newobject((internal_abi_Type *)&DAT_00893c00,(void *)(uint)bVar1);
              *extraout_RAX_00 = bVar1;
              *(ushort *)(extraout_RAX_00 + 2) = uVar2;
              pbVar3 = extraout_RAX_00;
              if (runtime_writeBarrier._0_4_ != 0) {
                runtime_gcWriteBarrier1();
                *extraout_R11 = local_60;
                pbVar3 = extraout_RAX_01;
              }
              *(regexp_syntax_Regexp **)(pbVar3 + 0x20) = local_60;
              *(undefined8 *)(pbVar3 + 0x10) = 1;
              *(undefined8 *)(pbVar3 + 0x18) = 1;
              pbVar10 = pbVar3 + 0x20;
              if (runtime_writeBarrier._0_4_ != 0) {
                runtime_gcWriteBarrier1();
                *extraout_R11_00 = extraout_RCX;
                pbVar3 = extraout_RAX_02;
                pbVar10 = extraout_RCX;
              }
              *(byte **)(pbVar3 + 8) = pbVar10;
            }
          }
        }
        return;
      }
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
  }
  else {
    if (bVar1 == 0x11) {
      if ((re->Min == 0) && (re->Max == 0)) {
        runtime_newobject((internal_abi_Type *)&DAT_00893c00,~r0);
        *extraout_RAX_03 = 2;
        return;
      }
      if ((re->Sub).len == 0) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      regexp_syntax___Regexp__Simplify(*(re->Sub).array,~r0);
      local_68 = extraout_RAX_04;
      if (prStack0000000000000008->Max == -1) {
        if (prStack0000000000000008->Min == 0) {
          if ((extraout_RAX_04->Op != 2) &&
             ((uVar2 = prStack0000000000000008->Flags, pvVar15 = ~r0_00, extraout_RAX_04->Op != 0xe
              || (dVar13 = extraout_RAX_04->Flags & 0x20, pvVar15 = (void *)(uint)dVar13,
                 (ushort)dVar13 != (uVar2 & 0x20))))) {
            runtime_newobject((internal_abi_Type *)&DAT_00893c00,pvVar15);
            *extraout_RAX_10 = 0xe;
            *(ushort *)(extraout_RAX_10 + 2) = uVar2;
            puVar4 = extraout_RAX_10;
            if (runtime_writeBarrier._0_4_ != 0) {
              runtime_gcWriteBarrier1();
              *extraout_R11_04 = local_68;
              puVar4 = extraout_RAX_11;
            }
            *(regexp_syntax_Regexp **)(puVar4 + 0x20) = local_68;
            *(undefined8 *)(puVar4 + 0x10) = 1;
            *(undefined8 *)(puVar4 + 0x18) = 1;
            puVar9 = puVar4 + 0x20;
            if (runtime_writeBarrier._0_4_ != 0) {
              runtime_gcWriteBarrier1();
              *extraout_R11_05 = extraout_RCX_02;
              puVar4 = extraout_RAX_12;
              puVar9 = extraout_RCX_02;
            }
            *(undefined **)(puVar4 + 8) = puVar9;
          }
          return;
        }
        if (prStack0000000000000008->Min != 1) {
          runtime_newobject((internal_abi_Type *)&DAT_00893c00,~r0_00);
          *extraout_RAX_05 = 0x12;
          *(undefined8 *)(extraout_RAX_05 + 0x10) = 0;
          *(undefined8 *)(extraout_RAX_05 + 0x18) = 1;
          puVar4 = extraout_RAX_05 + 0x20;
          puVar9 = extraout_RAX_05;
          pvVar15 = extraout_RBX;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier1();
            *extraout_R11_01 = extraout_RCX_00;
            puVar9 = extraout_RAX_06;
            puVar4 = extraout_RCX_00;
            pvVar15 = extraout_RBX_00;
          }
          *(undefined **)(puVar9 + 8) = puVar4;
          prVar8 = local_68;
          prVar14 = prStack0000000000000008;
          local_38 = puVar9;
          for (i_1 = 0; i_1 < prVar14->Min + -1; i_1 = i_1 + 1) {
            pvVar15 = (void *)(*(int *)(puVar9 + 0x10) + 1);
            pvVar7 = *(void **)(puVar9 + 8);
            if (*(void **)(puVar9 + 0x18) < pvVar15) {
              runtime_growslice(pvVar7,(int)pvVar15,(int)*(void **)(puVar9 + 0x18),1,
                                (internal_abi_Type *)&DAT_00865800,in_stack_ffffffffffffff00);
              *(undefined8 *)(local_38 + 0x18) = extraout_RCX_11;
              pvVar7 = extraout_RAX_38;
              puVar4 = local_38;
              pvVar15 = extraout_RBX_16;
              if (runtime_writeBarrier._0_4_ != 0) {
                runtime_gcWriteBarrier2();
                *extraout_R11_21 = extraout_RAX_39;
                extraout_R11_21[1] = *(void **)(puVar4 + 8);
                pvVar7 = extraout_RAX_39;
                pvVar15 = extraout_RBX_17;
              }
              *(void **)(puVar4 + 8) = pvVar7;
              puVar9 = local_38;
              prVar8 = local_68;
              prVar14 = prStack0000000000000008;
            }
            *(void **)(puVar9 + 0x10) = pvVar15;
            if (runtime_writeBarrier._0_4_ != 0) {
              runtime_gcWriteBarrier2();
              *extraout_R11_22 = prVar8;
              extraout_R11_22[1] =
                   *(regexp_syntax_Regexp **)((int)extraout_R10_00 + (int)extraout_RBX_18 * 8 + -8);
              puVar9 = extraout_RAX_40;
              i_1 = extraout_RCX_12;
              pvVar15 = extraout_RBX_18;
              prVar14 = extraout_R8_05;
              pvVar7 = extraout_R10_00;
            }
            *(regexp_syntax_Regexp **)((int)pvVar7 + (int)pvVar15 * 8 + -8) = prVar8;
          }
          if ((prVar8->Op != 2) &&
             ((uVar2 = prVar14->Flags, prVar8->Op != 0xf ||
              ((prVar8->Flags & 0x20) != (uVar2 & 0x20))))) {
            runtime_newobject((internal_abi_Type *)&DAT_00893c00,pvVar15);
            extraout_RAX_41->Op = 0xf;
            extraout_RAX_41->Flags = uVar2;
            prVar8 = extraout_RAX_41;
            if (runtime_writeBarrier._0_4_ != 0) {
              runtime_gcWriteBarrier1();
              *extraout_R11_23 = local_68;
              prVar8 = extraout_RAX_42;
            }
            prVar8->Sub0[0] = local_68;
            (prVar8->Sub).len = 1;
            (prVar8->Sub).cap = 1;
            pprVar6 = prVar8->Sub0;
            if (runtime_writeBarrier._0_4_ != 0) {
              runtime_gcWriteBarrier1();
              *extraout_R11_24 = (int)pprVar6;
              prVar8 = extraout_RAX_43;
            }
            (prVar8->Sub).array = pprVar6;
            puVar9 = local_38;
          }
          uVar16 = *(int *)(puVar9 + 0x10) + 1;
          pvVar15 = *(void **)(puVar9 + 8);
          if (*(uint *)(puVar9 + 0x18) < uVar16) {
            local_78 = prVar8;
            runtime_growslice(pvVar15,uVar16,*(uint *)(puVar9 + 0x18),1,
                              (internal_abi_Type *)&DAT_00865800,in_stack_ffffffffffffff00);
            *(undefined8 *)(local_38 + 0x18) = extraout_RCX_13;
            pvVar15 = extraout_RAX_44;
            puVar9 = local_38;
            uVar16 = extraout_RBX_19;
            if (runtime_writeBarrier._0_4_ != 0) {
              runtime_gcWriteBarrier2();
              *extraout_R11_25 = extraout_RAX_45;
              extraout_R11_25[1] = *(void **)(local_38 + 8);
              pvVar15 = extraout_RAX_45;
              puVar9 = local_38;
              uVar16 = extraout_RBX_20;
            }
            *(void **)(puVar9 + 8) = pvVar15;
            prVar8 = local_78;
          }
          *(uint *)(puVar9 + 0x10) = uVar16;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_26 = prVar8;
            extraout_R11_26[1] =
                 *(regexp_syntax_Regexp **)((int)extraout_R8_06 + extraout_RBX_21 * 8 + -8);
            uVar16 = extraout_RBX_21;
            pvVar15 = extraout_R8_06;
          }
          *(regexp_syntax_Regexp **)((int)pvVar15 + uVar16 * 8 + -8) = prVar8;
          return;
        }
        if ((extraout_RAX_04->Op != 2) &&
           ((uVar2 = prStack0000000000000008->Flags, pvVar15 = ~r0_00, extraout_RAX_04->Op != 0xf ||
            (dVar13 = extraout_RAX_04->Flags & 0x20, pvVar15 = (void *)(uint)dVar13,
            (ushort)dVar13 != (uVar2 & 0x20))))) {
          runtime_newobject((internal_abi_Type *)&DAT_00893c00,pvVar15);
          *extraout_RAX_07 = 0xf;
          *(ushort *)(extraout_RAX_07 + 2) = uVar2;
          puVar4 = extraout_RAX_07;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier1();
            *extraout_R11_02 = local_68;
            puVar4 = extraout_RAX_08;
          }
          *(regexp_syntax_Regexp **)(puVar4 + 0x20) = local_68;
          *(undefined8 *)(puVar4 + 0x10) = 1;
          *(undefined8 *)(puVar4 + 0x18) = 1;
          puVar9 = puVar4 + 0x20;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier1();
            *extraout_R11_03 = extraout_RCX_01;
            puVar4 = extraout_RAX_09;
            puVar9 = extraout_RCX_01;
          }
          *(undefined **)(puVar4 + 8) = puVar9;
        }
        return;
      }
      if ((prStack0000000000000008->Min == 1) && (prStack0000000000000008->Max == 1)) {
        return;
      }
      if (prStack0000000000000008->Min < 1) {
        suffix = extraout_RAX_04;
        prVar8 = prStack0000000000000008;
        puVar4 = (undefined *)0x0;
        pvVar15 = ~r0_00;
      }
      else {
        runtime_newobject((internal_abi_Type *)&DAT_00893c00,~r0_00);
        *extraout_RAX_13 = 0x12;
        *(undefined8 *)(extraout_RAX_13 + 0x10) = 0;
        *(undefined8 *)(extraout_RAX_13 + 0x18) = 1;
        puVar4 = extraout_RAX_13 + 0x20;
        puVar9 = extraout_RAX_13;
        pvVar15 = extraout_RBX_01;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier1();
          *extraout_R11_06 = extraout_RCX_03;
          puVar9 = extraout_RAX_14;
          puVar4 = extraout_RCX_03;
          pvVar15 = extraout_RBX_02;
        }
        *(undefined **)(puVar9 + 8) = puVar4;
        suffix = local_68;
        prVar8 = prStack0000000000000008;
        local_50 = puVar9;
        for (i_2 = 0; puVar4 = local_50, i_2 < prVar8->Min; i_2 = i_2 + 1) {
          pvVar15 = (void *)(*(int *)(puVar9 + 0x10) + 1);
          pvVar7 = *(void **)(puVar9 + 8);
          if (*(void **)(puVar9 + 0x18) < pvVar15) {
            runtime_growslice(pvVar7,(int)pvVar15,(int)*(void **)(puVar9 + 0x18),1,
                              (internal_abi_Type *)&DAT_00865800,in_stack_ffffffffffffff00);
            *(undefined8 *)(local_50 + 0x18) = extraout_RCX_06;
            pvVar7 = extraout_RAX_21;
            puVar4 = local_50;
            pvVar15 = extraout_RBX_07;
            if (runtime_writeBarrier._0_4_ != 0) {
              runtime_gcWriteBarrier2();
              *extraout_R11_11 = extraout_RAX_22;
              extraout_R11_11[1] = *(void **)(puVar4 + 8);
              pvVar7 = extraout_RAX_22;
              pvVar15 = extraout_RBX_08;
            }
            *(void **)(puVar4 + 8) = pvVar7;
            puVar9 = local_50;
            suffix = local_68;
            prVar8 = prStack0000000000000008;
          }
          *(void **)(puVar9 + 0x10) = pvVar15;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_12 = suffix;
            extraout_R11_12[1] =
                 *(regexp_syntax_Regexp **)((int)extraout_R10 + (int)extraout_RBX_09 * 8 + -8);
            puVar9 = extraout_RAX_23;
            i_2 = extraout_RCX_07;
            pvVar15 = extraout_RBX_09;
            prVar8 = extraout_R8_01;
            pvVar7 = extraout_R10;
          }
          *(regexp_syntax_Regexp **)((int)pvVar7 + (int)pvVar15 * 8 + -8) = suffix;
        }
      }
      if (prVar8->Min < prVar8->Max) {
        prVar14 = suffix;
        local_50 = puVar4;
        if ((suffix->Op != 2) &&
           ((uVar2 = prVar8->Flags, suffix->Op != 0x10 || ((suffix->Flags & 0x20) != (uVar2 & 0x20))
            ))) {
          runtime_newobject((internal_abi_Type *)&DAT_00893c00,pvVar15);
          extraout_RAX_24->Op = 0x10;
          extraout_RAX_24->Flags = uVar2;
          suffix = extraout_RAX_24;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier1();
            *extraout_R11_13 = local_68;
            suffix = extraout_RAX_25;
          }
          suffix->Sub0[0] = local_68;
          (suffix->Sub).len = 1;
          (suffix->Sub).cap = 1;
          pprVar6 = suffix->Sub0;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier1();
            *extraout_R11_14 = (int)extraout_R8_02;
            suffix = extraout_RAX_26;
            pprVar6 = extraout_R8_02;
          }
          (suffix->Sub).array = pprVar6;
          prVar8 = prStack0000000000000008;
          prVar14 = local_68;
        }
        iVar5 = prVar8->Min;
        while (iVar5 = iVar5 + 1, local_70 = suffix, iVar5 < prVar8->Max) {
          runtime_newobject((internal_abi_Type *)&DAT_00893c00,prVar14);
          extraout_RAX_28->Op = 0x12;
          local_40 = extraout_RAX_28;
          runtime_growslice(extraout_RAX_28->Sub0,2,1,2,(internal_abi_Type *)&DAT_00865800,
                            in_stack_ffffffffffffff00);
          pprVar6 = extraout_RAX_29;
          iVar12 = extraout_RCX_08;
          pvVar15 = extraout_RBX_10;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier4();
            *extraout_R11_15 = local_68;
            extraout_R11_15[1] = *extraout_RAX_30;
            extraout_R11_15[2] = local_70;
            extraout_R11_15[3] = extraout_RAX_30[1];
            pprVar6 = extraout_RAX_30;
            iVar12 = extraout_RCX_09;
            pvVar15 = extraout_RBX_11;
          }
          *pprVar6 = local_68;
          pprVar6[1] = local_70;
          (local_40->Sub).len = 2;
          (local_40->Sub).cap = iVar12;
          suffix = local_40;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_16 = (int *)extraout_RAX_31;
            extraout_R11_16[1] = (int *)(extraout_R8_03->Sub).array;
            pprVar6 = extraout_RAX_31;
            pvVar15 = extraout_RBX_12;
            suffix = extraout_R8_03;
          }
          (suffix->Sub).array = pprVar6;
          prVar8 = prStack0000000000000008;
          prVar14 = local_68;
          if ((suffix->Op != 2) &&
             ((uVar2 = prStack0000000000000008->Flags, suffix->Op != 0x10 ||
              ((suffix->Flags & 0x20) != (uVar2 & 0x20))))) {
            runtime_newobject((internal_abi_Type *)&DAT_00893c00,pvVar15);
            extraout_RAX_32->Op = 0x10;
            extraout_RAX_32->Flags = uVar2;
            suffix = extraout_RAX_32;
            if (runtime_writeBarrier._0_4_ != 0) {
              runtime_gcWriteBarrier1();
              *extraout_R11_17 = local_40;
              suffix = extraout_RAX_33;
            }
            suffix->Sub0[0] = local_40;
            (suffix->Sub).len = 1;
            (suffix->Sub).cap = 1;
            pprVar6 = suffix->Sub0;
            if (runtime_writeBarrier._0_4_ != 0) {
              runtime_gcWriteBarrier1();
              *extraout_R11_18 = (int)pprVar6;
              suffix = extraout_RAX_34;
            }
            (suffix->Sub).array = pprVar6;
            prVar8 = prStack0000000000000008;
            prVar14 = local_68;
          }
        }
        if (local_50 == (undefined *)0x0) {
          return;
        }
        pvVar15 = (void *)(*(int *)(local_50 + 0x10) + 1);
        pvVar7 = *(void **)(local_50 + 8);
        puVar4 = local_50;
        if (*(void **)(local_50 + 0x18) < pvVar15) {
          runtime_growslice(pvVar7,(int)pvVar15,(int)*(void **)(local_50 + 0x18),1,
                            (internal_abi_Type *)&DAT_00865800,in_stack_ffffffffffffff00);
          *(undefined8 *)(local_50 + 0x18) = extraout_RCX_10;
          pvVar7 = extraout_RAX_35;
          puVar4 = local_50;
          pvVar15 = extraout_RBX_13;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_19 = extraout_RAX_36;
            extraout_R11_19[1] = *(void **)(puVar4 + 8);
            pvVar7 = extraout_RAX_36;
            pvVar15 = extraout_RBX_14;
          }
          *(void **)(puVar4 + 8) = pvVar7;
        }
        *(void **)(puVar4 + 0x10) = pvVar15;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11_20 = extraout_RAX_37;
          extraout_R11_20[1] =
               *(regexp_syntax_Regexp **)((int)extraout_R8_04 + (int)extraout_RBX_15 * 8 + -8);
          local_70 = extraout_RAX_37;
          pvVar15 = extraout_RBX_15;
          pvVar7 = extraout_R8_04;
        }
        *(regexp_syntax_Regexp **)((int)pvVar7 + (int)pvVar15 * 8 + -8) = local_70;
      }
      if (puVar4 != (undefined *)0x0) {
        return;
      }
      runtime_newobject((internal_abi_Type *)&DAT_00893c00,pvVar15);
      *extraout_RAX_27 = 1;
      return;
    }
    if (0x13 < bVar1) {
      return;
    }
  }
