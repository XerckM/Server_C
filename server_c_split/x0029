      } while (iVar3 != 0x40);
      in_RDX[1] = (sigset_t *)(int)local_50;
      goto LAB_00401952;
    }
  }
  piVar2 = __errno_location();
  uVar6 = (uint)*(dword *)piVar2;
LAB_00401952:
  auVar7._8_8_ = psStack_30;
  auVar7._0_8_ = uVar6;
  return auVar7;
}



void x_cgo_getstackbound(void)

{
  pthread_t __th;
  pthread_attr_t *ppVar1;
  size_t *__stacksize;
  pthread_attr_t *__attr;
  void **__stackaddr;
  int *extraout_RBX;
  int local_68;
  int local_60;
  
  __th = pthread_self();
  ppVar1 = (pthread_attr_t *)pthread_getattr_np(__th,__attr);
  ppVar1 = (pthread_attr_t *)pthread_attr_getstack(ppVar1,__stackaddr,__stacksize);
  pthread_attr_destroy(ppVar1);
  *extraout_RBX = local_68;
  extraout_RBX[1] = local_68 + local_60;
  return;
}



void x_cgo_callers(undefined8 param_1,undefined8 param_2,undefined *param_3,undefined8 param_4,
                  undefined8 param_5,undefined8 param_6,undefined8 param_7)

{
  code *extraout_RBX;
  undefined8 local_48 [2];
  undefined8 local_38;
  undefined8 local_30;
  undefined8 uStack_20;
  
  local_48[0] = 0;
  local_30 = 0x20;
  local_38 = param_6;
  uStack_20 = param_2;
  (*(code *)param_3)(param_1,param_7,param_3,local_48);
  (*extraout_RBX)();
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void x_cgo_thread_start(undefined8 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,
                       undefined4 param_5,undefined4 param_6,undefined4 param_7,undefined4 param_8,
                       size_t param_9,undefined8 param_10)

{
  sigset_t *psVar1;
  undefined4 uVar2;
  undefined4 uVar3;
  undefined4 uVar4;
  undefined4 uVar5;
  int *piVar6;
  undefined8 extraout_RCX;
  undefined4 *__size;
  code *extraout_RBX;
  code *extraout_RSI;
  
  piVar6 = (int *)malloc(param_9);
  if (piVar6 != (int *)0x0) {
    uVar2 = *__size;
    uVar3 = __size[1];
    uVar4 = __size[2];
    uVar5 = __size[3];
    *(undefined4 *)piVar6 = uVar2;
    *(undefined4 *)((int)piVar6 + 4) = uVar3;
    *(undefined4 *)(piVar6 + 1) = uVar4;
    *(undefined4 *)((int)piVar6 + 0xc) = uVar5;
    psVar1 = *(sigset_t **)(__size + 4);
    piVar6[2] = (int)psVar1;
    _cgo_sys_thread_start
              (uVar2,param_2,param_3,param_4,param_5,param_6,param_7,param_8,psVar1,param_10,
               extraout_RCX,piVar6);
    return;
  }
  fwrite(&stderr,(size_t)__size,_stderr,(FILE *)"runtime/cgo: out of memory in thread_start\n");
  abort();
  (*extraout_RSI)();
  (*extraout_RBX)();
  return;
}



void crosscall_amd64(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,
                    undefined *param_5)

{
  code *extraout_RBX;
  
  (*(code *)param_5)(param_1,param_4);
  (*extraout_RBX)();
  return;
}



// WARNING: Unknown calling convention

void internal_abi___RegArgs__Dump(internal_abi_RegArgs *r)

{
  uint64 uVar1;
  uintptr x;
  int iVar2;
  uint64 x_1;
  void *x_2;
  int unaff_R14;
  internal_abi_RegArgs *piStack0000000000000008;
  string in_stack_fffffffffffffec0;
  uintptr local_118;
  undefined4 local_110;
  undefined4 uStack_10c;
  undefined4 uStack_108;
  undefined4 uStack_104;
  undefined4 local_100;
  undefined4 uStack_fc;
  undefined4 uStack_f8;
  undefined4 uStack_f4;
  undefined4 local_f0;
  undefined4 uStack_ec;
  undefined4 uStack_e8;
  undefined4 uStack_e4;
  undefined4 local_e0;
  undefined4 uStack_dc;
  undefined4 uStack_d8;
  undefined4 uStack_d4;
  uint64 local_d0 [2];
  undefined local_c0 [104];
  void *local_58;
  void *local_50;
  undefined4 local_48;
  undefined4 uStack_44;
  undefined4 uStack_40;
  undefined4 uStack_3c;
  undefined4 local_38;
  undefined4 uStack_34;
  undefined4 uStack_30;
  undefined4 uStack_2c;
  undefined4 local_28;
  undefined4 uStack_24;
  undefined4 uStack_20;
  undefined4 uStack_1c;
  undefined4 local_18;
  undefined4 uStack_14;
  undefined4 uStack_10;
  undefined4 uStack_c;
  
  piStack0000000000000008 = r;
  while (local_c0 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_printlock();
  runtime_printstring(in_stack_fffffffffffffec0);
  runtime_printunlock();
  local_118 = piStack0000000000000008->Ints[0];
  local_110 = *(undefined4 *)(piStack0000000000000008->Ints + 1);
  uStack_10c = *(undefined4 *)((int)piStack0000000000000008->Ints + 0xc);
  uStack_108 = *(undefined4 *)(piStack0000000000000008->Ints + 2);
  uStack_104 = *(undefined4 *)((int)piStack0000000000000008->Ints + 0x14);
  local_100 = *(undefined4 *)(piStack0000000000000008->Ints + 3);
  uStack_fc = *(undefined4 *)((int)piStack0000000000000008->Ints + 0x1c);
  uStack_f8 = *(undefined4 *)(piStack0000000000000008->Ints + 4);
  uStack_f4 = *(undefined4 *)((int)piStack0000000000000008->Ints + 0x24);
  local_f0 = *(undefined4 *)(piStack0000000000000008->Ints + 5);
  uStack_ec = *(undefined4 *)((int)piStack0000000000000008->Ints + 0x2c);
  uStack_e8 = *(undefined4 *)(piStack0000000000000008->Ints + 6);
  uStack_e4 = *(undefined4 *)((int)piStack0000000000000008->Ints + 0x34);
  local_e0 = *(undefined4 *)(piStack0000000000000008->Ints + 7);
  uStack_dc = *(undefined4 *)((int)piStack0000000000000008->Ints + 0x3c);
  uStack_d8 = *(undefined4 *)(piStack0000000000000008->Ints + 8);
  uStack_d4 = *(undefined4 *)((int)piStack0000000000000008->Ints + 0x44);
  for (iVar2 = 0; iVar2 < 9; iVar2 = iVar2 + 1) {
    uVar1 = (&local_118)[iVar2];
    runtime_printlock();
    runtime_printsp();
    runtime_printuint(uVar1);
    runtime_printunlock();
  }
  runtime_printlock();
  runtime_printnl();
  runtime_printunlock();
  runtime_printlock();
  runtime_printstring(in_stack_fffffffffffffec0);
  runtime_printunlock();
  local_d0[0] = piStack0000000000000008->Floats[0];
  FUN_0046d0fe();
  for (iVar2 = 0; iVar2 < 0xf; iVar2 = iVar2 + 1) {
    uVar1 = local_d0[iVar2];
    runtime_printlock();
    runtime_printsp();
    runtime_printuint(uVar1);
    runtime_printunlock();
  }
  runtime_printlock();
  runtime_printnl();
  runtime_printunlock();
  runtime_printlock();
  runtime_printstring(in_stack_fffffffffffffec0);
  runtime_printunlock();
  local_50 = piStack0000000000000008->Ptrs[0];
  local_48 = *(undefined4 *)(piStack0000000000000008->Ptrs + 1);
  uStack_44 = *(undefined4 *)((int)piStack0000000000000008->Ptrs + 0xc);
  uStack_40 = *(undefined4 *)(piStack0000000000000008->Ptrs + 2);
  uStack_3c = *(undefined4 *)((int)piStack0000000000000008->Ptrs + 0x14);
  local_38 = *(undefined4 *)(piStack0000000000000008->Ptrs + 3);
  uStack_34 = *(undefined4 *)((int)piStack0000000000000008->Ptrs + 0x1c);
  uStack_30 = *(undefined4 *)(piStack0000000000000008->Ptrs + 4);
  uStack_2c = *(undefined4 *)((int)piStack0000000000000008->Ptrs + 0x24);
  local_28 = *(undefined4 *)(piStack0000000000000008->Ptrs + 5);
  uStack_24 = *(undefined4 *)((int)piStack0000000000000008->Ptrs + 0x2c);
  uStack_20 = *(undefined4 *)(piStack0000000000000008->Ptrs + 6);
  uStack_1c = *(undefined4 *)((int)piStack0000000000000008->Ptrs + 0x34);
  local_18 = *(undefined4 *)(piStack0000000000000008->Ptrs + 7);
  uStack_14 = *(undefined4 *)((int)piStack0000000000000008->Ptrs + 0x3c);
  uStack_10 = *(undefined4 *)(piStack0000000000000008->Ptrs + 8);
  uStack_c = *(undefined4 *)((int)piStack0000000000000008->Ptrs + 0x44);
  for (iVar2 = 0; iVar2 < 9; iVar2 = iVar2 + 1) {
    local_58 = (&local_50)[iVar2];
    runtime_printlock();
    runtime_printsp();
    runtime_printpointer(local_58);
    runtime_printunlock();
  }
  runtime_printlock();
  runtime_printnl();
  runtime_printunlock();
  return;
}



void internal_abi___RegArgs__IntRegArgAddr
               (internal_abi_RegArgs *r,int reg,uintptr argSize,void *~r0)

{
  int unaff_R14;
  interface___ in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (((argSize < 9) && (argSize != 0)) && ((argSize & argSize - 1) == 0)) {
    if ((uint)reg < 9) {
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffe8);
}



// WARNING: Unknown calling convention

void internal_abi___IntArgRegBitmap__Set(internal_abi_IntArgRegBitmap *b,int i)

{
  uint uVar1;
  uint uVar2;
  
  uVar2 = (int)(i + ((uint)(i >> 0x3f) >> 0x3d)) >> 3;
  if (1 < uVar2) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  uVar1 = i % 8;
  if (-1 < (int)uVar1) {
    (*b)[uVar2] = (*b)[uVar2] | (byte)(1 << ((byte)uVar1 & 0x1f)) & -(uVar1 < 0x20);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicshift();
}



void internal_abi___IntArgRegBitmap__Get(internal_abi_IntArgRegBitmap *b,int i,bool ~r0)

{
  if (1 < (uint)((int)(i + ((uint)(i >> 0x3f) >> 0x3d)) >> 3)) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if (-1 < i % 8) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicshift();
}



void internal_abi_Kind_String(internal_abi_Kind k,string ~r0)

{
  if (internal_abi_kindNames.len <= (int)k) {
    if (internal_abi_kindNames.len != 0) {
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if (k < (uint)internal_abi_kindNames.len) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndexU();
}



void internal_abi___Type__Kind(internal_abi_Type *t,internal_abi_Kind ~r0)

{
  return;
}



void internal_abi___Type__HasName(internal_abi_Type *t,bool ~r0)

{
  return;
}



void internal_abi___Type__Pointers(internal_abi_Type *t,bool ~r0)

{
  return;
}



void internal_abi___Type__IfaceIndir(internal_abi_Type *t,bool ~r0)

{
  return;
}



void internal_abi___Type__IsDirectIface(internal_abi_Type *t,bool ~r0)

{
  return;
}



void internal_abi___Type__GcSlice(internal_abi_Type *t,uintptr begin,uintptr end,__uint8 ~r0)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((int)end < 0) {
                    // WARNING: Subroutine does not return
    runtime_panicunsafeslicelen();
  }
  if ((uint)-(int)t->GCData < end) {
    if (t->GCData != (uint8 *)0x0) {
                    // WARNING: Subroutine does not return
      runtime_panicunsafeslicelen();
    }
                    // WARNING: Subroutine does not return
    runtime_panicunsafeslicenilptr();
  }
  if (begin <= end) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceBU();
}



void internal_abi___UncommonType__Methods(internal_abi_UncommonType *t,__internal_abi_Method ~r0)

{
  if (t->Mcount == 0) {
    return;
  }
  if (t->Mcount < 0x10001) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSlice3Alen();
}



void internal_abi___UncommonType__ExportedMethods
               (internal_abi_UncommonType *t,__internal_abi_Method ~r0)

{
  if (t->Xcount == 0) {
    return;
  }
  if (t->Xcount < 0x10001) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSlice3Alen();
}



void internal_abi___Type__Len(internal_abi_Type *t,int ~r0)

{
  if ((t->Kind_ & 0x1f) == 0x11) {
    return;
  }
  return;
}



void internal_abi___Type__Common(internal_abi_Type *t,internal_abi_Type *~r0)

{
  return;
}



// Local variable ch:internal/abi.ChanType *[RAX:8] conflicts with parameter, skipped.

void internal_abi___Type__ChanDir(internal_abi_Type *t,internal_abi_ChanDir ~r0)

{
  if ((t->Kind_ & 0x1f) == 0x12) {
    return;
  }
  return;
}



void internal_abi___Type__Uncommon(internal_abi_Type *t,internal_abi_UncommonType *~r0)

{
  if ((t->TFlag & 1) != 0) {
    switch(t->Kind_ & 0x1f) {
    case 0x11:
      return;
    case 0x12:
      return;
    case 0x13:
      return;
    case 0x14:
      return;
    case 0x15:
      return;
    case 0x16:
      return;
    case 0x17:
      return;
    default:
      return;
    case 0x19:
      return;
    }
  }
  return;
}



// Local variable tt:internal/abi.ArrayType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_1:internal/abi.ChanType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_2:internal/abi.MapType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_3:internal/abi.PtrType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_4:internal/abi.SliceType *[RAX:8] conflicts with parameter, skipped.

void internal_abi___Type__Elem(internal_abi_Type *t,internal_abi_Type *~r0)

{
  byte bVar1;
  
  bVar1 = t->Kind_ & 0x1f;
  if (bVar1 < 0x13) {
    if (bVar1 == 0x11) {
      return;
    }
    if (bVar1 == 0x12) {
      return;
    }
  }
  else {
    if (bVar1 == 0x15) {
      return;
    }
    if (bVar1 == 0x16) {
      return;
    }
    if (bVar1 == 0x17) {
      return;
    }
  }
  return;
}



void internal_abi___Type__StructType(internal_abi_Type *t,internal_abi_StructType *~r0)

{
  if ((t->Kind_ & 0x1f) != 0x19) {
    return;
  }
  return;
}



void internal_abi___Type__MapType(internal_abi_Type *t,internal_abi_MapType *~r0)

{
  if ((t->Kind_ & 0x1f) != 0x15) {
    return;
  }
  return;
}



void internal_abi___Type__ArrayType(internal_abi_Type *t,internal_abi_ArrayType *~r0)

{
  if ((t->Kind_ & 0x1f) != 0x11) {
    return;
  }
  return;
}



void internal_abi___Type__FuncType(internal_abi_Type *t,internal_abi_FuncType *~r0)

{
  if ((t->Kind_ & 0x1f) != 0x13) {
    return;
  }
  return;
}



void internal_abi___Type__InterfaceType(internal_abi_Type *t,internal_abi_InterfaceType *~r0)

{
  if ((t->Kind_ & 0x1f) != 0x14) {
    return;
  }
  return;
}



void internal_abi___Type__Size(internal_abi_Type *t,uintptr ~r0)

{
  return;
}



void internal_abi___Type__Align(internal_abi_Type *t,int ~r0)

{
  return;
}



void internal_abi___Type__FieldAlign(internal_abi_Type *t,int ~r0)

{
  return;
}



void internal_abi___Type__ExportedMethods(internal_abi_Type *t,__internal_abi_Method ~r0)

{
  internal_abi_UncommonType *ut;
  
  if ((t->TFlag & 1) == 0) {
    ut = (internal_abi_UncommonType *)0x0;
  }
  else {
    switch(t->Kind_ & 0x1f) {
    case 0x11:
      ut = (internal_abi_UncommonType *)&t[1].Equal;
      break;
    case 0x12:
      ut = (internal_abi_UncommonType *)&t[1].Hash;
      break;
    case 0x13:
      ut = (internal_abi_UncommonType *)&t[1].PtrBytes;
      break;
    case 0x14:
      ut = (internal_abi_UncommonType *)&t[1].GCData;
      break;
    case 0x15:
      ut = (internal_abi_UncommonType *)&t[1].Str;
      break;
    case 0x16:
      ut = (internal_abi_UncommonType *)&t[1].PtrBytes;
      break;
    case 0x17:
      ut = (internal_abi_UncommonType *)&t[1].PtrBytes;
      break;
    default:
      ut = (internal_abi_UncommonType *)(t + 1);
      break;
    case 0x19:
      ut = (internal_abi_UncommonType *)&t[1].GCData;
    }
  }
  if (ut != (internal_abi_UncommonType *)0x0) {
    if ((ut->Xcount != 0) && (0x10000 < ut->Xcount)) {
                    // WARNING: Subroutine does not return
      runtime_panicSlice3Alen();
    }
    return;
  }
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack
// Local variable tt:internal/abi.InterfaceType *[RAX:8] conflicts with parameter, skipped.

void internal_abi___Type__NumMethod(internal_abi_Type *t,int ~r0)

{
  __internal_abi_Method ~r0_00;
  undefined8 unaff_RBP;
  int unaff_R14;
  int unaff_retaddr;
  undefined8 in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((t->Kind_ & 0x1f) == 0x14) {
    return;
  }
  ~r0_00.len = unaff_RBP;
  ~r0_00.array = (internal_abi_Method *)in_stack_fffffffffffffff0;
  ~r0_00.cap = unaff_retaddr;
  internal_abi___Type__ExportedMethods(t,~r0_00);
  return;
}



void internal_abi___InterfaceType__NumMethod(internal_abi_InterfaceType *t,int ~r0)

{
  return;
}



void internal_abi___MapType__IndirectKey(internal_abi_MapType *mt,bool ~r0)

{
  return;
}



void internal_abi___MapType__IndirectElem(internal_abi_MapType *mt,bool ~r0)

{
  return;
}



void internal_abi___MapType__ReflexiveKey(internal_abi_MapType *mt,bool ~r0)

{
  return;
}



void internal_abi___MapType__NeedKeyUpdate(internal_abi_MapType *mt,bool ~r0)

{
  return;
}



void internal_abi___MapType__HashMightPanic(internal_abi_MapType *mt,bool ~r0)

{
  return;
}



void internal_abi___Type__Key(internal_abi_Type *t,internal_abi_Type *~r0)

{
  if ((t->Kind_ & 0x1f) == 0x15) {
    return;
  }
  return;
}



void internal_abi___FuncType__In(internal_abi_FuncType *t,int i,internal_abi_Type *~r0)

{
  uintptr uadd;
  uint uVar1;
  
  uVar1 = (uint)t->InCount;
  if (t->InCount == 0) {
    uVar1 = 0;
  }
  else if (0x10000 < uVar1) {
                    // WARNING: Subroutine does not return
    runtime_panicSlice3Alen();
  }
  if ((uint)i < uVar1) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void internal_abi___FuncType__NumIn(internal_abi_FuncType *t,int ~r0)

{
  return;
}



void internal_abi___FuncType__NumOut(internal_abi_FuncType *t,int ~r0)

{
  return;
}



void internal_abi___FuncType__Out(internal_abi_FuncType *t,int i,internal_abi_Type *~r0)

{
  ushort uVar1;
  uintptr uadd;
  uint uVar2;
  ushort uVar3;
  
  uVar3 = t->OutCount & 0x7fff;
  if (uVar3 == 0) {
    uVar2 = 0;
  }
  else {
    uVar1 = t->InCount;
    uVar2 = (uint)(ushort)(uVar3 + uVar1);
    if (uVar2 < uVar1) {
                    // WARNING: Subroutine does not return
      runtime_panicSlice3C();
    }
    uVar2 = uVar2 - uVar1;
  }
  if ((uint)i < uVar2) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void internal_abi___FuncType__InSlice(internal_abi_FuncType *t,___internal_abi_Type ~r0)

{
  uintptr uadd;
  
  if (t->InCount == 0) {
    return;
  }
  if (t->InCount < 0x10001) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSlice3Alen();
}



void internal_abi___FuncType__OutSlice(internal_abi_FuncType *t,___internal_abi_Type ~r0)

{
  ushort uVar1;
  uintptr uadd;
  
  uVar1 = t->OutCount & 0x7fff;
  if (uVar1 == 0) {
    return;
  }
  if (t->InCount <= (ushort)(uVar1 + t->InCount)) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSlice3C();
}



void internal_abi___FuncType__IsVariadic(internal_abi_FuncType *t,bool ~r0)

{
  return;
}



void internal_abi___StructField__Embedded(internal_abi_StructField *f,bool ~r0)

{
  return;
}



void internal_abi_Name_DataChecked(internal_abi_Name n,int off,string whySafe,uint8 *~r0)

{
  return;
}



void internal_abi_Name_Data(internal_abi_Name n,int off,uint8 *~r0)

{
  return;
}



void internal_abi_Name_IsExported(internal_abi_Name n,bool ~r0)

{
  return;
}



void internal_abi_Name_HasTag(internal_abi_Name n,bool ~r0)

{
  return;
}



void internal_abi_Name_IsEmbedded(internal_abi_Name n,bool ~r0)

{
  return;
}



void internal_abi_Name_ReadVarint(internal_abi_Name n,int off,int ~r0,int ~r1)

{
  int i;
  int v;
  uint8 x;
  
  i = 0;
  while( true ) {
    if (i * 7 < 0) {
                    // WARNING: Subroutine does not return
      runtime_panicshift();
    }
    if ((n.Bytes[off + i] & 0x80) == 0) break;
    i = i + 1;
  }
  return;
}



void internal_abi_Name_IsBlank(internal_abi_Name n,bool ~r0)

{
  int iVar1;
  int i;
  int v;
  int l;
  uint8 x;
  
  if (n.Bytes == (uint8 *)0x0) {
    return;
  }
  iVar1 = 0;
  while( true ) {
    if (iVar1 * 7 < 0) {
                    // WARNING: Subroutine does not return
      runtime_panicshift();
    }
    if ((n.Bytes[iVar1 + 1] & 0x80) == 0) break;
    iVar1 = iVar1 + 1;
  }
  return;
}



void internal_abi_Name_Name(internal_abi_Name n,string ~r0)

{
  uint uVar1;
  int iVar2;
  int i;
  int v;
  int l;
  uint8 x;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (n.Bytes == (uint8 *)0x0) {
    return;
  }
  iVar2 = 0;
  v = 0;
  while( true ) {
    uVar1 = iVar2 * 7;
    if ((int)uVar1 < 0) {
                    // WARNING: Subroutine does not return
      runtime_panicshift();
    }
    v = v + ((uint)(n.Bytes[iVar2 + 1] & 0x7f) << ((byte)uVar1 & 0x3f) & -(uint)(uVar1 < 0x40));
    if ((n.Bytes[iVar2 + 1] & 0x80) == 0) break;
    iVar2 = iVar2 + 1;
  }
  if (-1 < v) {
    if ((uint)v <= (uint)-(int)(n.Bytes + iVar2 + 2)) {
      return;
    }
    if (n.Bytes + iVar2 + 2 != (uint8 *)0x0) {
                    // WARNING: Subroutine does not return
      runtime_panicunsafestringlen();
    }
                    // WARNING: Subroutine does not return
    runtime_panicunsafestringnilptr();
  }
                    // WARNING: Subroutine does not return
  runtime_panicunsafestringlen();
}



