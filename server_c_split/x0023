    uintptr PC;
    struct log/slog.Attr front[5];
    int nFront;
    struct []log/slog.Attr back;
};

typedef struct struct_{_runtime.lock_runtime.mutex;_runtime.newm_runtime.muintptr;_runtime.waiting_bool;_runtime.wake_runtime.note;_runtime.haveTemplateThread_uint32_} struct_{_runtime.lock_runtime.mutex;_runtime.newm_runtime.muintptr;_runtime.waiting_bool;_runtime.wake_runtime.note;_runtime.haveTemplateThread_uint32_}, *Pstruct_{_runtime.lock_runtime.mutex;_runtime.newm_runtime.muintptr;_runtime.waiting_bool;_runtime.wake_runtime.note;_runtime.haveTemplateThread_uint32_};

struct struct_{_runtime.lock_runtime.mutex;_runtime.newm_runtime.muintptr;_runtime.waiting_bool;_runtime.wake_runtime.note;_runtime.haveTemplateThread_uint32_} { // Original name: struct { runtime.lock runtime.mutex; runtime.newm runtime.muintptr; runtime.waiting bool; runtime.wake runtime.note; runtime.haveTemplateThread uint32 }
    struct runtime.mutex lock;
    runtime.muintptr newm;
    bool waiting;
    struct runtime.note wake;
    uint32 haveTemplateThread;
};

typedef struct net.canceledError net.canceledError, *Pnet.canceledError;

struct net.canceledError {
};

typedef struct runtime.iface encoding.TextMarshaler;

typedef struct crypto/dsa.PublicKey crypto/dsa.PublicKey, *Pcrypto/dsa.PublicKey;

typedef struct crypto/dsa.Parameters crypto/dsa.Parameters, *Pcrypto/dsa.Parameters;

struct crypto/dsa.Parameters {
    struct math/big.Int *P;
    struct math/big.Int *Q;
    struct math/big.Int *G;
};

struct crypto/dsa.PublicKey {
    struct crypto/dsa.Parameters Parameters;
    struct math/big.Int *Y;
};

typedef struct runtime.iface interface_{_EnforceUTF8()_bool_};

typedef struct otp/seedgen.UnimplementedSeedGenerationServiceServer otp/seedgen.UnimplementedSeedGenerationServiceServer, *Potp/seedgen.UnimplementedSeedGenerationServiceServer;

struct otp/seedgen.UnimplementedSeedGenerationServiceServer {
};

typedef struct noalg.map.iter[string][]string noalg.map.iter[string][]string, *Pnoalg.map.iter[string][]string;

struct noalg.map.iter[string][]string {
    struct string *key;
    struct []string *elem;
    void *t;
    struct noalg.map.hdr[string][]string *h;
    struct noalg.map.bucket[string][]string *buckets;
    struct noalg.map.bucket[string][]string *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/encoding/protojson.encoder;_X1_*error_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/encoding/protojson.encoder;_X1_*error_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/encoding/protojson.encoder;_X1_*error_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/encoding/protojson.encoder;_X1_*error_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/encoding/protojson.encoder; X1 *error }
    uintptr F;
    struct google.golang.org/protobuf/encoding/protojson.encoder X0;
    error *X1;
};

typedef struct crypto/elliptic.nistCurve[go.shape.*uint8] crypto/elliptic.nistCurve[go.shape.*uint8], *Pcrypto/elliptic.nistCurve[go.shape.*uint8];

struct crypto/elliptic.nistCurve[go.shape.*uint8] {
    void (**newPoint)(go.shape.*uint8 *);
    struct crypto/elliptic.CurveParams *params;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_uintptr;_X2_uintptr_} noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_uintptr;_X2_uintptr_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_uintptr;_X2_uintptr_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_uintptr;_X2_uintptr_} { // Original name: noalg.struct { F uintptr; X0 *runtime.g; X1 uintptr; X2 uintptr }
    uintptr F;
    struct runtime.g *X0;
    uintptr X1;
    uintptr X2;
};

typedef struct net.UnknownNetworkError net.UnknownNetworkError, *Pnet.UnknownNetworkError;

struct net.UnknownNetworkError {
    uint8 *str;
    int len;
};

typedef struct encoding/json.arrayEncoder encoding/json.arrayEncoder, *Pencoding/json.arrayEncoder;

struct encoding/json.arrayEncoder {
    void (**elemEnc)(struct encoding/json.encodeState *, struct reflect.Value, struct encoding/json.encOpts);
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.traceInfo;_X1_*google.golang.org/grpc.serverStream;_X2_*error;_X3_[]google.golang.org/grpc/stats.Handler;_X4_*google.golang.org/grpc/stats.Begin;_X5_context.Context;_X6_*google.golang.org/grpc.Server_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.traceInfo;_X1_*google.golang.org/grpc.serverStream;_X2_*error;_X3_[]google.golang.org/grpc/stats.Handler;_X4_*google.golang.org/grpc/stats.Begin;_X5_context.Context;_X6_*google.golang.org/grpc.Server_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.traceInfo;_X1_*google.golang.org/grpc.serverStream;_X2_*error;_X3_[]google.golang.org/grpc/stats.Handler;_X4_*google.golang.org/grpc/stats.Begin;_X5_context.Context;_X6_*google.golang.org/grpc.Server_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.traceInfo;_X1_*google.golang.org/grpc.serverStream;_X2_*error;_X3_[]google.golang.org/grpc/stats.Handler;_X4_*google.golang.org/grpc/stats.Begin;_X5_context.Context;_X6_*google.golang.org/grpc.Server_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc.traceInfo; X1 *google.golang.org/grpc.serverStream; X2 *error; X3 []google.golang.org/grpc/stats.Handler; X4 *google.golang.org/grpc/stats.Begin; X5 context.Context; X6 *google.golang.org/grpc.Server }
    uintptr F;
    struct google.golang.org/grpc.traceInfo *X0;
    struct google.golang.org/grpc.serverStream *X1;
    error *X2;
    struct []google.golang.org/grpc/stats.Handler X3;
    struct google.golang.org/grpc/stats.Begin *X4;
    context.Context X5;
    struct google.golang.org/grpc.Server *X6;
};

typedef struct context.valueCtx context.valueCtx, *Pcontext.valueCtx;

struct context.valueCtx {
    context.Context Context;
    interface_{} key;
    interface_{} val;
};

typedef struct hash<internal/intern.key,uintptr> *map[internal/intern.key]uintptr;

typedef struct noalg.struct_{_F_uintptr;_X0_*[]func();_X1_*google.golang.org/grpc/internal/transport.http2Server;_X2_*[]golang.org/x/net/http2.Setting_} noalg.struct_{_F_uintptr;_X0_*[]func();_X1_*google.golang.org/grpc/internal/transport.http2Server;_X2_*[]golang.org/x/net/http2.Setting_}, *Pnoalg.struct_{_F_uintptr;_X0_*[]func();_X1_*google.golang.org/grpc/internal/transport.http2Server;_X2_*[]golang.org/x/net/http2.Setting_};

struct noalg.struct_{_F_uintptr;_X0_*[]func();_X1_*google.golang.org/grpc/internal/transport.http2Server;_X2_*[]golang.org/x/net/http2.Setting_} { // Original name: noalg.struct { F uintptr; X0 *[]func(); X1 *google.golang.org/grpc/internal/transport.http2Server; X2 *[]golang.org/x/net/http2.Setting }
    uintptr F;
    struct []func() *X0;
    struct google.golang.org/grpc/internal/transport.http2Server *X1;
    struct []golang.org/x/net/http2.Setting *X2;
};

typedef uint8 net._Ctype_void[0];

typedef struct crypto/ecdsa.nistCurve[*crypto/internal/nistec.P256Point] crypto/ecdsa.nistCurve[*crypto/internal/nistec.P256Point], *Pcrypto/ecdsa.nistCurve[*crypto/internal/nistec.P256Point];

struct crypto/ecdsa.nistCurve[*crypto/internal/nistec.P256Point] {
    void (**newPoint)(struct crypto/internal/nistec.P256Point **);
    crypto/elliptic.Curve curve;
    struct crypto/internal/bigmod.Modulus *N;
    struct []uint8 nMinus2;
};

typedef struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_ServerHeader google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_ServerHeader, *Pgoogle.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_ServerHeader;

struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_ServerHeader {
    struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.ServerHeader *ServerHeader;
};

typedef struct time.dataIO time.dataIO, *Ptime.dataIO;

struct time.dataIO {
    struct []uint8 p;
    bool error;
};

typedef struct hash<internal/intern.key,*internal/intern.Value> *map[internal/intern.key]*internal/intern.Value;

typedef struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_Message google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_Message, *Pgoogle.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_Message;

typedef struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.Message google.golang.org/grpc/binarylog/grpc_binarylog_v1.Message, *Pgoogle.golang.org/grpc/binarylog/grpc_binarylog_v1.Message;

struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.GrpcLogEntry_Message {
    struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.Message *Message;
};

struct google.golang.org/grpc/binarylog/grpc_binarylog_v1.Message {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    uint32 Length;
    struct []uint8 Data;
};

typedef struct google.golang.org/grpc.StaticMethodCallOption google.golang.org/grpc.StaticMethodCallOption, *Pgoogle.golang.org/grpc.StaticMethodCallOption;

struct google.golang.org/grpc.StaticMethodCallOption {
    struct google.golang.org/grpc.EmptyCallOption EmptyCallOption;
};

typedef struct runtime.iface internal/reflectlite.Type;

typedef struct runtime.iface google.golang.org/protobuf/internal/impl.messageV1;

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.Converter;_X1_google.golang.org/protobuf/internal/impl.offset;_X2_reflect.StructField_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.Converter;_X1_google.golang.org/protobuf/internal/impl.offset;_X2_reflect.StructField_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.Converter;_X1_google.golang.org/protobuf/internal/impl.offset;_X2_reflect.StructField_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.Converter;_X1_google.golang.org/protobuf/internal/impl.offset;_X2_reflect.StructField_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/internal/impl.Converter; X1 google.golang.org/protobuf/internal/impl.offset; X2 reflect.StructField }
    uintptr F;
    google.golang.org/protobuf/internal/impl.Converter X0;
    google.golang.org/protobuf/internal/impl.offset X1;
    struct reflect.StructField X2;
};

typedef struct reflect.structTypeUncommon reflect.structTypeUncommon, *Preflect.structTypeUncommon;

typedef struct internal/abi.UncommonType internal/abi.UncommonType, *Pinternal/abi.UncommonType;

struct internal/abi.UncommonType {
    internal/abi.NameOff PkgPath;
    uint16 Mcount;
    uint16 Xcount;
    uint32 Moff;
    uint32 _;
};

struct reflect.structTypeUncommon {
    struct reflect.structType structType;
    struct internal/abi.UncommonType u;
};

typedef struct google.golang.org/grpc/balancer.ClientConnState google.golang.org/grpc/balancer.ClientConnState, *Pgoogle.golang.org/grpc/balancer.ClientConnState;

struct google.golang.org/grpc/balancer.ClientConnState {
    struct google.golang.org/grpc/resolver.State ResolverState;
    google.golang.org/grpc/serviceconfig.LoadBalancingConfig BalancerConfig;
};

typedef struct noalg.map.iter[string]*golang.org/x/net/trace.eventFamily noalg.map.iter[string]*golang.org/x/net/trace.eventFamily, *Pnoalg.map.iter[string]*golang.org/x/net/trace.eventFamily;

struct noalg.map.iter[string]*golang.org/x/net/trace.eventFamily {
    struct string *key;
    struct golang.org/x/net/trace.eventFamily **elem;
    void *t;
    struct noalg.map.hdr[string]*golang.org/x/net/trace.eventFamily *h;
    struct noalg.map.bucket[string]*golang.org/x/net/trace.eventFamily *buckets;
    struct noalg.map.bucket[string]*golang.org/x/net/trace.eventFamily *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct crypto/elliptic.nistCurve[*crypto/internal/nistec.P224Point] crypto/elliptic.nistCurve[*crypto/internal/nistec.P224Point], *Pcrypto/elliptic.nistCurve[*crypto/internal/nistec.P224Point];

struct crypto/elliptic.nistCurve[*crypto/internal/nistec.P224Point] {
    void (**newPoint)(struct crypto/internal/nistec.P224Point **);
    struct crypto/elliptic.CurveParams *params;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*net.file_} noalg.struct_{_F_uintptr;_X0_*net.file_}, *Pnoalg.struct_{_F_uintptr;_X0_*net.file_};

struct noalg.struct_{_F_uintptr;_X0_*net.file_} { // Original name: noalg.struct { F uintptr; X0 *net.file }
    uintptr F;
    struct net.file *X0;
};

typedef struct regexp/syntax.Error regexp/syntax.Error, *Pregexp/syntax.Error;

struct regexp/syntax.Error {
    struct regexp/syntax.ErrorCode Code;
    struct string Expr;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*text/template.Template;_X1_html/template.context_} noalg.struct_{_F_uintptr;_X0_*text/template.Template;_X1_html/template.context_}, *Pnoalg.struct_{_F_uintptr;_X0_*text/template.Template;_X1_html/template.context_};

struct noalg.struct_{_F_uintptr;_X0_*text/template.Template;_X1_html/template.context_} { // Original name: noalg.struct { F uintptr; X0 *text/template.Template; X1 html/template.context }
    uintptr F;
    struct text/template.Template *X0;
    struct html/template.context X1;
};

typedef struct reflect.mapType reflect.mapType, *Preflect.mapType;

struct reflect.mapType {
    struct internal/abi.MapType MapType;
};

typedef struct []runtime.stackObjectRecord []runtime.stackObjectRecord, *P[]runtime.stackObjectRecord;

struct []runtime.stackObjectRecord {
    struct runtime.stackObjectRecord *array;
    int len;
    int cap;
};

typedef struct hchan<interface_{}> *<-chan_interface_{};

typedef struct os.rawConn os.rawConn, *Pos.rawConn;

struct os.rawConn {
    struct os.File *file;
};

typedef struct noalg.map.iter[string]*golang.org/x/net/trace.traceSet noalg.map.iter[string]*golang.org/x/net/trace.traceSet, *Pnoalg.map.iter[string]*golang.org/x/net/trace.traceSet;

typedef struct noalg.map.hdr[string]*golang.org/x/net/trace.traceSet noalg.map.hdr[string]*golang.org/x/net/trace.traceSet, *Pnoalg.map.hdr[string]*golang.org/x/net/trace.traceSet;

struct noalg.map.hdr[string]*golang.org/x/net/trace.traceSet {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string]*golang.org/x/net/trace.traceSet *buckets;
    struct noalg.map.bucket[string]*golang.org/x/net/trace.traceSet *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.iter[string]*golang.org/x/net/trace.traceSet {
    struct string *key;
    struct golang.org/x/net/trace.traceSet **elem;
    void *t;
    struct noalg.map.hdr[string]*golang.org/x/net/trace.traceSet *h;
    struct noalg.map.bucket[string]*golang.org/x/net/trace.traceSet *buckets;
    struct noalg.map.bucket[string]*golang.org/x/net/trace.traceSet *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct google.golang.org/grpc/internal/binarylog.ServerTrailer google.golang.org/grpc/internal/binarylog.ServerTrailer, *Pgoogle.golang.org/grpc/internal/binarylog.ServerTrailer;

struct google.golang.org/grpc/internal/binarylog.ServerTrailer {
    bool OnClientSide;
    google.golang.org/grpc/metadata.MD Trailer;
    error Err;
    net.Addr PeerAddr;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*[]google.golang.org/protobuf/internal/order.mapEntry;_X1_*[]google.golang.org/protobuf/internal/order.mapEntry_} noalg.struct_{_F_uintptr;_X0_*[]google.golang.org/protobuf/internal/order.mapEntry;_X1_*[]google.golang.org/protobuf/internal/order.mapEntry_}, *Pnoalg.struct_{_F_uintptr;_X0_*[]google.golang.org/protobuf/internal/order.mapEntry;_X1_*[]google.golang.org/protobuf/internal/order.mapEntry_};

struct noalg.struct_{_F_uintptr;_X0_*[]google.golang.org/protobuf/internal/order.mapEntry;_X1_*[]google.golang.org/protobuf/internal/order.mapEntry_} { // Original name: noalg.struct { F uintptr; X0 *[]google.golang.org/protobuf/internal/order.mapEntry; X1 *[]google.golang.org/protobuf/internal/order.mapEntry }
    uintptr F;
    struct []google.golang.org/protobuf/internal/order.mapEntry *X0;
    struct []google.golang.org/protobuf/internal/order.mapEntry *X1;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*text/template/parse.Tree_} noalg.struct_{_F_uintptr;_X0_*text/template/parse.Tree_}, *Pnoalg.struct_{_F_uintptr;_X0_*text/template/parse.Tree_};

struct noalg.struct_{_F_uintptr;_X0_*text/template/parse.Tree_} { // Original name: noalg.struct { F uintptr; X0 *text/template/parse.Tree }
    uintptr F;
    struct text/template/parse.Tree *X0;
};

typedef struct hash<string,*unicode.RangeTable> *map[string]*unicode.RangeTable;

typedef struct internal/abi.ArrayType internal/abi.ArrayType, *Pinternal/abi.ArrayType;

struct internal/abi.ArrayType {
    struct internal/abi.Type Type;
    struct internal/abi.Type *Elem;
    struct internal/abi.Type *Slice;
    uintptr Len;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*text/template/parse.Tree;_X1_int_} noalg.struct_{_F_uintptr;_X0_*text/template/parse.Tree;_X1_int_}, *Pnoalg.struct_{_F_uintptr;_X0_*text/template/parse.Tree;_X1_int_};

struct noalg.struct_{_F_uintptr;_X0_*text/template/parse.Tree;_X1_int_} { // Original name: noalg.struct { F uintptr; X0 *text/template/parse.Tree; X1 int }
    uintptr F;
    struct text/template/parse.Tree *X0;
    int X1;
};

typedef struct syscall.Linger syscall.Linger, *Psyscall.Linger;

struct syscall.Linger {
    int32 Onoff;
    int32 Linger;
};

typedef struct crypto/x509.CertificateInvalidError crypto/x509.CertificateInvalidError, *Pcrypto/x509.CertificateInvalidError;

struct crypto/x509.CertificateInvalidError {
    struct crypto/x509.Certificate *Cert;
    crypto/x509.InvalidReason Reason;
    struct string Detail;
};

typedef struct google.golang.org/grpc/internal/transport.serverHandlerTransport google.golang.org/grpc/internal/transport.serverHandlerTransport, *Pgoogle.golang.org/grpc/internal/transport.serverHandlerTransport;

typedef struct runtime.iface net/http.ResponseWriter;

struct google.golang.org/grpc/internal/transport.serverHandlerTransport {
    net/http.ResponseWriter rw;
    struct net/http.Request *req;
    bool timeoutSet;
    time.Duration timeout;
    google.golang.org/grpc/metadata.MD headerMD;
    struct google.golang.org/grpc/peer.Peer peer;
    struct sync.Once closeOnce;
    chan_struct_{} closedCh;
    chan_func() writes;
    struct sync.Mutex writeStatusMu;
    struct string contentType;
    struct string contentSubtype;
    struct []google.golang.org/grpc/stats.Handler stats;
    struct google.golang.org/grpc/internal/grpclog.PrefixLogger *logger;
};

typedef struct hash<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.ExtensionType> *map[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType;

typedef struct noalg.map.iter[string]*golang.org/x/net/trace.family noalg.map.iter[string]*golang.org/x/net/trace.family, *Pnoalg.map.iter[string]*golang.org/x/net/trace.family;

struct noalg.map.iter[string]*golang.org/x/net/trace.family {
    struct string *key;
    struct golang.org/x/net/trace.family **elem;
    void *t;
    struct noalg.map.hdr[string]*golang.org/x/net/trace.family *h;
    struct noalg.map.bucket[string]*golang.org/x/net/trace.family *buckets;
    struct noalg.map.bucket[string]*golang.org/x/net/trace.family *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct flag.stringValue flag.stringValue, *Pflag.stringValue;

struct flag.stringValue {
    uint8 *str;
    int len;
};

typedef struct runtime.findfuncbucket runtime.findfuncbucket, *Pruntime.findfuncbucket;

struct runtime.findfuncbucket {
    uint32 idx;
    uint8 subbuckets[16];
};

typedef struct struct_{_runtime.lock_runtime.mutex;_runtime.free_runtime.mSpanList;_runtime.busy_runtime.mSpanList_} struct_{_runtime.lock_runtime.mutex;_runtime.free_runtime.mSpanList;_runtime.busy_runtime.mSpanList_}, *Pstruct_{_runtime.lock_runtime.mutex;_runtime.free_runtime.mSpanList;_runtime.busy_runtime.mSpanList_};

struct struct_{_runtime.lock_runtime.mutex;_runtime.free_runtime.mSpanList;_runtime.busy_runtime.mSpanList_} { // Original name: struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }
    struct runtime.mutex lock;
    struct runtime.mSpanList free;
    struct runtime.mSpanList busy;
};

typedef struct google.golang.org/grpc/internal/transport.registerStream google.golang.org/grpc/internal/transport.registerStream, *Pgoogle.golang.org/grpc/internal/transport.registerStream;

struct google.golang.org/grpc/internal/transport.registerStream {
    uint32 streamID;
    struct google.golang.org/grpc/internal/transport.writeQuota *wq;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.loopyWriter;_X1_*error_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.loopyWriter;_X1_*error_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.loopyWriter;_X1_*error_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.loopyWriter;_X1_*error_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc/internal/transport.loopyWriter; X1 *error }
    uintptr F;
    struct google.golang.org/grpc/internal/transport.loopyWriter *X0;
    error *X1;
};

typedef struct runtime.spanSetBlockAlloc runtime.spanSetBlockAlloc, *Pruntime.spanSetBlockAlloc;

struct runtime.spanSetBlockAlloc {
    runtime.lfstack stack;
};

typedef struct google.golang.org/grpc/stats.InHeader google.golang.org/grpc/stats.InHeader, *Pgoogle.golang.org/grpc/stats.InHeader;

struct google.golang.org/grpc/stats.InHeader {
    bool Client;
    int WireLength;
    struct string Compression;
    google.golang.org/grpc/metadata.MD Header;
    struct string FullMethod;
    net.Addr RemoteAddr;
    net.Addr LocalAddr;
};

typedef struct text/template/parse.endNode text/template/parse.endNode, *Ptext/template/parse.endNode;

struct text/template/parse.endNode {
    text/template/parse.NodeType NodeType;
    text/template/parse.Pos Pos;
    struct text/template/parse.Tree *tr;
};

typedef struct struct_{_runtime.gcPercentGoal_runtime/internal/atomic.Uint64;_runtime.memoryLimitGoal_runtime/internal/atomic.Uint64;_runtime.assistTime_runtime/internal/atomic.Int64;_runtime.backgroundTime_runtime/internal/atomic.Int64_} struct_{_runtime.gcPercentGoal_runtime/internal/atomic.Uint64;_runtime.memoryLimitGoal_runtime/internal/atomic.Uint64;_runtime.assistTime_runtime/internal/atomic.Int64;_runtime.backgroundTime_runtime/internal/atomic.Int64_}, *Pstruct_{_runtime.gcPercentGoal_runtime/internal/atomic.Uint64;_runtime.memoryLimitGoal_runtime/internal/atomic.Uint64;_runtime.assistTime_runtime/internal/atomic.Int64;_runtime.backgroundTime_runtime/internal/atomic.Int64_};

struct struct_{_runtime.gcPercentGoal_runtime/internal/atomic.Uint64;_runtime.memoryLimitGoal_runtime/internal/atomic.Uint64;_runtime.assistTime_runtime/internal/atomic.Int64;_runtime.backgroundTime_runtime/internal/atomic.Int64_} { // Original name: struct { runtime.gcPercentGoal runtime/internal/atomic.Uint64; runtime.memoryLimitGoal runtime/internal/atomic.Uint64; runtime.assistTime runtime/internal/atomic.Int64; runtime.backgroundTime runtime/internal/atomic.Int64 }
    struct runtime/internal/atomic.Uint64 gcPercentGoal;
    struct runtime/internal/atomic.Uint64 memoryLimitGoal;
    struct runtime/internal/atomic.Int64 assistTime;
    struct runtime/internal/atomic.Int64 backgroundTime;
};

typedef struct noalg.struct_{_F_uintptr;_X0_[]io/fs.DirEntry_} noalg.struct_{_F_uintptr;_X0_[]io/fs.DirEntry_}, *Pnoalg.struct_{_F_uintptr;_X0_[]io/fs.DirEntry_};

struct noalg.struct_{_F_uintptr;_X0_[]io/fs.DirEntry_} { // Original name: noalg.struct { F uintptr; X0 []io/fs.DirEntry }
    uintptr F;
    struct []io/fs.DirEntry X0;
};

typedef struct google.golang.org/grpc/credentials.RequestInfo google.golang.org/grpc/credentials.RequestInfo, *Pgoogle.golang.org/grpc/credentials.RequestInfo;

struct google.golang.org/grpc/credentials.RequestInfo {
    struct string Method;
    google.golang.org/grpc/credentials.AuthInfo AuthInfo;
};

typedef struct vendor/golang.org/x/net/dns/dnsmessage.AResource vendor/golang.org/x/net/dns/dnsmessage.AResource, *Pvendor/golang.org/x/net/dns/dnsmessage.AResource;

struct vendor/golang.org/x/net/dns/dnsmessage.AResource {
    uint8 A[4];
};

typedef struct crypto/rand.hideAgainReader crypto/rand.hideAgainReader, *Pcrypto/rand.hideAgainReader;

struct crypto/rand.hideAgainReader {
    io.Reader r;
};

typedef struct hash<string,map[string]bool> *map[string]map[string]bool;

typedef struct text/template/parse.DotNode text/template/parse.DotNode, *Ptext/template/parse.DotNode;

struct text/template/parse.DotNode {
    text/template/parse.NodeType NodeType;
    text/template/parse.Pos Pos;
    struct text/template/parse.Tree *tr;
};

typedef struct runtime.vdsoVersionKey runtime.vdsoVersionKey, *Pruntime.vdsoVersionKey;

struct runtime.vdsoVersionKey {
    struct string version;
    uint32 verHash;
};

typedef struct google.golang.org/protobuf/internal/impl.listReflect google.golang.org/protobuf/internal/impl.listReflect, *Pgoogle.golang.org/protobuf/internal/impl.listReflect;

struct google.golang.org/protobuf/internal/impl.listReflect {
    struct reflect.Value v;
    google.golang.org/protobuf/internal/impl.Converter conv;
};

typedef struct hash<string,*google.golang.org/grpc/grpclog.componentData> hash<string,*google.golang.org/grpc/grpclog.componentData>, *Phash<string,*google.golang.org/grpc/grpclog.componentData>;

struct hash<string,*google.golang.org/grpc/grpclog.componentData> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,*google.golang.org/grpc/grpclog.componentData> *buckets;
    struct bucket<string,*google.golang.org/grpc/grpclog.componentData> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct crypto/ecdh.nistCurve[*crypto/internal/nistec.P521Point] crypto/ecdh.nistCurve[*crypto/internal/nistec.P521Point], *Pcrypto/ecdh.nistCurve[*crypto/internal/nistec.P521Point];

struct crypto/ecdh.nistCurve[*crypto/internal/nistec.P521Point] {
    struct string name;
    void (**newPoint)(struct crypto/internal/nistec.P521Point **);
    struct []uint8 scalarOrder;
};

typedef struct encoding/json.jsonError encoding/json.jsonError, *Pencoding/json.jsonError;

struct encoding/json.jsonError {
    error error;
};

typedef struct go.shape.struct_{_Key_string;_Value_log/slog.Value_} go.shape.struct_{_Key_string;_Value_log/slog.Value_}, *Pgo.shape.struct_{_Key_string;_Value_log/slog.Value_};

struct go.shape.struct_{_Key_string;_Value_log/slog.Value_} { // Original name: go.shape.struct { Key string; Value log/slog.Value }
    struct string Key;
    struct log/slog.Value Value;
};

typedef struct fmt.ss fmt.ss, *Pfmt.ss;

typedef struct runtime.iface io.RuneScanner;

struct fmt.ss {
    io.RuneScanner rs;
    struct fmt.buffer buf;
    int count;
    bool atEOF;
    struct fmt.ssave ssave;
};

typedef struct noalg.map.iter[google.golang.org/grpc/internal/transport.ServerTransport]bool noalg.map.iter[google.golang.org/grpc/internal/transport.ServerTransport]bool, *Pnoalg.map.iter[google.golang.org/grpc/internal/transport.ServerTransport]bool;

typedef struct noalg.map.hdr[google.golang.org/grpc/internal/transport.ServerTransport]bool noalg.map.hdr[google.golang.org/grpc/internal/transport.ServerTransport]bool, *Pnoalg.map.hdr[google.golang.org/grpc/internal/transport.ServerTransport]bool;

struct noalg.map.hdr[google.golang.org/grpc/internal/transport.ServerTransport]bool {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[google.golang.org/grpc/internal/transport.ServerTransport]bool *buckets;
    struct noalg.map.bucket[google.golang.org/grpc/internal/transport.ServerTransport]bool *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.iter[google.golang.org/grpc/internal/transport.ServerTransport]bool {
    google.golang.org/grpc/internal/transport.ServerTransport *key;
    bool *elem;
    void *t;
    struct noalg.map.hdr[google.golang.org/grpc/internal/transport.ServerTransport]bool *h;
    struct noalg.map.bucket[google.golang.org/grpc/internal/transport.ServerTransport]bool *buckets;
    struct noalg.map.bucket[google.golang.org/grpc/internal/transport.ServerTransport]bool *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct hash<uint16,bool> *map[uint16]bool;

typedef struct noalg.map.hdr[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType noalg.map.hdr[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType, *Pnoalg.map.hdr[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType;

struct noalg.map.hdr[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType *buckets;
    struct noalg.map.bucket[google.golang.org/protobuf/encoding/protowire.Number]google.golang.org/protobuf/reflect/protoreflect.ExtensionType *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct encoding/json.Encoder encoding/json.Encoder, *Pencoding/json.Encoder;

struct encoding/json.Encoder {
    io.Writer w;
    error err;
    bool escapeHTML;
    struct []uint8 indentBuf;
    struct string indentPrefix;
    struct string indentValue;
};

typedef struct runtime.iface google.golang.org/protobuf/internal/impl.enumV1;

typedef struct runtime.iface interface_{_Timeout()_bool_};

typedef struct runtime.boundsError runtime.boundsError, *Pruntime.boundsError;

struct runtime.boundsError {
    int64 x;
    int y;
    bool signed;
    runtime.boundsErrorCode code;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.Enum;

typedef struct noalg.struct_{_F_uintptr;_X0_uintptr_} noalg.struct_{_F_uintptr;_X0_uintptr_}, *Pnoalg.struct_{_F_uintptr;_X0_uintptr_};

struct noalg.struct_{_F_uintptr;_X0_uintptr_} { // Original name: noalg.struct { F uintptr; X0 uintptr }
    uintptr F;
    uintptr X0;
};

typedef struct runtime.iface io.ReaderFrom;

typedef struct struct_{_runtime.lock_runtime.mutex;_runtime.reuse_[]runtime.liveUserArenaChunk;_runtime.fault_[]runtime.liveUserArenaChunk_} struct_{_runtime.lock_runtime.mutex;_runtime.reuse_[]runtime.liveUserArenaChunk;_runtime.fault_[]runtime.liveUserArenaChunk_}, *Pstruct_{_runtime.lock_runtime.mutex;_runtime.reuse_[]runtime.liveUserArenaChunk;_runtime.fault_[]runtime.liveUserArenaChunk_};

struct struct_{_runtime.lock_runtime.mutex;_runtime.reuse_[]runtime.liveUserArenaChunk;_runtime.fault_[]runtime.liveUserArenaChunk_} { // Original name: struct { runtime.lock runtime.mutex; runtime.reuse []runtime.liveUserArenaChunk; runtime.fault []runtime.liveUserArenaChunk }
    struct runtime.mutex lock;
    struct []runtime.liveUserArenaChunk reuse;
    struct []runtime.liveUserArenaChunk fault;
};

typedef struct runtime.sigctxt runtime.sigctxt, *Pruntime.sigctxt;

struct runtime.sigctxt {
    struct runtime.siginfo *info;
    void *ctxt;
};

typedef struct golang.org/x/net/trace.errorCond golang.org/x/net/trace.errorCond, *Pgolang.org/x/net/trace.errorCond;

struct golang.org/x/net/trace.errorCond {
};

typedef struct log/slog.TextHandler log/slog.TextHandler, *Plog/slog.TextHandler;

struct log/slog.TextHandler {
    struct log/slog.commonHandler *commonHandler;
};

typedef struct struct_{_runtime.item_runtime.stackpoolItem;_runtime.__[40]uint8_} struct_{_runtime.item_runtime.stackpoolItem;_runtime.__[40]uint8_}, *Pstruct_{_runtime.item_runtime.stackpoolItem;_runtime.__[40]uint8_};

typedef struct runtime.stackpoolItem runtime.stackpoolItem, *Pruntime.stackpoolItem;

struct runtime.stackpoolItem {
    struct runtime/internal/sys.NotInHeap _;
    struct runtime.mutex mu;
    struct runtime.mSpanList span;
};

struct struct_{_runtime.item_runtime.stackpoolItem;_runtime.__[40]uint8_} { // Original name: struct { runtime.item runtime.stackpoolItem; runtime._ [40]uint8 }
    struct runtime.stackpoolItem item;
    uint8 _[40];
};

typedef struct strconv.NumError strconv.NumError, *Pstrconv.NumError;

struct strconv.NumError {
    struct string Func;
    struct string Num;
    error Err;
};

typedef struct internal/godebug.runtimeStderr internal/godebug.runtimeStderr, *Pinternal/godebug.runtimeStderr;

struct internal/godebug.runtimeStderr {
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/impl.MessageInfo_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/impl.MessageInfo_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/impl.MessageInfo_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/impl.MessageInfo_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/impl.MessageInfo }
    uintptr F;
    struct google.golang.org/protobuf/internal/impl.MessageInfo *X0;
};

typedef struct hash<reflect.Type,bool> hash<reflect.Type,bool>, *Phash<reflect.Type,bool>;

typedef struct bucket<reflect.Type,bool> bucket<reflect.Type,bool>, *Pbucket<reflect.Type,bool>;

struct hash<reflect.Type,bool> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<reflect.Type,bool> *buckets;
    struct bucket<reflect.Type,bool> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<reflect.Type,bool> {
    uint8 tophash[8];
    reflect.Type keys[8];
    bool values[8];
    struct bucket<reflect.Type,bool> *overflow;
};

typedef struct noalg.map.bucket[string]string noalg.map.bucket[string]string, *Pnoalg.map.bucket[string]string;

struct noalg.map.bucket[string]string {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8]string elems;
    void *overflow;
};

typedef struct net/textproto.ProtocolError net/textproto.ProtocolError, *Pnet/textproto.ProtocolError;

struct net/textproto.ProtocolError {
    uint8 *str;
    int len;
};

typedef struct crypto/internal/nistec.P256Point crypto/internal/nistec.p256Table[16];

typedef struct noalg.struct_{_F_uintptr;_R_runtime.metricReader_} noalg.struct_{_F_uintptr;_R_runtime.metricReader_}, *Pnoalg.struct_{_F_uintptr;_R_runtime.metricReader_};

struct noalg.struct_{_F_uintptr;_R_runtime.metricReader_} { // Original name: noalg.struct { F uintptr; R runtime.metricReader }
    uintptr F;
    void (**R)(uint64 *);
};

typedef struct noalg.struct_{_F_uintptr;_X0_*bool;_X1_*[]int32;_X2_*[]uint32_} noalg.struct_{_F_uintptr;_X0_*bool;_X1_*[]int32;_X2_*[]uint32_}, *Pnoalg.struct_{_F_uintptr;_X0_*bool;_X1_*[]int32;_X2_*[]uint32_};

struct noalg.struct_{_F_uintptr;_X0_*bool;_X1_*[]int32;_X2_*[]uint32_} { // Original name: noalg.struct { F uintptr; X0 *bool; X1 *[]int32; X2 *[]uint32 }
    uintptr F;
    bool *X0;
    struct []int32 *X1;
    struct []uint32 *X2;
};

typedef struct noalg.map.bucket[interface_{}]interface_{} noalg.map.bucket[interface_{}]interface_{}, *Pnoalg.map.bucket[interface_{}]interface_{};

struct noalg.map.bucket[interface_{}]interface_{} { // Original name: noalg.map.bucket[interface {}]interface {}
    uint8 topbits[8];
    noalg.[8]interface_{} keys;
    noalg.[8]interface_{} elems;
    void *overflow;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*text/template.state;_X1_int_} noalg.struct_{_F_uintptr;_X0_*text/template.state;_X1_int_}, *Pnoalg.struct_{_F_uintptr;_X0_*text/template.state;_X1_int_};

struct noalg.struct_{_F_uintptr;_X0_*text/template.state;_X1_int_} { // Original name: noalg.struct { F uintptr; X0 *text/template.state; X1 int }
    uintptr F;
    struct text/template.state *X0;
    int X1;
};

typedef struct runtime.iface interface_{_IsMessageSet()_bool_};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_bool;_X3_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_bool;_X3_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_bool;_X3_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_bool;_X3_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/internal/impl.offset; X1 reflect.StructField; X2 bool; X3 google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor }
    uintptr F;
    google.golang.org/protobuf/internal/impl.offset X0;
    struct reflect.StructField X1;
    bool X2;
    google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor X3;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*internal/godebug.Setting_} noalg.struct_{_F_uintptr;_X0_*internal/godebug.Setting_}, *Pnoalg.struct_{_F_uintptr;_X0_*internal/godebug.Setting_};

struct noalg.struct_{_F_uintptr;_X0_*internal/godebug.Setting_} { // Original name: noalg.struct { F uintptr; X0 *internal/godebug.Setting }
    uintptr F;
    struct internal/godebug.Setting *X0;
};

typedef struct bucket<*reflect.structType,int> bucket<*reflect.structType,int>, *Pbucket<*reflect.structType,int>;

struct bucket<*reflect.structType,int> {
    uint8 tophash[8];
    struct reflect.structType *keys[8];
    int values[8];
    struct bucket<*reflect.structType,int> *overflow;
};

typedef struct fmt.scanError fmt.scanError, *Pfmt.scanError;

struct fmt.scanError {
    error err;
};

typedef struct golang.org/x/net/trace.contextKeyT golang.org/x/net/trace.contextKeyT, *Pgolang.org/x/net/trace.contextKeyT;

struct golang.org/x/net/trace.contextKeyT {
    uint8 *str;
    int len;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.EnumRanges;

typedef struct noalg.struct_{_F_uintptr;_X0_*crypto/x509.Certificate_} noalg.struct_{_F_uintptr;_X0_*crypto/x509.Certificate_}, *Pnoalg.struct_{_F_uintptr;_X0_*crypto/x509.Certificate_};

struct noalg.struct_{_F_uintptr;_X0_*crypto/x509.Certificate_} { // Original name: noalg.struct { F uintptr; X0 *crypto/x509.Certificate }
    uintptr F;
    struct crypto/x509.Certificate *X0;
};

typedef struct text/tabwriter.osError text/tabwriter.osError, *Ptext/tabwriter.osError;

struct text/tabwriter.osError {
    error err;
};

typedef struct hash<string,google.golang.org/grpc/codes.Code> hash<string,google.golang.org/grpc/codes.Code>, *Phash<string,google.golang.org/grpc/codes.Code>;

typedef struct hash<string,google.golang.org/grpc/codes.Code> *map[string]google.golang.org/grpc/codes.Code;

struct hash<string,google.golang.org/grpc/codes.Code> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,google.golang.org/grpc/codes.Code> *buckets;
    struct bucket<string,google.golang.org/grpc/codes.Code> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct runtime.iface encoding/json.Unmarshaler;

typedef struct runtime.iface fmt.Scanner;

typedef struct net/http.ServeMux net/http.ServeMux, *Pnet/http.ServeMux;

struct net/http.ServeMux {
    struct sync.RWMutex mu;
    map[string]net/http.muxEntry m;
    struct []net/http.muxEntry es;
    bool hosts;
};

typedef struct hash<string,*encoding/json.field> hash<string,*encoding/json.field>, *Phash<string,*encoding/json.field>;

typedef struct hash<string,*encoding/json.field> *map[string]*encoding/json.field;

struct hash<string,*encoding/json.field> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,*encoding/json.field> *buckets;
    struct bucket<string,*encoding/json.field> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct struct_{_runtime.sema_uint32;_runtime.active_bool;_runtime.offset_runtime/internal/atomic.Int64;_runtime.records_[]runtime.StackRecord;_runtime.labels_[]unsafe.Pointer_} struct_{_runtime.sema_uint32;_runtime.active_bool;_runtime.offset_runtime/internal/atomic.Int64;_runtime.records_[]runtime.StackRecord;_runtime.labels_[]unsafe.Pointer_}, *Pstruct_{_runtime.sema_uint32;_runtime.active_bool;_runtime.offset_runtime/internal/atomic.Int64;_runtime.records_[]runtime.StackRecord;_runtime.labels_[]unsafe.Pointer_};

struct struct_{_runtime.sema_uint32;_runtime.active_bool;_runtime.offset_runtime/internal/atomic.Int64;_runtime.records_[]runtime.StackRecord;_runtime.labels_[]unsafe.Pointer_} { // Original name: struct { runtime.sema uint32; runtime.active bool; runtime.offset runtime/internal/atomic.Int64; runtime.records []runtime.StackRecord; runtime.labels []unsafe.Pointer }
    uint32 sema;
    bool active;
    struct runtime/internal/atomic.Int64 offset;
    struct []runtime.StackRecord records;
    struct []unsafe.Pointer labels;
};

typedef struct runtime.iface interface_{_Temporary()_bool_};

typedef struct hash<vendor/golang.org/x/net/http2/hpack.pairNameValue,uint64> hash<vendor/golang.org/x/net/http2/hpack.pairNameValue,uint64>, *Phash<vendor/golang.org/x/net/http2/hpack.pairNameValue,uint64>;

typedef struct bucket<vendor/golang.org/x/net/http2/hpack.pairNameValue,uint64> bucket<vendor/golang.org/x/net/http2/hpack.pairNameValue,uint64>, *Pbucket<vendor/golang.org/x/net/http2/hpack.pairNameValue,uint64>;

struct bucket<vendor/golang.org/x/net/http2/hpack.pairNameValue,uint64> {
    uint8 tophash[8];
    struct vendor/golang.org/x/net/http2/hpack.pairNameValue keys[8];
    uint64 values[8];
    struct bucket<vendor/golang.org/x/net/http2/hpack.pairNameValue,uint64> *overflow;
};

struct hash<vendor/golang.org/x/net/http2/hpack.pairNameValue,uint64> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<vendor/golang.org/x/net/http2/hpack.pairNameValue,uint64> *buckets;
    struct bucket<vendor/golang.org/x/net/http2/hpack.pairNameValue,uint64> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct runtime.iface google.golang.org/grpc/balancer.ExitIdler;

typedef struct encoding/asn1.stringEncoder encoding/asn1.stringEncoder, *Pencoding/asn1.stringEncoder;

struct encoding/asn1.stringEncoder {
    uint8 *str;
    int len;
};

typedef struct time.rule time.rule, *Ptime.rule;

struct time.rule {
    time.ruleKind kind;
    int day;
    int week;
    int mon;
    int time;
};

typedef struct noalg.struct_{_F_uintptr;_X0_[]interface_{}_} noalg.struct_{_F_uintptr;_X0_[]interface_{}_}, *Pnoalg.struct_{_F_uintptr;_X0_[]interface_{}_};

struct noalg.struct_{_F_uintptr;_X0_[]interface_{}_} { // Original name: noalg.struct { F uintptr; X0 []interface {} }
    uintptr F;
    struct []interface_{} X0;
};

typedef struct os.SyscallError os.SyscallError, *Pos.SyscallError;

struct os.SyscallError {
    struct string Syscall;
    error Err;
};

typedef struct runtime.srcFunc runtime.srcFunc, *Pruntime.srcFunc;

struct runtime.srcFunc {
    struct runtime.moduledata *datap;
    int32 nameOff;
    int32 startLine;
    internal/abi.FuncID funcID;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_uintptr;_X2_uintptr;_X3_*uint32_} noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_uintptr;_X2_uintptr;_X3_*uint32_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_uintptr;_X2_uintptr;_X3_*uint32_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_uintptr;_X2_uintptr;_X3_*uint32_} { // Original name: noalg.struct { F uintptr; X0 *runtime.g; X1 uintptr; X2 uintptr; X3 *uint32 }
    uintptr F;
    struct runtime.g *X0;
    uintptr X1;
    uintptr X2;
    uint32 *X3;
