    struct bucket<google.golang.org/protobuf/reflect/protoreflect.Name,google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor> *overflow;
};

struct hash<google.golang.org/protobuf/reflect/protoreflect.Name,*google.golang.org/protobuf/internal/filedesc.Oneof> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/protobuf/reflect/protoreflect.Name,*google.golang.org/protobuf/internal/filedesc.Oneof> *buckets;
    struct bucket<google.golang.org/protobuf/reflect/protoreflect.Name,*google.golang.org/protobuf/internal/filedesc.Oneof> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct syscall.Iovec syscall.Iovec, *Psyscall.Iovec;

struct syscall.Iovec {
    uint8 *Base;
    uint64 Len;
};

typedef struct syscall.RawSockaddrUnix syscall.RawSockaddrUnix, *Psyscall.RawSockaddrUnix;

struct syscall.RawSockaddrUnix {
    uint16 Family;
    int8 Path[108];
};

typedef struct net/http.stringWriter net/http.stringWriter, *Pnet/http.stringWriter;

typedef struct runtime.iface io.Writer;

struct net/http.stringWriter {
    io.Writer w;
};

typedef struct []*mime/multipart.FileHeader []*mime/multipart.FileHeader, *P[]*mime/multipart.FileHeader;

typedef struct mime/multipart.FileHeader mime/multipart.FileHeader, *Pmime/multipart.FileHeader;

typedef struct hash<string,[]string> hash<string,[]string>, *Phash<string,[]string>;

typedef struct hash<string,[]string> *net/textproto.MIMEHeader;

typedef struct bucket<string,[]string> bucket<string,[]string>, *Pbucket<string,[]string>;

struct bucket<string,[]string> {
    uint8 tophash[8];
    struct string keys[8];
    struct []string values[8];
    struct bucket<string,[]string> *overflow;
};

struct mime/multipart.FileHeader {
    struct string Filename;
    net/textproto.MIMEHeader Header;
    int64 Size;
    struct []uint8 content;
    struct string tmpfile;
    int64 tmpoff;
    bool tmpshared;
};

struct []*mime/multipart.FileHeader {
    struct mime/multipart.FileHeader **array;
    int len;
    int cap;
};

struct hash<string,[]string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,[]string> *buckets;
    struct bucket<string,[]string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct encoding/asn1.oidEncoder encoding/asn1.oidEncoder, *Pencoding/asn1.oidEncoder;

struct encoding/asn1.oidEncoder {
    int *array;
    int len;
    int cap;
};

typedef struct runtime.iface google.golang.org/grpc/internal/transport.cbItem;

typedef struct net/http.contextKey net/http.contextKey, *Pnet/http.contextKey;

struct net/http.contextKey {
    struct string name;
};

typedef struct hash<string,[]string> *net/http.Header;

typedef struct bucket<*google.golang.org/grpc.addrConn,struct_{}> bucket<*google.golang.org/grpc.addrConn,struct_{}>, *Pbucket<*google.golang.org/grpc.addrConn,struct_{}>;

typedef struct google.golang.org/grpc.addrConn google.golang.org/grpc.addrConn, *Pgoogle.golang.org/grpc.addrConn;

typedef struct runtime.iface context.Context;

typedef struct google.golang.org/grpc.ClientConn google.golang.org/grpc.ClientConn, *Pgoogle.golang.org/grpc.ClientConn;

typedef struct google.golang.org/grpc.dialOptions google.golang.org/grpc.dialOptions, *Pgoogle.golang.org/grpc.dialOptions;

typedef struct []google.golang.org/grpc.CallOption []google.golang.org/grpc.CallOption, *P[]google.golang.org/grpc.CallOption;

typedef struct google.golang.org/grpc.StreamDesc google.golang.org/grpc.StreamDesc, *Pgoogle.golang.org/grpc.StreamDesc;

typedef struct runtime.iface google.golang.org/grpc.ServerStream;

typedef struct runtime.iface google.golang.org/grpc.ClientStream;

typedef struct google.golang.org/grpc.acBalancerWrapper google.golang.org/grpc.acBalancerWrapper, *Pgoogle.golang.org/grpc.acBalancerWrapper;

typedef struct google.golang.org/grpc/balancer.SubConnState google.golang.org/grpc/balancer.SubConnState, *Pgoogle.golang.org/grpc/balancer.SubConnState;

typedef struct google.golang.org/grpc/balancer.NewSubConnOptions google.golang.org/grpc/balancer.NewSubConnOptions, *Pgoogle.golang.org/grpc/balancer.NewSubConnOptions;

typedef struct runtime.iface google.golang.org/grpc/internal/transport.ClientTransport;

typedef struct []google.golang.org/grpc/resolver.Address []google.golang.org/grpc/resolver.Address, *P[]google.golang.org/grpc/resolver.Address;

typedef struct hchan<struct_{}> hchan<struct_{}>, *Phchan<struct_{}>;

typedef struct hchan<struct_{}> *chan_struct_{};

typedef struct google.golang.org/grpc/internal/channelz.SubChannel google.golang.org/grpc/internal/channelz.SubChannel, *Pgoogle.golang.org/grpc/internal/channelz.SubChannel;

typedef struct google.golang.org/grpc/resolver.Target google.golang.org/grpc/resolver.Target, *Pgoogle.golang.org/grpc/resolver.Target;

typedef struct google.golang.org/grpc/internal/channelz.Channel google.golang.org/grpc/internal/channelz.Channel, *Pgoogle.golang.org/grpc/internal/channelz.Channel;

typedef struct runtime.iface google.golang.org/grpc/resolver.Builder;

typedef struct google.golang.org/grpc/internal/idle.Manager google.golang.org/grpc/internal/idle.Manager, *Pgoogle.golang.org/grpc/internal/idle.Manager;

typedef struct google.golang.org/grpc.connectivityStateManager google.golang.org/grpc.connectivityStateManager, *Pgoogle.golang.org/grpc.connectivityStateManager;

typedef struct google.golang.org/grpc.pickerWrapper google.golang.org/grpc.pickerWrapper, *Pgoogle.golang.org/grpc.pickerWrapper;

typedef struct google.golang.org/grpc/internal/resolver.SafeConfigSelector google.golang.org/grpc/internal/resolver.SafeConfigSelector, *Pgoogle.golang.org/grpc/internal/resolver.SafeConfigSelector;

typedef struct sync/atomic.Value sync/atomic.Value, *Psync/atomic.Value;

typedef struct sync.RWMutex sync.RWMutex, *Psync.RWMutex;

typedef struct google.golang.org/grpc.ccResolverWrapper google.golang.org/grpc.ccResolverWrapper, *Pgoogle.golang.org/grpc.ccResolverWrapper;

typedef struct google.golang.org/grpc.ccBalancerWrapper google.golang.org/grpc.ccBalancerWrapper, *Pgoogle.golang.org/grpc.ccBalancerWrapper;

typedef struct google.golang.org/grpc.ServiceConfig google.golang.org/grpc.ServiceConfig, *Pgoogle.golang.org/grpc.ServiceConfig;

typedef struct hash<*google.golang.org/grpc.addrConn,struct_{}> hash<*google.golang.org/grpc.addrConn,struct_{}>, *Phash<*google.golang.org/grpc.addrConn,struct_{}>;

typedef struct hash<*google.golang.org/grpc.addrConn,struct_{}> *map[*google.golang.org/grpc.addrConn]struct_{};

typedef struct google.golang.org/grpc/keepalive.ClientParameters google.golang.org/grpc/keepalive.ClientParameters, *Pgoogle.golang.org/grpc/keepalive.ClientParameters;

typedef struct google.golang.org/grpc/internal/grpcsync.Event google.golang.org/grpc/internal/grpcsync.Event, *Pgoogle.golang.org/grpc/internal/grpcsync.Event;

typedef struct runtime.iface google.golang.org/grpc.CallOption;

typedef struct []google.golang.org/grpc.UnaryClientInterceptor []google.golang.org/grpc.UnaryClientInterceptor, *P[]google.golang.org/grpc.UnaryClientInterceptor;

typedef struct []google.golang.org/grpc.StreamClientInterceptor []google.golang.org/grpc.StreamClientInterceptor, *P[]google.golang.org/grpc.StreamClientInterceptor;

typedef struct runtime.iface google.golang.org/grpc.Compressor;

typedef struct runtime.iface google.golang.org/grpc.Decompressor;

typedef struct runtime.iface google.golang.org/grpc/internal/backoff.Strategy;

typedef struct runtime.iface google.golang.org/grpc/internal/binarylog.Logger;

typedef struct google.golang.org/grpc/internal/transport.ConnectOptions google.golang.org/grpc/internal/transport.ConnectOptions, *Pgoogle.golang.org/grpc/internal/transport.ConnectOptions;

typedef struct runtime.iface net.Conn;

typedef struct runtime.iface google.golang.org/grpc/internal/channelz.Identifier;

typedef struct []google.golang.org/grpc/resolver.Builder []google.golang.org/grpc/resolver.Builder, *P[]google.golang.org/grpc/resolver.Builder;

typedef struct runtime.iface google.golang.org/grpc.SharedBufferPool;

typedef struct hash<google.golang.org/grpc/balancer.ProducerBuilder,*google.golang.org/grpc.refCountedProducer> hash<google.golang.org/grpc/balancer.ProducerBuilder,*google.golang.org/grpc.refCountedProducer>, *Phash<google.golang.org/grpc/balancer.ProducerBuilder,*google.golang.org/grpc.refCountedProducer>;

typedef struct hash<google.golang.org/grpc/balancer.ProducerBuilder,*google.golang.org/grpc.refCountedProducer> *map[google.golang.org/grpc/balancer.ProducerBuilder]*google.golang.org/grpc.refCountedProducer;

typedef struct runtime.iface google.golang.org/grpc/credentials.Bundle;

typedef struct waitq<struct_{}> waitq<struct_{}>, *Pwaitq<struct_{}>;

typedef struct runtime.iface google.golang.org/grpc/internal/channelz.Entity;

typedef struct hash<int64,string> hash<int64,string>, *Phash<int64,string>;

typedef struct hash<int64,string> *map[int64]string;

typedef struct google.golang.org/grpc/internal/channelz.ChannelTrace google.golang.org/grpc/internal/channelz.ChannelTrace, *Pgoogle.golang.org/grpc/internal/channelz.ChannelTrace;

typedef struct google.golang.org/grpc/internal/channelz.ChannelMetrics google.golang.org/grpc/internal/channelz.ChannelMetrics, *Pgoogle.golang.org/grpc/internal/channelz.ChannelMetrics;

typedef struct net/url.URL net/url.URL, *Pnet/url.URL;

typedef struct runtime.iface google.golang.org/grpc/internal/idle.Enforcer;

typedef struct time.Timer time.Timer, *Ptime.Timer;

typedef struct google.golang.org/grpc/internal/grpcsync.PubSub google.golang.org/grpc/internal/grpcsync.PubSub, *Pgoogle.golang.org/grpc/internal/grpcsync.PubSub;

typedef struct runtime.iface google.golang.org/grpc/balancer.Picker;

typedef struct []google.golang.org/grpc/stats.Handler []google.golang.org/grpc/stats.Handler, *P[]google.golang.org/grpc/stats.Handler;

typedef struct runtime.iface google.golang.org/grpc/internal/resolver.ConfigSelector;

typedef struct sync/atomic.Int32 sync/atomic.Int32, *Psync/atomic.Int32;

typedef struct google.golang.org/grpc/internal/grpcsync.CallbackSerializer google.golang.org/grpc/internal/grpcsync.CallbackSerializer, *Pgoogle.golang.org/grpc/internal/grpcsync.CallbackSerializer;

typedef struct runtime.iface google.golang.org/grpc/resolver.Resolver;

typedef struct google.golang.org/grpc/resolver.State google.golang.org/grpc/resolver.State, *Pgoogle.golang.org/grpc/resolver.State;

typedef struct google.golang.org/grpc/balancer.BuildOptions google.golang.org/grpc/balancer.BuildOptions, *Pgoogle.golang.org/grpc/balancer.BuildOptions;

typedef struct google.golang.org/grpc/internal/balancer/gracefulswitch.Balancer google.golang.org/grpc/internal/balancer/gracefulswitch.Balancer, *Pgoogle.golang.org/grpc/internal/balancer/gracefulswitch.Balancer;

typedef struct runtime.iface google.golang.org/grpc/serviceconfig.Config;

typedef struct runtime.iface google.golang.org/grpc/serviceconfig.LoadBalancingConfig;

typedef struct hash<string,google.golang.org/grpc/internal/serviceconfig.MethodConfig> hash<string,google.golang.org/grpc/internal/serviceconfig.MethodConfig>, *Phash<string,google.golang.org/grpc/internal/serviceconfig.MethodConfig>;

typedef struct hash<string,google.golang.org/grpc/internal/serviceconfig.MethodConfig> *map[string]google.golang.org/grpc/internal/serviceconfig.MethodConfig;

typedef struct google.golang.org/grpc.retryThrottlingPolicy google.golang.org/grpc.retryThrottlingPolicy, *Pgoogle.golang.org/grpc.retryThrottlingPolicy;

typedef struct google.golang.org/grpc.healthCheckConfig google.golang.org/grpc.healthCheckConfig, *Pgoogle.golang.org/grpc.healthCheckConfig;

typedef struct []google.golang.org/grpc/credentials.PerRPCCredentials []google.golang.org/grpc/credentials.PerRPCCredentials, *P[]google.golang.org/grpc/credentials.PerRPCCredentials;

typedef struct runtime.iface google.golang.org/grpc/credentials.TransportCredentials;

typedef struct bucket<google.golang.org/grpc/balancer.ProducerBuilder,*google.golang.org/grpc.refCountedProducer> bucket<google.golang.org/grpc/balancer.ProducerBuilder,*google.golang.org/grpc.refCountedProducer>, *Pbucket<google.golang.org/grpc/balancer.ProducerBuilder,*google.golang.org/grpc.refCountedProducer>;

typedef struct sudog<struct_{}> sudog<struct_{}>, *Psudog<struct_{}>;

typedef struct bucket<int64,string> bucket<int64,string>, *Pbucket<int64,string>;

typedef struct google.golang.org/grpc/internal/channelz.channelMap google.golang.org/grpc/internal/channelz.channelMap, *Pgoogle.golang.org/grpc/internal/channelz.channelMap;

typedef struct []*google.golang.org/grpc/internal/channelz.traceEvent []*google.golang.org/grpc/internal/channelz.traceEvent, *P[]*google.golang.org/grpc/internal/channelz.traceEvent;

typedef struct sync/atomic.Pointer[google.golang.org/grpc/connectivity.State] sync/atomic.Pointer[google.golang.org/grpc/connectivity.State], *Psync/atomic.Pointer[google.golang.org/grpc/connectivity.State];

typedef struct sync/atomic.Pointer[string] sync/atomic.Pointer[string], *Psync/atomic.Pointer[string];

typedef struct sync/atomic.Int64 sync/atomic.Int64, *Psync/atomic.Int64;

typedef struct net/url.Userinfo net/url.Userinfo, *Pnet/url.Userinfo;

typedef struct hchan<time.Time> hchan<time.Time>, *Phchan<time.Time>;

typedef struct hchan<time.Time> *<-chan_time.Time;

typedef struct time.runtimeTimer time.runtimeTimer, *Ptime.runtimeTimer;

typedef struct hash<google.golang.org/grpc/internal/grpcsync.Subscriber,bool> hash<google.golang.org/grpc/internal/grpcsync.Subscriber,bool>, *Phash<google.golang.org/grpc/internal/grpcsync.Subscriber,bool>;

typedef struct hash<google.golang.org/grpc/internal/grpcsync.Subscriber,bool> *map[google.golang.org/grpc/internal/grpcsync.Subscriber]bool;

typedef struct runtime.iface google.golang.org/grpc/stats.Handler;

typedef struct sync/atomic.noCopy sync/atomic.noCopy, *Psync/atomic.noCopy;

typedef struct google.golang.org/grpc/internal/buffer.Unbounded google.golang.org/grpc/internal/buffer.Unbounded, *Pgoogle.golang.org/grpc/internal/buffer.Unbounded;

typedef struct []google.golang.org/grpc/resolver.Endpoint []google.golang.org/grpc/resolver.Endpoint, *P[]google.golang.org/grpc/resolver.Endpoint;

typedef struct google.golang.org/grpc/serviceconfig.ParseResult google.golang.org/grpc/serviceconfig.ParseResult, *Pgoogle.golang.org/grpc/serviceconfig.ParseResult;

typedef struct runtime.iface google.golang.org/grpc/balancer.ClientConn;

typedef struct google.golang.org/grpc/internal/balancer/gracefulswitch.balancerWrapper google.golang.org/grpc/internal/balancer/gracefulswitch.balancerWrapper, *Pgoogle.golang.org/grpc/internal/balancer/gracefulswitch.balancerWrapper;

typedef struct bucket<string,google.golang.org/grpc/internal/serviceconfig.MethodConfig> bucket<string,google.golang.org/grpc/internal/serviceconfig.MethodConfig>, *Pbucket<string,google.golang.org/grpc/internal/serviceconfig.MethodConfig>;

typedef struct runtime.iface google.golang.org/grpc/credentials.PerRPCCredentials;

typedef struct runtime.iface google.golang.org/grpc/balancer.ProducerBuilder;

typedef struct google.golang.org/grpc.refCountedProducer google.golang.org/grpc.refCountedProducer, *Pgoogle.golang.org/grpc.refCountedProducer;

typedef struct hash<int64,struct_{}> hash<int64,struct_{}>, *Phash<int64,struct_{}>;

typedef struct hash<int64,struct_{}> *map[int64]struct_{};

typedef struct hash<int64,*google.golang.org/grpc/internal/channelz.Channel> hash<int64,*google.golang.org/grpc/internal/channelz.Channel>, *Phash<int64,*google.golang.org/grpc/internal/channelz.Channel>;

typedef struct hash<int64,*google.golang.org/grpc/internal/channelz.Channel> *map[int64]*google.golang.org/grpc/internal/channelz.Channel;

typedef struct hash<int64,*google.golang.org/grpc/internal/channelz.SubChannel> hash<int64,*google.golang.org/grpc/internal/channelz.SubChannel>, *Phash<int64,*google.golang.org/grpc/internal/channelz.SubChannel>;

typedef struct hash<int64,*google.golang.org/grpc/internal/channelz.SubChannel> *map[int64]*google.golang.org/grpc/internal/channelz.SubChannel;

typedef struct hash<int64,*google.golang.org/grpc/internal/channelz.Socket> hash<int64,*google.golang.org/grpc/internal/channelz.Socket>, *Phash<int64,*google.golang.org/grpc/internal/channelz.Socket>;

typedef struct hash<int64,*google.golang.org/grpc/internal/channelz.Socket> *map[int64]*google.golang.org/grpc/internal/channelz.Socket;

typedef struct hash<int64,*google.golang.org/grpc/internal/channelz.Server> hash<int64,*google.golang.org/grpc/internal/channelz.Server>, *Phash<int64,*google.golang.org/grpc/internal/channelz.Server>;

typedef struct hash<int64,*google.golang.org/grpc/internal/channelz.Server> *map[int64]*google.golang.org/grpc/internal/channelz.Server;

typedef struct google.golang.org/grpc/internal/channelz.traceEvent google.golang.org/grpc/internal/channelz.traceEvent, *Pgoogle.golang.org/grpc/internal/channelz.traceEvent;

typedef struct sync/atomic.align64 sync/atomic.align64, *Psync/atomic.align64;

typedef struct waitq<time.Time> waitq<time.Time>, *Pwaitq<time.Time>;

typedef struct bucket<google.golang.org/grpc/internal/grpcsync.Subscriber,bool> bucket<google.golang.org/grpc/internal/grpcsync.Subscriber,bool>, *Pbucket<google.golang.org/grpc/internal/grpcsync.Subscriber,bool>;

typedef struct hchan<interface_{}> hchan<interface_{}>, *Phchan<interface_{}>;

typedef struct hchan<interface_{}> *chan_interface_{};

typedef struct google.golang.org/grpc/resolver.Endpoint google.golang.org/grpc/resolver.Endpoint, *Pgoogle.golang.org/grpc/resolver.Endpoint;

typedef struct runtime.iface google.golang.org/grpc/balancer.Balancer;

typedef struct runtime.iface google.golang.org/grpc/balancer.Builder;

typedef struct google.golang.org/grpc/balancer.State google.golang.org/grpc/balancer.State, *Pgoogle.golang.org/grpc/balancer.State;

typedef struct hash<google.golang.org/grpc/balancer.SubConn,bool> hash<google.golang.org/grpc/balancer.SubConn,bool>, *Phash<google.golang.org/grpc/balancer.SubConn,bool>;

typedef struct hash<google.golang.org/grpc/balancer.SubConn,bool> *map[google.golang.org/grpc/balancer.SubConn]bool;

typedef struct google.golang.org/grpc/internal/serviceconfig.MethodConfig google.golang.org/grpc/internal/serviceconfig.MethodConfig, *Pgoogle.golang.org/grpc/internal/serviceconfig.MethodConfig;

typedef struct runtime.eface google.golang.org/grpc/balancer.Producer;

typedef struct bucket<int64,struct_{}> bucket<int64,struct_{}>, *Pbucket<int64,struct_{}>;

typedef struct bucket<int64,*google.golang.org/grpc/internal/channelz.Channel> bucket<int64,*google.golang.org/grpc/internal/channelz.Channel>, *Pbucket<int64,*google.golang.org/grpc/internal/channelz.Channel>;

typedef struct bucket<int64,*google.golang.org/grpc/internal/channelz.SubChannel> bucket<int64,*google.golang.org/grpc/internal/channelz.SubChannel>, *Pbucket<int64,*google.golang.org/grpc/internal/channelz.SubChannel>;

typedef struct bucket<int64,*google.golang.org/grpc/internal/channelz.Socket> bucket<int64,*google.golang.org/grpc/internal/channelz.Socket>, *Pbucket<int64,*google.golang.org/grpc/internal/channelz.Socket>;

typedef struct bucket<int64,*google.golang.org/grpc/internal/channelz.Server> bucket<int64,*google.golang.org/grpc/internal/channelz.Server>, *Pbucket<int64,*google.golang.org/grpc/internal/channelz.Server>;

typedef struct runtime.iface google.golang.org/grpc/internal/grpcsync.Subscriber;

typedef struct waitq<interface_{}> waitq<interface_{}>, *Pwaitq<interface_{}>;

typedef struct bucket<google.golang.org/grpc/balancer.SubConn,bool> bucket<google.golang.org/grpc/balancer.SubConn,bool>, *Pbucket<google.golang.org/grpc/balancer.SubConn,bool>;

typedef struct google.golang.org/grpc/internal/serviceconfig.RetryPolicy google.golang.org/grpc/internal/serviceconfig.RetryPolicy, *Pgoogle.golang.org/grpc/internal/serviceconfig.RetryPolicy;

typedef struct google.golang.org/grpc/internal/channelz.Socket google.golang.org/grpc/internal/channelz.Socket, *Pgoogle.golang.org/grpc/internal/channelz.Socket;

typedef struct google.golang.org/grpc/internal/channelz.EphemeralSocketMetrics google.golang.org/grpc/internal/channelz.EphemeralSocketMetrics, *Pgoogle.golang.org/grpc/internal/channelz.EphemeralSocketMetrics;

typedef struct google.golang.org/grpc/internal/channelz.Server google.golang.org/grpc/internal/channelz.Server, *Pgoogle.golang.org/grpc/internal/channelz.Server;

typedef struct sudog<interface_{}> sudog<interface_{}>, *Psudog<interface_{}>;

typedef struct hash<google.golang.org/grpc/codes.Code,bool> hash<google.golang.org/grpc/codes.Code,bool>, *Phash<google.golang.org/grpc/codes.Code,bool>;

typedef struct hash<google.golang.org/grpc/codes.Code,bool> *map[google.golang.org/grpc/codes.Code]bool;

typedef struct google.golang.org/grpc/internal/channelz.SocketType google.golang.org/grpc/internal/channelz.SocketType, *Pgoogle.golang.org/grpc/internal/channelz.SocketType;

typedef struct google.golang.org/grpc/internal/channelz.SocketMetrics google.golang.org/grpc/internal/channelz.SocketMetrics, *Pgoogle.golang.org/grpc/internal/channelz.SocketMetrics;

typedef struct runtime.iface net.Addr;

typedef struct google.golang.org/grpc/internal/channelz.SocketOptionData google.golang.org/grpc/internal/channelz.SocketOptionData, *Pgoogle.golang.org/grpc/internal/channelz.SocketOptionData;

typedef struct runtime.iface google.golang.org/grpc/credentials.ChannelzSecurityValue;

typedef struct google.golang.org/grpc/internal/channelz.ServerMetrics google.golang.org/grpc/internal/channelz.ServerMetrics, *Pgoogle.golang.org/grpc/internal/channelz.ServerMetrics;

typedef struct bucket<google.golang.org/grpc/codes.Code,bool> bucket<google.golang.org/grpc/codes.Code,bool>, *Pbucket<google.golang.org/grpc/codes.Code,bool>;

typedef struct golang.org/x/sys/unix.Linger golang.org/x/sys/unix.Linger, *Pgolang.org/x/sys/unix.Linger;

typedef struct golang.org/x/sys/unix.Timeval golang.org/x/sys/unix.Timeval, *Pgolang.org/x/sys/unix.Timeval;

typedef struct golang.org/x/sys/unix.TCPInfo golang.org/x/sys/unix.TCPInfo, *Pgolang.org/x/sys/unix.TCPInfo;

struct sync/atomic.noCopy {
};

struct sync/atomic.Int32 {
    struct sync/atomic.noCopy _;
    int32 v;
};

struct sync.RWMutex {
    struct sync.Mutex w;
    uint32 writerSem;
    uint32 readerSem;
    struct sync/atomic.Int32 readerCount;
    struct sync/atomic.Int32 readerWait;
};

struct google.golang.org/grpc/internal/resolver.SafeConfigSelector {
    struct sync.RWMutex mu;
    google.golang.org/grpc/internal/resolver.ConfigSelector cs;
};

struct google.golang.org/grpc.healthCheckConfig {
    struct string ServiceName;
};

struct []google.golang.org/grpc.StreamClientInterceptor {
    void (***array)(context.Context, struct google.golang.org/grpc.StreamDesc *, struct google.golang.org/grpc.ClientConn *, struct string, void (**)(context.Context, struct google.golang.org/grpc.StreamDesc *, struct google.golang.org/grpc.ClientConn *, struct string, struct []google.golang.org/grpc.CallOption, google.golang.org/grpc.ClientStream *, error *, ...), struct []google.golang.org/grpc.CallOption, google.golang.org/grpc.ClientStream *, error *, ...);
    int len;
    int cap;
};

struct google.golang.org/grpc/balancer.SubConnState {
    google.golang.org/grpc/connectivity.State ConnectivityState;
    error ConnectionError;
};

struct hash<int64,struct_{}> { // Original name: hash<int64,struct {}>
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<int64,struct_{}> *buckets;
    struct bucket<int64,struct_{}> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct hash<int64,*google.golang.org/grpc/internal/channelz.Server> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<int64,*google.golang.org/grpc/internal/channelz.Server> *buckets;
    struct bucket<int64,*google.golang.org/grpc/internal/channelz.Server> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct google.golang.org/grpc/internal/idle.Manager {
    int64 lastCallEndTime;
    int32 activeCallsCount;
    int32 activeSinceLastTimerCheck;
    int32 closed;
    google.golang.org/grpc/internal/idle.Enforcer enforcer;
    time.Duration timeout;
    struct sync.RWMutex idleMu;
    bool actuallyIdle;
    struct time.Timer *timer;
};

struct sync/atomic.align64 {
};

struct sync/atomic.Int64 {
    struct sync/atomic.align64 _;
    struct sync/atomic.noCopy _;
    int64 v;
};

struct sync/atomic.Pointer[google.golang.org/grpc/connectivity.State] {
    struct sync/atomic.noCopy _;
    google.golang.org/grpc/connectivity.State *_[0];
    void *v;
};

struct sync/atomic.Pointer[string] {
    struct sync/atomic.noCopy _;
    struct string *_[0];
    void *v;
};

struct google.golang.org/grpc/internal/channelz.ChannelMetrics {
    struct sync/atomic.Pointer[google.golang.org/grpc/connectivity.State] State;
    struct sync/atomic.Pointer[string] Target;
    struct sync/atomic.Int64 CallsStarted;
    struct sync/atomic.Int64 CallsSucceeded;
    struct sync/atomic.Int64 CallsFailed;
    struct sync/atomic.Int64 LastCallStartedTimestamp;
};

struct google.golang.org/grpc/keepalive.ClientParameters {
    time.Duration Time;
    time.Duration Timeout;
    bool PermitWithoutStream;
};

struct []google.golang.org/grpc/stats.Handler {
    google.golang.org/grpc/stats.Handler *array;
    int len;
    int cap;
};

struct []google.golang.org/grpc/credentials.PerRPCCredentials {
    google.golang.org/grpc/credentials.PerRPCCredentials *array;
    int len;
    int cap;
};

struct google.golang.org/grpc/internal/transport.ConnectOptions {
    struct string UserAgent;
    void (**Dialer)(context.Context, struct string, net.Conn *, error *);
    bool FailOnNonTempDialError;
    struct []google.golang.org/grpc/credentials.PerRPCCredentials PerRPCCredentials;
    google.golang.org/grpc/credentials.TransportCredentials TransportCredentials;
    google.golang.org/grpc/credentials.Bundle CredsBundle;
    struct google.golang.org/grpc/keepalive.ClientParameters KeepaliveParams;
    struct []google.golang.org/grpc/stats.Handler StatsHandlers;
    int32 InitialWindowSize;
    int32 InitialConnWindowSize;
    int WriteBufferSize;
    int ReadBufferSize;
    bool SharedWriteBuffer;
    struct google.golang.org/grpc/internal/channelz.SubChannel *ChannelzParent;
    uint32 *MaxHeaderListSize;
    bool UseProxy;
};

struct waitq<time.Time> {
    struct sudog<time.Time> *first;
    struct sudog<time.Time> *last;
};

struct google.golang.org/grpc/internal/channelz.channelMap {
    struct sync.RWMutex mu;
    map[int64]struct_{} topLevelChannels;
    map[int64]*google.golang.org/grpc/internal/channelz.Channel channels;
    map[int64]*google.golang.org/grpc/internal/channelz.SubChannel subChannels;
    map[int64]*google.golang.org/grpc/internal/channelz.Socket sockets;
    map[int64]*google.golang.org/grpc/internal/channelz.Server servers;
};

struct []*google.golang.org/grpc/internal/channelz.traceEvent {
    struct google.golang.org/grpc/internal/channelz.traceEvent **array;
    int len;
    int cap;
};

struct []google.golang.org/grpc.CallOption {
    google.golang.org/grpc.CallOption *array;
    int len;
    int cap;
};

struct google.golang.org/grpc/internal/serviceconfig.RetryPolicy {
    int MaxAttempts;
    time.Duration InitialBackoff;
    time.Duration MaxBackoff;
    float64 BackoffMultiplier;
    map[google.golang.org/grpc/codes.Code]bool RetryableStatusCodes;
};

struct golang.org/x/sys/unix.Timeval {
    int64 Sec;
    int64 Usec;
};

struct []google.golang.org/grpc.UnaryClientInterceptor {
    void (***array)(context.Context, struct string, interface_{}, interface_{}, struct google.golang.org/grpc.ClientConn *, void (**)(context.Context, struct string, interface_{}, interface_{}, struct google.golang.org/grpc.ClientConn *, struct []google.golang.org/grpc.CallOption, error *, ...), struct []google.golang.org/grpc.CallOption, error *, ...);
    int len;
    int cap;
};

struct waitq<interface_{}> { // Original name: waitq<interface {}>
    struct sudog<interface_{}> *first;
    struct sudog<interface_{}> *last;
};

struct google.golang.org/grpc/internal/channelz.SubChannel {
    google.golang.org/grpc/internal/channelz.Entity Entity;
    int64 ID;
    struct string RefName;
    bool closeCalled;
    map[int64]string sockets;
    struct google.golang.org/grpc/internal/channelz.Channel *parent;
    struct google.golang.org/grpc/internal/channelz.ChannelTrace *trace;
    int32 traceRefCount;
    struct google.golang.org/grpc/internal/channelz.ChannelMetrics ChannelMetrics;
};

struct hash<string,google.golang.org/grpc/internal/serviceconfig.MethodConfig> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,google.golang.org/grpc/internal/serviceconfig.MethodConfig> *buckets;
    struct bucket<string,google.golang.org/grpc/internal/serviceconfig.MethodConfig> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct []google.golang.org/grpc/resolver.Address {
    struct google.golang.org/grpc/resolver.Address *array;
    int len;
    int cap;
};

struct []google.golang.org/grpc/resolver.Endpoint {
    struct google.golang.org/grpc/resolver.Endpoint *array;
    int len;
    int cap;
};

struct google.golang.org/grpc/resolver.State {
    struct []google.golang.org/grpc/resolver.Address Addresses;
    struct []google.golang.org/grpc/resolver.Endpoint Endpoints;
    struct google.golang.org/grpc/serviceconfig.ParseResult *ServiceConfig;
    struct google.golang.org/grpc/attributes.Attributes *Attributes;
};

struct google.golang.org/grpc.retryThrottlingPolicy {
    float64 MaxTokens;
    float64 TokenRatio;
};

struct google.golang.org/grpc/serviceconfig.ParseResult {
    google.golang.org/grpc/serviceconfig.Config Config;
    error Err;
};

struct google.golang.org/grpc/balancer.State {
    google.golang.org/grpc/connectivity.State ConnectivityState;
    google.golang.org/grpc/balancer.Picker Picker;
};

struct google.golang.org/grpc/internal/balancer/gracefulswitch.balancerWrapper {
    google.golang.org/grpc/balancer.Balancer Balancer;
    struct google.golang.org/grpc/internal/balancer/gracefulswitch.Balancer *gsb;
    google.golang.org/grpc/balancer.Builder builder;
    struct google.golang.org/grpc/balancer.State lastState;
    map[google.golang.org/grpc/balancer.SubConn]bool subconns;
};

struct google.golang.org/grpc/internal/channelz.SocketMetrics {
    struct sync/atomic.Int64 StreamsStarted;
    struct sync/atomic.Int64 StreamsSucceeded;
    struct sync/atomic.Int64 StreamsFailed;
    struct sync/atomic.Int64 MessagesSent;
    struct sync/atomic.Int64 MessagesReceived;
    struct sync/atomic.Int64 KeepAlivesSent;
    struct sync/atomic.Int64 LastLocalStreamCreatedTimestamp;
    struct sync/atomic.Int64 LastRemoteStreamCreatedTimestamp;
    struct sync/atomic.Int64 LastMessageSentTimestamp;
    struct sync/atomic.Int64 LastMessageReceivedTimestamp;
};

struct waitq<struct_{}> { // Original name: waitq<struct {}>
    struct sudog<struct_{}> *first;
    struct sudog<struct_{}> *last;
};

struct hchan<struct_{}> { // Original name: hchan<struct {}>
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<struct_{}> recvq;
    struct waitq<struct_{}> sendq;
    struct runtime.mutex lock;
};

struct net/url.URL {
    struct string Scheme;
    struct string Opaque;
    struct net/url.Userinfo *User;
    struct string Host;
    struct string Path;
    struct string RawPath;
    bool OmitHost;
    bool ForceQuery;
    struct string RawQuery;
    struct string Fragment;
    struct string RawFragment;
};

struct google.golang.org/grpc/resolver.Target {
    struct net/url.URL URL;
};

struct google.golang.org/grpc/internal/grpcsync.CallbackSerializer {
    chan_struct_{} done;
    struct google.golang.org/grpc/internal/buffer.Unbounded *callbacks;
};

struct sudog<struct_{}> { // Original name: sudog<struct {}>
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    struct struct_{} *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

struct hash<int64,*google.golang.org/grpc/internal/channelz.SubChannel> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<int64,*google.golang.org/grpc/internal/channelz.SubChannel> *buckets;
    struct bucket<int64,*google.golang.org/grpc/internal/channelz.SubChannel> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct google.golang.org/grpc.connectivityStateManager {
    struct sync.Mutex mu;
    google.golang.org/grpc/connectivity.State state;
    chan_struct_{} notifyChan;
    struct google.golang.org/grpc/internal/channelz.Channel *channelz;
    struct google.golang.org/grpc/internal/grpcsync.PubSub *pubSub;
};

struct google.golang.org/grpc/balancer.BuildOptions {
    google.golang.org/grpc/credentials.TransportCredentials DialCreds;
    google.golang.org/grpc/credentials.Bundle CredsBundle;
    void (**Dialer)(context.Context, struct string, net.Conn *, error *);
    struct string Authority;
    google.golang.org/grpc/internal/channelz.Identifier ChannelzParent;
    struct string CustomUserAgent;
    struct google.golang.org/grpc/resolver.Target Target;
};

struct hash<*google.golang.org/grpc.addrConn,struct_{}> { // Original name: hash<*google.golang.org/grpc.addrConn,struct {}>
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<*google.golang.org/grpc.addrConn,struct_{}> *buckets;
    struct bucket<*google.golang.org/grpc.addrConn,struct_{}> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<int64,*google.golang.org/grpc/internal/channelz.Channel> {
    uint8 tophash[8];
    int64 keys[8];
    struct google.golang.org/grpc/internal/channelz.Channel *values[8];
    struct bucket<int64,*google.golang.org/grpc/internal/channelz.Channel> *overflow;
};

struct google.golang.org/grpc/internal/buffer.Unbounded {
    chan_interface_{} c;
    bool closed;
    bool closing;
    struct sync.Mutex mu;
    struct []interface_{} backlog;
};

struct hchan<interface_{}> { // Original name: hchan<interface {}>
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<interface_{}> recvq;
    struct waitq<interface_{}> sendq;
    struct runtime.mutex lock;
};

struct google.golang.org/grpc/internal/channelz.SocketType {
    uint8 *str;
    int len;
};

struct sync/atomic.Value {
    interface_{} v;
};

struct []google.golang.org/grpc/resolver.Builder {
    google.golang.org/grpc/resolver.Builder *array;
    int len;
    int cap;
};

struct google.golang.org/grpc.dialOptions {
    void (**unaryInt)(context.Context, struct string, interface_{}, interface_{}, struct google.golang.org/grpc.ClientConn *, void (**)(context.Context, struct string, interface_{}, interface_{}, struct google.golang.org/grpc.ClientConn *, struct []google.golang.org/grpc.CallOption, error *, ...), struct []google.golang.org/grpc.CallOption, error *, ...);
    void (**streamInt)(context.Context, struct google.golang.org/grpc.StreamDesc *, struct google.golang.org/grpc.ClientConn *, struct string, void (**)(context.Context, struct google.golang.org/grpc.StreamDesc *, struct google.golang.org/grpc.ClientConn *, struct string, struct []google.golang.org/grpc.CallOption, google.golang.org/grpc.ClientStream *, error *, ...), struct []google.golang.org/grpc.CallOption, google.golang.org/grpc.ClientStream *, error *, ...);
    struct []google.golang.org/grpc.UnaryClientInterceptor chainUnaryInts;
    struct []google.golang.org/grpc.StreamClientInterceptor chainStreamInts;
    google.golang.org/grpc.Compressor cp;
    google.golang.org/grpc.Decompressor dc;
    google.golang.org/grpc/internal/backoff.Strategy bs;
    bool block;
    bool returnLastError;
    time.Duration timeout;
    struct string authority;
    google.golang.org/grpc/internal/binarylog.Logger binaryLogger;
    struct google.golang.org/grpc/internal/transport.ConnectOptions copts;
    struct []google.golang.org/grpc.CallOption callOptions;
    google.golang.org/grpc/internal/channelz.Identifier channelzParent;
    bool disableServiceConfig;
    bool disableRetry;
    bool disableHealthCheck;
    void (**healthCheckFunc)(context.Context, void (**)(struct string, interface_{} *, error *), void (**)(google.golang.org/grpc/connectivity.State, error), struct string, error *);
    void (**minConnectTimeout)(time.Duration *);
    struct google.golang.org/grpc.ServiceConfig *defaultServiceConfig;
    struct string *defaultServiceConfigRawJSON;
    struct []google.golang.org/grpc/resolver.Builder resolvers;
    time.Duration idleTimeout;
    google.golang.org/grpc.SharedBufferPool recvBufferPool;
    struct string defaultScheme;
};

struct google.golang.org/grpc.ClientConn {
    context.Context ctx;
    void (**cancel)(void);
    struct string target;
    struct google.golang.org/grpc/resolver.Target parsedTarget;
    struct string authority;
    struct google.golang.org/grpc.dialOptions dopts;
    struct google.golang.org/grpc/internal/channelz.Channel *channelz;
    google.golang.org/grpc/resolver.Builder resolverBuilder;
    struct google.golang.org/grpc/internal/idle.Manager *idlenessMgr;
    struct google.golang.org/grpc.connectivityStateManager *csMgr;
    struct google.golang.org/grpc.pickerWrapper *pickerWrapper;
    struct google.golang.org/grpc/internal/resolver.SafeConfigSelector safeConfigSelector;
    struct sync/atomic.Value retryThrottler;
    struct sync.RWMutex mu;
    struct google.golang.org/grpc.ccResolverWrapper *resolverWrapper;
    struct google.golang.org/grpc.ccBalancerWrapper *balancerWrapper;
    struct google.golang.org/grpc.ServiceConfig *sc;
    map[*google.golang.org/grpc.addrConn]struct_{} conns;
    struct google.golang.org/grpc/keepalive.ClientParameters mkp;
    struct google.golang.org/grpc/internal/grpcsync.Event *firstResolveEvent;
    struct sync.Mutex lceMu;
    error lastConnectionError;
};

struct hash<int64,*google.golang.org/grpc/internal/channelz.Socket> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<int64,*google.golang.org/grpc/internal/channelz.Socket> *buckets;
    struct bucket<int64,*google.golang.org/grpc/internal/channelz.Socket> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct google.golang.org/grpc.ccResolverWrapper {
    struct google.golang.org/grpc.ClientConn *cc;
    bool ignoreServiceConfig;
    struct google.golang.org/grpc/internal/grpcsync.CallbackSerializer *serializer;
    void (**serializerCancel)(void);
    google.golang.org/grpc/resolver.Resolver resolver;
    struct sync.Mutex mu;
    struct google.golang.org/grpc/resolver.State curState;
    bool closed;
};

struct google.golang.org/grpc.ServiceConfig {
    google.golang.org/grpc/serviceconfig.Config Config;
    google.golang.org/grpc/serviceconfig.LoadBalancingConfig lbConfig;
    map[string]google.golang.org/grpc/internal/serviceconfig.MethodConfig Methods;
    struct google.golang.org/grpc.retryThrottlingPolicy *retryThrottling;
    struct google.golang.org/grpc.healthCheckConfig *healthCheckConfig;
    struct string rawJSONString;
};

struct hash<int64,string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<int64,string> *buckets;
    struct bucket<int64,string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct hash<google.golang.org/grpc/balancer.ProducerBuilder,*google.golang.org/grpc.refCountedProducer> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/grpc/balancer.ProducerBuilder,*google.golang.org/grpc.refCountedProducer> *buckets;
    struct bucket<google.golang.org/grpc/balancer.ProducerBuilder,*google.golang.org/grpc.refCountedProducer> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct hash<int64,*google.golang.org/grpc/internal/channelz.Channel> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<int64,*google.golang.org/grpc/internal/channelz.Channel> *buckets;
    struct bucket<int64,*google.golang.org/grpc/internal/channelz.Channel> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct google.golang.org/grpc/internal/channelz.traceEvent {
    struct string Desc;
    google.golang.org/grpc/internal/channelz.Severity Severity;
    struct time.Time Timestamp;
    int64 RefID;
    struct string RefName;
    google.golang.org/grpc/internal/channelz.RefChannelType RefType;
};

struct google.golang.org/grpc.pickerWrapper {
    struct sync.Mutex mu;
    bool done;
    chan_struct_{} blockingCh;
    google.golang.org/grpc/balancer.Picker picker;
    struct []google.golang.org/grpc/stats.Handler statsHandlers;
};

struct time.runtimeTimer {
    uintptr pp;
    int64 when;
    int64 period;
    void (**f)(interface_{}, uintptr);
    interface_{} arg;
    uintptr seq;
    int64 nextwhen;
    uint32 status;
};

struct time.Timer {
    <-chan_time.Time C;
    struct time.runtimeTimer r;
};

struct google.golang.org/grpc/internal/serviceconfig.MethodConfig {
    bool *WaitForReady;
    time.Duration *Timeout;
    int *MaxReqSize;
    int *MaxRespSize;
    struct google.golang.org/grpc/internal/serviceconfig.RetryPolicy *RetryPolicy;
};

struct bucket<string,google.golang.org/grpc/internal/serviceconfig.MethodConfig> {
    uint8 tophash[8];
    struct string keys[8];
    struct google.golang.org/grpc/internal/serviceconfig.MethodConfig values[8];
    struct bucket<string,google.golang.org/grpc/internal/serviceconfig.MethodConfig> *overflow;
};

struct google.golang.org/grpc.ccBalancerWrapper {
    struct google.golang.org/grpc.ClientConn *cc;
    struct google.golang.org/grpc/balancer.BuildOptions opts;
    struct google.golang.org/grpc/internal/grpcsync.CallbackSerializer *serializer;
    void (**serializerCancel)(void);
    struct string curBalancerName;
    struct google.golang.org/grpc/internal/balancer/gracefulswitch.Balancer *balancer;
    struct sync.Mutex mu;
    bool closed;
};

struct bucket<google.golang.org/grpc/codes.Code,bool> {
    uint8 tophash[8];
    google.golang.org/grpc/codes.Code keys[8];
    bool values[8];
    struct bucket<google.golang.org/grpc/codes.Code,bool> *overflow;
};

struct hash<google.golang.org/grpc/internal/grpcsync.Subscriber,bool> {
    int count;
