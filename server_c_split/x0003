
struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals {
};

struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Buf_[]uint8_} { // Original name: struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Buf []uint8 }
    struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals NoUnkeyedLiterals;
    struct []uint8 Buf;
};

struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Size_int_} { // Original name: struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Size int }
    struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals NoUnkeyedLiterals;
    int Size;
};

struct google.golang.org/protobuf/internal/impl.atomicNilMessage {
    void *p;
};

struct google.golang.org/protobuf/reflect/protoreflect.Value {
    google.golang.org/protobuf/internal/pragma.DoNotCompare DoNotCompare;
    void *typ;
    void *ptr;
    uint64 num;
};

struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Flags_uint8_} { // Original name: struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Flags uint8 }
    struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals NoUnkeyedLiterals;
    uint8 Flags;
};

struct google.golang.org/protobuf/internal/impl.fieldInfo {
    google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor fieldDesc;
    void (**has)(struct google.golang.org/protobuf/internal/impl.pointer, bool *);
    void (**clear)(struct google.golang.org/protobuf/internal/impl.pointer);
    void (**get)(struct google.golang.org/protobuf/internal/impl.pointer, struct google.golang.org/protobuf/reflect/protoreflect.Value *);
    void (**set)(struct google.golang.org/protobuf/internal/impl.pointer, struct google.golang.org/protobuf/reflect/protoreflect.Value);
    void (**mutable)(struct google.golang.org/protobuf/internal/impl.pointer, struct google.golang.org/protobuf/reflect/protoreflect.Value *);
    void (**newMessage)(google.golang.org/protobuf/reflect/protoreflect.Message *);
    void (**newField)(struct google.golang.org/protobuf/reflect/protoreflect.Value *);
};

struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message;_Buf_[]uint8;_Flags_uint8_} { // Original name: struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Message google.golang.org/protobuf/reflect/protoreflect.Message; Buf []uint8; Flags uint8 }
    struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals NoUnkeyedLiterals;
    google.golang.org/protobuf/reflect/protoreflect.Message Message;
    struct []uint8 Buf;
    uint8 Flags;
};

struct google.golang.org/protobuf/internal/impl.valueCoderFuncs {
    void (**size)(struct google.golang.org/protobuf/reflect/protoreflect.Value, int, struct google.golang.org/protobuf/internal/impl.marshalOptions, int *);
    void (**marshal)(struct []uint8, struct google.golang.org/protobuf/reflect/protoreflect.Value, uint64, struct google.golang.org/protobuf/internal/impl.marshalOptions, struct []uint8 *, error *);
    void (**unmarshal)(struct []uint8, struct google.golang.org/protobuf/reflect/protoreflect.Value, google.golang.org/protobuf/encoding/protowire.Number, google.golang.org/protobuf/encoding/protowire.Type, struct google.golang.org/protobuf/internal/impl.unmarshalOptions, struct google.golang.org/protobuf/reflect/protoreflect.Value *, struct google.golang.org/protobuf/internal/impl.unmarshalOutput *, error *);
    void (**isInit)(struct google.golang.org/protobuf/reflect/protoreflect.Value, error *);
    void (**merge)(struct google.golang.org/protobuf/reflect/protoreflect.Value, struct google.golang.org/protobuf/reflect/protoreflect.Value, struct google.golang.org/protobuf/internal/impl.mergeOptions, struct google.golang.org/protobuf/reflect/protoreflect.Value *);
};

struct google.golang.org/protobuf/internal/impl.validationInfo {
    struct google.golang.org/protobuf/internal/impl.MessageInfo *mi;
    google.golang.org/protobuf/internal/impl.validationType typ;
    google.golang.org/protobuf/internal/impl.validationType keyType;
    google.golang.org/protobuf/internal/impl.validationType valType;
    uint64 requiredBit;
};

struct google.golang.org/protobuf/internal/impl.pointerCoderFuncs {
    struct google.golang.org/protobuf/internal/impl.MessageInfo *mi;
    void (**size)(struct google.golang.org/protobuf/internal/impl.pointer, struct google.golang.org/protobuf/internal/impl.coderFieldInfo *, struct google.golang.org/protobuf/internal/impl.marshalOptions, int *);
    void (**marshal)(struct []uint8, struct google.golang.org/protobuf/internal/impl.pointer, struct google.golang.org/protobuf/internal/impl.coderFieldInfo *, struct google.golang.org/protobuf/internal/impl.marshalOptions, struct []uint8 *, error *);
    void (**unmarshal)(struct []uint8, struct google.golang.org/protobuf/internal/impl.pointer, google.golang.org/protobuf/encoding/protowire.Type, struct google.golang.org/protobuf/internal/impl.coderFieldInfo *, struct google.golang.org/protobuf/internal/impl.unmarshalOptions, struct google.golang.org/protobuf/internal/impl.unmarshalOutput *, error *);
    void (**isInit)(struct google.golang.org/protobuf/internal/impl.pointer, struct google.golang.org/protobuf/internal/impl.coderFieldInfo *, error *);
    void (**merge)(struct google.golang.org/protobuf/internal/impl.pointer, struct google.golang.org/protobuf/internal/impl.pointer, struct google.golang.org/protobuf/internal/impl.coderFieldInfo *, struct google.golang.org/protobuf/internal/impl.mergeOptions);
};

struct google.golang.org/protobuf/internal/impl.coderFieldInfo {
    struct google.golang.org/protobuf/internal/impl.pointerCoderFuncs funcs;
    struct google.golang.org/protobuf/internal/impl.MessageInfo *mi;
    reflect.Type ft;
    struct google.golang.org/protobuf/internal/impl.validationInfo validation;
    google.golang.org/protobuf/encoding/protowire.Number num;
    google.golang.org/protobuf/internal/impl.offset offset;
    uint64 wiretag;
    int tagsize;
    bool isPointer;
    bool isRequired;
};

struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Source_google.golang.org/protobuf/reflect/protoreflect.Message;_Destination_google.golang.org/protobuf/reflect/protoreflect.Message_} { // Original name: struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Source google.golang.org/protobuf/reflect/protoreflect.Message; Destination google.golang.org/protobuf/reflect/protoreflect.Message }
    struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals NoUnkeyedLiterals;
    google.golang.org/protobuf/reflect/protoreflect.Message Source;
    google.golang.org/protobuf/reflect/protoreflect.Message Destination;
};

struct google.golang.org/protobuf/internal/impl.pointer {
    void *p;
};

struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Flags_uint64;_Size_func(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message;_Flags_uint8_})_struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Size_int_};_Marshal_func(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message;_Buf_[]uint8;_Flags_uint8_})_(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Buf_[]uint8_},_error);_Unmarshal_func(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message;_Buf_[]uint8;_Flags_uint8;_Resolver_interface_{_FindExtensionByName(google.golang.org/protobuf/reflect/protoreflect.FullName)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error);_FindExtensionByNumber(google.golang.org/protobuf/reflect/protoreflect.FullName,_google.golang.org/protobuf/encoding/protowire.Number)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error)_};_Depth_int_})_(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Flags_uint8_},_error);_Merge_func(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Source_google.golang.org/protobuf/reflect/protoreflect.Message;_Destination_google.golang.org/protobuf/reflect/protoreflect.Message_})_struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Flags_uint8_};_CheckInitialized_func(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message_})_(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals_},_error)_} { // Original name: struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Flags uint64; Size func(struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Message google.golang.org/protobuf/reflect/protoreflect.Message; Flags uint8 }) struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Size int }; Marshal func(struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Message google.golang.org/protobuf/reflect/protoreflect.Message; Buf []uint8; Flags uint8 }) (struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Buf []uint8 }, error); Unmarshal func(struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Message google.golang.org/protobuf/reflect/protoreflect.Message; Buf []uint8; Flags uint8; Resolver interface { FindExtensionByName(google.golang.org/protobuf/reflect/protoreflect.FullName) (google.golang.org/protobuf/reflect/protoreflect.ExtensionType, error); FindExtensionByNumber(google.golang.org/protobuf/reflect/protoreflect.FullName, google.golang.org/protobuf/encoding/protowire.Number) (google.golang.org/protobuf/reflect/protoreflect.ExtensionType, error) }; Depth int }) (struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Flags uint8 }, error); Merge func(struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Source google.golang.org/protobuf/reflect/protoreflect.Message; Destination google.golang.org/protobuf/reflect/protoreflect.Message }) struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Flags uint8 }; CheckInitialized func(struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Message google.golang.org/protobuf/reflect/protoreflect.Message }) (struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals }, error) }
    struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals NoUnkeyedLiterals;
    uint64 Flags;
    void (**Size)(struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message;_Flags_uint8_}, struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Size_int_} *);
    void (**Marshal)(struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message;_Buf_[]uint8;_Flags_uint8_}, struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Buf_[]uint8_} *, error *);
    void (**Unmarshal)(struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message;_Buf_[]uint8;_Flags_uint8;_Resolver_interface_{_FindExtensionByName(google.golang.org/protobuf/reflect/protoreflect.FullName)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error);_FindExtensionByNumber(google.golang.org/protobuf/reflect/protoreflect.FullName,_google.golang.org/protobuf/encoding/protowire.Number)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error)_};_Depth_int_}, struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Flags_uint8_} *, error *);
    void (**Merge)(struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Source_google.golang.org/protobuf/reflect/protoreflect.Message;_Destination_google.golang.org/protobuf/reflect/protoreflect.Message_}, struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Flags_uint8_} *);
    void (**CheckInitialized)(struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message_}, struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals_} *, error *);
};

struct []*google.golang.org/protobuf/internal/impl.fieldInfo {
    struct google.golang.org/protobuf/internal/impl.fieldInfo **array;
    int len;
    int cap;
};

struct google.golang.org/protobuf/internal/impl.reflectMessageInfo {
    map[google.golang.org/protobuf/encoding/protowire.Number]*google.golang.org/protobuf/internal/impl.fieldInfo fields;
    map[google.golang.org/protobuf/reflect/protoreflect.Name]*google.golang.org/protobuf/internal/impl.oneofInfo oneofs;
    map[google.golang.org/protobuf/encoding/protowire.Number]interface_{} fieldTypes;
    struct []*google.golang.org/protobuf/internal/impl.fieldInfo denseFields;
    struct []interface_{} rangeInfos;
    void (**getUnknown)(struct google.golang.org/protobuf/internal/impl.pointer, struct google.golang.org/protobuf/reflect/protoreflect.RawFields *);
    void (**setUnknown)(struct google.golang.org/protobuf/internal/impl.pointer, struct google.golang.org/protobuf/reflect/protoreflect.RawFields);
    void (**extensionMap)(struct google.golang.org/protobuf/internal/impl.pointer, google.golang.org/protobuf/internal/impl.extensionMap **);
    struct google.golang.org/protobuf/internal/impl.atomicNilMessage nilMessage;
};

struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals_} { // Original name: struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals }
    struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals NoUnkeyedLiterals;
};

struct sync.Mutex {
    int32 state;
    uint32 sema;
};

struct google.golang.org/protobuf/internal/impl.coderMessageInfo {
    struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Flags_uint64;_Size_func(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message;_Flags_uint8_})_struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Size_int_};_Marshal_func(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message;_Buf_[]uint8;_Flags_uint8_})_(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Buf_[]uint8_},_error);_Unmarshal_func(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message;_Buf_[]uint8;_Flags_uint8;_Resolver_interface_{_FindExtensionByName(google.golang.org/protobuf/reflect/protoreflect.FullName)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error);_FindExtensionByNumber(google.golang.org/protobuf/reflect/protoreflect.FullName,_google.golang.org/protobuf/encoding/protowire.Number)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error)_};_Depth_int_})_(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Flags_uint8_},_error);_Merge_func(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Source_google.golang.org/protobuf/reflect/protoreflect.Message;_Destination_google.golang.org/protobuf/reflect/protoreflect.Message_})_struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Flags_uint8_};_CheckInitialized_func(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message_})_(struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals_},_error)_} methods;
    struct []*google.golang.org/protobuf/internal/impl.coderFieldInfo orderedCoderFields;
    struct []*google.golang.org/protobuf/internal/impl.coderFieldInfo denseCoderFields;
    map[google.golang.org/protobuf/encoding/protowire.Number]*google.golang.org/protobuf/internal/impl.coderFieldInfo coderFields;
    google.golang.org/protobuf/internal/impl.offset sizecacheOffset;
    google.golang.org/protobuf/internal/impl.offset unknownOffset;
    bool unknownPtrKind;
    google.golang.org/protobuf/internal/impl.offset extensionOffset;
    bool needsInitCheck;
    bool isMessageSet;
    uint8 numRequiredFields;
};

struct google.golang.org/protobuf/internal/impl.MessageInfo {
    reflect.Type GoReflectType;
    google.golang.org/protobuf/reflect/protoreflect.MessageDescriptor Desc;
    void (**Exporter)(interface_{}, int, interface_{} *);
    struct []interface_{} OneofWrappers;
    struct sync.Mutex initMu;
    uint32 initDone;
    struct google.golang.org/protobuf/internal/impl.reflectMessageInfo reflectMessageInfo;
    struct google.golang.org/protobuf/internal/impl.coderMessageInfo coderMessageInfo;
};

struct bucket<google.golang.org/protobuf/reflect/protoreflect.Name,*google.golang.org/protobuf/internal/impl.oneofInfo> {
    uint8 tophash[8];
    struct google.golang.org/protobuf/reflect/protoreflect.Name keys[8];
    struct google.golang.org/protobuf/internal/impl.oneofInfo *values[8];
    struct bucket<google.golang.org/protobuf/reflect/protoreflect.Name,*google.golang.org/protobuf/internal/impl.oneofInfo> *overflow;
};

struct hash<google.golang.org/protobuf/encoding/protowire.Number,*google.golang.org/protobuf/internal/impl.coderFieldInfo> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,*google.golang.org/protobuf/internal/impl.coderFieldInfo> *buckets;
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,*google.golang.org/protobuf/internal/impl.coderFieldInfo> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<google.golang.org/protobuf/encoding/protowire.Number,*google.golang.org/protobuf/internal/impl.fieldInfo> {
    uint8 tophash[8];
    google.golang.org/protobuf/encoding/protowire.Number keys[8];
    struct google.golang.org/protobuf/internal/impl.fieldInfo *values[8];
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,*google.golang.org/protobuf/internal/impl.fieldInfo> *overflow;
};

struct hash<int32,google.golang.org/protobuf/internal/impl.ExtensionField> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<int32,google.golang.org/protobuf/internal/impl.ExtensionField> *buckets;
    struct bucket<int32,google.golang.org/protobuf/internal/impl.ExtensionField> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct google.golang.org/protobuf/internal/impl.mergeOptions {
};

struct google.golang.org/protobuf/internal/impl.ExtensionField {
    google.golang.org/protobuf/reflect/protoreflect.ExtensionType typ;
    struct google.golang.org/protobuf/reflect/protoreflect.Value value;
    struct google.golang.org/protobuf/internal/impl.lazyExtensionValue *lazy;
};

struct bucket<google.golang.org/protobuf/encoding/protowire.Number,*google.golang.org/protobuf/internal/impl.coderFieldInfo> {
    uint8 tophash[8];
    google.golang.org/protobuf/encoding/protowire.Number keys[8];
    struct google.golang.org/protobuf/internal/impl.coderFieldInfo *values[8];
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,*google.golang.org/protobuf/internal/impl.coderFieldInfo> *overflow;
};

struct google.golang.org/protobuf/internal/impl.unmarshalOptions {
    uint8 flags;
    interface_{_FindExtensionByName(google.golang.org/protobuf/reflect/protoreflect.FullName)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error);_FindExtensionByNumber(google.golang.org/protobuf/reflect/protoreflect.FullName,_google.golang.org/protobuf/encoding/protowire.Number)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error)_} resolver;
    int depth;
};

struct bucket<int32,google.golang.org/protobuf/internal/impl.ExtensionField> {
    uint8 tophash[8];
    int32 keys[8];
    struct google.golang.org/protobuf/internal/impl.ExtensionField values[8];
    struct bucket<int32,google.golang.org/protobuf/internal/impl.ExtensionField> *overflow;
};

struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message;_Flags_uint8_} { // Original name: struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Message google.golang.org/protobuf/reflect/protoreflect.Message; Flags uint8 }
    struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals NoUnkeyedLiterals;
    google.golang.org/protobuf/reflect/protoreflect.Message Message;
    uint8 Flags;
};

struct google.golang.org/protobuf/internal/impl.extensionFieldInfo {
    uint64 wiretag;
    int tagsize;
    bool unmarshalNeedsValue;
    struct google.golang.org/protobuf/internal/impl.valueCoderFuncs funcs;
    struct google.golang.org/protobuf/internal/impl.validationInfo validation;
};

struct google.golang.org/protobuf/internal/impl.oneofInfo {
    google.golang.org/protobuf/reflect/protoreflect.OneofDescriptor oneofDesc;
    void (**which)(struct google.golang.org/protobuf/internal/impl.pointer, google.golang.org/protobuf/encoding/protowire.Number *);
};

struct google.golang.org/protobuf/internal/impl.unmarshalOutput {
    int n;
    bool initialized;
};

struct google.golang.org/protobuf/internal/impl.lazyExtensionValue {
    uint32 atomicOnce;
    struct sync.Mutex mu;
    struct google.golang.org/protobuf/internal/impl.extensionFieldInfo *xi;
    struct google.golang.org/protobuf/reflect/protoreflect.Value value;
    struct []uint8 b;
    void (**fn)(struct google.golang.org/protobuf/reflect/protoreflect.Value *);
};

struct bucket<google.golang.org/protobuf/encoding/protowire.Number,interface_{}> { // Original name: bucket<google.golang.org/protobuf/encoding/protowire.Number,interface {}>
    uint8 tophash[8];
    google.golang.org/protobuf/encoding/protowire.Number keys[8];
    interface_{} values[8];
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,interface_{}> *overflow;
};

struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message_} { // Original name: struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Message google.golang.org/protobuf/reflect/protoreflect.Message }
    struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals NoUnkeyedLiterals;
    google.golang.org/protobuf/reflect/protoreflect.Message Message;
};

struct google.golang.org/protobuf/reflect/protoreflect.RawFields {
    uint8 *array;
    int len;
    int cap;
};

struct hash<google.golang.org/protobuf/reflect/protoreflect.Name,*google.golang.org/protobuf/internal/impl.oneofInfo> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/protobuf/reflect/protoreflect.Name,*google.golang.org/protobuf/internal/impl.oneofInfo> *buckets;
    struct bucket<google.golang.org/protobuf/reflect/protoreflect.Name,*google.golang.org/protobuf/internal/impl.oneofInfo> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct google.golang.org/protobuf/internal/impl.marshalOptions {
    uint8 flags;
};

struct hash<google.golang.org/protobuf/encoding/protowire.Number,*google.golang.org/protobuf/internal/impl.fieldInfo> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,*google.golang.org/protobuf/internal/impl.fieldInfo> *buckets;
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,*google.golang.org/protobuf/internal/impl.fieldInfo> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct hash<google.golang.org/protobuf/encoding/protowire.Number,interface_{}> { // Original name: hash<google.golang.org/protobuf/encoding/protowire.Number,interface {}>
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,interface_{}> *buckets;
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,interface_{}> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct struct_{_google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals;_Message_google.golang.org/protobuf/reflect/protoreflect.Message;_Buf_[]uint8;_Flags_uint8;_Resolver_interface_{_FindExtensionByName(google.golang.org/protobuf/reflect/protoreflect.FullName)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error);_FindExtensionByNumber(google.golang.org/protobuf/reflect/protoreflect.FullName,_google.golang.org/protobuf/encoding/protowire.Number)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error)_};_Depth_int_} { // Original name: struct { google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals; Message google.golang.org/protobuf/reflect/protoreflect.Message; Buf []uint8; Flags uint8; Resolver interface { FindExtensionByName(google.golang.org/protobuf/reflect/protoreflect.FullName) (google.golang.org/protobuf/reflect/protoreflect.ExtensionType, error); FindExtensionByNumber(google.golang.org/protobuf/reflect/protoreflect.FullName, google.golang.org/protobuf/encoding/protowire.Number) (google.golang.org/protobuf/reflect/protoreflect.ExtensionType, error) }; Depth int }
    struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals NoUnkeyedLiterals;
    google.golang.org/protobuf/reflect/protoreflect.Message Message;
    struct []uint8 Buf;
    uint8 Flags;
    interface_{_FindExtensionByName(google.golang.org/protobuf/reflect/protoreflect.FullName)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error);_FindExtensionByNumber(google.golang.org/protobuf/reflect/protoreflect.FullName,_google.golang.org/protobuf/encoding/protowire.Number)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error)_} Resolver;
    int Depth;
};

typedef struct runtime.metricData runtime.metricData, *Pruntime.metricData;

typedef struct runtime.statAggregate runtime.statAggregate, *Pruntime.statAggregate;

typedef struct runtime.metricValue runtime.metricValue, *Pruntime.metricValue;

typedef uint64 runtime.statDepSet[1];

typedef struct runtime.heapStatsAggregate runtime.heapStatsAggregate, *Pruntime.heapStatsAggregate;

typedef struct runtime.sysStatsAggregate runtime.sysStatsAggregate, *Pruntime.sysStatsAggregate;

typedef struct runtime.cpuStatsAggregate runtime.cpuStatsAggregate, *Pruntime.cpuStatsAggregate;

typedef struct runtime.gcStatsAggregate runtime.gcStatsAggregate, *Pruntime.gcStatsAggregate;

typedef struct runtime.heapStatsDelta runtime.heapStatsDelta, *Pruntime.heapStatsDelta;

typedef struct runtime.cpuStats runtime.cpuStats, *Pruntime.cpuStats;

struct runtime.cpuStats {
    int64 gcAssistTime;
    int64 gcDedicatedTime;
    int64 gcIdleTime;
    int64 gcPauseTime;
    int64 gcTotalTime;
    int64 scavengeAssistTime;
    int64 scavengeBgTime;
    int64 scavengeTotalTime;
    int64 idleTime;
    int64 userTime;
    int64 totalTime;
};

struct runtime.cpuStatsAggregate {
    struct runtime.cpuStats cpuStats;
};

struct runtime.heapStatsDelta {
    int64 committed;
    int64 released;
    int64 inHeap;
    int64 inStacks;
    int64 inWorkBufs;
    int64 inPtrScalarBits;
    uint64 tinyAllocCount;
    uint64 largeAlloc;
    uint64 largeAllocCount;
    uint64 smallAllocCount[68];
    uint64 largeFree;
    uint64 largeFreeCount;
    uint64 smallFreeCount[68];
};

struct runtime.metricValue {
    runtime.metricKind kind;
    uint64 scalar;
    void *pointer;
};

struct runtime.heapStatsAggregate {
    struct runtime.heapStatsDelta heapStatsDelta;
    uint64 inObjects;
    uint64 numObjects;
    uint64 totalAllocated;
    uint64 totalFreed;
    uint64 totalAllocs;
    uint64 totalFrees;
};

struct runtime.metricData {
    runtime.statDepSet deps;
    void (**compute)(struct runtime.statAggregate *, struct runtime.metricValue *);
};

struct runtime.sysStatsAggregate {
    uint64 stacksSys;
    uint64 mSpanSys;
    uint64 mSpanInUse;
    uint64 mCacheSys;
    uint64 mCacheInUse;
    uint64 buckHashSys;
    uint64 gcMiscSys;
    uint64 otherSys;
    uint64 heapGoal;
    uint64 gcCyclesDone;
    uint64 gcCyclesForced;
};

struct runtime.gcStatsAggregate {
    uint64 heapScan;
    uint64 stackScan;
    uint64 globalsScan;
    uint64 totalScan;
};

struct runtime.statAggregate {
    runtime.statDepSet ensured;
    struct runtime.heapStatsAggregate heapStats;
    struct runtime.sysStatsAggregate sysStats;
    struct runtime.cpuStatsAggregate cpuStats;
    struct runtime.gcStatsAggregate gcStats;
};

typedef struct crypto/x509/pkix.CertificateList crypto/x509/pkix.CertificateList, *Pcrypto/x509/pkix.CertificateList;

typedef struct crypto/x509/pkix.TBSCertificateList crypto/x509/pkix.TBSCertificateList, *Pcrypto/x509/pkix.TBSCertificateList;

typedef struct crypto/x509/pkix.AlgorithmIdentifier crypto/x509/pkix.AlgorithmIdentifier, *Pcrypto/x509/pkix.AlgorithmIdentifier;

typedef struct encoding/asn1.BitString encoding/asn1.BitString, *Pencoding/asn1.BitString;

typedef struct encoding/asn1.RawContent encoding/asn1.RawContent, *Pencoding/asn1.RawContent;

typedef struct crypto/x509/pkix.RDNSequence crypto/x509/pkix.RDNSequence, *Pcrypto/x509/pkix.RDNSequence;

typedef struct time.Time time.Time, *Ptime.Time;

typedef struct []crypto/x509/pkix.RevokedCertificate []crypto/x509/pkix.RevokedCertificate, *P[]crypto/x509/pkix.RevokedCertificate;

typedef struct []crypto/x509/pkix.Extension []crypto/x509/pkix.Extension, *P[]crypto/x509/pkix.Extension;

typedef struct encoding/asn1.ObjectIdentifier encoding/asn1.ObjectIdentifier, *Pencoding/asn1.ObjectIdentifier;

typedef struct encoding/asn1.RawValue encoding/asn1.RawValue, *Pencoding/asn1.RawValue;

typedef struct crypto/x509/pkix.RelativeDistinguishedNameSET crypto/x509/pkix.RelativeDistinguishedNameSET, *Pcrypto/x509/pkix.RelativeDistinguishedNameSET;

typedef struct time.Location time.Location, *Ptime.Location;

typedef struct crypto/x509/pkix.RevokedCertificate crypto/x509/pkix.RevokedCertificate, *Pcrypto/x509/pkix.RevokedCertificate;

typedef struct crypto/x509/pkix.Extension crypto/x509/pkix.Extension, *Pcrypto/x509/pkix.Extension;

typedef struct crypto/x509/pkix.AttributeTypeAndValue crypto/x509/pkix.AttributeTypeAndValue, *Pcrypto/x509/pkix.AttributeTypeAndValue;

typedef struct []time.zone []time.zone, *P[]time.zone;

typedef struct []time.zoneTrans []time.zoneTrans, *P[]time.zoneTrans;

typedef struct time.zone time.zone, *Ptime.zone;

typedef struct math/big.Int math/big.Int, *Pmath/big.Int;

typedef struct time.zoneTrans time.zoneTrans, *Ptime.zoneTrans;

typedef struct math/big.nat math/big.nat, *Pmath/big.nat;

struct time.Time {
    uint64 wall;
    int64 ext;
    struct time.Location *loc;
};

struct encoding/asn1.ObjectIdentifier {
    int *array;
    int len;
    int cap;
};

struct encoding/asn1.RawValue {
    int Class;
    int Tag;
    bool IsCompound;
    struct []uint8 Bytes;
    struct []uint8 FullBytes;
};

struct crypto/x509/pkix.AlgorithmIdentifier {
    struct encoding/asn1.ObjectIdentifier Algorithm;
    struct encoding/asn1.RawValue Parameters;
};

struct crypto/x509/pkix.AttributeTypeAndValue {
    struct encoding/asn1.ObjectIdentifier Type;
    interface_{} Value;
};

struct []crypto/x509/pkix.RevokedCertificate {
    struct crypto/x509/pkix.RevokedCertificate *array;
    int len;
    int cap;
};

struct math/big.nat {
    math/big.Word *array;
    int len;
    int cap;
};

struct math/big.Int {
    bool neg;
    struct math/big.nat abs;
};

struct encoding/asn1.BitString {
    struct []uint8 Bytes;
    int BitLength;
};

struct []crypto/x509/pkix.Extension {
    struct crypto/x509/pkix.Extension *array;
    int len;
    int cap;
};

struct crypto/x509/pkix.RDNSequence {
    struct crypto/x509/pkix.RelativeDistinguishedNameSET *array;
    int len;
    int cap;
};

struct encoding/asn1.RawContent {
    uint8 *array;
    int len;
    int cap;
};

struct crypto/x509/pkix.TBSCertificateList {
    struct encoding/asn1.RawContent Raw;
    int Version;
    struct crypto/x509/pkix.AlgorithmIdentifier Signature;
    struct crypto/x509/pkix.RDNSequence Issuer;
    struct time.Time ThisUpdate;
    struct time.Time NextUpdate;
    struct []crypto/x509/pkix.RevokedCertificate RevokedCertificates;
    struct []crypto/x509/pkix.Extension Extensions;
};

struct crypto/x509/pkix.CertificateList {
    struct crypto/x509/pkix.TBSCertificateList TBSCertList;
    struct crypto/x509/pkix.AlgorithmIdentifier SignatureAlgorithm;
    struct encoding/asn1.BitString SignatureValue;
};

struct crypto/x509/pkix.RelativeDistinguishedNameSET {
    struct crypto/x509/pkix.AttributeTypeAndValue *array;
    int len;
    int cap;
};

struct crypto/x509/pkix.Extension {
    struct encoding/asn1.ObjectIdentifier Id;
    bool Critical;
    struct []uint8 Value;
};

struct time.zone {
    struct string name;
    int offset;
    bool isDST;
};

struct time.zoneTrans {
    int64 when;
    uint8 index;
    bool isstd;
    bool isutc;
};

struct []time.zoneTrans {
    struct time.zoneTrans *array;
    int len;
    int cap;
};

struct []time.zone {
    struct time.zone *array;
    int len;
    int cap;
};

struct time.Location {
    struct string name;
    struct []time.zone zone;
    struct []time.zoneTrans tx;
    struct string extend;
    int64 cacheStart;
    int64 cacheEnd;
    struct time.zone *cacheZone;
};

struct crypto/x509/pkix.RevokedCertificate {
    struct math/big.Int *SerialNumber;
    struct time.Time RevocationTime;
    struct []crypto/x509/pkix.Extension Extensions;
};

typedef struct net/http.requestBodyReadError net/http.requestBodyReadError, *Pnet/http.requestBodyReadError;

struct net/http.requestBodyReadError {
    error error;
};

typedef struct sudog<time.Time> sudog<time.Time>, *Psudog<time.Time>;

typedef struct runtime.g runtime.g, *Pruntime.g;

typedef struct runtime.sudog runtime.sudog, *Pruntime.sudog;

typedef struct runtime.hchan runtime.hchan, *Pruntime.hchan;

typedef struct runtime.stack runtime.stack, *Pruntime.stack;

typedef struct runtime._panic runtime._panic, *Pruntime._panic;

typedef struct runtime._defer runtime._defer, *Pruntime._defer;

typedef struct runtime.m runtime.m, *Pruntime.m;

typedef struct runtime.gobuf runtime.gobuf, *Pruntime.gobuf;

typedef struct runtime/internal/atomic.Uint32 runtime/internal/atomic.Uint32, *Pruntime/internal/atomic.Uint32;

typedef struct runtime/internal/atomic.Bool runtime/internal/atomic.Bool, *Pruntime/internal/atomic.Bool;

typedef struct []runtime.ancestorInfo []runtime.ancestorInfo, *P[]runtime.ancestorInfo;

typedef struct []uintptr []uintptr, *P[]uintptr;

typedef struct runtime.timer runtime.timer, *Pruntime.timer;

typedef struct runtime.goroutineProfileStateHolder runtime.goroutineProfileStateHolder, *Pruntime.goroutineProfileStateHolder;

typedef struct runtime.gTraceState runtime.gTraceState, *Pruntime.gTraceState;

typedef struct runtime.waitq runtime.waitq, *Pruntime.waitq;

typedef struct runtime.mutex runtime.mutex, *Pruntime.mutex;

typedef struct runtime.gsignalStack runtime.gsignalStack, *Pruntime.gsignalStack;

typedef uint32 runtime.sigset[2];

typedef uintptr runtime.cgoCallers[32];

typedef struct runtime.note runtime.note, *Pruntime.note;

typedef struct runtime.mTraceState runtime.mTraceState, *Pruntime.mTraceState;

typedef struct runtime.libcall runtime.libcall, *Pruntime.libcall;

typedef struct runtime.dlogPerM runtime.dlogPerM, *Pruntime.dlogPerM;

typedef struct runtime.mOS runtime.mOS, *Pruntime.mOS;

typedef struct runtime.heldLockInfo runtime.heldLockInfo, *Pruntime.heldLockInfo;

typedef struct runtime/internal/atomic.noCopy runtime/internal/atomic.noCopy, *Pruntime/internal/atomic.noCopy;

typedef struct runtime/internal/atomic.Uint8 runtime/internal/atomic.Uint8, *Pruntime/internal/atomic.Uint8;

typedef struct runtime.ancestorInfo runtime.ancestorInfo, *Pruntime.ancestorInfo;

typedef struct runtime.lockRankStruct runtime.lockRankStruct, *Pruntime.lockRankStruct;

struct runtime.heldLockInfo {
    uintptr lockAddr;
    runtime.lockRank rank;
};

struct runtime/internal/atomic.noCopy {
};

struct runtime.goroutineProfileStateHolder {
    struct runtime/internal/atomic.noCopy noCopy;
    uint32 value;
};

struct runtime.libcall {
    uintptr fn;
    uintptr n;
    uintptr args;
    uintptr r1;
    uintptr r2;
    uintptr err;
};

struct runtime.waitq {
    struct runtime.sudog *first;
    struct runtime.sudog *last;
};

struct runtime/internal/atomic.Uint8 {
    struct runtime/internal/atomic.noCopy noCopy;
    uint8 value;
};

struct runtime/internal/atomic.Bool {
    struct runtime/internal/atomic.Uint8 u;
};

struct runtime.stack {
    uintptr lo;
    uintptr hi;
};

struct runtime.mOS {
    int32 profileTimer;
    struct runtime/internal/atomic.Bool profileTimerValid;
    struct runtime/internal/atomic.Uint8 needPerThreadSyscall;
};

struct runtime.mTraceState {
    bool startingTrace;
    bool tracedSTWStart;
};

struct runtime.dlogPerM {
};

struct runtime.gsignalStack {
    struct runtime.stack stack;
    uintptr stackguard0;
    uintptr stackguard1;
    uintptr stktopsp;
};

struct []runtime.ancestorInfo {
    struct runtime.ancestorInfo *array;
    int len;
    int cap;
};

struct runtime._defer {
    bool started;
    bool heap;
    bool openDefer;
    uintptr sp;
    uintptr pc;
    void (**fn)(void);
    struct runtime._panic *_panic;
    struct runtime._defer *link;
    void *fd;
    uintptr varp;
    uintptr framepc;
};

struct runtime.lockRankStruct {
};

struct sudog<time.Time> {
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    struct time.Time *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

struct runtime/internal/atomic.Uint32 {
    struct runtime/internal/atomic.noCopy noCopy;
    uint32 value;
};

struct runtime.timer {
    runtime.puintptr pp;
    int64 when;
    int64 period;
    void (**f)(interface_{}, uintptr);
    interface_{} arg;
    uintptr seq;
    int64 nextwhen;
    struct runtime/internal/atomic.Uint32 status;
};

struct runtime.gTraceState {
    runtime.traceTime sysExitTime;
    bool tracedSyscallEnter;
    uint64 seq;
    runtime.puintptr lastP;
};

struct runtime._panic {
    void *argp;
    interface_{} arg;
    struct runtime._panic *link;
    uintptr pc;
    void *sp;
    bool recovered;
    bool aborted;
    bool goexit;
};

struct runtime.gobuf {
    uintptr sp;
    uintptr pc;
    runtime.guintptr g;
    void *ctxt;
    uintptr ret;
    uintptr lr;
    uintptr bp;
};

struct []uintptr {
    uintptr *array;
    int len;
    int cap;
};

struct runtime.ancestorInfo {
    struct []uintptr pcs;
    uint64 goid;
    uintptr gopc;
};

struct runtime.sudog {
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    void *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

struct runtime.note {
    uintptr key;
};

struct runtime.mutex {
    struct runtime.lockRankStruct lockRankStruct;
    uintptr key;
};

struct runtime.hchan {
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct runtime.waitq recvq;
    struct runtime.waitq sendq;
    struct runtime.mutex lock;
};

struct runtime.m {
    struct runtime.g *g0;
    struct runtime.gobuf morebuf;
    uint32 divmod;
    uint32 _;
    uint64 procid;
    struct runtime.g *gsignal;
    struct runtime.gsignalStack goSigStack;
    runtime.sigset sigmask;
    uintptr tls[6];
    void (**mstartfn)(void);
    struct runtime.g *curg;
    runtime.guintptr caughtsig;
    runtime.puintptr p;
    runtime.puintptr nextp;
    runtime.puintptr oldp;
    int64 id;
    int32 mallocing;
    runtime.throwType throwing;
    struct string preemptoff;
    int32 locks;
    int32 dying;
    int32 profilehz;
    bool spinning;
    bool blocked;
    bool newSigstack;
    int8 printlock;
    bool incgo;
    bool isextra;
    bool isExtraInC;
    struct runtime/internal/atomic.Uint32 freeWait;
    uint64 fastrand;
    bool needextram;
    uint8 traceback;
    uint64 ncgocall;
    int32 ncgo;
    struct runtime/internal/atomic.Uint32 cgoCallersUse;
    runtime.cgoCallers *cgoCallers;
    struct runtime.note park;
    struct runtime.m *alllink;
    runtime.muintptr schedlink;
    runtime.guintptr lockedg;
    uintptr createstack[32];
    uint32 lockedExt;
    uint32 lockedInt;
    runtime.muintptr nextwaitm;
    void (**waitunlockf)(struct runtime.g *, void *, bool *);
    void *waitlock;
    runtime.traceBlockReason waitTraceBlockReason;
    int waitTraceSkip;
    uint32 syscalltick;
    struct runtime.m *freelink;
    struct runtime.mTraceState trace;
    struct runtime.libcall libcall;
    uintptr libcallpc;
    uintptr libcallsp;
    runtime.guintptr libcallg;
    struct runtime.libcall syscall;
    uintptr vdsoSP;
    uintptr vdsoPC;
    struct runtime/internal/atomic.Uint32 preemptGen;
    struct runtime/internal/atomic.Uint32 signalPending;
    struct runtime.dlogPerM dlogPerM;
    struct runtime.mOS mOS;
    int locksHeldLen;
    struct runtime.heldLockInfo locksHeld[10];
};

struct runtime.g {
    struct runtime.stack stack;
    uintptr stackguard0;
    uintptr stackguard1;
    struct runtime._panic *_panic;
    struct runtime._defer *_defer;
    struct runtime.m *m;
    struct runtime.gobuf sched;
    uintptr syscallsp;
    uintptr syscallpc;
    uintptr stktopsp;
    void *param;
    struct runtime/internal/atomic.Uint32 atomicstatus;
    uint32 stackLock;
    uint64 goid;
    runtime.guintptr schedlink;
    int64 waitsince;
    runtime.waitReason waitreason;
    bool preempt;
    bool preemptStop;
    bool preemptShrink;
    bool asyncSafePoint;
    bool paniconfault;
    bool gcscandone;
    bool throwsplit;
    bool activeStackChans;
    struct runtime/internal/atomic.Bool parkingOnChan;
    int8 raceignore;
    bool tracking;
    uint8 trackingSeq;
    int64 trackingStamp;
    int64 runnableTime;
    runtime.muintptr lockedm;
    uint32 sig;
    struct []uint8 writebuf;
    uintptr sigcode0;
    uintptr sigcode1;
    uintptr sigpc;
    uint64 parentGoid;
    uintptr gopc;
    struct []runtime.ancestorInfo *ancestors;
    uintptr startpc;
    uintptr racectx;
    struct runtime.sudog *waiting;
    struct []uintptr cgoCtxt;
    void *labels;
    struct runtime.timer *timer;
    struct runtime/internal/atomic.Uint32 selectDone;
    struct runtime.goroutineProfileStateHolder goroutineProfiled;
    struct runtime.gTraceState trace;
    int64 gcAssistBytes;
};

typedef struct google.golang.org/protobuf/internal/filedesc.EnumValues google.golang.org/protobuf/internal/filedesc.EnumValues, *Pgoogle.golang.org/protobuf/internal/filedesc.EnumValues;

