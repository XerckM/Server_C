          ~r0_04.tab = in_stack_ffffffffffffff38;
          reflect_Value_typeSlow(v_14,~r0_04);
          puVar7 = extraout_RAX_06;
          pvVar3 = extraout_RBX_05;
        }
        (**(code **)(puVar7 + 0xf8))(pvVar3);
        a1.len = (int)in_stack_ffffffffffffff38;
        a1.str = in_stack_ffffffffffffff30;
        a2.len = in_stack_ffffffffffffff48;
        a2.str = in_stack_ffffffffffffff40;
        ~r0_11.len._7_1_ = in_stack_ffffffffffffff5f;
        ~r0_11._0_15_ = in_stack_ffffffffffffff50;
        runtime_concatstring3((runtime_tmpBuf *)0x0,(string)in_stack_ffffffffffffff20,a1,a2,~r0_11);
        runtime_convTstring((string)in_stack_ffffffffffffff20,x);
                    // WARNING: Subroutine does not return
        runtime_gopanic(in_stack_ffffffffffffff20);
      case 0x12:
      case 0x16:
      case 0x1a:
        v_09.flag = (reflect_flag)in_stack_ffffffffffffff30;
        v_09.typ_ = in_stack_ffffffffffffff20._type;
        v_09.ptr = in_stack_ffffffffffffff20.data;
        reflect_Value_Pointer(v_09,(uintptr)local_30);
        v_10.flag = (reflect_flag)in_stack_ffffffffffffff30;
        v_10.typ_ = in_stack_ffffffffffffff20._type;
        v_10.ptr = in_stack_ffffffffffffff20.data;
        reflect_Value_Pointer(v_10,(uintptr)local_38);
        return;
      default:
                    // WARNING: Subroutine does not return
        runtime_gopanic(in_stack_ffffffffffffff20);
      case 0x18:
        iVar4 = local_28[1];
        if (local_58 == 0x18) {
          iVar5 = *(int *)(local_20 + 8);
        }
        else {
          v_07.flag = (reflect_flag)in_stack_ffffffffffffff30;
          v_07.typ_ = in_stack_ffffffffffffff20._type;
          v_07.ptr = in_stack_ffffffffffffff20.data;
          ~r0_03.len = (int)in_stack_ffffffffffffff40;
          ~r0_03.str = (uint8 *)in_stack_ffffffffffffff38;
          local_48 = *local_28;
          reflect_Value_stringNonString(v_07,~r0_03);
          iVar5 = extraout_RBX_04;
        }
        if (iVar5 == iVar4) {
          runtime_memequal();
        }
        return;
      case 0x19:
        v_08.flag = (reflect_flag)in_stack_ffffffffffffff30;
        v_08.typ_ = in_stack_ffffffffffffff20._type;
        v_08.ptr = in_stack_ffffffffffffff20.data;
        reflect_Value_NumField(v_08,(int)local_30);
        iVar4 = 0;
        while( true ) {
          if (extraout_RAX_05 <= iVar4) {
            return;
          }
          v_11.flag = (reflect_flag)in_stack_ffffffffffffff30;
          v_11.typ_ = in_stack_ffffffffffffff20._type;
          v_11.ptr = in_stack_ffffffffffffff20.data;
          ~r0_07.ptr = in_stack_ffffffffffffff40;
          ~r0_07.typ_ = (internal_abi_Type *)in_stack_ffffffffffffff38;
          ~r0_07.flag = in_stack_ffffffffffffff48;
          reflect_Value_Field(v_11,(int)local_30,~r0_07);
          v_12.flag = (reflect_flag)in_stack_ffffffffffffff30;
          v_12.typ_ = in_stack_ffffffffffffff20._type;
          v_12.ptr = in_stack_ffffffffffffff20.data;
          ~r0_08.ptr = in_stack_ffffffffffffff40;
          ~r0_08.typ_ = (internal_abi_Type *)in_stack_ffffffffffffff38;
          ~r0_08.flag = in_stack_ffffffffffffff48;
          local_50 = extraout_RCX_01;
          local_18._0_1_ = extraout_AL_00;
          reflect_Value_Field(v_12,(int)local_38,~r0_08);
          v_13.flag = (reflect_flag)in_stack_ffffffffffffff30;
          v_13.typ_ = in_stack_ffffffffffffff20._type;
          v_13.ptr = in_stack_ffffffffffffff20.data;
          u_00.ptr = in_stack_ffffffffffffff40;
          u_00.typ_ = (internal_abi_Type *)in_stack_ffffffffffffff38;
          u_00.flag = in_stack_ffffffffffffff48;
          reflect_Value_Equal(v_13,u_00,(bool)local_18._0_1_);
          if (extraout_AL_01 == '\0') break;
          iVar4 = iVar4 + 1;
        }
        return;
      }
    }
  }
  return;
switchD_004e11a6_caseD_2:
  if (local_50 < 4) {
    if ((local_50 != 2) && (local_50 != 3)) {
LAB_004e18eb:
      runtime_newobject((internal_abi_Type *)&DAT_00850d80,local_28);
      extraout_RAX_14[1] = 0x11;
      *extraout_RAX_14 = &DAT_008b6deb;
      extraout_RAX_14[2] = local_50;
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffff20);
    }
  }
  else if (((local_50 != 4) && (local_50 != 5)) && (local_50 != 6)) goto LAB_004e18eb;
  if (local_58 < 4) {
    if ((local_58 != 2) && (local_58 != 3)) {
LAB_004e18b2:
      runtime_newobject((internal_abi_Type *)&DAT_00850d80,local_28);
      extraout_RAX_13[1] = 0x11;
      *extraout_RAX_13 = &DAT_008b6deb;
      extraout_RAX_13[2] = local_58;
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffff20);
    }
  }
  else if (((local_58 != 4) && (local_58 != 5)) && (local_58 != 6)) goto LAB_004e18b2;
  return;
}



// WARNING: Removing unreachable block (ram,0x004e1ca0)
// WARNING: Removing unreachable block (ram,0x004e1cac)
// WARNING: Removing unreachable block (ram,0x004e1cb8)
// WARNING: Removing unreachable block (ram,0x004e1cbe)
// WARNING: Removing unreachable block (ram,0x004e1cb2)
// WARNING: Removing unreachable block (ram,0x004e1c93)
// WARNING: Removing unreachable block (ram,0x004e1cc4)
// WARNING: Removing unreachable block (ram,0x004e1c99)
// WARNING: Removing unreachable block (ram,0x004e1ca6)
// Local variable tt:internal/abi.ArrayType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_1:internal/abi.ChanType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_2:internal/abi.MapType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_3:internal/abi.PtrType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_4:internal/abi.SliceType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_5:internal/abi.ArrayType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_6:internal/abi.ChanType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_7:internal/abi.MapType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_8:internal/abi.PtrType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_9:internal/abi.SliceType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_10:internal/abi.ArrayType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_11:internal/abi.ChanType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_12:internal/abi.MapType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_13:internal/abi.PtrType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_14:internal/abi.SliceType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_15:internal/abi.ArrayType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_16:internal/abi.ChanType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_17:internal/abi.MapType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_18:internal/abi.PtrType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_19:internal/abi.SliceType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_20:internal/abi.ArrayType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_21:internal/abi.ChanType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_22:internal/abi.MapType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_23:internal/abi.PtrType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_24:internal/abi.SliceType *[RBX:8] conflicts with parameter, skipped.
// Local variable tt_25:internal/abi.ArrayType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_26:internal/abi.ChanType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_27:internal/abi.MapType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_28:internal/abi.PtrType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_29:internal/abi.SliceType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_30:internal/abi.ArrayType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_31:internal/abi.ChanType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_32:internal/abi.MapType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_33:internal/abi.PtrType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_34:internal/abi.SliceType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_35:internal/abi.ArrayType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_36:internal/abi.ChanType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_37:internal/abi.MapType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_38:internal/abi.PtrType *[RAX:8] conflicts with parameter, skipped.
// Local variable tt_39:internal/abi.SliceType *[RAX:8] conflicts with parameter, skipped.

void reflect_convertOp(internal_abi_Type *dst,internal_abi_Type *src,
                      func_reflect_Value__reflect_Type__reflect_Value **~r0)

{
  char extraout_AL;
  char extraout_AL_00;
  char extraout_AL_01;
  char extraout_AL_02;
  internal_abi_Type *T;
  internal_abi_Type *V;
  undefined extraout_CL;
  func_reflect_Value__reflect_Type__reflect_Value **extraout_RCX;
  byte bVar1;
  uint uVar2;
  uintptr uVar3;
  int extraout_RBX;
  int extraout_RBX_00;
  int extraout_RBX_01;
  int extraout_RBX_02;
  internal_abi_Type *~r0_00;
  byte ~r0_01;
  undefined extraout_DIL;
  byte extraout_DIL_00;
  byte extraout_DIL_01;
  bool ~r0_02;
  undefined8 in_RDI;
  undefined8 extraout_RDI;
  byte bVar4;
  int unaff_R14;
  bool bVar5;
  undefined ~r0_03;
  internal_abi_Type *piStack0000000000000008;
  internal_abi_Type *piStack0000000000000010;
  string in_stack_ffffffffffffffd8;
  
  piStack0000000000000008 = dst;
  piStack0000000000000010 = src;
  while (~r0_01 = (byte)in_RDI, &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    ~r0 = extraout_RCX;
    in_RDI = extraout_RDI;
  }
  uVar2 = (uint)(piStack0000000000000010->Kind_ & 0x1f);
  if (uVar2 < 0xf) {
    if (uVar2 - 2 < 5) {
      uVar2 = (uint)(piStack0000000000000008->Kind_ & 0x1f);
      if (uVar2 - 2 < 0xb) {
        return;
      }
      if (uVar2 - 0xd < 2) {
        return;
      }
      if (uVar2 == 0x18) {
        return;
      }
    }
    else if (uVar2 - 7 < 6) {
      uVar2 = (uint)(piStack0000000000000008->Kind_ & 0x1f);
      if (uVar2 - 2 < 0xb) {
        return;
      }
      if (uVar2 - 0xd < 2) {
        return;
      }
      if (uVar2 == 0x18) {
        return;
      }
    }
    else if (0xc < uVar2) {
      uVar2 = (uint)(piStack0000000000000008->Kind_ & 0x1f);
      if (uVar2 - 2 < 5) {
        return;
      }
      if (uVar2 - 7 < 6) {
        return;
      }
      if (uVar2 - 0xd < 2) {
        return;
      }
    }
    goto LAB_004e1e21;
  }
  if (uVar2 < 0x13) {
    if (uVar2 < 0x11) {
      if ((piStack0000000000000008->Kind_ & 0x1f) - 0xf < 2) {
        return;
      }
    }
    else if (((uVar2 == 0x12) && ((piStack0000000000000008->Kind_ & 0x1f) == 0x12)) &&
            (reflect_specialChannelAssignability
                       (piStack0000000000000008,piStack0000000000000010,SUB81(~r0,0)),
            ~r0_01 = extraout_DIL, extraout_AL != '\0')) {
      return;
    }
    goto LAB_004e1e21;
  }
  if (uVar2 != 0x17) {
    if (uVar2 != 0x18) goto LAB_004e1e21;
    if ((piStack0000000000000008->Kind_ & 0x1f) == 0x17) {
      reflect___rtype__PkgPath
                ((reflect_rtype *)piStack0000000000000008[1].Size_,in_stack_ffffffffffffffd8);
      bVar5 = extraout_RBX_00 == 0;
      ~r0_01 = extraout_DIL_01;
    }
    else {
      bVar5 = false;
    }
    if (!bVar5) goto LAB_004e1e21;
    bVar1 = piStack0000000000000008->Kind_ & 0x1f;
    if (bVar1 < 0x13) {
      if (bVar1 == 0x11) {
        uVar3 = piStack0000000000000008[1].Size_;
      }
      else if (bVar1 == 0x12) {
        uVar3 = piStack0000000000000008[1].Size_;
      }
      else {
LAB_004e1dec:
        uVar3 = 0;
      }
    }
    else if (bVar1 == 0x15) {
      uVar3 = piStack0000000000000008[1].PtrBytes;
    }
    else if (bVar1 == 0x16) {
      uVar3 = piStack0000000000000008[1].Size_;
    }
    else {
      if (bVar1 != 0x17) goto LAB_004e1dec;
      uVar3 = piStack0000000000000008[1].Size_;
    }
    bVar1 = *(byte *)(uVar3 + 0x17) & 0x1f;
    if (bVar1 == 5) {
      return;
    }
    if (bVar1 == 8) {
      return;
    }
    goto LAB_004e1e21;
  }
  if ((piStack0000000000000008->Kind_ & 0x1f) == 0x18) {
    reflect___rtype__PkgPath
              ((reflect_rtype *)piStack0000000000000010[1].Size_,in_stack_ffffffffffffffd8);
    bVar5 = extraout_RBX == 0;
    ~r0_01 = extraout_DIL_00;
  }
  else {
    bVar5 = false;
  }
  if (bVar5) {
    bVar1 = piStack0000000000000010->Kind_ & 0x1f;
    if (bVar1 < 0x13) {
      if (bVar1 == 0x11) {
        uVar3 = piStack0000000000000010[1].Size_;
      }
      else if (bVar1 == 0x12) {
        uVar3 = piStack0000000000000010[1].Size_;
      }
      else {
LAB_004e1bd8:
        uVar3 = 0;
      }
    }
    else if (bVar1 == 0x15) {
      uVar3 = piStack0000000000000010[1].PtrBytes;
    }
    else if (bVar1 == 0x16) {
      uVar3 = piStack0000000000000010[1].Size_;
    }
    else {
      if (bVar1 != 0x17) goto LAB_004e1bd8;
      uVar3 = piStack0000000000000010[1].Size_;
    }
    bVar1 = *(byte *)(uVar3 + 0x17) & 0x1f;
    if (bVar1 == 5) {
      return;
    }
    if (bVar1 == 8) {
      return;
    }
  }
  bVar1 = piStack0000000000000008->Kind_ & 0x1f;
  if (bVar1 == 0x16) {
    ~r0_01 = *(byte *)(piStack0000000000000008[1].Size_ + 0x17) & 0x1f;
    if (~r0_01 == 0x11) {
      bVar4 = piStack0000000000000010->Kind_ & 0x1f;
      if (bVar4 < 0x13) {
        if (bVar4 == 0x11) {
          uVar3 = piStack0000000000000010[1].Size_;
        }
        else if (bVar4 == 0x12) {
          uVar3 = piStack0000000000000010[1].Size_;
        }
        else {
LAB_004e1c7c:
          uVar3 = 0;
        }
      }
      else if (bVar4 == 0x15) {
        uVar3 = piStack0000000000000010[1].PtrBytes;
      }
      else if (bVar4 == 0x16) {
        uVar3 = piStack0000000000000010[1].Size_;
      }
      else {
        if (bVar4 != 0x17) goto LAB_004e1c7c;
        uVar3 = piStack0000000000000010[1].Size_;
      }
      if (uVar3 == *(uintptr *)(piStack0000000000000008[1].Size_ + 0x30)) {
        return;
      }
    }
  }
  if (bVar1 != 0x11) goto LAB_004e1e21;
  bVar1 = piStack0000000000000010->Kind_ & 0x1f;
  if (bVar1 < 0x13) {
    if (bVar1 == 0x11) {
      uVar3 = piStack0000000000000010[1].Size_;
    }
    else if (bVar1 == 0x12) {
      uVar3 = piStack0000000000000010[1].Size_;
    }
    else {
LAB_004e1d38:
      uVar3 = 0;
    }
  }
  else if (bVar1 == 0x15) {
    uVar3 = piStack0000000000000010[1].PtrBytes;
  }
  else if (bVar1 == 0x16) {
    uVar3 = piStack0000000000000010[1].Size_;
  }
  else {
    if (bVar1 != 0x17) goto LAB_004e1d38;
    uVar3 = piStack0000000000000010[1].Size_;
  }
  if (piStack0000000000000008[1].Size_ == uVar3) {
    return;
  }
LAB_004e1e21:
  reflect_haveIdenticalUnderlyingType
            (piStack0000000000000008,piStack0000000000000010,false,(bool)~r0_01);
  if (extraout_AL_00 != '\0') {
    return;
  }
  if ((piStack0000000000000008->Kind_ & 0x1f) == 0x16) {
    reflect___rtype__Name((reflect_rtype *)piStack0000000000000008,in_stack_ffffffffffffffd8);
    bVar5 = extraout_RBX_01 == 0;
  }
  else {
    bVar5 = false;
  }
  if (bVar5) {
    if ((piStack0000000000000010->Kind_ & 0x1f) == 0x16) {
      reflect___rtype__Name((reflect_rtype *)piStack0000000000000010,in_stack_ffffffffffffffd8);
      ~r0_03 = extraout_RBX_02 == 0;
    }
    else {
      ~r0_03 = false;
    }
  }
  else {
    ~r0_03 = false;
  }
  if ((bool)~r0_03 != false) {
    reflect_elem(piStack0000000000000008,piStack0000000000000010);
    reflect_elem(piStack0000000000000010,~r0_00);
    reflect_haveIdenticalUnderlyingType(T,V,false,~r0_02);
    ~r0_03 = extraout_CL;
    if (extraout_AL_01 != '\0') {
      return;
    }
  }
  reflect_implements(piStack0000000000000008,piStack0000000000000010,(bool)~r0_03);
  if (extraout_AL_02 != '\0') {
    if ((piStack0000000000000010->Kind_ & 0x1f) == 0x14) {
      return;
    }
    return;
  }
  return;
}



void reflect_makeInt(reflect_flag f,uint64 bits,reflect_Type t,reflect_Value ~r0)

{
  uint uVar1;
  internal_abi_Type *typ;
  uint64 *extraout_RAX;
  void *ptr;
  int in_RCX;
  undefined8 in_RDI;
  int unaff_R14;
  undefined auVar2 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  auVar2 = (**(code **)(in_RCX + 0x100))(in_RDI);
  reflect_unsafe_New(auVar2._0_8_,auVar2._8_8_);
  uVar1 = (auVar2._0_8_)->Size_;
  if (uVar1 < 3) {
    if (uVar1 == 1) {
      *(char *)extraout_RAX = (char)bits;
    }
    else if (uVar1 == 2) {
      *(short *)extraout_RAX = (short)bits;
    }
  }
  else if (uVar1 == 4) {
    *(sdword *)extraout_RAX = (sdword)bits;
  }
  else if (uVar1 == 8) {
    *extraout_RAX = bits;
  }
  return;
}



void reflect_makeFloat(reflect_flag f,float64 v,reflect_Type t,reflect_Value ~r0)

{
  uintptr uVar1;
  internal_abi_Type *typ;
  float64 *extraout_RAX;
  void *ptr;
  undefined8 in_RCX;
  int in_RBX;
  int unaff_R14;
  undefined auVar2 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  auVar2 = (**(code **)(in_RBX + 0x100))(in_RCX);
  reflect_unsafe_New(auVar2._0_8_,auVar2._8_8_);
  uVar1 = (auVar2._0_8_)->Size_;
  if (uVar1 == 4) {
    *(float *)extraout_RAX = (float)(double)v;
  }
  else if (uVar1 == 8) {
    *extraout_RAX = v;
  }
  return;
}



void reflect_makeFloat32(reflect_flag f,float32 v,reflect_Type t,reflect_Value ~r0)

{
  internal_abi_Type *typ;
  float32 *extraout_RAX;
  void *ptr;
  undefined8 in_RCX;
  int in_RBX;
  int unaff_R14;
  undefined auVar1 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  auVar1 = (**(code **)(in_RBX + 0x100))(in_RCX);
  reflect_unsafe_New(auVar1._0_8_,auVar1._8_8_);
  *extraout_RAX = v;
  return;
}



void reflect_makeComplex(reflect_flag f,complex128 v,reflect_Type t,reflect_Value ~r0)

{
  uintptr uVar1;
  internal_abi_Type *typ;
  double *extraout_RAX;
  void *ptr;
  undefined8 in_RCX;
  int in_RBX;
  int unaff_R14;
  double in_XMM0_Qa;
  double in_XMM1_Qa;
  undefined auVar2 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  auVar2 = (**(code **)(in_RBX + 0x100))(in_RCX);
  reflect_unsafe_New(auVar2._0_8_,auVar2._8_8_);
  uVar1 = (auVar2._0_8_)->Size_;
  if (uVar1 == 8) {
    *(float *)extraout_RAX = (float)in_XMM0_Qa;
    *(float *)((int)extraout_RAX + 4) = (float)in_XMM1_Qa;
  }
  else if (uVar1 == 0x10) {
    *extraout_RAX = in_XMM0_Qa;
    extraout_RAX[1] = in_XMM1_Qa;
  }
  return;
}



void reflect_makeString(reflect_flag f,string v,reflect_Type t,reflect_Value ~r0)

{
  reflect_Value v_00;
  reflect_Value v_01;
  reflect_Value ~r0_00;
  reflect_Value ~r0_01;
  int unaff_R14;
  reflect_Type in_stack_ffffffffffffffb8;
  internal_abi_Type *in_stack_ffffffffffffffc8;
  string in_stack_ffffffffffffffd0;
  reflect_flag in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ~r0_00.ptr = in_stack_ffffffffffffffd0.str;
  ~r0_00.flag = in_stack_ffffffffffffffd0.len;
  ~r0_00.typ_ = in_stack_ffffffffffffffc8;
  reflect_New(in_stack_ffffffffffffffb8,~r0_00);
  v_00.flag = (reflect_flag)in_stack_ffffffffffffffc8;
  v_00.typ_ = (internal_abi_Type *)in_stack_ffffffffffffffb8.tab;
  v_00.ptr = in_stack_ffffffffffffffb8.data;
  ~r0_01.flag = in_stack_ffffffffffffffe0;
  ~r0_01.typ_ = (internal_abi_Type *)in_stack_ffffffffffffffd0.str;
  ~r0_01.ptr = (void *)in_stack_ffffffffffffffd0.len;
  reflect_Value_Elem(v_00,~r0_01);
  v_01.flag = (reflect_flag)in_stack_ffffffffffffffc8;
  v_01.typ_ = (internal_abi_Type *)in_stack_ffffffffffffffb8.tab;
  v_01.ptr = in_stack_ffffffffffffffb8.data;
  reflect_Value_SetString(v_01,in_stack_ffffffffffffffd0);
  return;
}



void reflect_makeBytes(reflect_flag f,__uint8 v,reflect_Type t,reflect_Value ~r0)

{
  reflect_Value v_00;
  reflect_Value v_01;
  reflect_Value ~r0_00;
  reflect_Value ~r0_01;
  __uint8 x;
  int unaff_R14;
  reflect_Type in_stack_ffffffffffffffb0;
  internal_abi_Type *in_stack_ffffffffffffffc0;
  undefined in_stack_ffffffffffffffc8 [16];
  reflect_flag in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ~r0_00.ptr = (void *)in_stack_ffffffffffffffc8._0_8_;
  ~r0_00.flag = in_stack_ffffffffffffffc8._8_8_;
  ~r0_00.typ_ = in_stack_ffffffffffffffc0;
  reflect_New(in_stack_ffffffffffffffb0,~r0_00);
  v_00.flag = (reflect_flag)in_stack_ffffffffffffffc0;
  v_00.typ_ = (internal_abi_Type *)in_stack_ffffffffffffffb0.tab;
  v_00.ptr = in_stack_ffffffffffffffb0.data;
  ~r0_01.flag = in_stack_ffffffffffffffd8;
  ~r0_01.typ_ = (internal_abi_Type *)in_stack_ffffffffffffffc8._0_8_;
  ~r0_01.ptr = (void *)in_stack_ffffffffffffffc8._8_8_;
  reflect_Value_Elem(v_00,~r0_01);
  v_01.flag = (reflect_flag)in_stack_ffffffffffffffc0;
  v_01.typ_ = (internal_abi_Type *)in_stack_ffffffffffffffb0.tab;
  v_01.ptr = in_stack_ffffffffffffffb0.data;
  x.cap = in_stack_ffffffffffffffd8;
  x.array = (uint8 *)in_stack_ffffffffffffffc8._0_8_;
  x.len = in_stack_ffffffffffffffc8._8_8_;
  reflect_Value_SetBytes(v_01,x);
  return;
}



void reflect_makeRunes(reflect_flag f,__int32 v,reflect_Type t,reflect_Value ~r0)

{
  reflect_Value v_00;
  reflect_Value v_01;
  reflect_Value ~r0_00;
  reflect_Value ~r0_01;
  __int32 x;
  int unaff_R14;
  reflect_Type in_stack_ffffffffffffffb0;
  internal_abi_Type *in_stack_ffffffffffffffc0;
  undefined in_stack_ffffffffffffffc8 [16];
  reflect_flag in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ~r0_00.ptr = (void *)in_stack_ffffffffffffffc8._0_8_;
  ~r0_00.flag = in_stack_ffffffffffffffc8._8_8_;
  ~r0_00.typ_ = in_stack_ffffffffffffffc0;
  reflect_New(in_stack_ffffffffffffffb0,~r0_00);
  v_00.flag = (reflect_flag)in_stack_ffffffffffffffc0;
  v_00.typ_ = (internal_abi_Type *)in_stack_ffffffffffffffb0.tab;
  v_00.ptr = in_stack_ffffffffffffffb0.data;
  ~r0_01.flag = in_stack_ffffffffffffffd8;
  ~r0_01.typ_ = (internal_abi_Type *)in_stack_ffffffffffffffc8._0_8_;
  ~r0_01.ptr = (void *)in_stack_ffffffffffffffc8._8_8_;
  reflect_Value_Elem(v_00,~r0_01);
  v_01.flag = (reflect_flag)in_stack_ffffffffffffffc0;
  v_01.typ_ = (internal_abi_Type *)in_stack_ffffffffffffffb0.tab;
  v_01.ptr = in_stack_ffffffffffffffb0.data;
  x.cap = in_stack_ffffffffffffffd8;
  x.array = (int32 *)in_stack_ffffffffffffffc8._0_8_;
  x.len = in_stack_ffffffffffffffc8._8_8_;
  reflect_Value_setRunes(v_01,x);
  return;
}



void reflect_cvtInt(reflect_Value v,reflect_Type t,reflect_Value ~r0)

{
  reflect_Value ~r0_00;
  reflect_flag f;
  undefined8 *extraout_RAX;
  dword in_ECX;
  uint uVar1;
  reflect_Kind k;
  uint64 bits;
  uint64 *in_RBX;
  void *p;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffd0;
  undefined in_stack_ffffffffffffffe0 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar1 = (uint)(in_ECX & 0x1f);
  f = 0;
  if ((in_ECX & 0x60) != 0) {
    f = 0x20;
  }
  if (uVar1 < 4) {
    if (uVar1 == 2) {
      bits = *in_RBX;
    }
    else {
      if (uVar1 != 3) {
LAB_004e25dd:
        runtime_newobject((internal_abi_Type *)&DAT_00850d80,in_RBX);
        extraout_RAX[1] = 0x11;
        *extraout_RAX = &DAT_008b6deb;
        extraout_RAX[2] = uVar1;
                    // WARNING: Subroutine does not return
        runtime_gopanic(in_stack_ffffffffffffffd0);
      }
      bits = (uint64)*(char *)in_RBX;
    }
  }
  else if (uVar1 == 4) {
    bits = (uint64)*(short *)in_RBX;
  }
  else if (uVar1 == 5) {
    bits = (uint64)*(sdword *)in_RBX;
  }
  else {
    if (uVar1 != 6) goto LAB_004e25dd;
    bits = *in_RBX;
  }
  ~r0_00.flag._0_4_ = in_ECX & 0x1f;
  ~r0_00.typ_ = (internal_abi_Type *)in_stack_ffffffffffffffe0._0_8_;
  ~r0_00.ptr = (void *)in_stack_ffffffffffffffe0._8_8_;
  ~r0_00.flag._4_4_ = 0;
  reflect_makeInt(f,bits,(reflect_Type)in_stack_ffffffffffffffd0,~r0_00);
  return;
}



void reflect_cvtUint(reflect_Value v,reflect_Type t,reflect_Value ~r0)

{
  reflect_Value ~r0_00;
  reflect_flag f;
  undefined8 *extraout_RAX;
  dword in_ECX;
  uint uVar1;
  reflect_Kind k;
  uint64 bits;
  uint64 *in_RBX;
  void *p;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffd0;
  undefined in_stack_ffffffffffffffe0 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar1 = (uint)(in_ECX & 0x1f);
  f = 0;
  if ((in_ECX & 0x60) != 0) {
    f = 0x20;
  }
  if (uVar1 < 10) {
    if (uVar1 == 7) {
      bits = *in_RBX;
    }
    else if (uVar1 == 8) {
      bits = (uint64)*(byte *)in_RBX;
    }
    else {
      if (uVar1 != 9) {
LAB_004e2701:
        runtime_newobject((internal_abi_Type *)&DAT_00850d80,in_RBX);
        extraout_RAX[1] = 0x12;
        *extraout_RAX = &DAT_008b7823;
        extraout_RAX[2] = uVar1;
                    // WARNING: Subroutine does not return
        runtime_gopanic(in_stack_ffffffffffffffd0);
      }
      bits = (uint64)*(ushort *)in_RBX;
    }
  }
  else if (uVar1 == 10) {
    bits = (uint64)*(dword *)in_RBX;
  }
  else if (uVar1 == 0xb) {
    bits = *in_RBX;
  }
  else {
    if (uVar1 != 0xc) goto LAB_004e2701;
    bits = *in_RBX;
  }
  ~r0_00.flag._0_4_ = in_ECX & 0x1f;
  ~r0_00.typ_ = (internal_abi_Type *)in_stack_ffffffffffffffe0._0_8_;
  ~r0_00.ptr = (void *)in_stack_ffffffffffffffe0._8_8_;
  ~r0_00.flag._4_4_ = 0;
  reflect_makeInt(f,bits,(reflect_Type)in_stack_ffffffffffffffd0,~r0_00);
  return;
}



void reflect_cvtFloatInt(reflect_Value v,reflect_Type t,reflect_Value ~r0)

{
  reflect_Value ~r0_00;
  reflect_flag f;
  undefined8 *extraout_RAX;
  dword in_ECX;
  uint uVar1;
  reflect_Kind k;
  double *in_RBX;
  int unaff_R14;
  double dVar2;
  interface___ in_stack_ffffffffffffffd0;
  undefined in_stack_ffffffffffffffe0 [16];
  reflect_flag in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar1 = (uint)(in_ECX & 0x1f);
  f = 0;
  if ((in_ECX & 0x60) != 0) {
    f = 0x20;
  }
  if (uVar1 == 0xd) {
    dVar2 = (double)*(float *)in_RBX;
  }
  else {
    if (uVar1 != 0xe) {
      runtime_newobject((internal_abi_Type *)&DAT_00850d80,in_RBX);
      extraout_RAX[1] = 0x13;
      *extraout_RAX = &DAT_008b8160;
      extraout_RAX[2] = uVar1;
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffffd0);
    }
    dVar2 = *in_RBX;
  }
  ~r0_00.flag = in_stack_fffffffffffffff0;
  ~r0_00.typ_ = (internal_abi_Type *)in_stack_ffffffffffffffe0._0_8_;
  ~r0_00.ptr = (void *)in_stack_ffffffffffffffe0._8_8_;
  reflect_makeInt(f,(int)dVar2,(reflect_Type)in_stack_ffffffffffffffd0,~r0_00);
  return;
}



void reflect_cvtFloatUint(reflect_Value v,reflect_Type t,reflect_Value ~r0)

{
  reflect_Value ~r0_00;
  reflect_flag f;
  undefined8 *extraout_RAX;
  dword in_ECX;
  uint uVar1;
  reflect_Kind k;
  uint64 bits;
  double *in_RBX;
  int unaff_R14;
  double dVar2;
  interface___ in_stack_ffffffffffffffd0;
  undefined in_stack_ffffffffffffffe0 [16];
  reflect_flag in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar1 = (uint)(in_ECX & 0x1f);
  f = 0;
  if ((in_ECX & 0x60) != 0) {
    f = 0x20;
  }
  if (uVar1 == 0xd) {
    dVar2 = (double)*(float *)in_RBX;
  }
  else {
    if (uVar1 != 0xe) {
      runtime_newobject((internal_abi_Type *)&DAT_00850d80,in_RBX);
      extraout_RAX[1] = 0x13;
      *extraout_RAX = &DAT_008b8160;
      extraout_RAX[2] = uVar1;
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffffd0);
    }
    dVar2 = *in_RBX;
  }
  if (9.223372036854776e+18 <= dVar2) {
    bits = (int)(dVar2 - 9.223372036854776e+18) | 0x8000000000000000;
  }
  else {
    bits = (uint64)dVar2;
  }
  ~r0_00.flag = in_stack_fffffffffffffff0;
  ~r0_00.typ_ = (internal_abi_Type *)in_stack_ffffffffffffffe0._0_8_;
  ~r0_00.ptr = (void *)in_stack_ffffffffffffffe0._8_8_;
  reflect_makeInt(f,bits,(reflect_Type)in_stack_ffffffffffffffd0,~r0_00);
  return;
}



void reflect_cvtIntFloat(reflect_Value v,reflect_Type t,reflect_Value ~r0)

{
  reflect_Value ~r0_00;
  reflect_flag f;
  undefined8 *extraout_RAX;
  dword in_ECX;
  uint uVar1;
  reflect_Kind k;
  int iVar2;
  int *in_RBX;
  void *p;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffd0;
  undefined in_stack_ffffffffffffffe0 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar1 = (uint)(in_ECX & 0x1f);
  f = 0;
  if ((in_ECX & 0x60) != 0) {
    f = 0x20;
  }
  if (uVar1 < 4) {
    if (uVar1 == 2) {
      iVar2 = *in_RBX;
    }
    else {
      if (uVar1 != 3) {
LAB_004e2a42:
        runtime_newobject((internal_abi_Type *)&DAT_00850d80,in_RBX);
        extraout_RAX[1] = 0x11;
        *extraout_RAX = &DAT_008b6deb;
        extraout_RAX[2] = uVar1;
                    // WARNING: Subroutine does not return
        runtime_gopanic(in_stack_ffffffffffffffd0);
      }
      iVar2 = (int)*(char *)in_RBX;
    }
  }
  else if (uVar1 == 4) {
    iVar2 = (int)*(short *)in_RBX;
  }
  else if (uVar1 == 5) {
    iVar2 = (int)*(sdword *)in_RBX;
  }
  else {
    if (uVar1 != 6) goto LAB_004e2a42;
    iVar2 = *in_RBX;
  }
  ~r0_00.flag._0_4_ = in_ECX & 0x1f;
  ~r0_00.typ_ = (internal_abi_Type *)in_stack_ffffffffffffffe0._0_8_;
  ~r0_00.ptr = (void *)in_stack_ffffffffffffffe0._8_8_;
  ~r0_00.flag._4_4_ = 0;
  reflect_makeFloat(f,(float64)(double)iVar2,(reflect_Type)in_stack_ffffffffffffffd0,~r0_00);
  return;
}



void reflect_cvtUintFloat(reflect_Value v,reflect_Type t,reflect_Value ~r0)

{
  reflect_Value ~r0_00;
  reflect_flag f;
  undefined8 *extraout_RAX;
  dword in_ECX;
  uint uVar1;
  reflect_Kind k;
  uint *in_RBX;
  void *p;
  int unaff_R14;
  float64 v_00;
  double dVar2;
  interface___ in_stack_ffffffffffffffd0;
  undefined in_stack_ffffffffffffffe0 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
