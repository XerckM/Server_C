                    // WARNING: Subroutine does not return
    runtime_throw(in_stack_ffffffffffffffd0);
  }
  prVar5->pp = 0;
  uVar3 = (pp->timers).len;
  ~r0_00 = uVar3 - 1;
  if (i != ~r0_00) {
    if (uVar3 <= ~r0_00) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    pprVar4 = (pp->timers).array;
    prVar5 = pprVar4[uVar3 - 1];
    if (uVar3 <= (uint)i) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_R9;
      extraout_R11[1] = extraout_R8[extraout_RBX];
      pp = extraout_RAX;
      uVar3 = extraout_RCX;
      i = extraout_RBX;
      ~r0_00 = extraout_RSI;
      pprVar4 = extraout_R8;
      prVar5 = extraout_R9;
    }
    pprVar4[i] = prVar5;
  }
  if ((uint)(pp->timers).len <= ~r0_00) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  pprVar4 = (pp->timers).array;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11_00 = extraout_R9_00;
    pp = extraout_RAX_00;
    uVar3 = extraout_RCX_00;
    i = extraout_RBX_00;
    ~r0_00 = extraout_RSI_00;
    pprVar4 = extraout_R8_00;
  }
  pprVar4[uVar3 - 1] = (runtime_timer *)0x0;
  if ((uint)(pp->timers).cap < ~r0_00) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  (pp->timers).len = ~r0_00;
  if (i != ~r0_00) {
    t_00.cap = in_stack_ffffffffffffffe0;
    t_00.array = (runtime_timer **)in_stack_ffffffffffffffd0.str;
    t_00.len = in_stack_ffffffffffffffd0.len;
    runtime_siftupTimer(t_00,(int)(pp->timers).array,~r0_00);
    t_01.cap = in_stack_ffffffffffffffe0;
    t_01.array = (runtime_timer **)in_stack_ffffffffffffffd0.str;
    t_01.len = in_stack_ffffffffffffffd0.len;
    runtime_siftdownTimer(t_01,(int)(pp->timers).array);
  }
  if (i == 0) {
    if ((pp->timers).len == 0) {
      LOCK();
      (pp->timer0When).value = 0;
      UNLOCK();
    }
    else {
      LOCK();
      (pp->timer0When).value = (*(pp->timers).array)->when;
      UNLOCK();
    }
  }
  LOCK();
  prVar1 = &pp->numTimers;
  uVar2 = prVar1->value;
  prVar1->value = prVar1->value - 1;
  UNLOCK();
  if (uVar2 == 1) {
    LOCK();
    (pp->timerModifiedEarliest).value = 0;
    UNLOCK();
  }
  return;
}



// WARNING: Unknown calling convention

void runtime_dodeltimer0(runtime_p *pp)

{
  runtime_internal_atomic_Uint32 *prVar1;
  uint32 uVar2;
  ___runtime_timer t_00;
  runtime_p *extraout_RAX;
  runtime_p *extraout_RAX_00;
  uint32 n;
  int extraout_RCX;
  int extraout_RCX_00;
  int iVar3;
  int last;
  uint extraout_RBX;
  uint extraout_RBX_00;
  uint uVar4;
  runtime_timer *t;
  runtime_timer **extraout_RSI;
  runtime_timer **extraout_RSI_00;
  runtime_timer **pprVar5;
  runtime_timer *extraout_R8;
  runtime_timer *prVar6;
  undefined8 extraout_R8_00;
  runtime_timer **extraout_R11;
  undefined8 *extraout_R11_00;
  int unaff_R14;
  string in_stack_ffffffffffffffd8;
  int in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((pp->timers).len == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  prVar6 = *(pp->timers).array;
  if (pp != (runtime_p *)prVar6->pp) {
                    // WARNING: Subroutine does not return
    runtime_throw(in_stack_ffffffffffffffd8);
  }
  prVar6->pp = 0;
  iVar3 = (pp->timers).len;
  uVar4 = iVar3 - 1;
  if (0 < (int)uVar4) {
    pprVar5 = (pp->timers).array;
    prVar6 = pprVar5[iVar3 + -1];
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_R8;
      extraout_R11[1] = *extraout_RSI;
      pp = extraout_RAX;
      iVar3 = extraout_RCX;
      uVar4 = extraout_RBX;
      pprVar5 = extraout_RSI;
      prVar6 = extraout_R8;
    }
    *pprVar5 = prVar6;
  }
  if (uVar4 < (uint)(pp->timers).len) {
    pprVar5 = (pp->timers).array;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_00 = extraout_R8_00;
      pp = extraout_RAX_00;
      iVar3 = extraout_RCX_00;
      uVar4 = extraout_RBX_00;
      pprVar5 = extraout_RSI_00;
    }
    pprVar5[iVar3 + -1] = (runtime_timer *)0x0;
    if (uVar4 <= (uint)(pp->timers).cap) {
      (pp->timers).len = uVar4;
      if (0 < (int)uVar4) {
        t_00.cap = in_stack_ffffffffffffffe8;
        t_00.array = (runtime_timer **)in_stack_ffffffffffffffd8.str;
        t_00.len = in_stack_ffffffffffffffd8.len;
        runtime_siftdownTimer(t_00,(int)(pp->timers).array);
      }
      if ((pp->timers).len == 0) {
        LOCK();
        (pp->timer0When).value = 0;
        UNLOCK();
      }
      else {
        LOCK();
        (pp->timer0When).value = (*(pp->timers).array)->when;
        UNLOCK();
      }
      LOCK();
      prVar1 = &pp->numTimers;
      uVar2 = prVar1->value;
      prVar1->value = prVar1->value - 1;
      UNLOCK();
      if (uVar2 == 1) {
        LOCK();
        (pp->timerModifiedEarliest).value = 0;
        UNLOCK();
      }
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void runtime_modtimer(runtime_timer *t,int64 when,int64 period,func_interface_____uintptr_ **f,
                     interface___ arg,uintptr seq,bool ~r0)

{
  sdword *psVar1;
  runtime_mutex *l;
  int *piVar2;
  sdword sVar3;
  runtime_puintptr rVar4;
  runtime_p *pp_00;
  int iVar5;
  bool wasRemoved;
  char extraout_AL;
  char extraout_AL_00;
  int64 old;
  uint32 newStatus;
  bool pending;
  runtime_timer *extraout_RCX;
  runtime_timer *extraout_RCX_00;
  uint32 status;
  int64 extraout_RBX;
  int extraout_RBX_00;
  int when_00;
  internal_abi_Type *extraout_RSI;
  runtime_p *tpp;
  func_interface_____uintptr_ **extraout_RDI;
  undefined7 in_register_00000081;
  void *extraout_R8;
  void *extraout_R8_00;
  void *pvVar6;
  uintptr in_R9;
  uintptr extraout_R9;
  uintptr extraout_R9_00;
  runtime_m *mp;
  int extraout_R10;
  int extraout_R10_00;
  int iVar7;
  undefined8 *extraout_R11;
  void **extraout_R11_00;
  runtime_timer *prVar8;
  uint32 uVar9;
  int unaff_R14;
  runtime_g *gp;
  runtime_g *gp_1;
  runtime_g *gp_2;
  runtime_g *gp_3;
  runtime_g *gp_4;
  runtime_g *gp_5;
  runtime_g *gp_6;
  runtime_g *gp_7;
  int in_FS_OFFSET;
  bool bVar10;
  internal_abi_Type *piStack0000000000000028;
  void *pvStack0000000000000030;
  string in_stack_ffffffffffffffc0;
  runtime_p *pp;
  
  pvStack0000000000000030 = (void *)CONCAT71(in_register_00000081,~r0);
  while (piStack0000000000000028 = (internal_abi_Type *)seq,
        &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    seq = (uintptr)piStack0000000000000028;
  }
  if (when < 1) {
                    // WARNING: Subroutine does not return
    runtime_throw(in_stack_ffffffffffffffc0);
  }
  pvVar6 = pvStack0000000000000030;
  if (period < 0) {
                    // WARNING: Subroutine does not return
    runtime_throw(in_stack_ffffffffffffffc0);
  }
LAB_0045a0da:
  uVar9 = (t->status).value;
  switch(uVar9) {
  case 0:
  case 5:
    psVar1 = (sdword *)(*(int *)(unaff_R14 + 0x30) + 0x108);
    *psVar1 = *psVar1 + 1;
    iVar7 = *(int *)(unaff_R14 + 0x30);
    LOCK();
    bVar10 = uVar9 == (t->status).value;
    if (bVar10) {
      (t->status).value = 6;
    }
    UNLOCK();
    if (bVar10) {
      wasRemoved = true;
      goto LAB_0045a305;
    }
    sVar3 = *(sdword *)(iVar7 + 0x108);
    *(sdword *)(iVar7 + 0x108) = sVar3 + -1;
    if ((sVar3 == 1) && (*(char *)(unaff_R14 + 0xb1) != '\0')) {
      *(undefined8 *)(unaff_R14 + 0x10) = 0xfffffffffffffade;
    }
    goto LAB_0045a0da;
  case 1:
  case 7:
  case 8:
    psVar1 = (sdword *)(*(int *)(unaff_R14 + 0x30) + 0x108);
    *psVar1 = *psVar1 + 1;
    iVar7 = *(int *)(unaff_R14 + 0x30);
    LOCK();
    bVar10 = uVar9 == (t->status).value;
    if (bVar10) {
      (t->status).value = 6;
    }
    UNLOCK();
    if (bVar10) {
      wasRemoved = false;
      goto LAB_0045a305;
    }
    sVar3 = *(sdword *)(iVar7 + 0x108);
    *(sdword *)(iVar7 + 0x108) = sVar3 + -1;
    if ((sVar3 == 1) && (*(char *)(unaff_R14 + 0xb1) != '\0')) {
      *(undefined8 *)(unaff_R14 + 0x10) = 0xfffffffffffffade;
    }
    goto LAB_0045a0da;
  case 2:
  case 4:
  case 9:
    runtime_osyield();
    unaff_R14 = *(int *)(in_FS_OFFSET + -8);
    pvVar6 = pvStack0000000000000030;
    goto LAB_0045a0da;
  case 3:
    break;
  case 6:
    runtime_osyield();
    unaff_R14 = *(int *)(in_FS_OFFSET + -8);
    pvVar6 = pvStack0000000000000030;
    goto LAB_0045a0da;
  default:
    runtime_badTimer();
    pvVar6 = pvStack0000000000000030;
    goto LAB_0045a0da;
  }
  psVar1 = (sdword *)(*(int *)(unaff_R14 + 0x30) + 0x108);
  *psVar1 = *psVar1 + 1;
  iVar7 = *(int *)(unaff_R14 + 0x30);
  LOCK();
  bVar10 = uVar9 == (t->status).value;
  if (bVar10) {
    (t->status).value = 6;
  }
  UNLOCK();
  if (!bVar10) {
    sVar3 = *(sdword *)(iVar7 + 0x108);
    *(sdword *)(iVar7 + 0x108) = sVar3 + -1;
    if ((sVar3 == 1) && (*(char *)(unaff_R14 + 0xb1) != '\0')) {
      *(undefined8 *)(unaff_R14 + 0x10) = 0xfffffffffffffade;
    }
    goto LAB_0045a0da;
  }
  LOCK();
  psVar1 = (sdword *)(t->pp + 0x22a4);
  *psVar1 = *psVar1 + -1;
  UNLOCK();
  wasRemoved = false;
LAB_0045a305:
  uVar9 = 6;
  t->period = period;
  when_00 = when;
  prVar8 = t;
  if (runtime_writeBarrier._0_4_ != 0) {
    uVar9 = 6;
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RDI;
    extraout_R11[1] = extraout_RCX->f;
    when_00 = extraout_RBX;
    seq = (uintptr)extraout_RSI;
    f = extraout_RDI;
    pvVar6 = extraout_R8;
    in_R9 = extraout_R9;
    iVar7 = extraout_R10;
    prVar8 = extraout_RCX;
    wasRemoved = (bool)extraout_AL;
  }
  prVar8->f = f;
  (prVar8->arg)._type = (internal_abi_Type *)seq;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = extraout_R8_00;
    extraout_R11_00[1] = (extraout_RCX_00->arg).data;
    when_00 = extraout_RBX_00;
    pvVar6 = extraout_R8_00;
    in_R9 = extraout_R9_00;
    iVar7 = extraout_R10_00;
    prVar8 = extraout_RCX_00;
    wasRemoved = (bool)extraout_AL_00;
  }
  (prVar8->arg).data = pvVar6;
  prVar8->seq = in_R9;
  if (wasRemoved == false) {
    prVar8->nextwhen = when_00;
    newStatus = 8;
    if (when_00 < prVar8->when) {
      newStatus = 7;
    }
    if (newStatus == 7) {
      rVar4 = prVar8->pp;
      do {
        iVar5 = *(int *)(rVar4 + 0x1210);
        if ((iVar5 != 0) && (iVar5 < when_00)) break;
        piVar2 = (int *)(rVar4 + 0x1210);
        LOCK();
        bVar10 = iVar5 == *piVar2;
        if (bVar10) {
          *piVar2 = when_00;
        }
        UNLOCK();
      } while (!bVar10);
    }
    LOCK();
    bVar10 = uVar9 == (prVar8->status).value;
    if (bVar10) {
      (prVar8->status).value = newStatus;
    }
    UNLOCK();
    if (!bVar10) {
      runtime_badTimer();
      when_00 = when;
    }
    sVar3 = *(sdword *)(iVar7 + 0x108);
    *(sdword *)(iVar7 + 0x108) = sVar3 + -1;
    if ((sVar3 == 1) && (*(char *)(unaff_R14 + 0xb1) != '\0')) {
      *(undefined8 *)(unaff_R14 + 0x10) = 0xfffffffffffffade;
    }
    if (newStatus == 7) {
      runtime_wakeNetPoller(when_00);
    }
  }
  else {
    prVar8->when = when_00;
    pp_00 = *(runtime_p **)(*(int *)(unaff_R14 + 0x30) + 0xd0);
    l = &pp_00->timersLock;
    runtime_lock2(l);
    runtime_doaddtimer(pp_00,t);
    runtime_unlock2(l);
    LOCK();
    bVar10 = (t->status).value == 6;
    if (bVar10) {
      (t->status).value = 1;
    }
    UNLOCK();
    if (!bVar10) {
      runtime_badTimer();
    }
    sVar3 = *(sdword *)(iVar7 + 0x108);
    *(sdword *)(iVar7 + 0x108) = sVar3 + -1;
    if ((sVar3 == 1) && (*(char *)(unaff_R14 + 0xb1) != '\0')) {
      *(undefined8 *)(unaff_R14 + 0x10) = 0xfffffffffffffade;
    }
    runtime_wakeNetPoller(when);
  }
  return;
}



// WARNING: Variable defined which should be unmapped: gp
// WARNING: Unknown calling convention

void runtime_cleantimers(runtime_p *pp)

{
  uint32 uVar1;
  runtime_timer *t_00;
  runtime_p *pp_00;
  runtime_timer *t;
  uint32 s;
  int unaff_R14;
  bool bVar2;
  runtime_p *prStack0000000000000008;
  string in_stack_ffffffffffffffd8;
  runtime_g *gp;
  
  prStack0000000000000008 = pp;
  while (pp_00 = prStack0000000000000008, &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  while( true ) {
    if ((pp_00->timers).len == 0) {
      return;
    }
    if (*(char *)(unaff_R14 + 0xb2) != '\0') break;
    t_00 = *(pp_00->timers).array;
    if (pp_00 != (runtime_p *)t_00->pp) {
                    // WARNING: Subroutine does not return
      runtime_throw(in_stack_ffffffffffffffd8);
    }
    uVar1 = (t_00->status).value;
    if (uVar1 == 3) {
      LOCK();
      bVar2 = (t_00->status).value == 3;
      if (bVar2) {
        (t_00->status).value = 4;
      }
      UNLOCK();
      if (bVar2) {
        runtime_dodeltimer0(pp_00);
        LOCK();
        bVar2 = (t_00->status).value == 4;
        if (bVar2) {
          (t_00->status).value = 5;
        }
        UNLOCK();
        if (!bVar2) {
          runtime_badTimer();
        }
        LOCK();
        (prStack0000000000000008->deletedTimers).value =
             (prStack0000000000000008->deletedTimers).value - 1;
        UNLOCK();
        pp_00 = prStack0000000000000008;
      }
    }
    else {
      if (1 < (dword)(uVar1 - 7)) {
        return;
      }
      LOCK();
      bVar2 = uVar1 == (t_00->status).value;
      if (bVar2) {
        (t_00->status).value = 9;
      }
      UNLOCK();
      if (bVar2) {
        t_00->when = t_00->nextwhen;
        runtime_dodeltimer0(pp_00);
        runtime_doaddtimer(prStack0000000000000008,t_00);
        LOCK();
        bVar2 = (t_00->status).value == 9;
        if (bVar2) {
          (t_00->status).value = 1;
        }
        UNLOCK();
        pp_00 = prStack0000000000000008;
        if (!bVar2) {
          runtime_badTimer();
          pp_00 = prStack0000000000000008;
        }
      }
    }
  }
  return;
}



void runtime_moveTimers(runtime_p *pp,___runtime_timer timers)

{
  uint32 uVar1;
  runtime_timer *t_00;
  int in_RCX;
  int iVar2;
  int in_RBX;
  runtime_timer *t;
  uint32 s;
  int unaff_R14;
  bool bVar3;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar2 = 0;
LAB_0045a72b:
  if (in_RCX <= iVar2) {
    return;
  }
  t_00 = *(runtime_timer **)(in_RBX + iVar2 * 8);
LAB_0045a80e:
  uVar1 = (t_00->status).value;
  switch(uVar1) {
  case 0:
  case 5:
    runtime_badTimer();
    goto LAB_0045a80e;
  case 1:
    LOCK();
    bVar3 = uVar1 == (t_00->status).value;
    if (bVar3) {
      (t_00->status).value = 9;
    }
    UNLOCK();
    if (bVar3) {
      t_00->pp = 0;
      runtime_doaddtimer(pp,t_00);
      LOCK();
      bVar3 = (t_00->status).value == 9;
      if (bVar3) {
        (t_00->status).value = 1;
      }
      UNLOCK();
      if (!bVar3) {
        runtime_badTimer();
      }
      goto LAB_0045a725;
    }
    goto LAB_0045a80e;
  case 2:
  case 4:
  case 9:
    runtime_badTimer();
    goto LAB_0045a80e;
  case 3:
    LOCK();
    bVar3 = uVar1 == (t_00->status).value;
    if (bVar3) {
      (t_00->status).value = 5;
    }
    UNLOCK();
    if (bVar3) {
      t_00->pp = 0;
      goto LAB_0045a725;
    }
    goto LAB_0045a80e;
  case 6:
    runtime_osyield();
    goto LAB_0045a80e;
  case 7:
  case 8:
    break;
  default:
    runtime_badTimer();
    goto LAB_0045a80e;
  }
  LOCK();
  bVar3 = uVar1 == (t_00->status).value;
  if (bVar3) {
    (t_00->status).value = 9;
  }
  UNLOCK();
  if (bVar3) goto LAB_0045a7a3;
  goto LAB_0045a80e;
LAB_0045a7a3:
  t_00->when = t_00->nextwhen;
  t_00->pp = 0;
  runtime_doaddtimer(pp,t_00);
  LOCK();
  bVar3 = (t_00->status).value == 9;
  if (bVar3) {
    (t_00->status).value = 1;
  }
  UNLOCK();
  if (!bVar3) {
    runtime_badTimer();
  }
LAB_0045a725:
  iVar2 = iVar2 + 1;
  goto LAB_0045a72b;
}



// WARNING: Unknown calling convention

void runtime_adjusttimers(runtime_p *pp,int64 now)

{
  uint32 uVar1;
  uint uVar2;
  runtime_timer *prVar3;
  runtime_slice ~r0;
  ___runtime_timer moved;
  int extraout_RAX;
  int changed;
  int extraout_RAX_00;
  int changed_1;
  void *extraout_RAX_01;
  int extraout_RAX_02;
  int iVar4;
  uint i_00;
  uint extraout_RCX;
  uint extraout_RCX_00;
  uint oldCap;
  int64 first;
  void *oldPtr;
  uint newLen;
  uint extraout_RBX;
  uint extraout_RBX_00;
  runtime_timer *t;
  uint32 s;
  runtime_timer **extraout_R11;
  int unaff_R14;
  bool bVar5;
  runtime_p *prStack0000000000000008;
  string in_stack_ffffffffffffff80;
  int in_stack_ffffffffffffff90;
  int i;
  
  while (prStack0000000000000008 = pp, &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    pp = prStack0000000000000008;
  }
  iVar4 = (pp->timerModifiedEarliest).value;
  if ((iVar4 != 0) && (iVar4 <= now)) {
    LOCK();
    (pp->timerModifiedEarliest).value = 0;
    UNLOCK();
    i_00 = 0;
    oldCap = 0;
    newLen = 0;
    oldPtr = (void *)0x0;
    while( true ) {
      uVar2 = (pp->timers).len;
      if ((int)uVar2 <= (int)i_00) {
        if (newLen != 0) {
          moved.cap = in_stack_ffffffffffffff90;
          moved.array = (runtime_timer **)in_stack_ffffffffffffff80.str;
          moved.len = in_stack_ffffffffffffff80.len;
          runtime_addAdjustedTimers(pp,moved);
        }
        return;
      }
      if (uVar2 <= i_00) break;
      prVar3 = (pp->timers).array[i_00];
      if (pp != (runtime_p *)prVar3->pp) {
                    // WARNING: Subroutine does not return
        runtime_throw(in_stack_ffffffffffffff80);
      }
      uVar1 = (prVar3->status).value;
      switch(uVar1) {
      case 0:
      case 2:
      case 4:
      case 5:
      case 9:
        runtime_badTimer();
        pp = prStack0000000000000008;
        break;
      case 1:
        break;
      case 3:
        LOCK();
        bVar5 = uVar1 == (prVar3->status).value;
        if (bVar5) {
          (prVar3->status).value = 4;
        }
        UNLOCK();
        if (bVar5) {
          runtime_dodeltimer(pp,i_00,i_00);
          LOCK();
          bVar5 = (prVar3->status).value == 4;
          if (bVar5) {
            (prVar3->status).value = 5;
          }
          UNLOCK();
          if (!bVar5) {
            runtime_badTimer();
          }
          LOCK();
          (prStack0000000000000008->deletedTimers).value =
               (prStack0000000000000008->deletedTimers).value - 1;
          UNLOCK();
          i_00 = extraout_RAX - 1;
          pp = prStack0000000000000008;
        }
        break;
      case 6:
        runtime_osyield();
        i_00 = i_00 - 1;
        pp = prStack0000000000000008;
        break;
      case 7:
      case 8:
        LOCK();
        bVar5 = uVar1 == (prVar3->status).value;
        if (bVar5) {
          (prVar3->status).value = 9;
        }
        UNLOCK();
        if (bVar5) {
          prVar3->when = prVar3->nextwhen;
          runtime_dodeltimer(pp,i_00,i_00);
          newLen = newLen + 1;
          if (oldCap < newLen) {
            ~r0.cap = in_stack_ffffffffffffff90;
            ~r0.array = in_stack_ffffffffffffff80.str;
            ~r0.len = in_stack_ffffffffffffff80.len;
            runtime_growslice(oldPtr,newLen,oldCap,1,(internal_abi_Type *)&DAT_007f8e60,~r0);
            oldCap = extraout_RCX;
            oldPtr = extraout_RAX_01;
            newLen = extraout_RBX;
          }
          iVar4 = extraout_RAX_00;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11 = prVar3;
            extraout_R11[1] = *(runtime_timer **)((int)oldPtr + extraout_RBX_00 * 8 + -8);
            iVar4 = extraout_RAX_02;
            oldCap = extraout_RCX_00;
            newLen = extraout_RBX_00;
          }
          *(runtime_timer **)((int)oldPtr + newLen * 8 + -8) = prVar3;
          i_00 = iVar4 - 1;
          pp = prStack0000000000000008;
        }
        break;
      default:
        runtime_badTimer();
        pp = prStack0000000000000008;
      }
      i_00 = i_00 + 1;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  return;
}



void runtime_addAdjustedTimers(runtime_p *pp,___runtime_timer moved)

{
  runtime_internal_atomic_Uint32 *prVar1;
  runtime_timer *t_00;
  int in_RCX;
  runtime_timer *t;
  int in_RBX;
  int iVar2;
  int unaff_R14;
  bool bVar3;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  for (iVar2 = 0; iVar2 < in_RCX; iVar2 = iVar2 + 1) {
    t_00 = *(runtime_timer **)(in_RBX + iVar2 * 8);
    runtime_doaddtimer(pp,t_00);
    prVar1 = &t_00->status;
    LOCK();
    bVar3 = prVar1->value == 9;
    if (bVar3) {
      prVar1->value = 1;
    }
    UNLOCK();
    if (!bVar3) {
      runtime_badTimer();
    }
  }
  return;
}



void runtime_runtimer(runtime_p *pp,int64 now,int64 ~r0)

{
  uint32 uVar1;
  runtime_timer *t_00;
  runtime_p *pp_00;
  runtime_timer *t;
  int64 now_00;
  uint32 s;
  int unaff_R14;
  bool bVar2;
  runtime_p *prStack0000000000000008;
  int64 iStack0000000000000010;
  string in_stack_ffffffffffffffd8;
  
  prStack0000000000000008 = pp;
  iStack0000000000000010 = now;
  while (pp_00 = prStack0000000000000008, now_00 = iStack0000000000000010,
        &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x18)) {
    runtime_morestackc();
  }
  do {
    if ((pp_00->timers).len == 0) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    t_00 = *(pp_00->timers).array;
    if (pp_00 != (runtime_p *)t_00->pp) {
                    // WARNING: Subroutine does not return
      runtime_throw(in_stack_ffffffffffffffd8);
    }
    uVar1 = (t_00->status).value;
    switch(uVar1) {
    case 0:
    case 5:
      runtime_badTimer();
      pp_00 = prStack0000000000000008;
      now_00 = iStack0000000000000010;
      break;
    case 1:
      if (now_00 < t_00->when) {
        return;
      }
      LOCK();
      bVar2 = uVar1 == (t_00->status).value;
      if (bVar2) {
        (t_00->status).value = 2;
      }
      UNLOCK();
      if (bVar2) {
        runtime_runOneTimer(pp_00,t_00,now_00);
        return;
      }
      break;
    case 2:
    case 4:
    case 9:
      runtime_badTimer();
      pp_00 = prStack0000000000000008;
      now_00 = iStack0000000000000010;
      break;
    case 3:
      LOCK();
      bVar2 = uVar1 == (t_00->status).value;
      if (bVar2) {
        (t_00->status).value = 4;
      }
      UNLOCK();
      if (bVar2) {
        runtime_dodeltimer0(pp_00);
        LOCK();
        bVar2 = (t_00->status).value == 4;
        if (bVar2) {
          (t_00->status).value = 5;
        }
        UNLOCK();
        if (!bVar2) {
          runtime_badTimer();
        }
        LOCK();
        (prStack0000000000000008->deletedTimers).value =
             (prStack0000000000000008->deletedTimers).value - 1;
        UNLOCK();
        pp_00 = prStack0000000000000008;
        now_00 = iStack0000000000000010;
        if ((prStack0000000000000008->timers).len == 0) {
          return;
        }
      }
      break;
    case 6:
      runtime_osyield();
      pp_00 = prStack0000000000000008;
      now_00 = iStack0000000000000010;
      break;
    case 7:
    case 8:
      LOCK();
      bVar2 = uVar1 == (t_00->status).value;
      if (bVar2) {
        (t_00->status).value = 9;
      }
      UNLOCK();
      if (bVar2) {
        t_00->when = t_00->nextwhen;
        runtime_dodeltimer0(pp_00);
        runtime_doaddtimer(prStack0000000000000008,t_00);
        LOCK();
        bVar2 = (t_00->status).value == 9;
        if (bVar2) {
          (t_00->status).value = 1;
        }
        UNLOCK();
        pp_00 = prStack0000000000000008;
        now_00 = iStack0000000000000010;
        if (!bVar2) {
          runtime_badTimer();
          pp_00 = prStack0000000000000008;
          now_00 = iStack0000000000000010;
        }
      }
      break;
    default:
      runtime_badTimer();
      pp_00 = prStack0000000000000008;
      now_00 = iStack0000000000000010;
    }
  } while( true );
}



// WARNING: Unknown calling convention

void runtime_runOneTimer(runtime_p *pp,runtime_timer *t,int64 now)

{
  int iVar1;
  func_interface_____uintptr_ **ppfVar2;
  internal_abi_Type *piVar3;
  ___runtime_timer t_00;
  runtime_mutex *l;
  func_interface_____uintptr_ **f;
  uintptr seq;
  int unaff_R14;
  bool bVar4;
  runtime_p *prStack0000000000000008;
  runtime_timer *prStack0000000000000010;
  interface___ in_stack_ffffffffffffffb0;
  int in_stack_ffffffffffffffc0;
  
  prStack0000000000000008 = pp;
  prStack0000000000000010 = t;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x18)) {
