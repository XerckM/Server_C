    int empty_fragment_done;
    int init_extra;
    SSL3_BUFFER rbuf;
    SSL3_BUFFER wbuf;
    SSL3_RECORD rrec;
    SSL3_RECORD wrec;
    uchar alert_fragment[2];
    uint alert_fragment_len;
    uchar handshake_fragment[4];
    uint handshake_fragment_len;
    uint wnum;
    int wpend_tot;
    int wpend_type;
    int wpend_ret;
    uchar *wpend_buf;
    BIO *handshake_buffer;
    EVP_MD_CTX **handshake_dgst;
    int change_cipher_spec;
    int warn_alert;
    int fatal_alert;
    int alert_dispatch;
    uchar send_alert[2];
    int renegotiate;
    int total_renegotiations;
    int num_renegotiations;
    int in_read_app_data;
    void *client_opaque_prf_input;
    size_t client_opaque_prf_input_len;
    void *server_opaque_prf_input;
    size_t server_opaque_prf_input_len;
    struct _struct_645 tmp;
    uchar previous_client_finished[64];
    uchar previous_client_finished_len;
    uchar previous_server_finished[64];
    uchar previous_server_finished_len;
    int send_connection_binding;
    int next_proto_neg_seen;
};

struct stack_st_X509_NAME {
    _STACK stack;
};

struct evp_cipher_ctx_st {
    EVP_CIPHER *cipher;
    ENGINE *engine;
    int encrypt;
    int buf_len;
    uchar oiv[16];
    uchar iv[16];
    uchar buf[32];
    int num;
    void *app_data;
    int key_len;
    ulong flags;
    void *cipher_data;
    int final_used;
    int block_mask;
    uchar final[32];
};

struct bio_method_st {
    int type;
    char *name;
    int (*bwrite)(BIO *, char *, int);
    int (*bread)(BIO *, char *, int);
    int (*bputs)(BIO *, char *);
    int (*bgets)(BIO *, char *, int);
    long (*ctrl)(BIO *, int, long, void *);
    int (*create)(BIO *);
    int (*destroy)(BIO *);
    long (*callback_ctrl)(BIO *, int, bio_info_cb *);
};

typedef struct srtp_protection_profile_st SRTP_PROTECTION_PROFILE;

typedef struct stack_st_OCSP_RESPID stack_st_OCSP_RESPID, *Pstack_st_OCSP_RESPID;

struct stack_st_OCSP_RESPID {
    _STACK stack;
};

typedef struct ssl2_state_st ssl2_state_st, *Pssl2_state_st;

typedef struct _struct_641 _struct_641, *P_struct_641;

struct _struct_641 {
    uint conn_id_length;
    uint cert_type;
    uint cert_length;
    uint csl;
    uint clear;
    uint enc;
    uchar ccl[32];
    uint cipher_spec_length;
    uint session_id_length;
    uint clen;
    uint rlen;
};

struct ssl2_state_st {
    int three_byte_header;
    int clear_text;
    int escape;
    int ssl2_rollback;
    uint wnum;
    int wpend_tot;
    uchar *wpend_buf;
    int wpend_off;
    int wpend_len;
    int wpend_ret;
    int rbuf_left;
    int rbuf_offs;
    uchar *rbuf;
    uchar *wbuf;
    uchar *write_ptr;
    uint padding;
    uint rlength;
    int ract_data_length;
    uint wlength;
    int wact_data_length;
    uchar *ract_data;
    uchar *wact_data;
    uchar *mac_data;
    uchar *read_key;
    uchar *write_key;
    uint challenge_length;
    uchar challenge[32];
    uint conn_id_length;
    uchar conn_id[16];
    uint key_material_length;
    uchar key_material[48];
    ulong read_sequence;
    ulong write_sequence;
    struct _struct_641 tmp;
};

typedef struct tls_session_ticket_ext_st tls_session_ticket_ext_st, *Ptls_session_ticket_ext_st;

typedef struct tls_session_ticket_ext_st TLS_SESSION_TICKET_EXT;

struct tls_session_ticket_ext_st {
    ushort length;
    void *data;
};

typedef struct ssl_method_st ssl_method_st, *Pssl_method_st;

typedef struct ssl_st ssl_st, *Pssl_st;

typedef struct x509_store_ctx_st x509_store_ctx_st, *Px509_store_ctx_st;

typedef struct X509_crl_st X509_crl_st, *PX509_crl_st;

typedef struct X509_crl_st X509_CRL;

typedef struct stack_st_X509 stack_st_X509, *Pstack_st_X509;

typedef struct stack_st_X509_CRL stack_st_X509_CRL, *Pstack_st_X509_CRL;

typedef struct x509_store_ctx_st X509_STORE_CTX;

typedef struct ssl_st SSL;

typedef struct ssl_ctx_st ssl_ctx_st, *Pssl_ctx_st;

typedef struct ssl_session_st SSL_SESSION;

typedef struct ssl_ctx_st SSL_CTX;

typedef struct ssl_method_st SSL_METHOD;

typedef struct dtls1_state_st dtls1_state_st, *Pdtls1_state_st;

typedef struct X509_VERIFY_PARAM_st X509_VERIFY_PARAM_st, *PX509_VERIFY_PARAM_st;

typedef struct X509_VERIFY_PARAM_st X509_VERIFY_PARAM;

typedef int (*GEN_SESSION_CB)(SSL *, uchar *, uint *);

typedef struct x509_store_st x509_store_st, *Px509_store_st;

typedef struct x509_store_st X509_STORE;

typedef struct X509_crl_info_st X509_crl_info_st, *PX509_crl_info_st;

typedef struct X509_crl_info_st X509_CRL_INFO;

typedef struct ISSUING_DIST_POINT_st ISSUING_DIST_POINT_st, *PISSUING_DIST_POINT_st;

typedef struct ISSUING_DIST_POINT_st ISSUING_DIST_POINT;

typedef struct stack_st_GENERAL_NAMES stack_st_GENERAL_NAMES, *Pstack_st_GENERAL_NAMES;

typedef struct x509_crl_method_st x509_crl_method_st, *Px509_crl_method_st;

typedef struct x509_crl_method_st X509_CRL_METHOD;

typedef struct X509_POLICY_TREE_st X509_POLICY_TREE_st, *PX509_POLICY_TREE_st;

typedef struct X509_POLICY_TREE_st X509_POLICY_TREE;

typedef struct kssl_ctx_st kssl_ctx_st, *Pkssl_ctx_st;

typedef struct kssl_ctx_st KSSL_CTX;

typedef struct stack_st_X509_EXTENSION X509_EXTENSIONS;

typedef int (*tls_session_ticket_ext_cb_fn)(SSL *, uchar *, int, void *);

typedef int (*tls_session_secret_cb_fn)(SSL *, void *, int *, struct stack_st_SSL_CIPHER *, SSL_CIPHER **, void *);

typedef struct _struct_615 _struct_615, *P_struct_615;

typedef int (pem_password_cb)(char *, int, int, void *);

typedef struct stack_st_SSL_COMP stack_st_SSL_COMP, *Pstack_st_SSL_COMP;

typedef struct dtls1_bitmap_st dtls1_bitmap_st, *Pdtls1_bitmap_st;

typedef struct dtls1_bitmap_st DTLS1_BITMAP;

typedef struct record_pqueue_st record_pqueue_st, *Precord_pqueue_st;

typedef struct record_pqueue_st record_pqueue;

typedef struct _pqueue _pqueue, *P_pqueue;

typedef struct _pqueue *pqueue;

typedef struct hm_header_st hm_header_st, *Phm_header_st;

typedef struct dtls1_timeout_st dtls1_timeout_st, *Pdtls1_timeout_st;

typedef struct timeval timeval, *Ptimeval;

typedef __time_t time_t;

typedef struct stack_st_X509_OBJECT stack_st_X509_OBJECT, *Pstack_st_X509_OBJECT;

typedef struct stack_st_X509_LOOKUP stack_st_X509_LOOKUP, *Pstack_st_X509_LOOKUP;

typedef struct stack_st_X509_REVOKED stack_st_X509_REVOKED, *Pstack_st_X509_REVOKED;

typedef struct DIST_POINT_NAME_st DIST_POINT_NAME_st, *PDIST_POINT_NAME_st;

typedef struct DIST_POINT_NAME_st DIST_POINT_NAME;

typedef int krb5_int32;

typedef krb5_int32 krb5_enctype;

typedef uchar krb5_octet;

typedef struct dtls1_retransmit_state dtls1_retransmit_state, *Pdtls1_retransmit_state;

typedef long __suseconds_t;

typedef union _union_859 _union_859, *P_union_859;

struct record_pqueue_st {
    ushort epoch;
    pqueue q;
};

struct x509_crl_method_st {
};

struct dtls1_retransmit_state {
    EVP_CIPHER_CTX *enc_write_ctx;
    EVP_MD_CTX *write_hash;
    COMP_CTX *compress;
    SSL_SESSION *session;
    ushort epoch;
};

struct hm_header_st {
    uchar type;
    ulong msg_len;
    ushort seq;
    ulong frag_off;
    ulong frag_len;
    uint is_ccs;
    struct dtls1_retransmit_state saved_retransmit_state;
};

struct ISSUING_DIST_POINT_st {
    DIST_POINT_NAME *distpoint;
    int onlyuser;
    int onlyCA;
    ASN1_BIT_STRING *onlysomereasons;
    int indirectCRL;
    int onlyattr;
};

struct timeval {
    __time_t tv_sec;
    __suseconds_t tv_usec;
};

struct X509_crl_st {
    X509_CRL_INFO *crl;
    X509_ALGOR *sig_alg;
    ASN1_BIT_STRING *signature;
    int references;
    int flags;
    AUTHORITY_KEYID *akid;
    ISSUING_DIST_POINT *idp;
    int idp_flags;
    int idp_reasons;
    ASN1_INTEGER *crl_number;
    ASN1_INTEGER *base_crl_number;
    uchar sha1_hash[20];
    struct stack_st_GENERAL_NAMES *issuers;
    X509_CRL_METHOD *meth;
    void *meth_data;
};

struct X509_VERIFY_PARAM_st {
    char *name;
    time_t check_time;
    ulong inh_flags;
    ulong flags;
    int purpose;
    int trust;
    int depth;
    struct stack_st_ASN1_OBJECT *policies;
};

struct ssl_st {
    int version;
    int type;
    SSL_METHOD *method;
    BIO *rbio;
    BIO *wbio;
    BIO *bbio;
    int rwstate;
    int in_handshake;
    int (*handshake_func)(SSL *);
    int server;
    int new_session;
    int quiet_shutdown;
    int shutdown;
    int state;
    int rstate;
    BUF_MEM *init_buf;
    void *init_msg;
    int init_num;
    int init_off;
    uchar *packet;
    uint packet_length;
    struct ssl2_state_st *s2;
    struct ssl3_state_st *s3;
    struct dtls1_state_st *d1;
    int read_ahead;
    void (*msg_callback)(int, int, int, void *, size_t, SSL *, void *);
    void *msg_callback_arg;
    int hit;
    X509_VERIFY_PARAM *param;
    struct stack_st_SSL_CIPHER *cipher_list;
    struct stack_st_SSL_CIPHER *cipher_list_by_id;
    int mac_flags;
    EVP_CIPHER_CTX *enc_read_ctx;
    EVP_MD_CTX *read_hash;
    COMP_CTX *expand;
    EVP_CIPHER_CTX *enc_write_ctx;
    EVP_MD_CTX *write_hash;
    COMP_CTX *compress;
    struct cert_st *cert;
    uint sid_ctx_length;
    uchar sid_ctx[32];
    SSL_SESSION *session;
    GEN_SESSION_CB generate_session_id;
    int verify_mode;
    int (*verify_callback)(int, X509_STORE_CTX *);
    void (*info_callback)(SSL *, int, int);
    int error;
    int error_code;
    KSSL_CTX *kssl_ctx;
    uint (*psk_client_callback)(SSL *, char *, char *, uint, uchar *, uint);
    uint (*psk_server_callback)(SSL *, char *, uchar *, uint);
    SSL_CTX *ctx;
    int debug;
    long verify_result;
    CRYPTO_EX_DATA ex_data;
    struct stack_st_X509_NAME *client_CA;
    int references;
    ulong options;
    ulong mode;
    long max_cert_list;
    int first_packet;
    int client_version;
    uint max_send_fragment;
    void (*tlsext_debug_cb)(SSL *, int, int, uchar *, int, void *);
    void *tlsext_debug_arg;
    char *tlsext_hostname;
    int servername_done;
    int tlsext_status_type;
    int tlsext_status_expected;
    struct stack_st_OCSP_RESPID *tlsext_ocsp_ids;
    X509_EXTENSIONS *tlsext_ocsp_exts;
    uchar *tlsext_ocsp_resp;
    int tlsext_ocsp_resplen;
    int tlsext_ticket_expected;
    size_t tlsext_ecpointformatlist_length;
    uchar *tlsext_ecpointformatlist;
    size_t tlsext_ellipticcurvelist_length;
    uchar *tlsext_ellipticcurvelist;
    void *tlsext_opaque_prf_input;
    size_t tlsext_opaque_prf_input_len;
    TLS_SESSION_TICKET_EXT *tlsext_session_ticket;
    tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb;
    void *tls_session_ticket_ext_cb_arg;
    tls_session_secret_cb_fn tls_session_secret_cb;
    void *tls_session_secret_cb_arg;
    SSL_CTX *initial_ctx;
    uchar *next_proto_negotiated;
    uchar next_proto_negotiated_len;
    struct stack_st_SRTP_PROTECTION_PROFILE *srtp_profiles;
    SRTP_PROTECTION_PROFILE *srtp_profile;
    uint tlsext_heartbeat;
    uint tlsext_hb_pending;
    uint tlsext_hb_seq;
    int renegotiate;
};

struct x509_store_st {
    int cache;
    struct stack_st_X509_OBJECT *objs;
    struct stack_st_X509_LOOKUP *get_cert_methods;
    X509_VERIFY_PARAM *param;
    int (*verify)(X509_STORE_CTX *);
    int (*verify_cb)(int, X509_STORE_CTX *);
    int (*get_issuer)(X509 **, X509_STORE_CTX *, X509 *);
    int (*check_issued)(X509_STORE_CTX *, X509 *, X509 *);
    int (*check_revocation)(X509_STORE_CTX *);
    int (*get_crl)(X509_STORE_CTX *, X509_CRL **, X509 *);
    int (*check_crl)(X509_STORE_CTX *, X509_CRL *);
    int (*cert_crl)(X509_STORE_CTX *, X509_CRL *, X509 *);
    stack_st_X509 * (*lookup_certs)(X509_STORE_CTX *, X509_NAME *);
    stack_st_X509_CRL * (*lookup_crls)(X509_STORE_CTX *, X509_NAME *);
    int (*cleanup)(X509_STORE_CTX *);
    CRYPTO_EX_DATA ex_data;
    int references;
};

struct dtls1_timeout_st {
    uint read_timeouts;
    uint write_timeouts;
    uint num_alerts;
};

union _union_859 {
    GENERAL_NAMES *fullname;
    struct stack_st_X509_NAME_ENTRY *relativename;
};

struct stack_st_X509_CRL {
    _STACK stack;
};

struct x509_store_ctx_st {
    X509_STORE *ctx;
    int current_method;
    X509 *cert;
    struct stack_st_X509 *untrusted;
    struct stack_st_X509_CRL *crls;
    X509_VERIFY_PARAM *param;
    void *other_ctx;
    int (*verify)(X509_STORE_CTX *);
    int (*verify_cb)(int, X509_STORE_CTX *);
    int (*get_issuer)(X509 **, X509_STORE_CTX *, X509 *);
    int (*check_issued)(X509_STORE_CTX *, X509 *, X509 *);
    int (*check_revocation)(X509_STORE_CTX *);
    int (*get_crl)(X509_STORE_CTX *, X509_CRL **, X509 *);
    int (*check_crl)(X509_STORE_CTX *, X509_CRL *);
    int (*cert_crl)(X509_STORE_CTX *, X509_CRL *, X509 *);
    int (*check_policy)(X509_STORE_CTX *);
    stack_st_X509 * (*lookup_certs)(X509_STORE_CTX *, X509_NAME *);
    stack_st_X509_CRL * (*lookup_crls)(X509_STORE_CTX *, X509_NAME *);
    int (*cleanup)(X509_STORE_CTX *);
    int valid;
    int last_untrusted;
    struct stack_st_X509 *chain;
    X509_POLICY_TREE *tree;
    int explicit_policy;
    int error_depth;
    int error;
    X509 *current_cert;
    X509 *current_issuer;
    X509_CRL *current_crl;
    int current_crl_score;
    uint current_reasons;
    X509_STORE_CTX *parent;
    CRYPTO_EX_DATA ex_data;
};

struct _struct_615 {
    int sess_connect;
    int sess_connect_renegotiate;
    int sess_connect_good;
    int sess_accept;
    int sess_accept_renegotiate;
    int sess_accept_good;
    int sess_miss;
    int sess_timeout;
    int sess_cache_full;
    int sess_hit;
    int sess_cb_hit;
};

struct ssl_ctx_st {
    SSL_METHOD *method;
    struct stack_st_SSL_CIPHER *cipher_list;
    struct stack_st_SSL_CIPHER *cipher_list_by_id;
    struct x509_store_st *cert_store;
    struct lhash_st_SSL_SESSION *sessions;
    ulong session_cache_size;
    struct ssl_session_st *session_cache_head;
    struct ssl_session_st *session_cache_tail;
    int session_cache_mode;
    long session_timeout;
    int (*new_session_cb)(struct ssl_st *, SSL_SESSION *);
    void (*remove_session_cb)(struct ssl_ctx_st *, SSL_SESSION *);
    SSL_SESSION * (*get_session_cb)(struct ssl_st *, uchar *, int, int *);
    struct _struct_615 stats;
    int references;
    int (*app_verify_callback)(X509_STORE_CTX *, void *);
    void *app_verify_arg;
    pem_password_cb *default_passwd_callback;
    void *default_passwd_callback_userdata;
    int (*client_cert_cb)(SSL *, X509 **, EVP_PKEY **);
    int (*app_gen_cookie_cb)(SSL *, uchar *, uint *);
    int (*app_verify_cookie_cb)(SSL *, uchar *, uint);
    CRYPTO_EX_DATA ex_data;
    EVP_MD *rsa_md5;
    EVP_MD *md5;
    EVP_MD *sha1;
    struct stack_st_X509 *extra_certs;
    struct stack_st_SSL_COMP *comp_methods;
    void (*info_callback)(SSL *, int, int);
    struct stack_st_X509_NAME *client_CA;
    ulong options;
    ulong mode;
    long max_cert_list;
    struct cert_st *cert;
    int read_ahead;
    void (*msg_callback)(int, int, int, void *, size_t, SSL *, void *);
    void *msg_callback_arg;
    int verify_mode;
    uint sid_ctx_length;
    uchar sid_ctx[32];
    int (*default_verify_callback)(int, X509_STORE_CTX *);
    GEN_SESSION_CB generate_session_id;
    X509_VERIFY_PARAM *param;
    int quiet_shutdown;
    uint max_send_fragment;
    ENGINE *client_cert_engine;
    int (*tlsext_servername_callback)(SSL *, int *, void *);
    void *tlsext_servername_arg;
    uchar tlsext_tick_key_name[16];
    uchar tlsext_tick_hmac_key[16];
    uchar tlsext_tick_aes_key[16];
    int (*tlsext_ticket_key_cb)(SSL *, uchar *, uchar *, EVP_CIPHER_CTX *, HMAC_CTX *, int);
    int (*tlsext_status_cb)(SSL *, void *);
    void *tlsext_status_arg;
    int (*tlsext_opaque_prf_input_callback)(SSL *, void *, size_t, void *);
    void *tlsext_opaque_prf_input_callback_arg;
    char *psk_identity_hint;
    uint (*psk_client_callback)(SSL *, char *, char *, uint, uchar *, uint);
    uint (*psk_server_callback)(SSL *, char *, uchar *, uint);
    uint freelist_max_len;
    struct ssl3_buf_freelist_st *wbuf_freelist;
    struct ssl3_buf_freelist_st *rbuf_freelist;
    int (*next_protos_advertised_cb)(SSL *, uchar **, uint *, void *);
    void *next_protos_advertised_cb_arg;
    int (*next_proto_select_cb)(SSL *, uchar **, uchar *, uchar *, uint, void *);
    void *next_proto_select_cb_arg;
    struct stack_st_SRTP_PROTECTION_PROFILE *srtp_profiles;
};

struct _pqueue {
};

struct dtls1_bitmap_st {
    ulong map;
    uchar max_seq_num[8];
};

struct dtls1_state_st {
    uint send_cookie;
    uchar cookie[256];
    uchar rcvd_cookie[256];
    uint cookie_len;
    ushort r_epoch;
    ushort w_epoch;
    DTLS1_BITMAP bitmap;
    DTLS1_BITMAP next_bitmap;
    ushort handshake_write_seq;
    ushort next_handshake_write_seq;
    ushort handshake_read_seq;
    uchar last_write_sequence[8];
    record_pqueue unprocessed_rcds;
    record_pqueue processed_rcds;
    pqueue buffered_messages;
    pqueue sent_messages;
    record_pqueue buffered_app_data;
    uint mtu;
    struct hm_header_st w_msg_hdr;
    struct hm_header_st r_msg_hdr;
    struct dtls1_timeout_st timeout;
    struct timeval next_timeout;
    ushort timeout_duration;
    uchar alert_fragment[2];
    uint alert_fragment_len;
    uchar handshake_fragment[12];
    uint handshake_fragment_len;
    uint retransmitting;
    uint change_cipher_spec_ok;
    uint listen;
};

struct stack_st_X509_OBJECT {
    _STACK stack;
};

struct stack_st_X509 {
    _STACK stack;
};

struct X509_crl_info_st {
    ASN1_INTEGER *version;
    X509_ALGOR *sig_alg;
    X509_NAME *issuer;
    ASN1_TIME *lastUpdate;
    ASN1_TIME *nextUpdate;
    struct stack_st_X509_REVOKED *revoked;
    struct stack_st_X509_EXTENSION *extensions;
    ASN1_ENCODING enc;
};

struct stack_st_X509_REVOKED {
    _STACK stack;
};

struct stack_st_GENERAL_NAMES {
    _STACK stack;
};

struct stack_st_SSL_COMP {
    _STACK stack;
};

struct stack_st_X509_LOOKUP {
    _STACK stack;
};

struct ssl_method_st {
    int version;
    int (*ssl_new)(SSL *);
    void (*ssl_clear)(SSL *);
    void (*ssl_free)(SSL *);
    int (*ssl_accept)(SSL *);
    int (*ssl_connect)(SSL *);
    int (*ssl_read)(SSL *, void *, int);
    int (*ssl_peek)(SSL *, void *, int);
    int (*ssl_write)(SSL *, void *, int);
    int (*ssl_shutdown)(SSL *);
    int (*ssl_renegotiate)(SSL *);
    int (*ssl_renegotiate_check)(SSL *);
    long (*ssl_get_message)(SSL *, int, int, int, long, int *);
    int (*ssl_read_bytes)(SSL *, int, uchar *, int, int);
    int (*ssl_write_bytes)(SSL *, int, void *, int);
    int (*ssl_dispatch_alert)(SSL *);
    long (*ssl_ctrl)(SSL *, int, long, void *);
    long (*ssl_ctx_ctrl)(SSL_CTX *, int, long, void *);
    SSL_CIPHER * (*get_cipher_by_char)(uchar *);
    int (*put_cipher_by_char)(SSL_CIPHER *, uchar *);
    int (*ssl_pending)(SSL *);
    int (*num_ciphers)(void);
    SSL_CIPHER * (*get_cipher)(uint);
    ssl_method_st * (*get_ssl_method)(int);
    long (*get_timeout)(void);
    struct ssl3_enc_method *ssl3_enc;
    int (*ssl_version)(void);
    long (*ssl_callback_ctrl)(SSL *, int, void (*)(void));
    long (*ssl_ctx_callback_ctrl)(SSL_CTX *, int, void (*)(void));
};

struct DIST_POINT_NAME_st {
    int type;
    union _union_859 name;
    X509_NAME *dpname;
};

struct kssl_ctx_st {
    char *service_name;
    char *service_host;
    char *client_princ;
    char *keytab_file;
    char *cred_cache;
    krb5_enctype enctype;
    int length;
    krb5_octet *key;
};

struct X509_POLICY_TREE_st {
};

typedef __off_t off_t;

typedef long __ssize_t;

typedef __ssize_t ssize_t;

typedef int __pid_t;

typedef long __off64_t;

typedef int __clockid_t;

typedef ulong __rlim_t;

typedef uint __useconds_t;

typedef uint __socklen_t;

typedef long __clock_t;

typedef void *__timer_t;

typedef union pthread_mutex_t pthread_mutex_t, *Ppthread_mutex_t;

typedef struct __pthread_mutex_s __pthread_mutex_s, *P__pthread_mutex_s;

typedef struct __pthread_internal_list __pthread_internal_list, *P__pthread_internal_list;

typedef struct __pthread_internal_list __pthread_list_t;

struct __pthread_internal_list {
    struct __pthread_internal_list *__prev;
    struct __pthread_internal_list *__next;
};

struct __pthread_mutex_s {
    int __lock;
    uint __count;
    int __owner;
    uint __nusers;
    int __kind;
    int __spins;
    __pthread_list_t __list;
};

union pthread_mutex_t {
    struct __pthread_mutex_s __data;
    char __size[40];
    long __align;
};

typedef union pthread_cond_t pthread_cond_t, *Ppthread_cond_t;

typedef struct _struct_16 _struct_16, *P_struct_16;

struct _struct_16 {
    int __lock;
    uint __futex;
    ulonglong __total_seq;
    ulonglong __wakeup_seq;
    ulonglong __woken_seq;
    void *__mutex;
    uint __nwaiters;
    uint __broadcast_seq;
};

union pthread_cond_t {
    struct _struct_16 __data;
    char __size[48];
    longlong __align;
};

typedef ulong pthread_t;

typedef uint pthread_key_t;

typedef union pthread_attr_t pthread_attr_t, *Ppthread_attr_t;

union pthread_attr_t {
    char __size[56];
    long __align;
};

typedef struct __dirstream __dirstream, *P__dirstream;

struct __dirstream {
};

typedef struct __dirstream DIR;

typedef struct dirent dirent, *Pdirent;

struct dirent {
    __ino_t d_ino;
    __off_t d_off;
    ushort d_reclen;
    uchar d_type;
    char d_name[256];
};

typedef struct sigaltstack sigaltstack, *Psigaltstack;

struct sigaltstack {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
};

typedef union sigval sigval, *Psigval;

typedef union sigval sigval_t;

union sigval {
    int sival_int;
    void *sival_ptr;
};

typedef union _union_1441 _union_1441, *P_union_1441;

typedef struct _struct_1442 _struct_1442, *P_struct_1442;

typedef struct _struct_1443 _struct_1443, *P_struct_1443;

typedef struct _struct_1444 _struct_1444, *P_struct_1444;

typedef struct _struct_1445 _struct_1445, *P_struct_1445;

typedef struct _struct_1446 _struct_1446, *P_struct_1446;

typedef struct _struct_1447 _struct_1447, *P_struct_1447;

struct _struct_1447 {
    long si_band;
    int si_fd;
};

struct _struct_1446 {
    void *si_addr;
};

struct _struct_1445 {
    __pid_t si_pid;
    __uid_t si_uid;
    int si_status;
    __clock_t si_utime;
    __clock_t si_stime;
};

struct _struct_1444 {
    __pid_t si_pid;
    __uid_t si_uid;
    sigval_t si_sigval;
};

struct _struct_1443 {
    int si_tid;
    int si_overrun;
    sigval_t si_sigval;
};

struct _struct_1442 {
    __pid_t si_pid;
    __uid_t si_uid;
};

union _union_1441 {
    int _pad[28];
    struct _struct_1442 _kill;
    struct _struct_1443 _timer;
    struct _struct_1444 _rt;
    struct _struct_1445 _sigchld;
    struct _struct_1446 _sigfault;
    struct _struct_1447 _sigpoll;
};

typedef union _union_1250 _union_1250, *P_union_1250;

typedef struct _struct_1251 _struct_1251, *P_struct_1251;

struct _struct_1251 {
    void (*_function)(sigval_t);
    void *_attribute;
};

union _union_1250 {
    int _pad[12];
    __pid_t _tid;
    struct _struct_1251 _sigev_thread;
};

typedef struct siginfo siginfo, *Psiginfo;

struct siginfo {
    int si_signo;
    int si_errno;
    int si_code;
    union _union_1441 _sifields;
};

typedef struct siginfo siginfo_t;

typedef dword uint32;

typedef int google.golang.org/grpc/internal/channelz.Severity;

typedef uint runtime.statDep;

typedef uint uintptr;

typedef sqword compress/flate.CorruptInputError;

typedef int google.golang.org/grpc/credentials.SecurityLevel;

typedef int golang.org/x/net/http2.streamState;

typedef word uint16;

typedef byte runtime.limiterEventType;

typedef byte uint8;

typedef qword crypto/internal/nistec/fiat.p521Uint1;

typedef byte vendor/golang.org/x/text/unicode/norm.streamSafe;

typedef int text/template.kind;

typedef sbyte int8;

typedef int golang.org/x/text/unicode/norm.Form;

typedef int net/http.ConnState;

typedef word golang.org/x/net/idna.category;

typedef byte google.golang.org/protobuf/internal/impl.validationType;

typedef byte html/template.urlPart;

typedef sbyte google.golang.org/protobuf/reflect/protoreflect.Syntax;

typedef byte runtime.scavChunkFlags;

typedef int log/slog.Level;

typedef int go/token.Token;

typedef sdword int32;

typedef word golang.org/x/net/http2.SettingID;

typedef dword io/fs.FileMode;

typedef sqword int64;

typedef undefined complex128[16];

typedef int net/url.encoding;

typedef byte runtime.spanClass;

typedef sbyte google.golang.org/protobuf/reflect/protoreflect.Kind;

typedef qword sort.xorshift;

typedef float8 float64;

typedef int golang.org/x/net/http2.priorityNodeState;

typedef byte net.scope;

typedef uint google.golang.org/protobuf/internal/impl.offset;

typedef sqword encoding/asn1.int64Encoder;

typedef sbyte vendor/golang.org/x/net/idna.joinState;

typedef int net.mdnsTest;

typedef byte vendor/golang.org/x/net/dns/dnsmessage.section;

typedef sdword google.golang.org/protobuf/reflect/protoreflect.EnumNumber;

typedef sdword vendor/golang.org/x/net/idna.runeError;


// WARNING! conflicting data type names: /DWARF/uint - /uint

typedef word net/http.http2SettingID;

typedef dword google.golang.org/grpc/codes.Code;
