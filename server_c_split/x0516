  undefined in_DIL;
  undefined extraout_DIL;
  int unaff_R14;
  undefined in_XMM15 [16];
  bool *pbStack0000000000000010;
  vendor_golang_org_x_crypto_cryptobyte_String bytes;
  
  pbStack0000000000000010 = out;
  while (bytes.len = in_XMM15._0_8_, &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_DIL = extraout_DIL;
  }
  bytes.array = (uint8 *)0x0;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(s,&bytes,1,(bool)in_DIL);
  if ((extraout_AL != '\0') && (bytes.len == 1)) {
    if (*bytes.array == 0) {
      *pbStack0000000000000010 = false;
    }
    else {
      if (*bytes.array != 0xff) {
        return;
      }
      *pbStack0000000000000010 = true;
    }
    return;
  }
  return;
}



void vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Integer
               (vendor_golang_org_x_crypto_cryptobyte_String *s,interface___ out,bool ~r0)

{
  dword dVar1;
  reflect_Value v;
  reflect_Value v_00;
  reflect_Value v_01;
  reflect_Value v_02;
  reflect_Value v_03;
  reflect_Value v_04;
  reflect_Value ~r0_00;
  reflect_Value ~r0_01;
  reflect_Value ~r0_02;
  reflect_Value ~r0_03;
  undefined *puVar2;
  char extraout_AL;
  char extraout_AL_00;
  int *extraout_RAX;
  int64 x;
  int *extraout_RAX_00;
  uint64 x_00;
  undefined8 *extraout_RAX_01;
  undefined8 *extraout_RAX_02;
  bool ~r0_04;
  byte bVar3;
  dword extraout_ECX;
  math_big_Int *in_RCX;
  math_big_Int *out_1;
  reflect_Kind k;
  dword extraout_ECX_00;
  uint uVar4;
  reflect_Kind k_1;
  int64 trunc;
  internal_abi_Type *t_1;
  uint64 trunc_1;
  internal_abi_Type *t_3;
  undefined7 in_register_00000019;
  undefined *puVar5;
  void *~r0_05;
  void *~r0_06;
  reflect_flag f_1;
  reflect_flag f_3;
  internal_abi_Type *t;
  internal_abi_Type *t_2;
  reflect_flag f;
  reflect_flag f_2;
  int unaff_R14;
  interface___ in_stack_ffffffffffffff70;
  reflect_flag in_stack_ffffffffffffff80;
  undefined8 in_stack_ffffffffffffff88;
  uint64 in_stack_ffffffffffffff90;
  uint uVar6;
  reflect_flag in_stack_ffffffffffffff98;
  reflect_flag rVar7;
  undefined local_10 [8];
  
  puVar5 = (undefined *)CONCAT71(in_register_00000019,~r0);
  out_1 = in_RCX;
  while (local_10 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (puVar5 == (undefined *)0x0) goto LAB_0066d5ef;
  dVar1 = *(dword *)(puVar5 + 0x10);
  ~r0_04 = SUB81(out_1,0);
  if (dVar1 < 0x62de383e) {
    if (dVar1 < 0x43cfbb20) {
      if (dVar1 != 0x2e74d42b) {
        if (dVar1 != 0x338a7ec0) {
          if ((dVar1 == 0x43cfbb1f) && (puVar5 == &DAT_008000e0)) {
            vendor_golang_org_x_crypto_cryptobyte___String__readASN1Bytes(s,(__uint8 *)out_1,~r0_04)
            ;
            return;
          }
          goto LAB_0066d5ef;
        }
        puVar2 = &DAT_007f85a0;
        goto joined_r0x0066d266;
      }
      puVar2 = &DAT_007f84a0;
    }
    else {
      if (dVar1 == 0x49163278) {
        puVar2 = &DAT_007f8860;
joined_r0x0066d266:
        if (puVar5 == puVar2) {
LAB_0066d45c:
          uVar6 = 0;
          vendor_golang_org_x_crypto_cryptobyte___String__readASN1Uint64
                    (s,(uint64 *)&stack0xffffffffffffff90,~r0_04);
          if (extraout_AL_00 != '\0') {
            v_02.flag = in_stack_ffffffffffffff80;
            v_02.typ_ = in_stack_ffffffffffffff70._type;
            v_02.ptr = in_stack_ffffffffffffff70.data;
            ~r0_02.ptr = (void *)uVar6;
            ~r0_02.typ_ = (internal_abi_Type *)in_stack_ffffffffffffff88;
            ~r0_02.flag = in_stack_ffffffffffffff98;
            reflect_Value_Elem(v_02,~r0_02);
            if (5 < (extraout_ECX_00 & 0x1f) - 7) {
              runtime_newobject((internal_abi_Type *)&DAT_00850d80,~r0_06);
              extraout_RAX_01[1] = 0x1a;
              *extraout_RAX_01 = &DAT_008bc6bb;
              extraout_RAX_01[2] = (uint)(extraout_ECX_00 & 0x1f);
                    // WARNING: Subroutine does not return
              runtime_gopanic(in_stack_ffffffffffffff70);
            }
            bVar3 = -(char)(*extraout_RAX_00 * 8);
            uVar4 = -(uint)((uint)-(*extraout_RAX_00 * 8 + -0x40) < 0x40);
            if (uVar6 == ((uVar6 << (bVar3 & 0x3f) & uVar4) >> (bVar3 & 0x3f) & uVar4)) {
              v_03.flag = in_stack_ffffffffffffff80;
              v_03.typ_ = in_stack_ffffffffffffff70._type;
              v_03.ptr = in_stack_ffffffffffffff70.data;
              ~r0_03.ptr = (void *)uVar6;
              ~r0_03.typ_ = (internal_abi_Type *)in_stack_ffffffffffffff88;
              ~r0_03.flag = in_stack_ffffffffffffff98;
              reflect_Value_Elem(v_03,~r0_03);
              v_04.flag = in_stack_ffffffffffffff80;
              v_04.typ_ = in_stack_ffffffffffffff70._type;
              v_04.ptr = in_stack_ffffffffffffff70.data;
              reflect_Value_SetUint(v_04,x_00);
              return;
            }
          }
          return;
        }
        goto LAB_0066d5ef;
      }
      if (dVar1 == 0x5051f1be) {
        if (puVar5 == &DAT_008aa500) {
          vendor_golang_org_x_crypto_cryptobyte___String__readASN1BigInt(s,out_1,~r0_04);
          return;
        }
        goto LAB_0066d5ef;
      }
      if (dVar1 != 0x62de383d) goto LAB_0066d5ef;
      puVar2 = &DAT_007f8460;
    }
  }
  else {
    if (dVar1 < 0xba585d68) {
      if (dVar1 == 0x6e78e923) {
        if (puVar5 != &DAT_007f8620) goto LAB_0066d5ef;
        goto LAB_0066d45c;
      }
      if (dVar1 != 0x889ce7f8) {
        if ((dVar1 != 0xba585d67) || (puVar5 != &DAT_007f83e0)) goto LAB_0066d5ef;
        goto LAB_0066d2c9;
      }
      puVar2 = &DAT_007f8960;
      goto joined_r0x0066d266;
    }
    if (dVar1 == 0xc3230e0b) {
      puVar2 = &DAT_007f8420;
    }
    else {
      if (dVar1 != 0xd6631a7c) {
        if (dVar1 != 0xf3b50de0) goto LAB_0066d5ef;
        puVar2 = &DAT_007f85e0;
        goto joined_r0x0066d266;
      }
      puVar2 = &DAT_007f84e0;
    }
  }
  if (puVar5 == puVar2) {
LAB_0066d2c9:
    rVar7 = 0;
    vendor_golang_org_x_crypto_cryptobyte___String__readASN1Int64
              (s,(int64 *)&stack0xffffffffffffff98,~r0_04);
    if (extraout_AL != '\0') {
      v.flag = in_stack_ffffffffffffff80;
      v.typ_ = in_stack_ffffffffffffff70._type;
      v.ptr = in_stack_ffffffffffffff70.data;
      ~r0_00.ptr = (void *)in_stack_ffffffffffffff90;
      ~r0_00.typ_ = (internal_abi_Type *)in_stack_ffffffffffffff88;
      ~r0_00.flag = rVar7;
      reflect_Value_Elem(v,~r0_00);
      if (4 < (extraout_ECX & 0x1f) - 2) {
        runtime_newobject((internal_abi_Type *)&DAT_00850d80,~r0_05);
        extraout_RAX_02[1] = 0x19;
        *extraout_RAX_02 = &DAT_008bbd2f;
        extraout_RAX_02[2] = (uint)(extraout_ECX & 0x1f);
                    // WARNING: Subroutine does not return
        runtime_gopanic(in_stack_ffffffffffffff70);
      }
      uVar4 = -(*extraout_RAX * 8 + -0x40);
      uVar6 = (uint)(uVar4 < 0x40);
      if (rVar7 == (int)(rVar7 << ((char)*extraout_RAX * -8 & 0x3fU) & -uVar6) >>
                   (((byte)uVar4 | ~-(uVar6 != 0)) & 0x3f)) {
        v_00.flag = in_stack_ffffffffffffff80;
        v_00.typ_ = in_stack_ffffffffffffff70._type;
        v_00.ptr = in_stack_ffffffffffffff70.data;
        ~r0_01.ptr = (void *)in_stack_ffffffffffffff90;
        ~r0_01.typ_ = (internal_abi_Type *)in_stack_ffffffffffffff88;
        ~r0_01.flag = rVar7;
        reflect_Value_Elem(v_00,~r0_01);
        v_01.flag = in_stack_ffffffffffffff80;
        v_01.typ_ = in_stack_ffffffffffffff70._type;
        v_01.ptr = in_stack_ffffffffffffff70.data;
        reflect_Value_SetInt(v_01,x);
        return;
      }
    }
    return;
  }
LAB_0066d5ef:
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffff70);
}



// WARNING: Variable defined which should be unmapped: bytes

void vendor_golang_org_x_crypto_cryptobyte___String__readASN1BigInt
               (vendor_golang_org_x_crypto_cryptobyte_String *s,math_big_Int *out,bool ~r0)

{
  math_big_nat ~r0_00;
  math_big_nat ~r0_01;
  int iVar1;
  char extraout_AL;
  int extraout_RAX;
  math_big_Word *extraout_RAX_00;
  math_big_Word *extraout_RAX_01;
  math_big_Word *extraout_RAX_02;
  math_big_Word *extraout_RAX_03;
  math_big_Word *pmVar2;
  byte bVar3;
  int extraout_RCX;
  int extraout_RCX_00;
  math_big_Int *z;
  int extraout_RBX;
  int i;
  int extraout_RBX_00;
  undefined8 in_RDI;
  math_big_Int *extraout_RDI;
  math_big_Int *extraout_RDI_00;
  math_big_Int *~r0_02;
  undefined8 extraout_RDI_01;
  uint8 b;
  math_big_Word **extraout_R11;
  math_big_Word **extraout_R11_00;
  int unaff_R14;
  undefined in_XMM15 [16];
  math_big_Int *pmStack0000000000000010;
  math_big_nat in_stack_ffffffffffffffa8;
  __uint8 in_stack_ffffffffffffffc0;
  undefined8 local_28;
  vendor_golang_org_x_crypto_cryptobyte_String bytes;
  
  pmStack0000000000000010 = out;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI_01;
  }
  bytes.array = (uint8 *)0x0;
  bytes.len = in_XMM15._0_8_;
  bytes.cap = in_XMM15._8_8_;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(s,&bytes,2,SUB81(in_RDI,0));
  iVar1 = bytes.len;
  if (((extraout_AL != '\0') && (bytes.len != 0)) &&
     ((bytes.len == 1 ||
      (((*bytes.array != 0 || ((bytes.array[1] & 0x80) != 0)) &&
       ((*bytes.array != 0xff || ((bytes.array[1] & 0x80) == 0)))))))) {
    if ((*bytes.array & 0x80) == 0) {
      ~r0_00.len = (int)bytes.array;
      ~r0_00.array = (math_big_Word *)local_28;
      ~r0_00.cap = bytes.len;
      math_big_nat_setBytes(in_stack_ffffffffffffffa8,in_stack_ffffffffffffffc0,~r0_00);
      (pmStack0000000000000010->abs).len = extraout_RBX;
      (pmStack0000000000000010->abs).cap = extraout_RCX;
      pmVar2 = extraout_RAX_00;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11 = extraout_RAX_01;
        extraout_R11[1] = (pmStack0000000000000010->abs).array;
        pmVar2 = extraout_RAX_01;
      }
      (pmStack0000000000000010->abs).array = pmVar2;
      pmStack0000000000000010->neg = false;
    }
    else {
      runtime_makeslice((internal_abi_Type *)&DAT_00807920,bytes.len,bytes.len,bytes.array);
      for (i = 0; i < bytes.len; i = i + 1) {
        if ((uint)iVar1 <= (uint)i) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        *(uint8 *)(extraout_RAX + i) = ~bytes.array[i];
      }
      ~r0_01.len = (int)bytes.array;
      ~r0_01.array = (math_big_Word *)iVar1;
      ~r0_01.cap = bytes.len;
      math_big_nat_setBytes(in_stack_ffffffffffffffa8,in_stack_ffffffffffffffc0,~r0_01);
      (pmStack0000000000000010->abs).len = extraout_RBX_00;
      (pmStack0000000000000010->abs).cap = extraout_RCX_00;
      pmVar2 = extraout_RAX_02;
      z = pmStack0000000000000010;
      ~r0_02 = extraout_RDI;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_00 = extraout_RAX_03;
        extraout_R11_00[1] = (z->abs).array;
        pmVar2 = extraout_RAX_03;
        ~r0_02 = extraout_RDI_00;
      }
      (z->abs).array = pmVar2;
      z->neg = false;
      math_big___Int__Add(z,z,vendor_golang_org_x_crypto_cryptobyte_bigOne,~r0_02);
      if ((pmStack0000000000000010->abs).len == 0) {
        bVar3 = false;
      }
      else {
        bVar3 = pmStack0000000000000010->neg ^ 1;
      }
      pmStack0000000000000010->neg = (bool)bVar3;
    }
    return;
  }
  return;
}



void vendor_golang_org_x_crypto_cryptobyte___String__readASN1Bytes
               (vendor_golang_org_x_crypto_cryptobyte_String *s,__uint8 *out,bool ~r0)

{
  char extraout_AL;
  __uint8 *extraout_RSI;
  undefined in_DIL;
  undefined extraout_DIL;
  uint8 **extraout_R11;
  int unaff_R14;
  undefined in_XMM15 [16];
  __uint8 *p_Stack0000000000000010;
  vendor_golang_org_x_crypto_cryptobyte_String bytes;
  
  p_Stack0000000000000010 = out;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_DIL = extraout_DIL;
  }
  bytes.array = (uint8 *)0x0;
  bytes._8_16_ = in_XMM15;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(s,&bytes,2,(bool)in_DIL);
  if (((extraout_AL != '\0') && (bytes.len != 0)) &&
     ((bytes.len == 1 ||
      (((*bytes.array != 0 || ((bytes.array[1] & 0x80) != 0)) &&
       ((*bytes.array != 0xff || ((bytes.array[1] & 0x80) == 0)))))))) {
    if ((*bytes.array & 0x80) != 0) {
      return;
    }
    while( true ) {
      if ((bytes.len < 2) || (*bytes.array != 0)) break;
      bytes.array = bytes.array + 1;
      bytes.cap = bytes.cap + -1;
      bytes.len = bytes.len + -1;
    }
    p_Stack0000000000000010->len = bytes.len;
    p_Stack0000000000000010->cap = bytes.cap;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = bytes.array;
      extraout_R11[1] = extraout_RSI->array;
      p_Stack0000000000000010 = extraout_RSI;
    }
    p_Stack0000000000000010->array = bytes.array;
    return;
  }
  return;
}



void vendor_golang_org_x_crypto_cryptobyte___String__readASN1Int64
               (vendor_golang_org_x_crypto_cryptobyte_String *s,int64 *out,bool ~r0)

{
  uint uVar1;
  char extraout_AL;
  int i;
  byte bVar2;
  undefined8 in_RDI;
  undefined8 extraout_RDI;
  int unaff_R14;
  undefined in_XMM15 [16];
  uint *puStack0000000000000010;
  vendor_golang_org_x_crypto_cryptobyte_String bytes;
  
  puStack0000000000000010 = (uint *)out;
  while (bytes.len = in_XMM15._0_8_, &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  bytes.array = (uint8 *)0x0;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(s,&bytes,2,SUB81(in_RDI,0));
  if (((extraout_AL != '\0') && (bytes.len != 0)) &&
     ((bytes.len == 1 ||
      (((*bytes.array != 0 || ((bytes.array[1] & 0x80) != 0)) &&
       ((*bytes.array != 0xff || ((bytes.array[1] & 0x80) == 0)))))))) {
    if (bytes.len < 9) {
      for (i = 0; i < bytes.len; i = i + 1) {
        uVar1 = *puStack0000000000000010;
        *puStack0000000000000010 = uVar1 << 8;
        *puStack0000000000000010 = uVar1 << 8 | (uint)bytes.array[i];
      }
      bVar2 = -((char)bytes.len * '\b' + -0x40);
      uVar1 = (uint)(bVar2 < 0x40);
      *puStack0000000000000010 =
           (int)(*puStack0000000000000010 << ((char)bytes.len * -8 & 0x3fU) & -uVar1) >>
           ((bVar2 | ~-(uVar1 != 0)) & 0x3f);
    }
    if (bytes.len < 9) {
      return;
    }
  }
  return;
}



void vendor_golang_org_x_crypto_cryptobyte___String__readASN1Uint64
               (vendor_golang_org_x_crypto_cryptobyte_String *s,uint64 *out,bool ~r0)

{
  uint64 uVar1;
  bool bVar2;
  char extraout_AL;
  int i;
  undefined8 in_RDI;
  undefined8 extraout_RDI;
  int unaff_R14;
  undefined in_XMM15 [16];
  uint64 *puStack0000000000000010;
  vendor_golang_org_x_crypto_cryptobyte_String bytes;
  
  puStack0000000000000010 = out;
  while (bytes.len = in_XMM15._0_8_, &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  bytes.array = (uint8 *)0x0;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(s,&bytes,2,SUB81(in_RDI,0));
  if (((extraout_AL != '\0') && (bytes.len != 0)) &&
     ((bytes.len == 1 ||
      (((*bytes.array != 0 || ((bytes.array[1] & 0x80) != 0)) &&
       ((*bytes.array != 0xff || ((bytes.array[1] & 0x80) == 0)))))))) {
    if ((bytes.len < 10) && ((bytes.len != 9 || (*bytes.array == 0)))) {
      if ((*bytes.array & 0x80) == 0) {
        for (i = 0; i < bytes.len; i = i + 1) {
          uVar1 = *puStack0000000000000010;
          *puStack0000000000000010 = uVar1 << 8;
          *puStack0000000000000010 = uVar1 << 8 | (uint)bytes.array[i];
        }
        bVar2 = true;
      }
      else {
        bVar2 = false;
      }
    }
    else {
      bVar2 = false;
    }
    if (bVar2) {
      return;
    }
  }
  return;
}



void vendor_golang_org_x_crypto_cryptobyte___String__readBase128Int
               (vendor_golang_org_x_crypto_cryptobyte_String *s,int *out,bool ~r0)

{
  byte bVar1;
  vendor_golang_org_x_crypto_cryptobyte_String *extraout_RAX;
  int i;
  int extraout_RCX;
  int ret;
  uint *extraout_RBX;
  uint8 b;
  byte *extraout_RSI;
  byte *pbVar2;
  byte *extraout_RDI;
  byte *pbVar3;
  int iVar4;
  byte **extraout_R11;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  i = 0;
  ret = 0;
  while( true ) {
    if (s->len == 0) {
      return;
    }
    if (i == 5) {
      return;
    }
    if (0xffffff < ret) {
      return;
    }
    pbVar3 = s->array;
    iVar4 = s->cap + -1;
    s->len = s->len + -1;
    s->cap = iVar4;
    pbVar2 = pbVar3 + ((dword)(-iVar4 >> 0x3f) & 1);
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RSI;
      extraout_R11[1] = extraout_RAX->array;
      s = extraout_RAX;
      i = extraout_RCX;
      out = (int *)extraout_RBX;
      pbVar2 = extraout_RSI;
      pbVar3 = extraout_RDI;
    }
    s->array = pbVar2;
    bVar1 = *pbVar3;
    if ((i == 0) && (bVar1 == 0x80)) break;
    ret = ret << 7 | (uint)(bVar1 & 0x7f);
    if ((bVar1 & 0x80) == 0) {
      *out = ret;
      return;
    }
    i = i + 1;
  }
  return;
}



void vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1ObjectIdentifier
               (vendor_golang_org_x_crypto_cryptobyte_String *s,encoding_asn1_ObjectIdentifier *out,
               bool ~r0)

{
  char extraout_AL;
  char extraout_AL_00;
  char extraout_AL_01;
  int *extraout_RAX;
  uint uVar1;
  bool ~r0_00;
  int *extraout_RSI;
  undefined8 in_RDI;
  void *~r0_01;
  undefined8 extraout_RDI;
  int **extraout_R11;
  int unaff_R14;
  undefined in_XMM15 [16];
  encoding_asn1_ObjectIdentifier *peStack0000000000000010;
  int local_40;
  int i;
  uint local_30;
  int *local_28;
  vendor_golang_org_x_crypto_cryptobyte_String bytes;
  
  peStack0000000000000010 = out;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  bytes.array = (uint8 *)0x0;
  bytes._8_16_ = in_XMM15;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(s,&bytes,6,SUB81(in_RDI,0));
  if ((extraout_AL == '\0') || (bytes.len == 0)) {
    return;
  }
  local_30 = bytes.len + 1;
  runtime_makeslice((internal_abi_Type *)&DAT_00807760,local_30,local_30,~r0_01);
  local_40 = 0;
  local_28 = extraout_RAX;
  vendor_golang_org_x_crypto_cryptobyte___String__readBase128Int(&bytes,&local_40,~r0_00);
  if (extraout_AL_00 == '\0') {
    return;
  }
  if (local_40 < 0x50) {
    if (local_30 == 0) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    *local_28 = (local_40 + SUB168(SEXT816(-0x3333333333333333) * SEXT816(local_40),8) >> 5) -
                (local_40 >> 0x3f);
    if (local_30 < 2) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    local_28[1] = local_40 +
                  ((local_40 + SUB168(SEXT816(-0x3333333333333333) * SEXT816(local_40),8) >> 5) -
                  (local_40 >> 0x3f)) * -0x28;
  }
  else {
    if (local_30 == 0) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    *local_28 = 2;
    if (local_30 < 2) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    local_28[1] = local_40 + -0x50;
  }
  uVar1 = 2;
  while( true ) {
    if (bytes.len == 0) {
      if (uVar1 <= local_30) {
        peStack0000000000000010->len = uVar1;
        peStack0000000000000010->cap = local_30;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11 = extraout_RSI;
          extraout_R11[1] = peStack0000000000000010->array;
          local_28 = extraout_RSI;
        }
        peStack0000000000000010->array = local_28;
        return;
      }
                    // WARNING: Subroutine does not return
      runtime_panicSliceAcap();
    }
    i = uVar1;
    vendor_golang_org_x_crypto_cryptobyte___String__readBase128Int
              (&bytes,&local_40,SUB81(local_30,0));
    if (extraout_AL_01 == '\0') break;
    if (local_30 <= (uint)i) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    local_28[i] = local_40;
    uVar1 = i + 1;
  }
  return;
}



void vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1GeneralizedTime
               (vendor_golang_org_x_crypto_cryptobyte_String *s,time_Time *out,bool ~r0)

{
  time_Time t;
  string value;
  string layout;
  time_Time ~r0_00;
  string ~r0_01;
  error ~r1;
  char extraout_AL;
  char extraout_AL_00;
  uint64 extraout_RAX;
  time_Location *extraout_RCX;
  uint8 *extraout_RBX;
  int extraout_RBX_00;
  uint8 *extraout_RBX_01;
  undefined8 in_RDI;
  int extraout_RDI;
  undefined8 extraout_RDI_00;
  time_Location **extraout_R11;
  int unaff_R14;
  undefined in_XMM15 [16];
  time_Time *ptStack0000000000000010;
  string in_stack_ffffffffffffff70;
  time_Location *in_stack_ffffffffffffff80;
  uint8 *in_stack_ffffffffffffff88;
  int in_stack_ffffffffffffff90;
  uint8 *puVar1;
  time_Location *in_stack_ffffffffffffffa0;
  int iVar2;
  runtime_itab *in_stack_ffffffffffffffa8;
  uint64 uVar3;
  void *in_stack_ffffffffffffffb0;
  vendor_golang_org_x_crypto_cryptobyte_String bytes;
  
  ptStack0000000000000010 = out;
  while (bytes.len = in_XMM15._0_8_, &bytes.cap <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI_00;
  }
  bytes.array = (uint8 *)0x0;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(s,&bytes,0x18,SUB81(in_RDI,0));
  if (extraout_AL == '\0') {
    return;
  }
  runtime_slicebytetostring
            ((runtime_tmpBuf *)&stack0xffffffffffffffb0,bytes.array,bytes.len,
             in_stack_ffffffffffffff70);
  value.len = (int)in_stack_ffffffffffffff88;
  value.str = (uint8 *)in_stack_ffffffffffffff80;
  ~r0_00.ext = (int64)extraout_RBX;
  ~r0_00.wall = in_stack_ffffffffffffff90;
  ~r0_00.loc = in_stack_ffffffffffffffa0;
  ~r1.data = in_stack_ffffffffffffffb0;
  ~r1.tab = in_stack_ffffffffffffffa8;
  puVar1 = extraout_RBX;
  time_Parse(in_stack_ffffffffffffff70,value,~r0_00,~r1);
  if (extraout_RDI != 0) {
    return;
  }
  t.loc = in_stack_ffffffffffffff80;
  t.wall = (uint64)in_stack_ffffffffffffff70.str;
  t.ext = in_stack_ffffffffffffff70.len;
  layout.len = in_stack_ffffffffffffff90;
  layout.str = in_stack_ffffffffffffff88;
  ~r0_01.len = extraout_RBX_00;
  ~r0_01.str = puVar1;
  iVar2 = extraout_RBX_00;
  uVar3 = extraout_RAX;
  time_Time_Format(t,layout,~r0_01);
  if ((extraout_RBX_01 == puVar1) && (runtime_memequal(), extraout_AL_00 != '\0')) {
    ptStack0000000000000010->wall = uVar3;
    ptStack0000000000000010->ext = iVar2;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RCX;
      extraout_R11[1] = ptStack0000000000000010->loc;
    }
    ptStack0000000000000010->loc = extraout_RCX;
    return;
  }
  return;
}



void vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1UTCTime
               (vendor_golang_org_x_crypto_cryptobyte_String *s,time_Time *out,bool ~r0)

{
  time_Time t;
  time_Time t_00;
  time_Time t_01;
  string value;
  string value_00;
  string layout;
  time_Time ~r0_00;
  time_Time ~r0_01;
  time_Time ~r0_02;
  string ~r0_03;
  error ~r1;
  error ~r1_00;
  char extraout_AL;
  char extraout_AL_00;
  uint64 extraout_RAX;
  uint64 extraout_RAX_00;
  int extraout_RAX_01;
  int year;
  uint64 extraout_RAX_02;
  uint64 years;
  time_Location *extraout_RCX;
  time_Location *extraout_RCX_00;
  time_Location *extraout_RCX_01;
  time_Location *extraout_RCX_02;
  time_Location *extraout_RBX;
  int extraout_RBX_00;
  int extraout_RBX_01;
  time_Location *extraout_RBX_02;
  int64 extraout_RBX_03;
  int64 year_00;
  int yday;
  undefined8 in_RDI;
  int extraout_RDI;
  int extraout_RDI_00;
  int iVar1;
  undefined8 extraout_RDI_01;
  time_Location **extraout_R11;
  int unaff_R14;
  undefined in_XMM15 [16];
  time_Time *ptStack0000000000000010;
  string in_stack_ffffffffffffff68;
  time_Location *in_stack_ffffffffffffff78;
  uint8 *in_stack_ffffffffffffff80;
  int in_stack_ffffffffffffff88;
  time_Location *in_stack_ffffffffffffff90;
  time_Location *ptVar2;
  runtime_itab *in_stack_ffffffffffffffa0;
  void *in_stack_ffffffffffffffa8;
  uint8 local_50 [32];
  time_Location *local_30;
  vendor_golang_org_x_crypto_cryptobyte_String bytes;
  
  ptStack0000000000000010 = out;
  while (bytes.len = in_XMM15._0_8_, &bytes.len <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI_01;
  }
  bytes.array = (uint8 *)0x0;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(s,&bytes,0x17,SUB81(in_RDI,0));
  if (extraout_AL == '\0') {
    return;
  }
  runtime_slicebytetostring(&local_50,bytes.array,bytes.len,in_stack_ffffffffffffff68);
  value.len = (int)in_stack_ffffffffffffff80;
  value.str = (uint8 *)in_stack_ffffffffffffff78;
  ~r0_01.ext = (int64)in_stack_ffffffffffffff90;
  ~r0_01.wall = in_stack_ffffffffffffff88;
  ~r0_01.loc = extraout_RBX;
  ~r1.data = in_stack_ffffffffffffffa8;
  ~r1.tab = in_stack_ffffffffffffffa0;
  ptVar2 = extraout_RBX;
  time_Parse(in_stack_ffffffffffffff68,value,~r0_01,~r1);
  if (extraout_RDI == 0) {
    iVar1 = 0;
    years = extraout_RAX;
    local_30 = extraout_RCX;
    year_00 = extraout_RBX_00;
  }
  else {
    value_00.len = (int)in_stack_ffffffffffffff80;
    value_00.str = (uint8 *)in_stack_ffffffffffffff78;
    ~r0_02.ext = (int64)in_stack_ffffffffffffff90;
    ~r0_02.wall = in_stack_ffffffffffffff88;
    ~r0_02.loc = ptVar2;
    ~r1_00.data = in_stack_ffffffffffffffa8;
    ~r1_00.tab = in_stack_ffffffffffffffa0;
    time_Parse(in_stack_ffffffffffffff68,value_00,~r0_02,~r1_00);
    years = extraout_RAX_00;
    local_30 = extraout_RCX_00;
    year_00 = extraout_RBX_01;
    iVar1 = extraout_RDI_00;
  }
  if (iVar1 != 0) {
    return;
  }
  t.loc = in_stack_ffffffffffffff78;
  t.wall = (uint64)in_stack_ffffffffffffff68.str;
  t.ext = in_stack_ffffffffffffff68.len;
  layout.len = in_stack_ffffffffffffff88;
  layout.str = in_stack_ffffffffffffff80;
  ~r0_03.len = (int)ptVar2;
  ~r0_03.str = (uint8 *)in_stack_ffffffffffffff90;
  time_Time_Format(t,layout,~r0_03);
  if ((extraout_RBX_02 == ptVar2) && (runtime_memequal(), extraout_AL_00 != '\0')) {
    t_00.loc = in_stack_ffffffffffffff78;
    t_00.wall = (uint64)in_stack_ffffffffffffff68.str;
    t_00.ext = in_stack_ffffffffffffff68.len;
    time_Time_date(t_00,SUB81(years,0),year_00,(time_Month)local_30,0,yday);
    if (0x801 < extraout_RAX_01) {
      t_01.loc = in_stack_ffffffffffffff78;
      t_01.wall = (uint64)in_stack_ffffffffffffff68.str;
      t_01.ext = in_stack_ffffffffffffff68.len;
      ~r0_00.ext = in_stack_ffffffffffffff88;
      ~r0_00.wall = (uint64)in_stack_ffffffffffffff80;
      ~r0_00.loc = in_stack_ffffffffffffff90;
      time_Time_AddDate(t_01,years,year_00,(int)local_30,~r0_00);
      years = extraout_RAX_02;
      local_30 = extraout_RCX_01;
      year_00 = extraout_RBX_03;
    }
    ptStack0000000000000010->wall = years;
    ptStack0000000000000010->ext = year_00;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RCX_02;
      extraout_R11[1] = ptStack0000000000000010->loc;
      local_30 = extraout_RCX_02;
    }
    ptStack0000000000000010->loc = local_30;
    return;
  }
  return;
}



void vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1BitString
               (vendor_golang_org_x_crypto_cryptobyte_String *s,encoding_asn1_BitString *out,
               bool ~r0)

{
  byte bVar1;
  int iVar2;
  char extraout_AL;
  uint8 paddingBits;
  encoding_asn1_BitString *extraout_RCX;
  uint8 *puVar3;
  undefined8 in_RDI;
  undefined8 extraout_RDI;
  uint8 **extraout_R11;
  int unaff_R14;
  undefined in_XMM15 [16];
  encoding_asn1_BitString *peStack0000000000000010;
  vendor_golang_org_x_crypto_cryptobyte_String bytes;
  
  peStack0000000000000010 = out;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  bytes.array = (uint8 *)0x0;
  bytes._8_16_ = in_XMM15;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(s,&bytes,3,SUB81(in_RDI,0));
  if (((extraout_AL != '\0') && (iVar2 = bytes.len, bytes.len != 0)) &&
     (bytes.len == (int)(((uint)((bytes.len << 3) >> 0x3f) >> 0x3d) + bytes.len * 8) >> 3)) {
    bVar1 = *bytes.array;
    bytes.cap = bytes.cap + -1;
    puVar3 = bytes.array + ((dword)(-bytes.cap >> 0x3f) & 1);
    bytes.len = bytes.len + -1;
    if (((bVar1 < 8) && ((iVar2 != 1 || (bVar1 == 0)))) &&
       ((iVar2 == 1 || ((puVar3[iVar2 + -2] & (char)(1 << (bVar1 & 0x1f)) - 1U) == 0)))) {
      peStack0000000000000010->BitLength = bytes.len * 8 - (uint)bVar1;
      (peStack0000000000000010->Bytes).len = bytes.len;
      (peStack0000000000000010->Bytes).cap = bytes.cap;
      if (runtime_writeBarrier._0_4_ != 0) {
        bytes.array = puVar3;
        runtime_gcWriteBarrier2();
        *extraout_R11 = puVar3;
        extraout_R11[1] = (extraout_RCX->Bytes).array;
        peStack0000000000000010 = extraout_RCX;
      }
      (peStack0000000000000010->Bytes).array = puVar3;
      return;
    }
    return;
  }
  return;
}



void vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1
               (vendor_golang_org_x_crypto_cryptobyte_String *s,
               vendor_golang_org_x_crypto_cryptobyte_String *out,
               vendor_golang_org_x_crypto_cryptobyte_asn1_Tag tag,bool ~r0)

{
  char extraout_AL;
  undefined in_SIL;
  undefined extraout_SIL;
  int unaff_R14;
  vendor_golang_org_x_crypto_cryptobyte_asn1_Tag vStack0000000000000018;
  vendor_golang_org_x_crypto_cryptobyte_asn1_Tag local_9;
  
  vStack0000000000000018 = tag;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_SIL = extraout_SIL;
  }
  local_9 = 0;
  vendor_golang_org_x_crypto_cryptobyte___String__readASN1(s,out,&local_9,true,(bool)in_SIL);
  if ((extraout_AL != '\0') && (local_9 == vStack0000000000000018)) {
    return;
  }
  return;
}



void vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Element
               (vendor_golang_org_x_crypto_cryptobyte_String *s,
               vendor_golang_org_x_crypto_cryptobyte_String *out,
               vendor_golang_org_x_crypto_cryptobyte_asn1_Tag tag,bool ~r0)

{
  char extraout_AL;
  undefined in_SIL;
  undefined extraout_SIL;
  int unaff_R14;
  vendor_golang_org_x_crypto_cryptobyte_asn1_Tag vStack0000000000000018;
  vendor_golang_org_x_crypto_cryptobyte_asn1_Tag local_9;
  
  vStack0000000000000018 = tag;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_SIL = extraout_SIL;
