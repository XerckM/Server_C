
typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.Map;

typedef struct noalg.map.iter[uint32]*google.golang.org/grpc/internal/transport.Stream noalg.map.iter[uint32]*google.golang.org/grpc/internal/transport.Stream, *Pnoalg.map.iter[uint32]*google.golang.org/grpc/internal/transport.Stream;

typedef struct noalg.map.hdr[uint32]*google.golang.org/grpc/internal/transport.Stream noalg.map.hdr[uint32]*google.golang.org/grpc/internal/transport.Stream, *Pnoalg.map.hdr[uint32]*google.golang.org/grpc/internal/transport.Stream;

struct noalg.map.iter[uint32]*google.golang.org/grpc/internal/transport.Stream {
    uint32 *key;
    struct google.golang.org/grpc/internal/transport.Stream **elem;
    void *t;
    struct noalg.map.hdr[uint32]*google.golang.org/grpc/internal/transport.Stream *h;
    struct noalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.Stream *buckets;
    struct noalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.Stream *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

struct noalg.map.hdr[uint32]*google.golang.org/grpc/internal/transport.Stream {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.Stream *buckets;
    struct noalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.Stream *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.rwmutex_} noalg.struct_{_F_uintptr;_X0_*runtime.rwmutex_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.rwmutex_};

typedef struct runtime.rwmutex runtime.rwmutex, *Pruntime.rwmutex;

struct noalg.struct_{_F_uintptr;_X0_*runtime.rwmutex_} { // Original name: noalg.struct { F uintptr; X0 *runtime.rwmutex }
    uintptr F;
    struct runtime.rwmutex *X0;
};

struct runtime.rwmutex {
    struct runtime.mutex rLock;
    runtime.muintptr readers;
    uint32 readerPass;
    struct runtime.mutex wLock;
    runtime.muintptr writer;
    struct runtime/internal/atomic.Int32 readerCount;
    struct runtime/internal/atomic.Int32 readerWait;
    runtime.lockRank readRank;
};

typedef struct []reflect.Value []reflect.Value, *P[]reflect.Value;

struct []reflect.Value {
    struct reflect.Value *array;
    int len;
    int cap;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Oneofs_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Oneofs_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Oneofs_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/filedesc.Oneofs_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/filedesc.Oneofs }
    uintptr F;
    struct google.golang.org/protobuf/internal/filedesc.Oneofs *X0;
};

typedef struct google.golang.org/protobuf/internal/impl.messageReflectWrapper google.golang.org/protobuf/internal/impl.messageReflectWrapper, *Pgoogle.golang.org/protobuf/internal/impl.messageReflectWrapper;

struct google.golang.org/protobuf/internal/impl.messageReflectWrapper {
    struct google.golang.org/protobuf/internal/impl.pointer p;
    struct google.golang.org/protobuf/internal/impl.MessageInfo *mi;
};

typedef struct hchan<*golang.org/x/net/trace.trace> hchan<*golang.org/x/net/trace.trace>, *Phchan<*golang.org/x/net/trace.trace>;

typedef struct hchan<*golang.org/x/net/trace.trace> *chan_*golang.org/x/net/trace.trace;

typedef struct waitq<*golang.org/x/net/trace.trace> waitq<*golang.org/x/net/trace.trace>, *Pwaitq<*golang.org/x/net/trace.trace>;

struct waitq<*golang.org/x/net/trace.trace> {
    struct sudog<*golang.org/x/net/trace.trace> *first;
    struct sudog<*golang.org/x/net/trace.trace> *last;
};

struct hchan<*golang.org/x/net/trace.trace> {
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<*golang.org/x/net/trace.trace> recvq;
    struct waitq<*golang.org/x/net/trace.trace> sendq;
    struct runtime.mutex lock;
};

typedef struct html/template.CSS html/template.CSS, *Phtml/template.CSS;

struct html/template.CSS {
    uint8 *str;
    int len;
};

typedef struct hash<crypto/x509.sum224,bool> hash<crypto/x509.sum224,bool>, *Phash<crypto/x509.sum224,bool>;

typedef struct bucket<crypto/x509.sum224,bool> bucket<crypto/x509.sum224,bool>, *Pbucket<crypto/x509.sum224,bool>;

struct bucket<crypto/x509.sum224,bool> {
    uint8 tophash[8];
    crypto/x509.sum224 keys[8];
    bool values[8];
    struct bucket<crypto/x509.sum224,bool> *overflow;
};

struct hash<crypto/x509.sum224,bool> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<crypto/x509.sum224,bool> *buckets;
    struct bucket<crypto/x509.sum224,bool> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct []io/fs.FileInfo []io/fs.FileInfo, *P[]io/fs.FileInfo;

struct []io/fs.FileInfo {
    io/fs.FileInfo *array;
    int len;
    int cap;
};

typedef struct google.golang.org/grpc/credentials/insecure.insecureTC google.golang.org/grpc/credentials/insecure.insecureTC, *Pgoogle.golang.org/grpc/credentials/insecure.insecureTC;

struct google.golang.org/grpc/credentials/insecure.insecureTC {
};

typedef struct auth/auth_grpc.RegisterOTPSeedRequest auth/auth_grpc.RegisterOTPSeedRequest, *Pauth/auth_grpc.RegisterOTPSeedRequest;

struct auth/auth_grpc.RegisterOTPSeedRequest {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    struct string Username;
    int64 Seed;
};

typedef struct strings.byteStringReplacer strings.byteStringReplacer, *Pstrings.byteStringReplacer;

struct strings.byteStringReplacer {
    struct []uint8 replacements[256];
    struct []string toReplace;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.addrConn;_X1_google.golang.org/grpc/internal/transport.ClientTransport;_X2_context.Context_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.addrConn;_X1_google.golang.org/grpc/internal/transport.ClientTransport;_X2_context.Context_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.addrConn;_X1_google.golang.org/grpc/internal/transport.ClientTransport;_X2_context.Context_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.addrConn;_X1_google.golang.org/grpc/internal/transport.ClientTransport;_X2_context.Context_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc.addrConn; X1 google.golang.org/grpc/internal/transport.ClientTransport; X2 context.Context }
    uintptr F;
    struct google.golang.org/grpc.addrConn *X0;
    google.golang.org/grpc/internal/transport.ClientTransport X1;
    context.Context X2;
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_google.golang.org/protobuf/internal/impl.structInfo_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_google.golang.org/protobuf/internal/impl.structInfo_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_google.golang.org/protobuf/internal/impl.structInfo_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_google.golang.org/protobuf/internal/impl.structInfo_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/internal/impl.offset; X1 reflect.StructField; X2 google.golang.org/protobuf/internal/impl.structInfo }
    uintptr F;
    google.golang.org/protobuf/internal/impl.offset X0;
    struct reflect.StructField X1;
    struct google.golang.org/protobuf/internal/impl.structInfo X2;
};

typedef struct noalg.map.bucket[google.golang.org/grpc/internal/transport.ServerTransport]bool noalg.map.bucket[google.golang.org/grpc/internal/transport.ServerTransport]bool, *Pnoalg.map.bucket[google.golang.org/grpc/internal/transport.ServerTransport]bool;

struct noalg.map.bucket[google.golang.org/grpc/internal/transport.ServerTransport]bool {
    uint8 topbits[8];
    noalg.[8]google.golang.org/grpc/internal/transport.ServerTransport keys;
    noalg.[8]bool elems;
    void *overflow;
};

typedef struct noalg.struct_{_context.c_unsafe.Pointer;_context.elem_unsafe.Pointer_} noalg.struct_{_context.c_unsafe.Pointer;_context.elem_unsafe.Pointer_}, *Pnoalg.struct_{_context.c_unsafe.Pointer;_context.elem_unsafe.Pointer_};

struct noalg.struct_{_context.c_unsafe.Pointer;_context.elem_unsafe.Pointer_} { // Original name: noalg.struct { context.c unsafe.Pointer; context.elem unsafe.Pointer }
    void *c;
    void *elem;
};

typedef struct syscall.SockaddrInet6 syscall.SockaddrInet6, *Psyscall.SockaddrInet6;

struct syscall.SockaddrInet6 {
    int Port;
    uint32 ZoneId;
    uint8 Addr[16];
    struct syscall.RawSockaddrInet6 raw;
};

typedef struct noalg.map.hdr[string]*google.golang.org/grpc.StreamDesc noalg.map.hdr[string]*google.golang.org/grpc.StreamDesc, *Pnoalg.map.hdr[string]*google.golang.org/grpc.StreamDesc;

struct noalg.map.hdr[string]*google.golang.org/grpc.StreamDesc {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string]*google.golang.org/grpc.StreamDesc *buckets;
    struct noalg.map.bucket[string]*google.golang.org/grpc.StreamDesc *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal/transport.ClientTransport_} noalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal/transport.ClientTransport_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal/transport.ClientTransport_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/grpc/internal/transport.ClientTransport_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/grpc/internal/transport.ClientTransport }
    uintptr F;
    google.golang.org/grpc/internal/transport.ClientTransport X0;
};

typedef struct crypto/x509.publicKeyInfo crypto/x509.publicKeyInfo, *Pcrypto/x509.publicKeyInfo;

struct crypto/x509.publicKeyInfo {
    struct encoding/asn1.RawContent Raw;
    struct crypto/x509/pkix.AlgorithmIdentifier Algorithm;
    struct encoding/asn1.BitString PublicKey;
};

typedef uint64 crypto/internal/edwards25519.fiatScalarMontgomeryDomainFieldElement[4];

typedef struct hash<string,google.golang.org/grpc/resolver.Builder> *map[string]google.golang.org/grpc/resolver.Builder;

typedef struct net.writerOnly net.writerOnly, *Pnet.writerOnly;

struct net.writerOnly {
    io.Writer Writer;
};

typedef struct vendor/golang.org/x/net/dns/dnsmessage.SOAResource vendor/golang.org/x/net/dns/dnsmessage.SOAResource, *Pvendor/golang.org/x/net/dns/dnsmessage.SOAResource;

struct vendor/golang.org/x/net/dns/dnsmessage.SOAResource {
    struct vendor/golang.org/x/net/dns/dnsmessage.Name NS;
    struct vendor/golang.org/x/net/dns/dnsmessage.Name MBox;
    uint32 Serial;
    uint32 Refresh;
    uint32 Retry;
    uint32 Expire;
    uint32 MinTTL;
};

typedef struct noalg.map.iter[google.golang.org/grpc/balancer.SubConn]bool noalg.map.iter[google.golang.org/grpc/balancer.SubConn]bool, *Pnoalg.map.iter[google.golang.org/grpc/balancer.SubConn]bool;

typedef struct noalg.map.hdr[google.golang.org/grpc/balancer.SubConn]bool noalg.map.hdr[google.golang.org/grpc/balancer.SubConn]bool, *Pnoalg.map.hdr[google.golang.org/grpc/balancer.SubConn]bool;

typedef struct noalg.map.bucket[google.golang.org/grpc/balancer.SubConn]bool noalg.map.bucket[google.golang.org/grpc/balancer.SubConn]bool, *Pnoalg.map.bucket[google.golang.org/grpc/balancer.SubConn]bool;

struct noalg.map.iter[google.golang.org/grpc/balancer.SubConn]bool {
    google.golang.org/grpc/balancer.SubConn *key;
    bool *elem;
    void *t;
    struct noalg.map.hdr[google.golang.org/grpc/balancer.SubConn]bool *h;
    struct noalg.map.bucket[google.golang.org/grpc/balancer.SubConn]bool *buckets;
    struct noalg.map.bucket[google.golang.org/grpc/balancer.SubConn]bool *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

struct noalg.map.hdr[google.golang.org/grpc/balancer.SubConn]bool {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[google.golang.org/grpc/balancer.SubConn]bool *buckets;
    struct noalg.map.bucket[google.golang.org/grpc/balancer.SubConn]bool *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.bucket[google.golang.org/grpc/balancer.SubConn]bool {
    uint8 topbits[8];
    noalg.[8]google.golang.org/grpc/balancer.SubConn keys;
    noalg.[8]bool elems;
    void *overflow;
};

typedef struct golang.org/x/net/http2.PingFrame golang.org/x/net/http2.PingFrame, *Pgolang.org/x/net/http2.PingFrame;

struct golang.org/x/net/http2.PingFrame {
    struct golang.org/x/net/http2.FrameHeader FrameHeader;
    uint8 Data[8];
};

typedef struct net/http.transferReader net/http.transferReader, *Pnet/http.transferReader;

struct net/http.transferReader {
    net/http.Header Header;
    int StatusCode;
    struct string RequestMethod;
    int ProtoMajor;
    int ProtoMinor;
    io.ReadCloser Body;
    int64 ContentLength;
    bool Chunked;
    bool Close;
    net/http.Header Trailer;
};

typedef struct regexp/syntax.parser regexp/syntax.parser, *Pregexp/syntax.parser;

typedef struct hash<*regexp/syntax.Regexp,int64> *map[*regexp/syntax.Regexp]int64;

struct regexp/syntax.parser {
    regexp/syntax.Flags flags;
    struct []*regexp/syntax.Regexp stack;
    struct regexp/syntax.Regexp *free;
    int numCap;
    struct string wholeRegexp;
    struct []int32 tmpClass;
    int numRegexp;
    int numRunes;
    int64 repeats;
    map[*regexp/syntax.Regexp]int height;
    map[*regexp/syntax.Regexp]int64 size;
};

typedef struct google.golang.org/grpc/stats.incomingTraceKey google.golang.org/grpc/stats.incomingTraceKey, *Pgoogle.golang.org/grpc/stats.incomingTraceKey;

struct google.golang.org/grpc/stats.incomingTraceKey {
};

typedef struct bucket<string,*encoding/json.field> bucket<string,*encoding/json.field>, *Pbucket<string,*encoding/json.field>;

struct bucket<string,*encoding/json.field> {
    uint8 tophash[8];
    struct string keys[8];
    struct encoding/json.field *values[8];
    struct bucket<string,*encoding/json.field> *overflow;
};

typedef struct noalg.map.iter[crypto/x509.sum224]bool noalg.map.iter[crypto/x509.sum224]bool, *Pnoalg.map.iter[crypto/x509.sum224]bool;

struct noalg.map.iter[crypto/x509.sum224]bool {
    crypto/x509.sum224 *key;
    bool *elem;
    void *t;
    struct noalg.map.hdr[crypto/x509.sum224]bool *h;
    struct noalg.map.bucket[crypto/x509.sum224]bool *buckets;
    struct noalg.map.bucket[crypto/x509.sum224]bool *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct hash<google.golang.org/protobuf/internal/filedesc.Edition,google.golang.org/protobuf/internal/filedesc.EditionFeatures> hash<google.golang.org/protobuf/internal/filedesc.Edition,google.golang.org/protobuf/internal/filedesc.EditionFeatures>, *Phash<google.golang.org/protobuf/internal/filedesc.Edition,google.golang.org/protobuf/internal/filedesc.EditionFeatures>;

typedef struct hash<google.golang.org/protobuf/internal/filedesc.Edition,google.golang.org/protobuf/internal/filedesc.EditionFeatures> *map[google.golang.org/protobuf/internal/filedesc.Edition]google.golang.org/protobuf/internal/filedesc.EditionFeatures;

struct hash<google.golang.org/protobuf/internal/filedesc.Edition,google.golang.org/protobuf/internal/filedesc.EditionFeatures> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/protobuf/internal/filedesc.Edition,google.golang.org/protobuf/internal/filedesc.EditionFeatures> *buckets;
    struct bucket<google.golang.org/protobuf/internal/filedesc.Edition,google.golang.org/protobuf/internal/filedesc.EditionFeatures> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct noalg.struct_{_F_uintptr;_X0_string_} noalg.struct_{_F_uintptr;_X0_string_}, *Pnoalg.struct_{_F_uintptr;_X0_string_};

struct noalg.struct_{_F_uintptr;_X0_string_} { // Original name: noalg.struct { F uintptr; X0 string }
    uintptr F;
    struct string X0;
};

typedef struct google.golang.org/grpc/stats.ConnTagInfo google.golang.org/grpc/stats.ConnTagInfo, *Pgoogle.golang.org/grpc/stats.ConnTagInfo;

struct google.golang.org/grpc/stats.ConnTagInfo {
    net.Addr RemoteAddr;
    net.Addr LocalAddr;
};

typedef struct sudog<net.result[go.shape.[]net.IPAddr].1> sudog<net.result[go.shape.[]net.IPAddr].1>, *Psudog<net.result[go.shape.[]net.IPAddr].1>;

typedef struct net.result[go.shape.[]net.IPAddr].1 net.result[go.shape.[]net.IPAddr].1, *Pnet.result[go.shape.[]net.IPAddr].1;

typedef struct go.shape.[]net.IPAddr go.shape.[]net.IPAddr, *Pgo.shape.[]net.IPAddr;

struct go.shape.[]net.IPAddr {
    struct net.IPAddr *array;
    int len;
    int cap;
};

struct net.result[go.shape.[]net.IPAddr].1 { // Original name: net.result[go.shape.[]net.IPAddr]·1
    struct go.shape.[]net.IPAddr res;
    error err;
};

struct sudog<net.result[go.shape.[]net.IPAddr].1> { // Original name: sudog<net.result[go.shape.[]net.IPAddr]·1>
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    struct net.result[go.shape.[]net.IPAddr].1 *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

typedef struct noalg.struct_{_F_uintptr;_X0_**uint32;_X1_*google.golang.org/grpc/internal/transport.http2Client_} noalg.struct_{_F_uintptr;_X0_**uint32;_X1_*google.golang.org/grpc/internal/transport.http2Client_}, *Pnoalg.struct_{_F_uintptr;_X0_**uint32;_X1_*google.golang.org/grpc/internal/transport.http2Client_};

struct noalg.struct_{_F_uintptr;_X0_**uint32;_X1_*google.golang.org/grpc/internal/transport.http2Client_} { // Original name: noalg.struct { F uintptr; X0 **uint32; X1 *google.golang.org/grpc/internal/transport.http2Client }
    uintptr F;
    uint32 **X0;
    struct google.golang.org/grpc/internal/transport.http2Client *X1;
};

typedef struct internal/reflectlite.emptyInterface internal/reflectlite.emptyInterface, *Pinternal/reflectlite.emptyInterface;

struct internal/reflectlite.emptyInterface {
    struct internal/abi.Type *typ;
    void *word;
};

typedef struct google.golang.org/protobuf/internal/filedesc.PlaceholderFile google.golang.org/protobuf/internal/filedesc.PlaceholderFile, *Pgoogle.golang.org/protobuf/internal/filedesc.PlaceholderFile;

struct google.golang.org/protobuf/internal/filedesc.PlaceholderFile {
    uint8 *str;
    int len;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*error;_X1_context.CancelFunc_} noalg.struct_{_F_uintptr;_X0_*error;_X1_context.CancelFunc_}, *Pnoalg.struct_{_F_uintptr;_X0_*error;_X1_context.CancelFunc_};

struct noalg.struct_{_F_uintptr;_X0_*error;_X1_context.CancelFunc_} { // Original name: noalg.struct { F uintptr; X0 *error; X1 context.CancelFunc }
    uintptr F;
    error *X0;
    void (**X1)(void);
};

typedef struct noalg.struct_{_F_uintptr;_X0_*net.Resolver;_X1_context.Context;_X2_*net.dnsConfig;_X3_string;_X4_chan_net.result.3_} noalg.struct_{_F_uintptr;_X0_*net.Resolver;_X1_context.Context;_X2_*net.dnsConfig;_X3_string;_X4_chan_net.result.3_}, *Pnoalg.struct_{_F_uintptr;_X0_*net.Resolver;_X1_context.Context;_X2_*net.dnsConfig;_X3_string;_X4_chan_net.result.3_};

struct noalg.struct_{_F_uintptr;_X0_*net.Resolver;_X1_context.Context;_X2_*net.dnsConfig;_X3_string;_X4_chan_net.result.3_} { // Original name: noalg.struct { F uintptr; X0 *net.Resolver; X1 context.Context; X2 *net.dnsConfig; X3 string; X4 chan net.result·3 }
    uintptr F;
    struct net.Resolver *X0;
    context.Context X1;
    struct net.dnsConfig *X2;
    struct string X3;
    chan_net.result.3 X4;
};

typedef uint64 crypto/internal/nistec/fiat.p521NonMontgomeryDomainFieldElement[9];

typedef struct errors.errorString errors.errorString, *Perrors.errorString;

struct errors.errorString {
    struct string s;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/descfmt.records;_X1_*[]string;_X2_*int_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/descfmt.records;_X1_*[]string;_X2_*int_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/descfmt.records;_X1_*[]string;_X2_*int_};

typedef struct google.golang.org/protobuf/internal/descfmt.records google.golang.org/protobuf/internal/descfmt.records, *Pgoogle.golang.org/protobuf/internal/descfmt.records;

typedef struct [][2]string [][2]string, *P[][2]string;

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/descfmt.records;_X1_*[]string;_X2_*int_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/descfmt.records; X1 *[]string; X2 *int }
    uintptr F;
    struct google.golang.org/protobuf/internal/descfmt.records *X0;
    struct []string *X1;
    int *X2;
};

struct [][2]string {
    struct string (*array)[2];
    int len;
    int cap;
};

struct google.golang.org/protobuf/internal/descfmt.records {
    struct [][2]string recs;
    bool allowMulti;
    void (**record)(struct string);
};

typedef struct fmt.readRune fmt.readRune, *Pfmt.readRune;

struct fmt.readRune {
    io.Reader reader;
    uint8 buf[4];
    int pending;
    uint8 pendBuf[4];
    int32 peekRune;
};

typedef struct noalg.map.hdr[google.golang.org/protobuf/reflect/protoreflect.Name]int noalg.map.hdr[google.golang.org/protobuf/reflect/protoreflect.Name]int, *Pnoalg.map.hdr[google.golang.org/protobuf/reflect/protoreflect.Name]int;

typedef struct noalg.map.bucket[google.golang.org/protobuf/reflect/protoreflect.Name]int noalg.map.bucket[google.golang.org/protobuf/reflect/protoreflect.Name]int, *Pnoalg.map.bucket[google.golang.org/protobuf/reflect/protoreflect.Name]int;

struct noalg.map.hdr[google.golang.org/protobuf/reflect/protoreflect.Name]int {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[google.golang.org/protobuf/reflect/protoreflect.Name]int *buckets;
    struct noalg.map.bucket[google.golang.org/protobuf/reflect/protoreflect.Name]int *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.bucket[google.golang.org/protobuf/reflect/protoreflect.Name]int {
    uint8 topbits[8];
    noalg.[8]google.golang.org/protobuf/reflect/protoreflect.Name keys;
    noalg.[8]int elems;
    void *overflow;
};

typedef struct google.golang.org/protobuf/reflect/protoreflect.Name noalg.[8]google.golang.org/protobuf/reflect/protoreflect.Name[8];

typedef struct noalg.map.iter[net.Listener]bool noalg.map.iter[net.Listener]bool, *Pnoalg.map.iter[net.Listener]bool;

struct noalg.map.iter[net.Listener]bool {
    net.Listener *key;
    bool *elem;
    void *t;
    struct noalg.map.hdr[net.Listener]bool *h;
    struct noalg.map.bucket[net.Listener]bool *buckets;
    struct noalg.map.bucket[net.Listener]bool *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct noalg.struct_{_F_uintptr;_R_*net.Resolver_} noalg.struct_{_F_uintptr;_R_*net.Resolver_}, *Pnoalg.struct_{_F_uintptr;_R_*net.Resolver_};

struct noalg.struct_{_F_uintptr;_R_*net.Resolver_} { // Original name: noalg.struct { F uintptr; R *net.Resolver }
    uintptr F;
    struct net.Resolver *R;
};

typedef struct google.golang.org/grpc/internal/channelz.TraceEvent google.golang.org/grpc/internal/channelz.TraceEvent, *Pgoogle.golang.org/grpc/internal/channelz.TraceEvent;

struct google.golang.org/grpc/internal/channelz.TraceEvent {
    struct string Desc;
    google.golang.org/grpc/internal/channelz.Severity Severity;
    struct google.golang.org/grpc/internal/channelz.TraceEvent *Parent;
};

typedef struct html/template.HTMLAttr html/template.HTMLAttr, *Phtml/template.HTMLAttr;

struct html/template.HTMLAttr {
    uint8 *str;
    int len;
};

typedef struct []*flag.Flag []*flag.Flag, *P[]*flag.Flag;

struct []*flag.Flag {
    struct flag.Flag **array;
    int len;
    int cap;
};

typedef struct vendor/golang.org/x/net/http/httpproxy.allMatch vendor/golang.org/x/net/http/httpproxy.allMatch, *Pvendor/golang.org/x/net/http/httpproxy.allMatch;

struct vendor/golang.org/x/net/http/httpproxy.allMatch {
};

typedef struct regexp.onePassMachine regexp.onePassMachine, *Pregexp.onePassMachine;

struct regexp.onePassMachine {
    struct regexp.inputs inputs;
    struct []int matchcap;
};

typedef struct google.golang.org/protobuf/internal/impl.EnumInfo google.golang.org/protobuf/internal/impl.EnumInfo, *Pgoogle.golang.org/protobuf/internal/impl.EnumInfo;

struct google.golang.org/protobuf/internal/impl.EnumInfo {
    reflect.Type GoReflectType;
    google.golang.org/protobuf/reflect/protoreflect.EnumDescriptor Desc;
};

typedef struct crypto/x509.VerifyOptions crypto/x509.VerifyOptions, *Pcrypto/x509.VerifyOptions;

typedef struct crypto/x509.CertPool crypto/x509.CertPool, *Pcrypto/x509.CertPool;

typedef struct hash<string,[]int> *map[string][]int;

typedef struct []crypto/x509.lazyCert []crypto/x509.lazyCert, *P[]crypto/x509.lazyCert;

typedef struct hash<crypto/x509.sum224,bool> *map[crypto/x509.sum224]bool;

typedef struct crypto/x509.lazyCert crypto/x509.lazyCert, *Pcrypto/x509.lazyCert;

struct []crypto/x509.lazyCert {
    struct crypto/x509.lazyCert *array;
    int len;
    int cap;
};

struct crypto/x509.CertPool {
    map[string][]int byName;
    struct []crypto/x509.lazyCert lazyCerts;
    map[crypto/x509.sum224]bool haveSum;
    bool systemPool;
};

struct crypto/x509.VerifyOptions {
    struct string DNSName;
    struct crypto/x509.CertPool *Intermediates;
    struct crypto/x509.CertPool *Roots;
    struct time.Time CurrentTime;
    struct []crypto/x509.ExtKeyUsage KeyUsages;
    int MaxConstraintComparisions;
};

struct crypto/x509.lazyCert {
    struct []uint8 rawSubject;
    void (**getCert)(struct crypto/x509.Certificate **, error *);
};

typedef struct hchan<int> *chan_int;

typedef struct strings.Reader strings.Reader, *Pstrings.Reader;

struct strings.Reader {
    struct string s;
    int64 i;
    int prevRune;
};

typedef struct google.golang.org/grpc/stats.OutPayload google.golang.org/grpc/stats.OutPayload, *Pgoogle.golang.org/grpc/stats.OutPayload;

struct google.golang.org/grpc/stats.OutPayload {
    bool Client;
    interface_{} Payload;
    struct []uint8 Data;
    int Length;
    int CompressedLength;
    int WireLength;
    struct time.Time SentTime;
};

typedef struct sort.StringSlice sort.StringSlice, *Psort.StringSlice;

struct sort.StringSlice {
    struct string *array;
    int len;
    int cap;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_*runtime.g;_X2_int32_} noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_*runtime.g;_X2_int32_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_*runtime.g;_X2_int32_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_*runtime.g;_X2_int32_} { // Original name: noalg.struct { F uintptr; X0 *runtime.g; X1 *runtime.g; X2 int32 }
    uintptr F;
    struct runtime.g *X0;
    struct runtime.g *X1;
    int32 X2;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*uint32;_X1_int32_} noalg.struct_{_F_uintptr;_X0_*uint32;_X1_int32_}, *Pnoalg.struct_{_F_uintptr;_X0_*uint32;_X1_int32_};

struct noalg.struct_{_F_uintptr;_X0_*uint32;_X1_int32_} { // Original name: noalg.struct { F uintptr; X0 *uint32; X1 int32 }
    uintptr F;
    uint32 *X0;
    int32 X1;
};

typedef struct crypto/ecdh.nistCurve[go.shape.*uint8] crypto/ecdh.nistCurve[go.shape.*uint8], *Pcrypto/ecdh.nistCurve[go.shape.*uint8];

struct crypto/ecdh.nistCurve[go.shape.*uint8] {
    struct string name;
    void (**newPoint)(go.shape.*uint8 *);
    struct []uint8 scalarOrder;
};

typedef struct reflect.makeFuncImpl reflect.makeFuncImpl, *Preflect.makeFuncImpl;

struct reflect.makeFuncImpl {
    struct reflect.makeFuncCtxt makeFuncCtxt;
    struct internal/abi.FuncType *ftyp;
    void (**fn)(struct []reflect.Value, struct []reflect.Value *);
};

typedef struct hash<reflect.Type,*google.golang.org/protobuf/internal/impl.coderFieldInfo> *map[reflect.Type]*google.golang.org/protobuf/internal/impl.coderFieldInfo;

typedef struct []strconv.leftCheat []strconv.leftCheat, *P[]strconv.leftCheat;

struct []strconv.leftCheat {
    struct strconv.leftCheat *array;
    int len;
    int cap;
};

typedef struct net.file net.file, *Pnet.file;

struct net.file {
    struct os.File *file;
    struct []uint8 data;
    bool atEOF;
};

typedef struct sort.IntSlice sort.IntSlice, *Psort.IntSlice;

struct sort.IntSlice {
    int *array;
    int len;
    int cap;
};

typedef struct google.golang.org/grpc.nopBufferPool google.golang.org/grpc.nopBufferPool, *Pgoogle.golang.org/grpc.nopBufferPool;

struct google.golang.org/grpc.nopBufferPool {
};

typedef struct runtime.iface interface_{_Equal(interface_{})_bool_};

typedef struct google.golang.org/grpc.joinDialOption google.golang.org/grpc.joinDialOption, *Pgoogle.golang.org/grpc.joinDialOption;

typedef struct []google.golang.org/grpc.DialOption []google.golang.org/grpc.DialOption, *P[]google.golang.org/grpc.DialOption;

struct []google.golang.org/grpc.DialOption {
    google.golang.org/grpc.DialOption *array;
    int len;
    int cap;
};

struct google.golang.org/grpc.joinDialOption {
    struct []google.golang.org/grpc.DialOption opts;
};

typedef struct runtime.sigeventFields runtime.sigeventFields, *Pruntime.sigeventFields;

struct runtime.sigeventFields {
    uintptr value;
    int32 signo;
    int32 notify;
    int32 sigev_notify_thread_id;
};

typedef struct compress/flate.decompressor compress/flate.decompressor, *Pcompress/flate.decompressor;

struct compress/flate.decompressor {
    compress/flate.Reader r;
    struct bufio.Reader *rBuf;
    int64 roffset;
    uint32 b;
    uint nb;
    struct compress/flate.huffmanDecoder h1;
    struct compress/flate.huffmanDecoder h2;
    int (*bits)[316];
    int (*codebits)[19];
    struct compress/flate.dictDecoder dict;
    uint8 buf[4];
    void (**step)(struct compress/flate.decompressor *);
    int stepState;
    bool final;
    error err;
    struct []uint8 toRead;
    struct compress/flate.huffmanDecoder *hl;
    struct compress/flate.huffmanDecoder *hd;
    int copyLen;
    int copyDist;
};

typedef struct hash<vendor/golang.org/x/net/dns/dnsmessage.RCode,string> hash<vendor/golang.org/x/net/dns/dnsmessage.RCode,string>, *Phash<vendor/golang.org/x/net/dns/dnsmessage.RCode,string>;

typedef struct hash<vendor/golang.org/x/net/dns/dnsmessage.RCode,string> *map[vendor/golang.org/x/net/dns/dnsmessage.RCode]string;

struct hash<vendor/golang.org/x/net/dns/dnsmessage.RCode,string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<vendor/golang.org/x/net/dns/dnsmessage.RCode,string> *buckets;
    struct bucket<vendor/golang.org/x/net/dns/dnsmessage.RCode,string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct noalg.struct_{_F_uintptr;_X0_[]*crypto/x509.Certificate;_X1_**int;_X2_*error;_X3_*crypto/x509.Certificate;_X4_*error;_X5_**crypto/x509.Certificate;_X6_*crypto/x509.VerifyOptions;_X7_*[][]*crypto/x509.Certificate_} noalg.struct_{_F_uintptr;_X0_[]*crypto/x509.Certificate;_X1_**int;_X2_*error;_X3_*crypto/x509.Certificate;_X4_*error;_X5_**crypto/x509.Certificate;_X6_*crypto/x509.VerifyOptions;_X7_*[][]*crypto/x509.Certificate_}, *Pnoalg.struct_{_F_uintptr;_X0_[]*crypto/x509.Certificate;_X1_**int;_X2_*error;_X3_*crypto/x509.Certificate;_X4_*error;_X5_**crypto/x509.Certificate;_X6_*crypto/x509.VerifyOptions;_X7_*[][]*crypto/x509.Certificate_};

struct noalg.struct_{_F_uintptr;_X0_[]*crypto/x509.Certificate;_X1_**int;_X2_*error;_X3_*crypto/x509.Certificate;_X4_*error;_X5_**crypto/x509.Certificate;_X6_*crypto/x509.VerifyOptions;_X7_*[][]*crypto/x509.Certificate_} { // Original name: noalg.struct { F uintptr; X0 []*crypto/x509.Certificate; X1 **int; X2 *error; X3 *crypto/x509.Certificate; X4 *error; X5 **crypto/x509.Certificate; X6 *crypto/x509.VerifyOptions; X7 *[][]*crypto/x509.Certificate }
    uintptr F;
    struct []*crypto/x509.Certificate X0;
    int **X1;
    error *X2;
    struct crypto/x509.Certificate *X3;
    error *X4;
    struct crypto/x509.Certificate **X5;
    struct crypto/x509.VerifyOptions *X6;
    struct [][]*crypto/x509.Certificate *X7;
};

typedef struct hash<int32,string> *map[int32]string;

typedef struct net/textproto.Reader net/textproto.Reader, *Pnet/textproto.Reader;

typedef struct net/textproto.dotReader net/textproto.dotReader, *Pnet/textproto.dotReader;

struct net/textproto.Reader {
    struct bufio.Reader *R;
    struct net/textproto.dotReader *dot;
    struct []uint8 buf;
};

struct net/textproto.dotReader {
    struct net/textproto.Reader *r;
    int state;
};

typedef struct hash<vendor/golang.org/x/net/dns/dnsmessage.Class,string> hash<vendor/golang.org/x/net/dns/dnsmessage.Class,string>, *Phash<vendor/golang.org/x/net/dns/dnsmessage.Class,string>;

struct hash<vendor/golang.org/x/net/dns/dnsmessage.Class,string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<vendor/golang.org/x/net/dns/dnsmessage.Class,string> *buckets;
    struct bucket<vendor/golang.org/x/net/dns/dnsmessage.Class,string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*regexp.Regexp;_X1_string;_X2_string_} noalg.struct_{_F_uintptr;_X0_*regexp.Regexp;_X1_string;_X2_string_}, *Pnoalg.struct_{_F_uintptr;_X0_*regexp.Regexp;_X1_string;_X2_string_};

struct noalg.struct_{_F_uintptr;_X0_*regexp.Regexp;_X1_string;_X2_string_} { // Original name: noalg.struct { F uintptr; X0 *regexp.Regexp; X1 string; X2 string }
    uintptr F;
    struct regexp.Regexp *X0;
    struct string X1;
    struct string X2;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/text.Encoder_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/text.Encoder_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/text.Encoder_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/internal/encoding/text.Encoder_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/internal/encoding/text.Encoder }
    uintptr F;
    struct google.golang.org/protobuf/internal/encoding/text.Encoder *X0;
};

typedef struct noalg.struct_{_google.golang.org/grpc/internal/transport.c_unsafe.Pointer;_google.golang.org/grpc/internal/transport.elem_unsafe.Pointer_} noalg.[3]struct_{_google.golang.org/grpc/internal/transport.c_unsafe.Pointer;_google.golang.org/grpc/internal/transport.elem_unsafe.Pointer_}[3];

typedef struct noalg.struct_{_F_uintptr;_R_*internal/godebug.Setting_} noalg.struct_{_F_uintptr;_R_*internal/godebug.Setting_}, *Pnoalg.struct_{_F_uintptr;_R_*internal/godebug.Setting_};

typedef struct internal/godebug.Setting internal/godebug.Setting, *Pinternal/godebug.Setting;

struct internal/godebug.Setting {
    struct string name;
    struct sync.Once once;
    struct internal/godebug.setting *setting;
};

struct noalg.struct_{_F_uintptr;_R_*internal/godebug.Setting_} { // Original name: noalg.struct { F uintptr; R *internal/godebug.Setting }
    uintptr F;
    struct internal/godebug.Setting *R;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*net.sysDialer_} noalg.struct_{_F_uintptr;_X0_*net.sysDialer_}, *Pnoalg.struct_{_F_uintptr;_X0_*net.sysDialer_};

struct noalg.struct_{_F_uintptr;_X0_*net.sysDialer_} { // Original name: noalg.struct { F uintptr; X0 *net.sysDialer }
    uintptr F;
    struct net.sysDialer *X0;
};

typedef struct net.TCPListener net.TCPListener, *Pnet.TCPListener;

typedef struct net.ListenConfig net.ListenConfig, *Pnet.ListenConfig;

struct net.ListenConfig {
    void (**Control)(struct string, struct string, syscall.RawConn, error *);
    time.Duration KeepAlive;
    net.mptcpStatus mptcpStatus;
};

struct net.TCPListener {
    struct net.netFD *fd;
    struct net.ListenConfig lc;
};

typedef struct runtime/internal/syscall.EpollEvent runtime/internal/syscall.EpollEvent, *Pruntime/internal/syscall.EpollEvent;

struct runtime/internal/syscall.EpollEvent {
    uint32 Events;
    uint8 Data[8];
};

typedef struct noalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc.ClientConn_} noalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc.ClientConn_}, *Pnoalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc.ClientConn_};

struct noalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc.ClientConn_} { // Original name: noalg.struct { F uintptr; X0 *error; X1 *google.golang.org/grpc.ClientConn }
    uintptr F;
    error *X0;
    struct google.golang.org/grpc.ClientConn *X1;
};

typedef struct reflect.layoutType reflect.layoutType, *Preflect.layoutType;

typedef struct reflect.abiDesc reflect.abiDesc, *Preflect.abiDesc;

typedef struct reflect.abiSeq reflect.abiSeq, *Preflect.abiSeq;

struct reflect.abiSeq {
    struct []reflect.abiStep steps;
    struct []int valueStart;
    uintptr stackBytes;
    int iregs;
    int fregs;
};

struct reflect.abiDesc {
    struct reflect.abiSeq call;
    struct reflect.abiSeq ret;
    uintptr stackCallArgsSize;
    uintptr retOffset;
    uintptr spill;
    struct reflect.bitVector *stackPtrs;
    internal/abi.IntArgRegBitmap inRegPtrs;
    internal/abi.IntArgRegBitmap outRegPtrs;
};

struct reflect.layoutType {
    struct internal/abi.Type *t;
    struct sync.Pool *framePool;
    struct reflect.abiDesc abid;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*sync.Once;_X1_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X2_*google.golang.org/protobuf/reflect/protoreflect.MessageType_} noalg.struct_{_F_uintptr;_X0_*sync.Once;_X1_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X2_*google.golang.org/protobuf/reflect/protoreflect.MessageType_}, *Pnoalg.struct_{_F_uintptr;_X0_*sync.Once;_X1_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X2_*google.golang.org/protobuf/reflect/protoreflect.MessageType_};

struct noalg.struct_{_F_uintptr;_X0_*sync.Once;_X1_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X2_*google.golang.org/protobuf/reflect/protoreflect.MessageType_} { // Original name: noalg.struct { F uintptr; X0 *sync.Once; X1 google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor; X2 *google.golang.org/protobuf/reflect/protoreflect.MessageType }
    uintptr F;
    struct sync.Once *X0;
    google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor X1;
    google.golang.org/protobuf/reflect/protoreflect.MessageType *X2;
};

typedef struct net/http.readTrackingBody net/http.readTrackingBody, *Pnet/http.readTrackingBody;

struct net/http.readTrackingBody {
    io.ReadCloser ReadCloser;
    bool didRead;
    bool didClose;
};

typedef struct net/http.byteReader net/http.byteReader, *Pnet/http.byteReader;

struct net/http.byteReader {
    uint8 b;
    bool done;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*[]encoding/json.field_} noalg.struct_{_F_uintptr;_X0_*[]encoding/json.field_}, *Pnoalg.struct_{_F_uintptr;_X0_*[]encoding/json.field_};

typedef struct []encoding/json.field []encoding/json.field, *P[]encoding/json.field;

struct []encoding/json.field {
    struct encoding/json.field *array;
    int len;
    int cap;
};

struct noalg.struct_{_F_uintptr;_X0_*[]encoding/json.field_} { // Original name: noalg.struct { F uintptr; X0 *[]encoding/json.field }
    uintptr F;
    struct []encoding/json.field *X0;
};

