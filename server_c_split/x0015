    struct text/tabwriter.cell *array;
    int len;
    int cap;
};

struct noalg.struct_{_F_uintptr;_X0_*text/tabwriter.Writer;_X1_*error_} { // Original name: noalg.struct { F uintptr; X0 *text/tabwriter.Writer; X1 *error }
    uintptr F;
    struct text/tabwriter.Writer *X0;
    error *X1;
};

typedef struct google.golang.org/grpc/balancer/base.errPicker google.golang.org/grpc/balancer/base.errPicker, *Pgoogle.golang.org/grpc/balancer/base.errPicker;

struct google.golang.org/grpc/balancer/base.errPicker {
    error err;
};

typedef struct runtime.atomicHeadTailIndex runtime.atomicHeadTailIndex, *Pruntime.atomicHeadTailIndex;

struct runtime.atomicHeadTailIndex {
    struct runtime/internal/atomic.Uint64 u;
};

typedef struct hash<uint16,bool> hash<uint16,bool>, *Phash<uint16,bool>;

typedef struct bucket<uint16,bool> bucket<uint16,bool>, *Pbucket<uint16,bool>;

struct bucket<uint16,bool> {
    uint8 tophash[8];
    uint16 keys[8];
    bool values[8];
    struct bucket<uint16,bool> *overflow;
};

struct hash<uint16,bool> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<uint16,bool> *buckets;
    struct bucket<uint16,bool> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct runtime.iface syscall.Sockaddr;

typedef struct vendor/golang.org/x/net/http2/hpack.pairNameValue vendor/golang.org/x/net/http2/hpack.pairNameValue, *Pvendor/golang.org/x/net/http2/hpack.pairNameValue;

struct vendor/golang.org/x/net/http2/hpack.pairNameValue {
    struct string name;
    struct string value;
};

typedef struct compress/flate.huffmanEncoder compress/flate.huffmanEncoder, *Pcompress/flate.huffmanEncoder;

typedef struct []compress/flate.hcode []compress/flate.hcode, *P[]compress/flate.hcode;

typedef struct []compress/flate.literalNode []compress/flate.literalNode, *P[]compress/flate.literalNode;

typedef struct compress/flate.byLiteral compress/flate.byLiteral, *Pcompress/flate.byLiteral;

typedef struct compress/flate.hcode compress/flate.hcode, *Pcompress/flate.hcode;

struct compress/flate.hcode {
    uint16 code;
    uint16 len;
};

struct compress/flate.byLiteral {
    struct compress/flate.literalNode *array;
    int len;
    int cap;
};

struct []compress/flate.hcode {
    struct compress/flate.hcode *array;
    int len;
    int cap;
};

struct []compress/flate.literalNode {
    struct compress/flate.literalNode *array;
    int len;
    int cap;
};

struct compress/flate.huffmanEncoder {
    struct []compress/flate.hcode codes;
    struct []compress/flate.literalNode freqcache;
    int32 bitCount[17];
    struct compress/flate.byLiteral lns;
    struct compress/flate.byFreq lfs;
};

typedef struct noalg.struct_{_F_uintptr;_X0_chan_error_} noalg.struct_{_F_uintptr;_X0_chan_error_}, *Pnoalg.struct_{_F_uintptr;_X0_chan_error_};

typedef struct hchan<error> hchan<error>, *Phchan<error>;

typedef struct hchan<error> *chan_error;

typedef struct waitq<error> waitq<error>, *Pwaitq<error>;

typedef struct sudog<error> sudog<error>, *Psudog<error>;

struct sudog<error> {
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    error *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

struct waitq<error> {
    struct sudog<error> *first;
    struct sudog<error> *last;
};

struct hchan<error> {
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<error> recvq;
    struct waitq<error> sendq;
    struct runtime.mutex lock;
};

struct noalg.struct_{_F_uintptr;_X0_chan_error_} { // Original name: noalg.struct { F uintptr; X0 chan error }
    uintptr F;
    chan_error X0;
};

typedef struct internal/unsafeheader.String internal/unsafeheader.String, *Pinternal/unsafeheader.String;

struct internal/unsafeheader.String {
    void *Data;
    int Len;
};

typedef struct context.timerCtx context.timerCtx, *Pcontext.timerCtx;

typedef struct context.cancelCtx context.cancelCtx, *Pcontext.cancelCtx;

typedef struct hash<context.canceler,struct_{}> *map[context.canceler]struct_{};

struct context.cancelCtx {
    context.Context Context;
    struct sync.Mutex mu;
    struct sync/atomic.Value done;
    map[context.canceler]struct_{} children;
    error err;
    error cause;
};

struct context.timerCtx {
    struct context.cancelCtx cancelCtx;
    struct time.Timer *timer;
    struct time.Time deadline;
};

typedef struct noalg.map.hdr[string]interface_{} noalg.map.hdr[string]interface_{}, *Pnoalg.map.hdr[string]interface_{};

struct noalg.map.hdr[string]interface_{} { // Original name: noalg.map.hdr[string]interface {}
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string]interface_{} *buckets;
    struct noalg.map.bucket[string]interface_{} *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct net/http.Request net/http.Request, *Pnet/http.Request;

typedef struct hash<string,[]string> *net/url.Values;

typedef struct net/http.Response net/http.Response, *Pnet/http.Response;

struct net/http.Response {
    struct string Status;
    int StatusCode;
    struct string Proto;
    int ProtoMajor;
    int ProtoMinor;
    net/http.Header Header;
    io.ReadCloser Body;
    int64 ContentLength;
    struct []string TransferEncoding;
    bool Close;
    bool Uncompressed;
    net/http.Header Trailer;
    struct net/http.Request *Request;
    struct crypto/tls.ConnectionState *TLS;
};

struct net/http.Request {
    struct string Method;
    struct net/url.URL *URL;
    struct string Proto;
    int ProtoMajor;
    int ProtoMinor;
    net/http.Header Header;
    io.ReadCloser Body;
    void (**GetBody)(io.ReadCloser *, error *);
    int64 ContentLength;
    struct []string TransferEncoding;
    bool Close;
    struct string Host;
    net/url.Values Form;
    net/url.Values PostForm;
    struct mime/multipart.Form *MultipartForm;
    net/http.Header Trailer;
    struct string RemoteAddr;
    struct string RequestURI;
    struct crypto/tls.ConnectionState *TLS;
    <-chan_struct_{} Cancel;
    struct net/http.Response *Response;
    context.Context ctx;
};

typedef struct encoding/json.SyntaxError encoding/json.SyntaxError, *Pencoding/json.SyntaxError;

struct encoding/json.SyntaxError {
    struct string msg;
    int64 Offset;
};

typedef struct net/http.headerSorter net/http.headerSorter, *Pnet/http.headerSorter;

struct net/http.headerSorter {
    struct []net/http.keyValues kvs;
};

typedef struct hash<string,int32> hash<string,int32>, *Phash<string,int32>;

typedef struct bucket<string,int32> bucket<string,int32>, *Pbucket<string,int32>;

struct bucket<string,int32> {
    uint8 tophash[8];
    struct string keys[8];
    int32 values[8];
    struct bucket<string,int32> *overflow;
};

struct hash<string,int32> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,int32> *buckets;
    struct bucket<string,int32> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct runtime/internal/atomic.Pointer[go.shape.func()] runtime/internal/atomic.Pointer[go.shape.func()], *Pruntime/internal/atomic.Pointer[go.shape.func()];

struct runtime/internal/atomic.Pointer[go.shape.func()] {
    struct runtime/internal/atomic.UnsafePointer u;
};

typedef struct runtime.slice runtime.slice, *Pruntime.slice;

struct runtime.slice {
    void *array;
    int len;
    int cap;
};

typedef struct net/http.body net/http.body, *Pnet/http.body;

struct net/http.body {
    io.Reader src;
    interface_{} hdr;
    struct bufio.Reader *r;
    bool closing;
    bool doEarlyClose;
    struct sync.Mutex mu;
    bool sawEOF;
    bool closed;
    bool earlyClose;
    void (**onHitEOF)(void);
};

typedef struct runtime.pcvalueCache runtime.pcvalueCache, *Pruntime.pcvalueCache;

typedef struct runtime.pcvalueCacheEnt runtime.pcvalueCacheEnt, *Pruntime.pcvalueCacheEnt;

struct runtime.pcvalueCacheEnt {
    uintptr targetpc;
    uint32 off;
    int32 val;
};

struct runtime.pcvalueCache {
    struct runtime.pcvalueCacheEnt entries[2][8];
};

typedef struct internal/godebug.setting internal/godebug.setting, *Pinternal/godebug.setting;

typedef struct internal/godebugs.Info internal/godebugs.Info, *Pinternal/godebugs.Info;

struct internal/godebug.setting {
    struct sync/atomic.Pointer[internal/godebug.value] value;
    struct sync.Once nonDefaultOnce;
    struct sync/atomic.Uint64 nonDefault;
    struct internal/godebugs.Info *info;
};

struct internal/godebugs.Info {
    struct string Name;
    struct string Package;
    int Changed;
    struct string Old;
    bool Opaque;
};

typedef struct []unicode.Range16 []unicode.Range16, *P[]unicode.Range16;

typedef struct unicode.Range16 unicode.Range16, *Punicode.Range16;

struct unicode.Range16 {
    uint16 Lo;
    uint16 Hi;
    uint16 Stride;
};

struct []unicode.Range16 {
    struct unicode.Range16 *array;
    int len;
    int cap;
};

typedef struct hash<string,map[string]string> hash<string,map[string]string>, *Phash<string,map[string]string>;

struct hash<string,map[string]string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,map[string]string> *buckets;
    struct bucket<string,map[string]string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct runtime.iface interface_{_PassServerTransport(google.golang.org/grpc/internal/transport.ServerTransport)_};

typedef struct noalg.map.bucket[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool noalg.map.bucket[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool, *Pnoalg.map.bucket[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool;

typedef map[google.golang.org/grpc/internal/transport.ServerTransport]bool noalg.[8]map[google.golang.org/grpc/internal/transport.ServerTransport]bool[8];

struct noalg.map.bucket[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8]map[google.golang.org/grpc/internal/transport.ServerTransport]bool elems;
    void *overflow;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.MethodDescriptors;

typedef struct []*unicode.RangeTable []*unicode.RangeTable, *P[]*unicode.RangeTable;

typedef struct unicode.RangeTable unicode.RangeTable, *Punicode.RangeTable;

typedef struct []unicode.Range32 []unicode.Range32, *P[]unicode.Range32;

typedef struct unicode.Range32 unicode.Range32, *Punicode.Range32;

struct []*unicode.RangeTable {
    struct unicode.RangeTable **array;
    int len;
    int cap;
};

struct []unicode.Range32 {
    struct unicode.Range32 *array;
    int len;
    int cap;
};

struct unicode.RangeTable {
    struct []unicode.Range16 R16;
    struct []unicode.Range32 R32;
    int LatinOffset;
};

struct unicode.Range32 {
    uint32 Lo;
    uint32 Hi;
    uint32 Stride;
};

typedef struct noalg.struct_{_F_uintptr;_R_*net.nsswitchConfig_} noalg.struct_{_F_uintptr;_R_*net.nsswitchConfig_}, *Pnoalg.struct_{_F_uintptr;_R_*net.nsswitchConfig_};

typedef struct net.nsswitchConfig net.nsswitchConfig, *Pnet.nsswitchConfig;

typedef struct net.nssConf net.nssConf, *Pnet.nssConf;

typedef struct hash<string,[]net.nssSource> hash<string,[]net.nssSource>, *Phash<string,[]net.nssSource>;

typedef struct hash<string,[]net.nssSource> *map[string][]net.nssSource;

struct net.nssConf {
    struct time.Time mtime;
    error err;
    map[string][]net.nssSource sources;
};

struct noalg.struct_{_F_uintptr;_R_*net.nsswitchConfig_} { // Original name: noalg.struct { F uintptr; R *net.nsswitchConfig }
    uintptr F;
    struct net.nsswitchConfig *R;
};

struct net.nsswitchConfig {
    struct sync.Once initOnce;
    chan_struct_{} ch;
    struct time.Time lastChecked;
    struct sync.Mutex mu;
    struct net.nssConf *nssConf;
};

struct hash<string,[]net.nssSource> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,[]net.nssSource> *buckets;
    struct bucket<string,[]net.nssSource> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct strconv.leftCheat strconv.leftCheat, *Pstrconv.leftCheat;

struct strconv.leftCheat {
    int delta;
    struct string cutoff;
};

typedef struct []reflect.abiStep []reflect.abiStep, *P[]reflect.abiStep;

struct []reflect.abiStep {
    struct reflect.abiStep *array;
    int len;
    int cap;
};

typedef struct google.golang.org/protobuf/reflect/protoreflect.ifaceHeader google.golang.org/protobuf/reflect/protoreflect.ifaceHeader, *Pgoogle.golang.org/protobuf/reflect/protoreflect.ifaceHeader;

struct google.golang.org/protobuf/reflect/protoreflect.ifaceHeader {
    interface_{} _[0];
    void *Type;
    void *Data;
};

typedef struct vendor/golang.org/x/net/idna.sparseBlocks vendor/golang.org/x/net/idna.sparseBlocks, *Pvendor/golang.org/x/net/idna.sparseBlocks;

typedef struct []vendor/golang.org/x/net/idna.valueRange []vendor/golang.org/x/net/idna.valueRange, *P[]vendor/golang.org/x/net/idna.valueRange;

typedef struct vendor/golang.org/x/net/idna.valueRange vendor/golang.org/x/net/idna.valueRange, *Pvendor/golang.org/x/net/idna.valueRange;

struct []vendor/golang.org/x/net/idna.valueRange {
    struct vendor/golang.org/x/net/idna.valueRange *array;
    int len;
    int cap;
};

struct vendor/golang.org/x/net/idna.sparseBlocks {
    struct []vendor/golang.org/x/net/idna.valueRange values;
    struct []uint16 offset;
};

struct vendor/golang.org/x/net/idna.valueRange {
    uint16 value;
    uint8 lo;
    uint8 hi;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.addrConn;_X1_context.Context;_X2_context.CancelFunc_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.addrConn;_X1_context.Context;_X2_context.CancelFunc_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.addrConn;_X1_context.Context;_X2_context.CancelFunc_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.addrConn;_X1_context.Context;_X2_context.CancelFunc_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc.addrConn; X1 context.Context; X2 context.CancelFunc }
    uintptr F;
    struct google.golang.org/grpc.addrConn *X0;
    context.Context X1;
    void (**X2)(void);
};

typedef struct bucket<string,google.golang.org/grpc/codes.Code> bucket<string,google.golang.org/grpc/codes.Code>, *Pbucket<string,google.golang.org/grpc/codes.Code>;

struct bucket<string,google.golang.org/grpc/codes.Code> {
    uint8 tophash[8];
    struct string keys[8];
    google.golang.org/grpc/codes.Code values[8];
    struct bucket<string,google.golang.org/grpc/codes.Code> *overflow;
};

typedef struct []google.golang.org/protobuf/internal/impl.MessageInfo []google.golang.org/protobuf/internal/impl.MessageInfo, *P[]google.golang.org/protobuf/internal/impl.MessageInfo;

struct []google.golang.org/protobuf/internal/impl.MessageInfo {
    struct google.golang.org/protobuf/internal/impl.MessageInfo *array;
    int len;
    int cap;
};

typedef struct runtime.randomOrder runtime.randomOrder, *Pruntime.randomOrder;

struct runtime.randomOrder {
    uint32 count;
    struct []uint32 coprimes;
};

typedef struct fmt.wrapError fmt.wrapError, *Pfmt.wrapError;

struct fmt.wrapError {
    struct string msg;
    error err;
};

typedef struct crypto/tls.certCache crypto/tls.certCache, *Pcrypto/tls.certCache;

struct crypto/tls.certCache {
    struct sync.Map Map;
};

typedef struct hash<int,string> hash<int,string>, *Phash<int,string>;

struct hash<int,string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<int,string> *buckets;
    struct bucket<int,string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct vendor/golang.org/x/text/unicode/bidi.bidiTrie vendor/golang.org/x/text/unicode/bidi.bidiTrie, *Pvendor/golang.org/x/text/unicode/bidi.bidiTrie;

struct vendor/golang.org/x/text/unicode/bidi.bidiTrie {
};

typedef struct noalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc/internal/transport.http2Server_} noalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc/internal/transport.http2Server_}, *Pnoalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc/internal/transport.http2Server_};

struct noalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc/internal/transport.http2Server_} { // Original name: noalg.struct { F uintptr; X0 *error; X1 *google.golang.org/grpc/internal/transport.http2Server }
    uintptr F;
    error *X0;
    struct google.golang.org/grpc/internal/transport.http2Server *X1;
};

typedef struct runtime/internal/atomic.Pointer[go.shape.struct_{_runtime.lfnode;_runtime.popped_runtime/internal/atomic.Uint32;_runtime.spans_[512]runtime.atomicMSpanPointer_}] runtime/internal/atomic.Pointer[go.shape.struct_{_runtime.lfnode;_runtime.popped_runtime/internal/atomic.Uint32;_runtime.spans_[512]runtime.atomicMSpanPointer_}], *Pruntime/internal/atomic.Pointer[go.shape.struct_{_runtime.lfnode;_runtime.popped_runtime/internal/atomic.Uint32;_runtime.spans_[512]runtime.atomicMSpanPointer_}];

struct runtime/internal/atomic.Pointer[go.shape.struct_{_runtime.lfnode;_runtime.popped_runtime/internal/atomic.Uint32;_runtime.spans_[512]runtime.atomicMSpanPointer_}] { // Original name: runtime/internal/atomic.Pointer[go.shape.struct { runtime.lfnode; runtime.popped runtime/internal/atomic.Uint32; runtime.spans [512]runtime.atomicMSpanPointer }]
    struct runtime/internal/atomic.UnsafePointer u;
};

typedef struct runtime.iface syscall.Conn;

typedef struct bucket<vendor/golang.org/x/net/dns/dnsmessage.Type,string> bucket<vendor/golang.org/x/net/dns/dnsmessage.Type,string>, *Pbucket<vendor/golang.org/x/net/dns/dnsmessage.Type,string>;

struct bucket<vendor/golang.org/x/net/dns/dnsmessage.Type,string> {
    uint8 tophash[8];
    vendor/golang.org/x/net/dns/dnsmessage.Type keys[8];
    struct string values[8];
    struct bucket<vendor/golang.org/x/net/dns/dnsmessage.Type,string> *overflow;
};

typedef struct noalg.map.iter[string]*google.golang.org/grpc.serviceInfo noalg.map.iter[string]*google.golang.org/grpc.serviceInfo, *Pnoalg.map.iter[string]*google.golang.org/grpc.serviceInfo;

typedef struct noalg.map.hdr[string]*google.golang.org/grpc.serviceInfo noalg.map.hdr[string]*google.golang.org/grpc.serviceInfo, *Pnoalg.map.hdr[string]*google.golang.org/grpc.serviceInfo;

typedef struct noalg.map.bucket[string]*google.golang.org/grpc.serviceInfo noalg.map.bucket[string]*google.golang.org/grpc.serviceInfo, *Pnoalg.map.bucket[string]*google.golang.org/grpc.serviceInfo;

typedef struct google.golang.org/grpc.serviceInfo *noalg.[8]*google.golang.org/grpc.serviceInfo[8];

struct noalg.map.hdr[string]*google.golang.org/grpc.serviceInfo {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string]*google.golang.org/grpc.serviceInfo *buckets;
    struct noalg.map.bucket[string]*google.golang.org/grpc.serviceInfo *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.iter[string]*google.golang.org/grpc.serviceInfo {
    struct string *key;
    struct google.golang.org/grpc.serviceInfo **elem;
    void *t;
    struct noalg.map.hdr[string]*google.golang.org/grpc.serviceInfo *h;
    struct noalg.map.bucket[string]*google.golang.org/grpc.serviceInfo *buckets;
    struct noalg.map.bucket[string]*google.golang.org/grpc.serviceInfo *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

struct noalg.map.bucket[string]*google.golang.org/grpc.serviceInfo {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8]*google.golang.org/grpc.serviceInfo elems;
    void *overflow;
};

typedef struct golang.org/x/net/http2.PushPromiseFrame golang.org/x/net/http2.PushPromiseFrame, *Pgolang.org/x/net/http2.PushPromiseFrame;

struct golang.org/x/net/http2.PushPromiseFrame {
    struct golang.org/x/net/http2.FrameHeader FrameHeader;
    uint32 PromiseID;
    struct []uint8 headerFragBuf;
};

typedef struct google.golang.org/grpc/internal/transport.outgoingWindowUpdate google.golang.org/grpc/internal/transport.outgoingWindowUpdate, *Pgoogle.golang.org/grpc/internal/transport.outgoingWindowUpdate;

struct google.golang.org/grpc/internal/transport.outgoingWindowUpdate {
    uint32 streamID;
    uint32 increment;
};

typedef struct golang.org/x/net/trace.histogram golang.org/x/net/trace.histogram, *Pgolang.org/x/net/trace.histogram;

typedef struct []int64 []int64, *P[]int64;

struct []int64 {
    int64 *array;
    int len;
    int cap;
};

struct golang.org/x/net/trace.histogram {
    int64 sum;
    float64 sumOfSquares;
    struct []int64 buckets;
    int value;
    int64 valueCount;
};

typedef struct noalg.map.hdr[string]*google.golang.org/grpc.MethodDesc noalg.map.hdr[string]*google.golang.org/grpc.MethodDesc, *Pnoalg.map.hdr[string]*google.golang.org/grpc.MethodDesc;

typedef struct noalg.map.bucket[string]*google.golang.org/grpc.MethodDesc noalg.map.bucket[string]*google.golang.org/grpc.MethodDesc, *Pnoalg.map.bucket[string]*google.golang.org/grpc.MethodDesc;

typedef struct google.golang.org/grpc.MethodDesc *noalg.[8]*google.golang.org/grpc.MethodDesc[8];

struct noalg.map.hdr[string]*google.golang.org/grpc.MethodDesc {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string]*google.golang.org/grpc.MethodDesc *buckets;
    struct noalg.map.bucket[string]*google.golang.org/grpc.MethodDesc *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.bucket[string]*google.golang.org/grpc.MethodDesc {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8]*google.golang.org/grpc.MethodDesc elems;
    void *overflow;
};

typedef struct []reflect.fieldScan []reflect.fieldScan, *P[]reflect.fieldScan;

typedef struct reflect.fieldScan reflect.fieldScan, *Preflect.fieldScan;

struct reflect.fieldScan {
    struct reflect.structType *typ;
    struct []int index;
};

struct []reflect.fieldScan {
    struct reflect.fieldScan *array;
    int len;
    int cap;
};

typedef struct crypto/x509.pssParameters crypto/x509.pssParameters, *Pcrypto/x509.pssParameters;

struct crypto/x509.pssParameters {
    struct crypto/x509/pkix.AlgorithmIdentifier Hash;
    struct crypto/x509/pkix.AlgorithmIdentifier MGF;
    int SaltLength;
    int TrailerField;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.unwinder;_X1_uintptr;_X2_uintptr;_X3_uintptr;_X4_*runtime.g;_X5_runtime.unwindFlags_} noalg.struct_{_F_uintptr;_X0_*runtime.unwinder;_X1_uintptr;_X2_uintptr;_X3_uintptr;_X4_*runtime.g;_X5_runtime.unwindFlags_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.unwinder;_X1_uintptr;_X2_uintptr;_X3_uintptr;_X4_*runtime.g;_X5_runtime.unwindFlags_};

typedef struct runtime.unwinder runtime.unwinder, *Pruntime.unwinder;

typedef struct runtime.stkframe runtime.stkframe, *Pruntime.stkframe;

struct runtime.stkframe {
    struct runtime.funcInfo fn;
    uintptr pc;
    uintptr continpc;
    uintptr lr;
    uintptr sp;
    uintptr fp;
    uintptr varp;
    uintptr argp;
};

struct runtime.unwinder {
    struct runtime.stkframe frame;
    runtime.guintptr g;
    int cgoCtxt;
    internal/abi.FuncID calleeFuncID;
    runtime.unwindFlags flags;
    struct runtime.pcvalueCache cache;
};

struct noalg.struct_{_F_uintptr;_X0_*runtime.unwinder;_X1_uintptr;_X2_uintptr;_X3_uintptr;_X4_*runtime.g;_X5_runtime.unwindFlags_} { // Original name: noalg.struct { F uintptr; X0 *runtime.unwinder; X1 uintptr; X2 uintptr; X3 uintptr; X4 *runtime.g; X5 runtime.unwindFlags }
    uintptr F;
    struct runtime.unwinder *X0;
    uintptr X1;
    uintptr X2;
    uintptr X3;
    struct runtime.g *X4;
    runtime.unwindFlags X5;
};

typedef struct noalg.map.bucket[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList noalg.map.bucket[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList, *Pnoalg.map.bucket[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList;

struct noalg.map.bucket[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList {
    uint8 topbits[8];
    noalg.[8]google.golang.org/grpc/resolver.Address keys;
    noalg.[8]google.golang.org/grpc/resolver.addressMapEntryList elems;
    void *overflow;
};

typedef struct google.golang.org/grpc/resolver.addressMapEntryList noalg.[8]google.golang.org/grpc/resolver.addressMapEntryList[8];

typedef struct google.golang.org/grpc/resolver.Address noalg.[8]google.golang.org/grpc/resolver.Address[8];

typedef struct hash<net/http.ConnState,string> hash<net/http.ConnState,string>, *Phash<net/http.ConnState,string>;

typedef struct bucket<net/http.ConnState,string> bucket<net/http.ConnState,string>, *Pbucket<net/http.ConnState,string>;

struct hash<net/http.ConnState,string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<net/http.ConnState,string> *buckets;
    struct bucket<net/http.ConnState,string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<net/http.ConnState,string> {
    uint8 tophash[8];
    net/http.ConnState keys[8];
    struct string values[8];
    struct bucket<net/http.ConnState,string> *overflow;
};

typedef struct noalg.struct_{_F_uintptr;_X0_**runtime.m_} noalg.struct_{_F_uintptr;_X0_**runtime.m_}, *Pnoalg.struct_{_F_uintptr;_X0_**runtime.m_};

struct noalg.struct_{_F_uintptr;_X0_**runtime.m_} { // Original name: noalg.struct { F uintptr; X0 **runtime.m }
    uintptr F;
    struct runtime.m **X0;
};

typedef struct noalg.map.hdr[string]map[string]string noalg.map.hdr[string]map[string]string, *Pnoalg.map.hdr[string]map[string]string;

typedef struct noalg.map.bucket[string]map[string]string noalg.map.bucket[string]map[string]string, *Pnoalg.map.bucket[string]map[string]string;

struct noalg.map.hdr[string]map[string]string {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string]map[string]string *buckets;
    struct noalg.map.bucket[string]map[string]string *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.bucket[string]map[string]string {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8]map[string]string elems;
    void *overflow;
};

typedef struct hchan<net.result[go.shape.[]string].1> hchan<net.result[go.shape.[]string].1>, *Phchan<net.result[go.shape.[]string].1>;

typedef struct waitq<net.result[go.shape.[]string].1> waitq<net.result[go.shape.[]string].1>, *Pwaitq<net.result[go.shape.[]string].1>;

struct waitq<net.result[go.shape.[]string].1> { // Original name: waitq<net.result[go.shape.[]string]·1>
    struct sudog<net.result[go.shape.[]string].1> *first;
    struct sudog<net.result[go.shape.[]string].1> *last;
};

struct hchan<net.result[go.shape.[]string].1> { // Original name: hchan<net.result[go.shape.[]string]·1>
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<net.result[go.shape.[]string].1> recvq;
    struct waitq<net.result[go.shape.[]string].1> sendq;
    struct runtime.mutex lock;
};

typedef struct vendor/golang.org/x/net/http/httpproxy.Config vendor/golang.org/x/net/http/httpproxy.Config, *Pvendor/golang.org/x/net/http/httpproxy.Config;

struct vendor/golang.org/x/net/http/httpproxy.Config {
    struct string HTTPProxy;
    struct string HTTPSProxy;
    struct string NoProxy;
    bool CGI;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Server;_X1_*google.golang.org/grpc/internal/transport.headerFrame_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Server;_X1_*google.golang.org/grpc/internal/transport.headerFrame_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Server;_X1_*google.golang.org/grpc/internal/transport.headerFrame_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc/internal/transport.http2Server;_X1_*google.golang.org/grpc/internal/transport.headerFrame_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc/internal/transport.http2Server; X1 *google.golang.org/grpc/internal/transport.headerFrame }
    uintptr F;
    struct google.golang.org/grpc/internal/transport.http2Server *X0;
    struct google.golang.org/grpc/internal/transport.headerFrame *X1;
};

typedef struct crypto/rsa.PublicKey crypto/rsa.PublicKey, *Pcrypto/rsa.PublicKey;

struct crypto/rsa.PublicKey {
    struct math/big.Int *N;
    int E;
};

typedef struct regexp.machine regexp.machine, *Pregexp.machine;

typedef struct regexp.queue regexp.queue, *Pregexp.queue;

typedef struct []*regexp.thread []*regexp.thread, *P[]*regexp.thread;

typedef struct []regexp.entry []regexp.entry, *P[]regexp.entry;

typedef struct regexp.entry regexp.entry, *Pregexp.entry;

struct regexp.entry {
    uint32 pc;
    struct regexp.thread *t;
};

struct []regexp.entry {
    struct regexp.entry *array;
    int len;
    int cap;
};

struct regexp.queue {
    struct []uint32 sparse;
    struct []regexp.entry dense;
};

struct []*regexp.thread {
    struct regexp.thread **array;
    int len;
    int cap;
};

struct regexp.machine {
    struct regexp.Regexp *re;
    struct regexp/syntax.Prog *p;
    struct regexp.queue q0;
    struct regexp.queue q1;
    struct []*regexp.thread pool;
    bool matched;
    struct []int matchcap;
    struct regexp.inputs inputs;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*net.resolverConfig_} noalg.struct_{_F_uintptr;_X0_*net.resolverConfig_}, *Pnoalg.struct_{_F_uintptr;_X0_*net.resolverConfig_};

typedef struct net.resolverConfig net.resolverConfig, *Pnet.resolverConfig;

typedef struct sync/atomic.Pointer[net.dnsConfig] sync/atomic.Pointer[net.dnsConfig], *Psync/atomic.Pointer[net.dnsConfig];

struct noalg.struct_{_F_uintptr;_X0_*net.resolverConfig_} { // Original name: noalg.struct { F uintptr; X0 *net.resolverConfig }
    uintptr F;
    struct net.resolverConfig *X0;
};

struct sync/atomic.Pointer[net.dnsConfig] {
    struct sync/atomic.noCopy _;
    struct net.dnsConfig *_[0];
    void *v;
};

struct net.resolverConfig {
    struct sync.Once initOnce;
    chan_struct_{} ch;
    struct time.Time lastChecked;
    struct sync/atomic.Pointer[net.dnsConfig] dnsConfig;
};

typedef struct google.golang.org/grpc/internal/transport.strAddr google.golang.org/grpc/internal/transport.strAddr, *Pgoogle.golang.org/grpc/internal/transport.strAddr;

struct google.golang.org/grpc/internal/transport.strAddr {
    uint8 *str;
    int len;
};

typedef uint8 runtime.tmpBuf[32];

typedef struct hash<google.golang.org/protobuf/encoding/protowire.Number,reflect.Type> hash<google.golang.org/protobuf/encoding/protowire.Number,reflect.Type>, *Phash<google.golang.org/protobuf/encoding/protowire.Number,reflect.Type>;

typedef struct bucket<google.golang.org/protobuf/encoding/protowire.Number,reflect.Type> bucket<google.golang.org/protobuf/encoding/protowire.Number,reflect.Type>, *Pbucket<google.golang.org/protobuf/encoding/protowire.Number,reflect.Type>;

struct bucket<google.golang.org/protobuf/encoding/protowire.Number,reflect.Type> {
    uint8 tophash[8];
    google.golang.org/protobuf/encoding/protowire.Number keys[8];
    reflect.Type values[8];
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,reflect.Type> *overflow;
};

struct hash<google.golang.org/protobuf/encoding/protowire.Number,reflect.Type> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,reflect.Type> *buckets;
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,reflect.Type> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct otp/seedgen.StressTestResponse otp/seedgen.StressTestResponse, *Potp/seedgen.StressTestResponse;

struct otp/seedgen.StressTestResponse {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    int64 Response;
};

typedef struct runtime.perThreadSyscallArgs runtime.perThreadSyscallArgs, *Pruntime.perThreadSyscallArgs;

struct runtime.perThreadSyscallArgs {
    uintptr trap;
    uintptr a1;
    uintptr a2;
    uintptr a3;
    uintptr a4;
    uintptr a5;
    uintptr a6;
    uintptr r1;
    uintptr r2;
};

typedef struct golang.org/x/net/http2.SettingsFrame golang.org/x/net/http2.SettingsFrame, *Pgolang.org/x/net/http2.SettingsFrame;

struct golang.org/x/net/http2.SettingsFrame {
    struct golang.org/x/net/http2.FrameHeader FrameHeader;
    struct []uint8 p;
};

typedef struct noalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.Stream noalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.Stream, *Pnoalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.Stream;

typedef struct google.golang.org/grpc/internal/transport.Stream *noalg.[8]*google.golang.org/grpc/internal/transport.Stream[8];

struct noalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.Stream {
    uint8 topbits[8];
    noalg.[8]uint32 keys;
