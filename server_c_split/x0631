  regexp___Regexp__doExecute
            (re,r,b,in_stack_ffffffffffffffb8,0,0,in_stack_ffffffffffffffc8,
             in_stack_ffffffffffffffe0);
  if (extraout_RAX != 0) {
    if (1 < extraout_RCX) {
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  return;
}



void regexp___Regexp__FindReaderIndex(regexp_Regexp *re,io_RuneReader r,__int loc)

{
  io_RuneReader r_00;
  __uint8 b;
  int extraout_RAX;
  int in_RCX;
  uint extraout_RCX;
  int in_RBX;
  int unaff_R14;
  undefined in_XMM15 [16];
  int in_stack_ffffffffffffffb0;
  string in_stack_ffffffffffffffb8;
  __int in_stack_ffffffffffffffc8;
  __int in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  r_00.data = in_XMM15._0_8_;
  r_00.tab = (runtime_itab *)0x2;
  b.len = 0;
  b.array = (uint8 *)in_XMM15._8_8_;
  b.cap = in_stack_ffffffffffffffb0;
  regexp___Regexp__doExecute
            (re,r_00,b,in_stack_ffffffffffffffb8,in_RBX,in_RCX,in_stack_ffffffffffffffc8,
             in_stack_ffffffffffffffe0);
  if (extraout_RAX != 0) {
    if (1 < extraout_RCX) {
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  return;
}



void regexp___Regexp__FindSubmatch(regexp_Regexp *re,__uint8 b,____uint8 ~r0)

{
  uint uVar1;
  io_RuneReader r;
  __uint8 b_00;
  int extraout_RAX;
  int extraout_RAX_00;
  int extraout_RAX_01;
  int iVar2;
  int len;
  int i;
  uint uVar3;
  int iVar4;
  int extraout_RCX;
  int in_RBX;
  uint extraout_RBX;
  uint extraout_RSI;
  uint in_RDI;
  void *~r0_00;
  int extraout_RDI;
  uint extraout_R8;
  uint uVar5;
  int extraout_R9;
  int extraout_R10;
  int *extraout_R11;
  int iVar6;
  int unaff_R14;
  int in_stack_ffffffffffffff78;
  string in_stack_ffffffffffffff80;
  __int in_stack_ffffffffffffff90;
  __int in_stack_ffffffffffffffa8;
  undefined local_30 [8];
  undefined auStack_28 [24];
  int local_10;
  
  while (auStack_28 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  r.data = local_30;
  r.tab = (runtime_itab *)re->prog->NumCap;
  b_00.cap = in_stack_ffffffffffffff78;
  b_00.array = (uint8 *)SUB168(ZEXT816(4) << 0x40,0);
  b_00.len = SUB168(ZEXT816(4) << 0x40,8);
  regexp___Regexp__doExecute
            (re,r,b_00,in_stack_ffffffffffffff80,0,0,in_stack_ffffffffffffff90,
             in_stack_ffffffffffffffa8);
  if (extraout_RAX == 0) {
    return;
  }
  len = re->numSubexp + 1;
  local_10 = extraout_RAX;
  runtime_makeslice((internal_abi_Type *)&DAT_00801a20,len,len,~r0_00);
  i = 0;
  iVar2 = extraout_RAX_00;
  uVar5 = extraout_RBX;
  do {
    if (len <= i) {
      return;
    }
    uVar3 = i * 2;
    if (uVar5 != uVar3 && SBORROW8(uVar5,uVar3) == (int)(uVar5 + i * -2) < 0) {
      if (uVar5 <= uVar3) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      uVar3 = *(uint *)(local_10 + i * 0x10);
      if (-1 < (int)uVar3) {
        uVar1 = i * 2 + 1;
        if (uVar5 <= uVar1) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        uVar1 = *(uint *)(local_10 + uVar1 * 8);
        if (in_RDI < uVar1) {
                    // WARNING: Subroutine does not return
          runtime_panicSlice3Acap();
        }
        if (uVar1 < uVar3) {
                    // WARNING: Subroutine does not return
          runtime_panicSlice3C();
        }
        iVar6 = i * 3;
        iVar4 = uVar1 - uVar3;
        *(int *)(iVar2 + 8 + i * 0x18) = iVar4;
        *(int *)(iVar2 + 0x10 + i * 0x18) = iVar4;
        iVar4 = (uVar3 & -iVar4 >> 0x3f) + in_RBX;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11 = extraout_R10;
          extraout_R11[1] = *(int *)(extraout_RAX_01 + iVar6 * 8);
          iVar2 = extraout_RAX_01;
          in_RDI = extraout_RSI;
          in_RBX = extraout_RDI;
          uVar5 = extraout_R8;
          local_10 = extraout_R9;
          iVar4 = extraout_R10;
          i = extraout_RCX;
        }
        *(int *)(iVar2 + iVar6 * 8) = iVar4;
      }
    }
    i = i + 1;
  } while( true );
}



void regexp___Regexp__Expand
               (regexp_Regexp *re,__uint8 dst,__uint8 template,__uint8 src,__int match,__uint8 ~r0)

{
  __uint8 dst_00;
  uint8 *in_RSI;
  int in_R8;
  int unaff_R14;
  undefined in_XMM15 [16];
  string in_stack_ffffffffffffff60;
  __uint8 in_stack_ffffffffffffff88;
  string in_stack_ffffffffffffffa0;
  __int in_stack_ffffffffffffffb0;
  __uint8 in_stack_ffffffffffffffc8;
  undefined local_20 [16];
  regexp_Regexp *local_10;
  
  while (local_20 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  local_10 = re;
  runtime_slicebytetostring
            ((runtime_tmpBuf *)&stack0xffffffffffffffd0,in_RSI,in_R8,in_stack_ffffffffffffff60);
  dst_00.cap = (int)template.array;
  dst_00.array = (uint8 *)in_XMM15._0_8_;
  dst_00.len = in_XMM15._8_8_;
  regexp___Regexp__expand
            (local_10,dst_00,template._8_16_,in_stack_ffffffffffffff88,in_stack_ffffffffffffffa0,
             in_stack_ffffffffffffffb0,in_stack_ffffffffffffffc8);
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void regexp___Regexp__ExpandString
               (regexp_Regexp *re,__uint8 dst,string template,string src,__int match,__uint8 ~r0)

{
  __uint8 dst_00;
  __uint8 ~r0_00;
  undefined8 unaff_RBP;
  undefined8 in_R9;
  undefined8 in_R10;
  int unaff_R14;
  int unaff_retaddr;
  __uint8 in_stack_ffffffffffffffb0;
  string in_stack_ffffffffffffffc8;
  __int in_stack_ffffffffffffffd8;
  undefined8 in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  dst_00.len = in_R10;
  dst_00.array = (uint8 *)in_R9;
  dst_00.cap = (int)dst.array;
  ~r0_00.len = unaff_RBP;
  ~r0_00.array = (uint8 *)in_stack_fffffffffffffff0;
  ~r0_00.cap = unaff_retaddr;
  regexp___Regexp__expand
            (re,dst_00,dst._8_16_,in_stack_ffffffffffffffb0,in_stack_ffffffffffffffc8,
             in_stack_ffffffffffffffd8,~r0_00);
  return;
}



void regexp___Regexp__expand
               (regexp_Regexp *re,__uint8 dst,string template,__uint8 bsrc,string src,__int match,
               __uint8 ~r0)

{
  uint uVar1;
  int iVar2;
  runtime_slice ~r0_00;
  runtime_slice ~r0_01;
  runtime_slice ~r0_02;
  runtime_slice ~r0_03;
  runtime_slice ~r0_04;
  runtime_slice ~r0_05;
  runtime_slice ~r0_06;
  runtime_slice ~r0_07;
  string sep;
  string name;
  uint uVar3;
  char extraout_AL;
  void *extraout_RAX;
  void *extraout_RAX_00;
  void *extraout_RAX_01;
  void *extraout_RAX_02;
  void *extraout_RAX_03;
  void *extraout_RAX_04;
  void *extraout_RAX_05;
  void *extraout_RAX_06;
  void *extraout_RAX_07;
  uint in_RCX;
  char *extraout_RCX;
  uint extraout_RCX_00;
  uint extraout_RCX_01;
  int extraout_RCX_02;
  int num;
  size_t sVar4;
  uint extraout_RCX_03;
  uint extraout_RCX_04;
  uint extraout_RCX_05;
  uint extraout_RCX_06;
  uint extraout_RCX_07;
  void *pvVar5;
  int i;
  void *in_RBX;
  size_t __n;
  uint extraout_RBX;
  uint extraout_RBX_00;
  int extraout_RBX_01;
  uint extraout_RBX_02;
  uint extraout_RBX_03;
  uint extraout_RBX_04;
  uint extraout_RBX_05;
  uint uVar6;
  uint extraout_RBX_06;
  char extraout_SIL;
  bool ok;
  char *in_RSI;
  size_t extraout_RSI;
  uint in_RDI;
  size_t extraout_RDI;
  char *extraout_RDI_00;
  char extraout_R8B;
  size_t in_R8;
  int in_R9;
  uint8 *puVar7;
  string *psVar8;
  uint in_R11;
  char cVar9;
  int unaff_R14;
  bool bVar10;
  string in_stack_ffffffffffffff18;
  uint8 *in_stack_ffffffffffffff28;
  int in_stack_ffffffffffffff30;
  string in_stack_ffffffffffffff38;
  string in_stack_ffffffffffffff48;
  uint local_68;
  char *local_60;
  void *local_50;
  char *local_48;
  uint8 *local_40;
  string *local_38;
  uint8 *local_30;
  void *local_28;
  void *local_20;
  void *local_18;
  char *local_10;
  
  while (&local_68 <= *(uint **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  do {
    while( true ) {
      while( true ) {
        while( true ) {
          local_68 = in_RCX;
          local_10 = in_RSI;
          if ((in_R8 == 0) ||
             (sep.len = in_stack_ffffffffffffff30, sep.str = in_stack_ffffffffffffff28,
             local_18 = in_RBX,
             strings_Cut(in_stack_ffffffffffffff18,sep,in_stack_ffffffffffffff38,
                         in_stack_ffffffffffffff48,SUB81(in_RSI,0)), in_RBX = local_18,
             extraout_SIL == '\0')) {
            if (in_RDI < local_68 + in_R8) {
              ~r0_05.cap = (int)in_stack_ffffffffffffff28;
              ~r0_05.array = in_stack_ffffffffffffff18.str;
              ~r0_05.len = in_stack_ffffffffffffff18.len;
              runtime_growslice(in_RBX,local_68 + in_R8,in_RDI,in_R8,
                                (internal_abi_Type *)&DAT_00807920,~r0_05);
              in_RBX = extraout_RAX_05;
            }
            runtime_memmove((void *)((int)in_RBX + local_68),local_10,in_R8);
            return;
          }
          in_RCX = local_68 + __n;
          local_50 = extraout_RAX;
          local_48 = extraout_RCX;
          if (in_RDI < in_RCX) {
            ~r0_00.cap = (int)in_stack_ffffffffffffff28;
            ~r0_00.array = in_stack_ffffffffffffff18.str;
            ~r0_00.len = in_stack_ffffffffffffff18.len;
            runtime_growslice(local_18,in_RCX,in_RDI,__n,(internal_abi_Type *)&DAT_00807920,~r0_00);
            local_18 = extraout_RAX_00;
            in_RCX = extraout_RBX;
            in_RDI = extraout_RCX_00;
          }
          pvVar5 = (void *)(local_68 + (int)local_18);
          local_68 = in_RDI;
          local_20 = local_18;
          runtime_memmove(pvVar5,local_50,__n);
          if ((extraout_RDI == 0) || (*local_48 != '$')) break;
          in_RCX = in_RCX + 1;
          in_RBX = local_20;
          if (local_68 < in_RCX) {
            ~r0_01.cap = (int)in_stack_ffffffffffffff28;
            ~r0_01.array = in_stack_ffffffffffffff18.str;
            ~r0_01.len = in_stack_ffffffffffffff18.len;
            runtime_growslice(local_20,in_RCX,local_68,1,(internal_abi_Type *)&DAT_00807920,~r0_01);
            local_68 = extraout_RCX_01;
            in_RCX = extraout_RBX_00;
            in_RBX = extraout_RAX_01;
          }
          *(undefined *)((in_RCX - 1) + (int)in_RBX) = 0x24;
          in_R8 = extraout_RDI - 1;
          in_RSI = local_48 + ((dword)((int)-in_R8 >> 0x3f) & 1);
          in_RDI = local_68;
        }
        name.len = in_stack_ffffffffffffff30;
        name.str = in_stack_ffffffffffffff28;
        regexp_extract(in_stack_ffffffffffffff18,name,(int)local_48,in_stack_ffffffffffffff38,
                       SUB81(extraout_RDI,0));
        uVar3 = local_68;
        if (extraout_R8B != '\0') break;
        in_RCX = in_RCX + 1;
        if (local_68 < in_RCX) {
          ~r0_04.cap = (int)in_stack_ffffffffffffff28;
          ~r0_04.array = in_stack_ffffffffffffff18.str;
          ~r0_04.len = in_stack_ffffffffffffff18.len;
          runtime_growslice(local_20,in_RCX,local_68,1,(internal_abi_Type *)&DAT_00807920,~r0_04);
          local_20 = extraout_RAX_04;
          local_68 = extraout_RCX_05;
          in_RCX = extraout_RBX_04;
        }
        *(undefined *)((in_RCX - 1) + (int)local_20) = 0x24;
        in_RBX = local_20;
        in_RSI = local_48;
        in_RDI = local_68;
        in_R8 = extraout_RDI;
      }
      in_R8 = extraout_RSI;
      local_60 = extraout_RDI_00;
      if (extraout_RCX_02 < 0) break;
      puVar7 = (uint8 *)(extraout_RCX_02 * 2 + 1);
      in_RBX = local_20;
      in_RSI = extraout_RDI_00;
      in_RDI = local_68;
      if ((int)puVar7 < (int)template.str) {
        if (template.str <= (uint8 *)(extraout_RCX_02 * 2)) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        uVar1 = *(uint *)(dst.cap + extraout_RCX_02 * 0x10);
        if (-1 < (int)uVar1) {
          if (in_R9 == 0) {
            if (template.str <= puVar7) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            uVar6 = *(uint *)(dst.cap + (int)puVar7 * 8);
            if ((uint)dst.len < uVar6) {
                    // WARNING: Subroutine does not return
              runtime_panicSliceAlen();
            }
            if (uVar6 < uVar1) {
                    // WARNING: Subroutine does not return
              runtime_panicSliceB();
            }
            sVar4 = uVar6 - uVar1;
            uVar6 = in_RCX + sVar4;
            puVar7 = dst.array + (uVar1 & (int)-sVar4 >> 0x3f);
            if (local_68 < uVar6) {
              ~r0_03.cap = (int)in_stack_ffffffffffffff28;
              ~r0_03.array = in_stack_ffffffffffffff18.str;
              ~r0_03.len = in_stack_ffffffffffffff18.len;
              local_68 = sVar4;
              local_30 = puVar7;
              runtime_growslice(local_20,uVar6,uVar3,sVar4,(internal_abi_Type *)&DAT_00807920,~r0_03
                               );
              local_20 = extraout_RAX_03;
              sVar4 = local_68;
              uVar6 = extraout_RBX_03;
              puVar7 = local_30;
              local_68 = extraout_RCX_04;
            }
            runtime_memmove((void *)((int)local_20 + in_RCX),puVar7,sVar4);
            in_RCX = uVar6;
            in_RBX = local_20;
            in_RSI = local_60;
            in_RDI = local_68;
          }
          else {
            if (template.str <= puVar7) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            uVar6 = *(uint *)(dst.cap + (int)puVar7 * 8);
            if (in_R11 < uVar6) {
                    // WARNING: Subroutine does not return
              runtime_panicSliceAcap();
            }
            if (uVar6 < uVar1) {
                    // WARNING: Subroutine does not return
              runtime_panicSliceB();
            }
            sVar4 = uVar6 - uVar1;
            uVar6 = in_RCX + sVar4;
            pvVar5 = (void *)(in_R9 + (uVar1 & (int)(uVar1 - in_R11) >> 0x3f));
            if (local_68 < uVar6) {
              ~r0_02.cap = (int)in_stack_ffffffffffffff28;
              ~r0_02.array = in_stack_ffffffffffffff18.str;
              ~r0_02.len = in_stack_ffffffffffffff18.len;
              local_68 = sVar4;
              local_28 = pvVar5;
              runtime_growslice(local_20,uVar6,uVar3,sVar4,(internal_abi_Type *)&DAT_00807920,~r0_02
                               );
              local_20 = extraout_RAX_02;
              sVar4 = local_68;
              uVar6 = extraout_RBX_02;
              pvVar5 = local_28;
              local_68 = extraout_RCX_03;
            }
            runtime_memmove((void *)((int)local_20 + in_RCX),pvVar5,sVar4);
            in_RCX = uVar6;
            in_RBX = local_20;
            in_RSI = local_60;
            in_RDI = local_68;
          }
        }
      }
    }
    psVar8 = (re->subexpNames).array;
    iVar2 = (re->subexpNames).len;
    for (i = 0; in_RBX = local_20, in_RSI = local_60, in_RDI = local_68, i < iVar2; i = i + 1) {
      if (psVar8->len == extraout_RBX_01) {
        local_38 = psVar8;
        runtime_memequal();
        psVar8 = local_38;
        cVar9 = extraout_AL;
      }
      else {
        cVar9 = '\0';
      }
      uVar3 = local_68;
      if ((cVar9 != '\0') && (puVar7 = (uint8 *)(i * 2 + 1), (int)puVar7 < (int)template.str)) {
        if (template.str <= (uint8 *)(i * 2)) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        uVar1 = *(uint *)(dst.cap + i * 0x10);
        if (-1 < (int)uVar1) {
          in_RDI = local_68;
          if (in_R9 == 0) {
            if (template.str <= puVar7) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            uVar6 = *(uint *)(dst.cap + (int)puVar7 * 8);
            if ((uint)dst.len < uVar6) {
                    // WARNING: Subroutine does not return
              runtime_panicSliceAlen();
            }
            if (uVar6 < uVar1) {
                    // WARNING: Subroutine does not return
              runtime_panicSliceB();
            }
            sVar4 = uVar6 - uVar1;
            uVar6 = in_RCX + sVar4;
            bVar10 = local_68 < uVar6;
            puVar7 = dst.array + (uVar1 & (int)-sVar4 >> 0x3f);
            local_68 = sVar4;
            if (bVar10) {
              ~r0_07.cap = (int)in_stack_ffffffffffffff28;
              ~r0_07.array = in_stack_ffffffffffffff18.str;
              ~r0_07.len = in_stack_ffffffffffffff18.len;
              local_40 = dst.array + (uVar1 & (int)-sVar4 >> 0x3f);
              runtime_growslice(local_20,uVar6,uVar3,sVar4,(internal_abi_Type *)&DAT_00807920,~r0_07
                               );
              uVar6 = extraout_RBX_06;
              in_RDI = extraout_RCX_07;
              puVar7 = local_40;
              local_20 = extraout_RAX_07;
            }
            sVar4 = local_68;
            local_68 = uVar6;
            runtime_memmove((void *)((int)local_20 + in_RCX),puVar7,sVar4);
            in_RCX = local_68;
            in_RBX = local_20;
            in_RSI = local_60;
          }
          else {
            if (template.str <= puVar7) {
                    // WARNING: Subroutine does not return
              runtime_panicIndex();
            }
            uVar6 = *(uint *)(dst.cap + (int)puVar7 * 8);
            if (in_R11 < uVar6) {
                    // WARNING: Subroutine does not return
              runtime_panicSliceAcap();
            }
            if (uVar6 < uVar1) {
                    // WARNING: Subroutine does not return
              runtime_panicSliceB();
            }
            sVar4 = uVar6 - uVar1;
            uVar6 = in_RCX + sVar4;
            pvVar5 = (void *)((uVar1 & (int)(uVar1 - in_R11) >> 0x3f) + in_R9);
            if (local_68 < uVar6) {
              ~r0_06.cap = (int)in_stack_ffffffffffffff28;
              ~r0_06.array = in_stack_ffffffffffffff18.str;
              ~r0_06.len = in_stack_ffffffffffffff18.len;
              local_68 = sVar4;
              local_28 = pvVar5;
              runtime_growslice(local_20,uVar6,uVar3,sVar4,(internal_abi_Type *)&DAT_00807920,~r0_06
                               );
              local_20 = extraout_RAX_06;
              uVar6 = extraout_RBX_05;
              sVar4 = local_68;
              pvVar5 = local_28;
              in_RDI = extraout_RCX_06;
            }
            local_68 = uVar6;
            runtime_memmove((void *)((int)local_20 + in_RCX),pvVar5,sVar4);
            in_RCX = local_68;
            in_RBX = local_20;
            in_RSI = local_60;
          }
          break;
        }
      }
      psVar8 = psVar8 + 1;
    }
  } while( true );
}



void regexp_extract(string str,string name,int num,string rest,bool ok)

{
  char cVar1;
  char extraout_AL;
  byte extraout_AL_00;
  dword r;
  uint extraout_RAX;
  uint uVar2;
  uint uVar3;
  undefined7 in_register_00000019;
  uint uVar4;
  int extraout_RBX;
  int iVar5;
  int i_1;
  int iVar6;
  byte bVar7;
  int unaff_R14;
  char cVar8;
  string in_stack_ffffffffffffffc0;
  int32 rune;
  int size;
  int i;
  
  uVar4 = CONCAT71(in_register_00000019,ok);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (uVar4 == 0) {
    return;
  }
  cVar1 = *(char *)num;
  if (cVar1 == '{') {
    uVar4 = uVar4 - 1;
    num = num + (uint)((dword)((int)-uVar4 >> 0x3f) & 1);
  }
  for (uVar2 = 0; (int)uVar2 < (int)uVar4; uVar2 = extraout_RBX + uVar2) {
    if (uVar4 < uVar2) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    unicode_utf8_DecodeRuneInString
              (in_stack_ffffffffffffffc0,
               ((dword)((int)-(uVar4 - uVar2) >> 0x3f) & (dword)uVar2) + (sdword)num,uVar4 - uVar2);
    r = (dword)extraout_RAX;
    if (r < 0x100) {
      cVar8 = (unicode_properties[extraout_RAX & 0xff] & 0x60) != 0;
    }
    else {
      unicode_isExcludingLatin(unicode_Letter,r,SUB81(unicode_Letter,0));
      cVar8 = extraout_AL;
    }
    if (cVar8 == '\0') {
      if ((sdword)r < 0x100) {
        if ((sdword)r < 0x30) {
          bVar7 = 0;
        }
        else {
          bVar7 = (sdword)r < 0x3a;
        }
      }
      else {
        unicode_isExcludingLatin(unicode_Digit,r,SUB81(unicode_Digit,0));
        bVar7 = extraout_AL_00;
      }
      bVar7 = bVar7 ^ 1;
    }
    else {
      bVar7 = 0;
    }
    if ((bVar7 != 0) && (r != 0x5f)) break;
  }
  if (uVar2 == 0) {
    return;
  }
  if (uVar4 < uVar2) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAlen();
  }
  uVar3 = uVar2;
  if (cVar1 == '{') {
    if (((int)uVar4 <= (int)uVar2) || (*(char *)(num + uVar2) != '}')) {
      return;
    }
    uVar3 = uVar2 + 1;
  }
  iVar6 = 0;
  for (iVar5 = 0; iVar5 < (int)uVar2; iVar5 = iVar5 + 1) {
    bVar7 = *(byte *)(num + iVar5);
    if (((bVar7 < 0x30) || (0x39 < bVar7)) || (99999999 < iVar6)) break;
    iVar6 = (uint)bVar7 + iVar6 * 10 + -0x30;
  }
  if (uVar2 == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if (uVar4 < uVar3) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  return;
}



void regexp___Regexp__FindSubmatchIndex(regexp_Regexp *re,__uint8 b,__int ~r0)

{
  int iVar1;
  io_RuneReader r;
  runtime_slice ~r0_00;
  __uint8 b_00;
  void *extraout_RAX;
  void *oldPtr;
  void *extraout_RAX_00;
  uint extraout_RCX;
  uint oldCap;
  uint extraout_RCX_00;
  uint extraout_RBX;
  uint newLen;
  uint extraout_RBX_00;
  int unaff_R14;
  undefined in_XMM15 [16];
  runtime_itab *prVar2;
  void *pvVar3;
  uint uVar4;
  int in_stack_ffffffffffffffa8;
  string in_stack_ffffffffffffffb0;
  __int in_stack_ffffffffffffffc0;
  __int in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  prVar2 = (runtime_itab *)re->prog->NumCap;
  pvVar3 = in_XMM15._0_8_;
  uVar4 = in_XMM15._8_8_;
  r.data = pvVar3;
  r.tab = prVar2;
  b_00.len = 0;
  b_00.array = (uint8 *)uVar4;
  b_00.cap = in_stack_ffffffffffffffa8;
  regexp___Regexp__doExecute
            (re,r,b_00,in_stack_ffffffffffffffb0,0,0,in_stack_ffffffffffffffc0,
             in_stack_ffffffffffffffd8);
  if (extraout_RAX != (void *)0x0) {
    iVar1 = re->numSubexp;
    oldPtr = extraout_RAX;
    oldCap = extraout_RCX;
    newLen = extraout_RBX;
    while ((int)newLen < (iVar1 + 1) * 2) {
      newLen = newLen + 1;
      if (oldCap < newLen) {
        ~r0_00.len = (int)pvVar3;
        ~r0_00.array = prVar2;
        ~r0_00.cap = uVar4;
        runtime_growslice(oldPtr,newLen,oldCap,1,(internal_abi_Type *)&DAT_00807760,~r0_00);
        oldPtr = extraout_RAX_00;
        oldCap = extraout_RCX_00;
        newLen = extraout_RBX_00;
      }
      *(undefined8 *)((int)oldPtr + newLen * 8 + -8) = 0xffffffffffffffff;
    }
  }
  return;
}



void regexp___Regexp__FindStringSubmatch(regexp_Regexp *re,string s,__string ~r0)

{
  uint uVar1;
  io_RuneReader r;
  __uint8 b;
  int extraout_RAX;
  int extraout_RAX_00;
  int extraout_RAX_01;
  int iVar2;
  uint in_RCX;
  int len;
  int i;
  uint uVar3;
  int extraout_RCX;
  int in_RBX;
  uint extraout_RBX;
  int extraout_RSI;
  void *~r0_00;
  int extraout_RDI;
  uint extraout_R8;
  uint uVar4;
  uint extraout_R9;
  int iVar5;
  int extraout_R10;
  int *extraout_R11;
  int iVar6;
  int unaff_R14;
  int in_stack_ffffffffffffff78;
  string in_stack_ffffffffffffff80;
  __int in_stack_ffffffffffffff90;
  __int in_stack_ffffffffffffffa8;
  undefined local_30 [8];
  undefined auStack_28 [24];
  int local_10;
  
  while (auStack_28 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  r.data = local_30;
  r.tab = (runtime_itab *)re->prog->NumCap;
  b.cap = in_stack_ffffffffffffff78;
  b.array = (uint8 *)SUB168(ZEXT816(4) << 0x40,0);
  b.len = SUB168(ZEXT816(4) << 0x40,8);
  regexp___Regexp__doExecute
            (re,r,b,in_stack_ffffffffffffff80,0,0,in_stack_ffffffffffffff90,
             in_stack_ffffffffffffffa8);
  if (extraout_RAX == 0) {
    return;
  }
  len = re->numSubexp + 1;
  local_10 = extraout_RAX;
  runtime_makeslice((internal_abi_Type *)&DAT_008075e0,len,len,~r0_00);
  i = 0;
  iVar2 = extraout_RAX_00;
  uVar4 = extraout_RBX;
  do {
    if (len <= i) {
      return;
    }
    uVar3 = i * 2;
    if (uVar4 != uVar3 && SBORROW8(uVar4,uVar3) == (int)(uVar4 + i * -2) < 0) {
      if (uVar4 <= uVar3) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      iVar5 = i * 0x10;
      uVar3 = *(uint *)(local_10 + iVar5);
      if (-1 < (int)uVar3) {
        uVar1 = i * 2 + 1;
        if (uVar4 <= uVar1) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        uVar1 = *(uint *)(local_10 + uVar1 * 8);
        if (in_RCX < uVar1) {
                    // WARNING: Subroutine does not return
          runtime_panicSliceAlen();
        }
        if (uVar1 < uVar3) {
                    // WARNING: Subroutine does not return
          runtime_panicSliceB();
        }
        *(uint *)(iVar2 + 8 + iVar5) = uVar1 - uVar3;
        iVar6 = (uVar3 & (int)-(uVar1 - uVar3) >> 0x3f) + in_RBX;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11 = iVar6;
          extraout_R11[1] = *(int *)(extraout_RAX_01 + extraout_R10);
          iVar2 = extraout_RAX_01;
          local_10 = extraout_RSI;
          in_RBX = extraout_RDI;
          uVar4 = extraout_R8;
          in_RCX = extraout_R9;
          iVar5 = extraout_R10;
          i = extraout_RCX;
        }
        *(int *)(iVar2 + iVar5) = iVar6;
      }
    }
    i = i + 1;
  } while( true );
}



void regexp___Regexp__FindStringSubmatchIndex(regexp_Regexp *re,string s,__int ~r0)

{
  int iVar1;
  io_RuneReader r;
  runtime_slice ~r0_00;
  __uint8 b;
  void *extraout_RAX;
  void *oldPtr;
  void *extraout_RAX_00;
  uint extraout_RCX;
  uint oldCap;
  uint extraout_RCX_00;
  uint extraout_RBX;
  uint newLen;
  uint extraout_RBX_00;
  int unaff_R14;
  undefined in_XMM15 [16];
  runtime_itab *prVar2;
  void *pvVar3;
  uint uVar4;
  int in_stack_ffffffffffffffa8;
  string in_stack_ffffffffffffffb0;
  __int in_stack_ffffffffffffffc0;
  __int in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  prVar2 = (runtime_itab *)re->prog->NumCap;
  pvVar3 = in_XMM15._0_8_;
  uVar4 = in_XMM15._8_8_;
  r.data = pvVar3;
  r.tab = prVar2;
  b.len = 0;
  b.array = (uint8 *)uVar4;
  b.cap = in_stack_ffffffffffffffa8;
  regexp___Regexp__doExecute
            (re,r,b,in_stack_ffffffffffffffb0,0,0,in_stack_ffffffffffffffc0,
             in_stack_ffffffffffffffd8);
  if (extraout_RAX != (void *)0x0) {
    iVar1 = re->numSubexp;
    oldPtr = extraout_RAX;
    oldCap = extraout_RCX;
    newLen = extraout_RBX;
    while ((int)newLen < (iVar1 + 1) * 2) {
      newLen = newLen + 1;
      if (oldCap < newLen) {
        ~r0_00.len = (int)pvVar3;
        ~r0_00.array = prVar2;
        ~r0_00.cap = uVar4;
        runtime_growslice(oldPtr,newLen,oldCap,1,(internal_abi_Type *)&DAT_00807760,~r0_00);
        oldPtr = extraout_RAX_00;
        oldCap = extraout_RCX_00;
        newLen = extraout_RBX_00;
      }
      *(undefined8 *)((int)oldPtr + newLen * 8 + -8) = 0xffffffffffffffff;
    }
  }
  return;
}



void regexp___Regexp__FindReaderSubmatchIndex(regexp_Regexp *re,io_RuneReader r,__int ~r0)

{
  int iVar1;
  io_RuneReader r_00;
  runtime_slice ~r0_00;
  __uint8 b;
  void *extraout_RAX;
  void *oldPtr;
  void *extraout_RAX_00;
  int in_RCX;
  uint extraout_RCX;
  uint oldCap;
  uint extraout_RCX_00;
  int in_RBX;
  uint extraout_RBX;
  uint newLen;
  uint extraout_RBX_00;
  int unaff_R14;
  undefined in_XMM15 [16];
  runtime_itab *prVar2;
  void *pvVar3;
  uint uVar4;
  int in_stack_ffffffffffffffa8;
  string in_stack_ffffffffffffffb0;
  __int in_stack_ffffffffffffffc0;
  __int in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  prVar2 = (runtime_itab *)re->prog->NumCap;
  pvVar3 = in_XMM15._0_8_;
  uVar4 = in_XMM15._8_8_;
  r_00.data = pvVar3;
  r_00.tab = prVar2;
  b.len = 0;
  b.array = (uint8 *)uVar4;
  b.cap = in_stack_ffffffffffffffa8;
  regexp___Regexp__doExecute
            (re,r_00,b,in_stack_ffffffffffffffb0,in_RBX,in_RCX,in_stack_ffffffffffffffc0,
             in_stack_ffffffffffffffd8);
  if (extraout_RAX != (void *)0x0) {
    iVar1 = re->numSubexp;
    oldPtr = extraout_RAX;
    oldCap = extraout_RCX;
    newLen = extraout_RBX;
    while ((int)newLen < (iVar1 + 1) * 2) {
      newLen = newLen + 1;
      if (oldCap < newLen) {
        ~r0_00.len = (int)pvVar3;
        ~r0_00.array = prVar2;
        ~r0_00.cap = uVar4;
        runtime_growslice(oldPtr,newLen,oldCap,1,(internal_abi_Type *)&DAT_00807760,~r0_00);
        oldPtr = extraout_RAX_00;
        oldCap = extraout_RCX_00;
        newLen = extraout_RBX_00;
      }
      *(undefined8 *)((int)oldPtr + newLen * 8 + -8) = 0xffffffffffffffff;
    }
  }
  return;
}



