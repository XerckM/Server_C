  undefined auVar7 [16];
  undefined auVar8 [16];
  undefined auVar9 [32];
  undefined auVar10 [32];
  undefined auVar11 [16];
  
  if (in_RDX < in_RAX) goto LAB_00407920;
  if ((in_RDX < 0x10) || (!internal_cpu_X86.HasSSE42)) {
LAB_004076b3:
    if (in_RAX < 3) {
      pauVar4 = in_RDI + -1;
      do {
        if (*(short *)*in_RDI == *(short *)*in_R8) goto LAB_0040798d;
        in_RDI = (undefined (*) [32])(*in_RDI + 1);
      } while (in_RDI < (undefined (*) [32])(*pauVar4 + in_RDX + 0x1f));
      goto LAB_00407920;
    }
    if (in_RAX < 4) {
      pauVar4 = in_RDI + -1;
      do {
        while (*(short *)*in_RDI == *(short *)*in_R8) {
          if (*(short *)(*in_RDI + 1) == *(short *)(*in_R8 + 1)) goto LAB_0040798d;
          in_RDI = (undefined (*) [32])(*in_RDI + 1);
          if ((undefined (*) [32])(*pauVar4 + in_RDX + 0x1e) <= in_RDI) goto LAB_00407920;
        }
        in_RDI = (undefined (*) [32])(*in_RDI + 1);
      } while (in_RDI < (undefined (*) [32])(*pauVar4 + in_RDX + 0x1e));
      goto LAB_00407920;
    }
    if (in_RAX < 5) {
      pauVar4 = in_RDI + -1;
      do {
        if (*(sdword *)*in_RDI == *(sdword *)*in_R8) goto LAB_0040798d;
        in_RDI = (undefined (*) [32])(*in_RDI + 1);
      } while (in_RDI < (undefined (*) [32])(*pauVar4 + in_RDX + 0x1d));
      goto LAB_00407920;
    }
    if (in_RAX < 8) {
      pauVar4 = (undefined (*) [32])((int)in_RDI + ((in_RDX + 1) - in_RAX));
      do {
        while (*(sdword *)*in_RDI == *(sdword *)*in_R8) {
          if (*(sdword *)(in_RDI[-1] + in_RAX + 0x1c) == *(sdword *)(in_R8[-1] + in_RAX + 0x1c))
          goto LAB_0040798d;
          in_RDI = (undefined (*) [32])(*in_RDI + 1);
          if (pauVar4 <= in_RDI) goto LAB_00407920;
        }
        in_RDI = (undefined (*) [32])(*in_RDI + 1);
      } while (in_RDI < pauVar4);
      goto LAB_00407920;
    }
    if (in_RAX < 9) {
      pauVar4 = in_RDI + -1;
      do {
        if (*(int *)*in_RDI == *(int *)*in_R8) goto LAB_0040798d;
        in_RDI = (undefined (*) [32])(*in_RDI + 1);
      } while (in_RDI < (undefined (*) [32])(*pauVar4 + in_RDX + 0x19));
      goto LAB_00407920;
    }
  }
  else if (in_RAX < 0xc) {
    if (((uint)(*in_R8 + 0x10) & 0xff0) != 0) {
      pauVar4 = (undefined (*) [32])(in_RDI[-1] + in_RDX + 0x11);
      uVar5 = 0x10 - in_RAX;
      do {
        uVar3 = pcmpestri(*(undefined (*) [16])*in_R8,*(undefined (*) [16])*in_RDI,0xc);
        if (CONCAT44(in_register_0000000c,uVar3) <= uVar5) goto LAB_0040798a;
        in_RDI = (undefined (*) [32])((int)in_RDI + uVar5);
      } while (in_RDI < pauVar4);
      uVar3 = pcmpestri(*(undefined (*) [16])*in_R8,*(undefined (*) [16])(pauVar4[-1] + 0x1f),0xc);
      if (CONCAT44(in_register_0000000c,uVar3) <= uVar5) {
        in_RDI = (undefined (*) [32])(pauVar4[-1] + 0x1f);
LAB_0040798a:
        in_RDI = (undefined (*) [32])(*in_RDI + CONCAT44(in_register_0000000c,uVar3));
LAB_0040798d:
        *in_R11 = (int)in_RDI - in_R10;
        return;
      }
      goto LAB_00407920;
    }
    goto LAB_004076b3;
  }
  if (in_RAX < 0x10) {
    pauVar4 = (undefined (*) [32])((int)in_RDI + ((in_RDX + 1) - in_RAX));
    do {
      while (*(int *)*in_RDI == *(int *)*in_R8) {
        if (*(int *)(in_RDI[-1] + in_RAX + 0x18) == *(int *)(in_R8[-1] + in_RAX + 0x18))
        goto LAB_0040798d;
        in_RDI = (undefined (*) [32])(*in_RDI + 1);
        if (pauVar4 <= in_RDI) goto LAB_00407920;
      }
      in_RDI = (undefined (*) [32])(*in_RDI + 1);
    } while (in_RDI < pauVar4);
  }
  else if (in_RAX < 0x11) {
    pauVar4 = in_RDI + -1;
    do {
      auVar7[0] = -((*in_RDI)[0] == (*in_R8)[0]);
      auVar7[1] = -((*in_RDI)[1] == (*in_R8)[1]);
      auVar7[2] = -((*in_RDI)[2] == (*in_R8)[2]);
      auVar7[3] = -((*in_RDI)[3] == (*in_R8)[3]);
      auVar7[4] = -((*in_RDI)[4] == (*in_R8)[4]);
      auVar7[5] = -((*in_RDI)[5] == (*in_R8)[5]);
      auVar7[6] = -((*in_RDI)[6] == (*in_R8)[6]);
      auVar7[7] = -((*in_RDI)[7] == (*in_R8)[7]);
      auVar7[8] = -((*in_RDI)[8] == (*in_R8)[8]);
      auVar7[9] = -((*in_RDI)[9] == (*in_R8)[9]);
      auVar7[10] = -((*in_RDI)[10] == (*in_R8)[10]);
      auVar7[11] = -((*in_RDI)[0xb] == (*in_R8)[0xb]);
      auVar7[12] = -((*in_RDI)[0xc] == (*in_R8)[0xc]);
      auVar7[13] = -((*in_RDI)[0xd] == (*in_R8)[0xd]);
      auVar7[14] = -((*in_RDI)[0xe] == (*in_R8)[0xe]);
      auVar7[15] = -((*in_RDI)[0xf] == (*in_R8)[0xf]);
      if ((ushort)((ushort)(SUB161(auVar7 >> 7,0) & 1) | (ushort)(SUB161(auVar7 >> 0xf,0) & 1) << 1
                   | (ushort)(SUB161(auVar7 >> 0x17,0) & 1) << 2 |
                   (ushort)(SUB161(auVar7 >> 0x1f,0) & 1) << 3 |
                   (ushort)(SUB161(auVar7 >> 0x27,0) & 1) << 4 |
                   (ushort)(SUB161(auVar7 >> 0x2f,0) & 1) << 5 |
                   (ushort)(SUB161(auVar7 >> 0x37,0) & 1) << 6 |
                   (ushort)(SUB161(auVar7 >> 0x3f,0) & 1) << 7 |
                   (ushort)(SUB161(auVar7 >> 0x47,0) & 1) << 8 |
                   (ushort)(SUB161(auVar7 >> 0x4f,0) & 1) << 9 |
                   (ushort)(SUB161(auVar7 >> 0x57,0) & 1) << 10 |
                   (ushort)(SUB161(auVar7 >> 0x5f,0) & 1) << 0xb |
                   (ushort)(SUB161(auVar7 >> 0x67,0) & 1) << 0xc |
                   (ushort)(SUB161(auVar7 >> 0x6f,0) & 1) << 0xd |
                   (ushort)(SUB161(auVar7 >> 0x77,0) & 1) << 0xe | (ushort)(auVar7[15] >> 7) << 0xf)
          == 0xffff) goto LAB_0040798d;
      in_RDI = (undefined (*) [32])(*in_RDI + 1);
    } while (in_RDI < (undefined (*) [32])(*pauVar4 + in_RDX + 0x11));
  }
  else if (in_RAX < 0x20) {
    pauVar4 = (undefined (*) [32])((int)in_RDI + ((in_RDX + 1) - in_RAX));
    pcVar1 = in_R8[-1] + in_RAX + 0x10;
    do {
      while (auVar8[0] = -((*in_RDI)[0] == (*in_R8)[0]), auVar8[1] = -((*in_RDI)[1] == (*in_R8)[1]),
            auVar8[2] = -((*in_RDI)[2] == (*in_R8)[2]), auVar8[3] = -((*in_RDI)[3] == (*in_R8)[3]),
            auVar8[4] = -((*in_RDI)[4] == (*in_R8)[4]), auVar8[5] = -((*in_RDI)[5] == (*in_R8)[5]),
            auVar8[6] = -((*in_RDI)[6] == (*in_R8)[6]), auVar8[7] = -((*in_RDI)[7] == (*in_R8)[7]),
            auVar8[8] = -((*in_RDI)[8] == (*in_R8)[8]), auVar8[9] = -((*in_RDI)[9] == (*in_R8)[9]),
            auVar8[10] = -((*in_RDI)[10] == (*in_R8)[10]),
            auVar8[11] = -((*in_RDI)[0xb] == (*in_R8)[0xb]),
            auVar8[12] = -((*in_RDI)[0xc] == (*in_R8)[0xc]),
            auVar8[13] = -((*in_RDI)[0xd] == (*in_R8)[0xd]),
            auVar8[14] = -((*in_RDI)[0xe] == (*in_R8)[0xe]),
            auVar8[15] = -((*in_RDI)[0xf] == (*in_R8)[0xf]),
            (ushort)((ushort)(SUB161(auVar8 >> 7,0) & 1) |
                     (ushort)(SUB161(auVar8 >> 0xf,0) & 1) << 1 |
                     (ushort)(SUB161(auVar8 >> 0x17,0) & 1) << 2 |
                     (ushort)(SUB161(auVar8 >> 0x1f,0) & 1) << 3 |
                     (ushort)(SUB161(auVar8 >> 0x27,0) & 1) << 4 |
                     (ushort)(SUB161(auVar8 >> 0x2f,0) & 1) << 5 |
                     (ushort)(SUB161(auVar8 >> 0x37,0) & 1) << 6 |
                     (ushort)(SUB161(auVar8 >> 0x3f,0) & 1) << 7 |
                     (ushort)(SUB161(auVar8 >> 0x47,0) & 1) << 8 |
                     (ushort)(SUB161(auVar8 >> 0x4f,0) & 1) << 9 |
                     (ushort)(SUB161(auVar8 >> 0x57,0) & 1) << 10 |
                     (ushort)(SUB161(auVar8 >> 0x5f,0) & 1) << 0xb |
                     (ushort)(SUB161(auVar8 >> 0x67,0) & 1) << 0xc |
                     (ushort)(SUB161(auVar8 >> 0x6f,0) & 1) << 0xd |
                     (ushort)(SUB161(auVar8 >> 0x77,0) & 1) << 0xe |
                    (ushort)(auVar8[15] >> 7) << 0xf) != 0xffff) {
        in_RDI = (undefined (*) [32])(*in_RDI + 1);
        if (pauVar4 <= in_RDI) goto LAB_00407920;
      }
      pcVar2 = in_RDI[-1] + in_RAX + 0x10;
      auVar11[0] = -(*pcVar2 == *pcVar1);
      auVar11[1] = -(pcVar2[1] == pcVar1[1]);
      auVar11[2] = -(pcVar2[2] == pcVar1[2]);
      auVar11[3] = -(pcVar2[3] == pcVar1[3]);
      auVar11[4] = -(pcVar2[4] == pcVar1[4]);
      auVar11[5] = -(pcVar2[5] == pcVar1[5]);
      auVar11[6] = -(pcVar2[6] == pcVar1[6]);
      auVar11[7] = -(pcVar2[7] == pcVar1[7]);
      auVar11[8] = -(pcVar2[8] == pcVar1[8]);
      auVar11[9] = -(pcVar2[9] == pcVar1[9]);
      auVar11[10] = -(pcVar2[10] == pcVar1[10]);
      auVar11[11] = -(pcVar2[0xb] == pcVar1[0xb]);
      auVar11[12] = -(pcVar2[0xc] == pcVar1[0xc]);
      auVar11[13] = -(pcVar2[0xd] == pcVar1[0xd]);
      auVar11[14] = -(pcVar2[0xe] == pcVar1[0xe]);
      auVar11[15] = -(pcVar2[0xf] == pcVar1[0xf]);
      if ((ushort)((ushort)(SUB161(auVar11 >> 7,0) & 1) |
                   (ushort)(SUB161(auVar11 >> 0xf,0) & 1) << 1 |
                   (ushort)(SUB161(auVar11 >> 0x17,0) & 1) << 2 |
                   (ushort)(SUB161(auVar11 >> 0x1f,0) & 1) << 3 |
                   (ushort)(SUB161(auVar11 >> 0x27,0) & 1) << 4 |
                   (ushort)(SUB161(auVar11 >> 0x2f,0) & 1) << 5 |
                   (ushort)(SUB161(auVar11 >> 0x37,0) & 1) << 6 |
                   (ushort)(SUB161(auVar11 >> 0x3f,0) & 1) << 7 |
                   (ushort)(SUB161(auVar11 >> 0x47,0) & 1) << 8 |
                   (ushort)(SUB161(auVar11 >> 0x4f,0) & 1) << 9 |
                   (ushort)(SUB161(auVar11 >> 0x57,0) & 1) << 10 |
                   (ushort)(SUB161(auVar11 >> 0x5f,0) & 1) << 0xb |
                   (ushort)(SUB161(auVar11 >> 0x67,0) & 1) << 0xc |
                   (ushort)(SUB161(auVar11 >> 0x6f,0) & 1) << 0xd |
                   (ushort)(SUB161(auVar11 >> 0x77,0) & 1) << 0xe |
                  (ushort)(auVar11[15] >> 7) << 0xf) == 0xffff) goto LAB_0040798d;
      in_RDI = (undefined (*) [32])(*in_RDI + 1);
    } while (in_RDI < pauVar4);
  }
  else if (in_RAX < 0x21) {
    auVar6 = vmovdqu_avx(*in_R8);
    pauVar4 = in_RDI + -1;
    do {
      auVar9 = vmovdqu_avx(*in_RDI);
      auVar9 = vpcmpeqb_avx2(auVar9,auVar6);
      if ((dword)((dword)(SUB321(auVar9 >> 7,0) & 1) | (dword)(SUB321(auVar9 >> 0xf,0) & 1) << 1 |
                  (dword)(SUB321(auVar9 >> 0x17,0) & 1) << 2 |
                  (dword)(SUB321(auVar9 >> 0x1f,0) & 1) << 3 |
                  (dword)(SUB321(auVar9 >> 0x27,0) & 1) << 4 |
                  (dword)(SUB321(auVar9 >> 0x2f,0) & 1) << 5 |
                  (dword)(SUB321(auVar9 >> 0x37,0) & 1) << 6 |
                  (dword)(SUB321(auVar9 >> 0x3f,0) & 1) << 7 |
                  (dword)(SUB321(auVar9 >> 0x47,0) & 1) << 8 |
                  (dword)(SUB321(auVar9 >> 0x4f,0) & 1) << 9 |
                  (dword)(SUB321(auVar9 >> 0x57,0) & 1) << 10 |
                  (dword)(SUB321(auVar9 >> 0x5f,0) & 1) << 0xb |
                  (dword)(SUB321(auVar9 >> 0x67,0) & 1) << 0xc |
                  (dword)(SUB321(auVar9 >> 0x6f,0) & 1) << 0xd |
                  (dword)(SUB321(auVar9 >> 0x77,0) & 1) << 0xe |
                  (dword)SUB321(auVar9 >> 0x7f,0) << 0xf |
                  (dword)(SUB321(auVar9 >> 0x87,0) & 1) << 0x10 |
                  (dword)(SUB321(auVar9 >> 0x8f,0) & 1) << 0x11 |
                  (dword)(SUB321(auVar9 >> 0x97,0) & 1) << 0x12 |
                  (dword)(SUB321(auVar9 >> 0x9f,0) & 1) << 0x13 |
                  (dword)(SUB321(auVar9 >> 0xa7,0) & 1) << 0x14 |
                  (dword)(SUB321(auVar9 >> 0xaf,0) & 1) << 0x15 |
                  (dword)(SUB321(auVar9 >> 0xb7,0) & 1) << 0x16 |
                  (dword)SUB321(auVar9 >> 0xbf,0) << 0x17 |
                  (dword)(SUB321(auVar9 >> 199,0) & 1) << 0x18 |
                  (dword)(SUB321(auVar9 >> 0xcf,0) & 1) << 0x19 |
                  (dword)(SUB321(auVar9 >> 0xd7,0) & 1) << 0x1a |
                  (dword)(SUB321(auVar9 >> 0xdf,0) & 1) << 0x1b |
                  (dword)(SUB321(auVar9 >> 0xe7,0) & 1) << 0x1c |
                  (dword)(SUB321(auVar9 >> 0xef,0) & 1) << 0x1d |
                  (dword)(SUB321(auVar9 >> 0xf7,0) & 1) << 0x1e |
                 (dword)(byte)(auVar9[31] >> 7) << 0x1f) == 0xffffffff) goto LAB_0040798d;
      in_RDI = (undefined (*) [32])(*in_RDI + 1);
    } while (in_RDI < (undefined (*) [32])(*pauVar4 + in_RDX + 1));
  }
  else {
    pauVar4 = (undefined (*) [32])((int)in_RDI + ((in_RDX + 1) - in_RAX));
    auVar6 = vmovdqu_avx(*(undefined (*) [32])(in_R8[-1] + in_RAX));
    auVar9 = vmovdqu_avx(*in_R8);
    do {
      while( true ) {
        auVar10 = vmovdqu_avx(*in_RDI);
        auVar10 = vpcmpeqb_avx2(auVar10,auVar9);
        if ((dword)((dword)(SUB321(auVar10 >> 7,0) & 1) | (dword)(SUB321(auVar10 >> 0xf,0) & 1) << 1
                    | (dword)(SUB321(auVar10 >> 0x17,0) & 1) << 2 |
                    (dword)(SUB321(auVar10 >> 0x1f,0) & 1) << 3 |
                    (dword)(SUB321(auVar10 >> 0x27,0) & 1) << 4 |
                    (dword)(SUB321(auVar10 >> 0x2f,0) & 1) << 5 |
                    (dword)(SUB321(auVar10 >> 0x37,0) & 1) << 6 |
                    (dword)(SUB321(auVar10 >> 0x3f,0) & 1) << 7 |
                    (dword)(SUB321(auVar10 >> 0x47,0) & 1) << 8 |
                    (dword)(SUB321(auVar10 >> 0x4f,0) & 1) << 9 |
                    (dword)(SUB321(auVar10 >> 0x57,0) & 1) << 10 |
                    (dword)(SUB321(auVar10 >> 0x5f,0) & 1) << 0xb |
                    (dword)(SUB321(auVar10 >> 0x67,0) & 1) << 0xc |
                    (dword)(SUB321(auVar10 >> 0x6f,0) & 1) << 0xd |
                    (dword)(SUB321(auVar10 >> 0x77,0) & 1) << 0xe |
                    (dword)SUB321(auVar10 >> 0x7f,0) << 0xf |
                    (dword)(SUB321(auVar10 >> 0x87,0) & 1) << 0x10 |
                    (dword)(SUB321(auVar10 >> 0x8f,0) & 1) << 0x11 |
                    (dword)(SUB321(auVar10 >> 0x97,0) & 1) << 0x12 |
                    (dword)(SUB321(auVar10 >> 0x9f,0) & 1) << 0x13 |
                    (dword)(SUB321(auVar10 >> 0xa7,0) & 1) << 0x14 |
                    (dword)(SUB321(auVar10 >> 0xaf,0) & 1) << 0x15 |
                    (dword)(SUB321(auVar10 >> 0xb7,0) & 1) << 0x16 |
                    (dword)SUB321(auVar10 >> 0xbf,0) << 0x17 |
                    (dword)(SUB321(auVar10 >> 199,0) & 1) << 0x18 |
                    (dword)(SUB321(auVar10 >> 0xcf,0) & 1) << 0x19 |
                    (dword)(SUB321(auVar10 >> 0xd7,0) & 1) << 0x1a |
                    (dword)(SUB321(auVar10 >> 0xdf,0) & 1) << 0x1b |
                    (dword)(SUB321(auVar10 >> 0xe7,0) & 1) << 0x1c |
                    (dword)(SUB321(auVar10 >> 0xef,0) & 1) << 0x1d |
                    (dword)(SUB321(auVar10 >> 0xf7,0) & 1) << 0x1e |
                   (dword)(byte)(auVar10[31] >> 7) << 0x1f) == 0xffffffff) break;
        in_RDI = (undefined (*) [32])(*in_RDI + 1);
        if (pauVar4 <= in_RDI) goto LAB_00407920;
      }
      auVar10 = vmovdqu_avx(*(undefined (*) [32])(in_RDI[-1] + in_RAX));
      auVar10 = vpcmpeqb_avx2(auVar10,auVar6);
      if ((dword)((dword)(SUB321(auVar10 >> 7,0) & 1) | (dword)(SUB321(auVar10 >> 0xf,0) & 1) << 1 |
                  (dword)(SUB321(auVar10 >> 0x17,0) & 1) << 2 |
                  (dword)(SUB321(auVar10 >> 0x1f,0) & 1) << 3 |
                  (dword)(SUB321(auVar10 >> 0x27,0) & 1) << 4 |
                  (dword)(SUB321(auVar10 >> 0x2f,0) & 1) << 5 |
                  (dword)(SUB321(auVar10 >> 0x37,0) & 1) << 6 |
                  (dword)(SUB321(auVar10 >> 0x3f,0) & 1) << 7 |
                  (dword)(SUB321(auVar10 >> 0x47,0) & 1) << 8 |
                  (dword)(SUB321(auVar10 >> 0x4f,0) & 1) << 9 |
                  (dword)(SUB321(auVar10 >> 0x57,0) & 1) << 10 |
                  (dword)(SUB321(auVar10 >> 0x5f,0) & 1) << 0xb |
                  (dword)(SUB321(auVar10 >> 0x67,0) & 1) << 0xc |
                  (dword)(SUB321(auVar10 >> 0x6f,0) & 1) << 0xd |
                  (dword)(SUB321(auVar10 >> 0x77,0) & 1) << 0xe |
                  (dword)SUB321(auVar10 >> 0x7f,0) << 0xf |
                  (dword)(SUB321(auVar10 >> 0x87,0) & 1) << 0x10 |
                  (dword)(SUB321(auVar10 >> 0x8f,0) & 1) << 0x11 |
                  (dword)(SUB321(auVar10 >> 0x97,0) & 1) << 0x12 |
                  (dword)(SUB321(auVar10 >> 0x9f,0) & 1) << 0x13 |
                  (dword)(SUB321(auVar10 >> 0xa7,0) & 1) << 0x14 |
                  (dword)(SUB321(auVar10 >> 0xaf,0) & 1) << 0x15 |
                  (dword)(SUB321(auVar10 >> 0xb7,0) & 1) << 0x16 |
                  (dword)SUB321(auVar10 >> 0xbf,0) << 0x17 |
                  (dword)(SUB321(auVar10 >> 199,0) & 1) << 0x18 |
                  (dword)(SUB321(auVar10 >> 0xcf,0) & 1) << 0x19 |
                  (dword)(SUB321(auVar10 >> 0xd7,0) & 1) << 0x1a |
                  (dword)(SUB321(auVar10 >> 0xdf,0) & 1) << 0x1b |
                  (dword)(SUB321(auVar10 >> 0xe7,0) & 1) << 0x1c |
                  (dword)(SUB321(auVar10 >> 0xef,0) & 1) << 0x1d |
                  (dword)(SUB321(auVar10 >> 0xf7,0) & 1) << 0x1e |
                 (dword)(byte)(auVar10[31] >> 7) << 0x1f) == 0xffffffff) goto LAB_0040798d;
      in_RDI = (undefined (*) [32])(*in_RDI + 1);
    } while (in_RDI < pauVar4);
  }
LAB_00407920:
  *in_R11 = -1;
  return;
}



// WARNING: Unknown calling convention

void internal_bytealg_Index(void)

{
  indexbody();
  return;
}



// WARNING: Unknown calling convention

void internal_bytealg_IndexString(void)

{
  indexbody();
  return;
}



// WARNING: Unknown calling convention

void indexbytebody(void)

{
  undefined (*pauVar1) [32];
  char *pcVar2;
  dword dVar3;
  ushort uVar4;
  uint in_RAX;
  dword dVar5;
  dword in_EBX;
  undefined4 in_register_0000001c;
  undefined (*in_RSI) [32];
  undefined (*pauVar6) [32];
  uint *in_R8;
  bool bVar7;
  char cVar8;
  undefined auVar9 [16];
  undefined auVar10 [16];
  undefined auVar11 [16];
  undefined auVar12 [16];
  undefined auVar13 [16];
  undefined auVar14 [32];
  undefined auVar15 [32];
  
  cVar8 = (char)in_RAX;
  if (CONCAT44(in_register_0000001c,in_EBX) < 0x10) {
    if (CONCAT44(in_register_0000001c,in_EBX) != 0) {
      if (((uint)(*in_RSI + 0x10) & 0xff0) == 0) {
        pcVar2 = in_RSI[-1] + CONCAT44(in_register_0000001c,in_EBX) + 0x10;
        auVar13[0] = -(*pcVar2 == cVar8);
        auVar13[1] = -(pcVar2[1] == cVar8);
        auVar13[2] = -(pcVar2[2] == cVar8);
        auVar13[3] = -(pcVar2[3] == cVar8);
        auVar13[4] = -(pcVar2[4] == cVar8);
        auVar13[5] = -(pcVar2[5] == cVar8);
        auVar13[6] = -(pcVar2[6] == cVar8);
        auVar13[7] = -(pcVar2[7] == cVar8);
        auVar13[8] = -(pcVar2[8] == cVar8);
        auVar13[9] = -(pcVar2[9] == cVar8);
        auVar13[10] = -(pcVar2[10] == cVar8);
        auVar13[11] = -(pcVar2[0xb] == cVar8);
        auVar13[12] = -(pcVar2[0xc] == cVar8);
        auVar13[13] = -(pcVar2[0xd] == cVar8);
        auVar13[14] = -(pcVar2[0xe] == cVar8);
        auVar13[15] = -(pcVar2[0xf] == cVar8);
        dVar5 = (dword)((dword)(ushort)((ushort)(SUB161(auVar13 >> 7,0) & 1) |
                                        (ushort)(SUB161(auVar13 >> 0xf,0) & 1) << 1 |
                                        (ushort)(SUB161(auVar13 >> 0x17,0) & 1) << 2 |
                                        (ushort)(SUB161(auVar13 >> 0x1f,0) & 1) << 3 |
                                        (ushort)(SUB161(auVar13 >> 0x27,0) & 1) << 4 |
                                        (ushort)(SUB161(auVar13 >> 0x2f,0) & 1) << 5 |
                                        (ushort)(SUB161(auVar13 >> 0x37,0) & 1) << 6 |
                                        (ushort)(SUB161(auVar13 >> 0x3f,0) & 1) << 7 |
                                        (ushort)(SUB161(auVar13 >> 0x47,0) & 1) << 8 |
                                        (ushort)(SUB161(auVar13 >> 0x4f,0) & 1) << 9 |
                                        (ushort)(SUB161(auVar13 >> 0x57,0) & 1) << 10 |
                                        (ushort)(SUB161(auVar13 >> 0x5f,0) & 1) << 0xb |
                                        (ushort)(SUB161(auVar13 >> 0x67,0) & 1) << 0xc |
                                        (ushort)(SUB161(auVar13 >> 0x6f,0) & 1) << 0xd |
                                        (ushort)(SUB161(auVar13 >> 0x77,0) & 1) << 0xe |
                                       (ushort)(auVar13[15] >> 7) << 0xf) << ((byte)in_EBX & 0x1f))
                >> 0x10;
        dVar3 = 0;
        if (dVar5 != 0) {
          for (; (dVar5 >> dVar3 & 1) == 0; dVar3 = dVar3 + 1) {
          }
        }
        if (dVar5 != 0) {
          *in_R8 = (uint)dVar3;
          return;
        }
      }
      else {
        auVar12[0] = -((*in_RSI)[0] == cVar8);
        auVar12[1] = -((*in_RSI)[1] == cVar8);
        auVar12[2] = -((*in_RSI)[2] == cVar8);
        auVar12[3] = -((*in_RSI)[3] == cVar8);
        auVar12[4] = -((*in_RSI)[4] == cVar8);
        auVar12[5] = -((*in_RSI)[5] == cVar8);
        auVar12[6] = -((*in_RSI)[6] == cVar8);
        auVar12[7] = -((*in_RSI)[7] == cVar8);
        auVar12[8] = -((*in_RSI)[8] == cVar8);
        auVar12[9] = -((*in_RSI)[9] == cVar8);
        auVar12[10] = -((*in_RSI)[10] == cVar8);
        auVar12[11] = -((*in_RSI)[0xb] == cVar8);
        auVar12[12] = -((*in_RSI)[0xc] == cVar8);
        auVar12[13] = -((*in_RSI)[0xd] == cVar8);
        auVar12[14] = -((*in_RSI)[0xe] == cVar8);
        auVar12[15] = -((*in_RSI)[0xf] == cVar8);
        uVar4 = (ushort)(SUB161(auVar12 >> 7,0) & 1) | (ushort)(SUB161(auVar12 >> 0xf,0) & 1) << 1 |
                (ushort)(SUB161(auVar12 >> 0x17,0) & 1) << 2 |
                (ushort)(SUB161(auVar12 >> 0x1f,0) & 1) << 3 |
                (ushort)(SUB161(auVar12 >> 0x27,0) & 1) << 4 |
                (ushort)(SUB161(auVar12 >> 0x2f,0) & 1) << 5 |
                (ushort)(SUB161(auVar12 >> 0x37,0) & 1) << 6 |
                (ushort)(SUB161(auVar12 >> 0x3f,0) & 1) << 7 |
                (ushort)(SUB161(auVar12 >> 0x47,0) & 1) << 8 |
                (ushort)(SUB161(auVar12 >> 0x4f,0) & 1) << 9 |
                (ushort)(SUB161(auVar12 >> 0x57,0) & 1) << 10 |
                (ushort)(SUB161(auVar12 >> 0x5f,0) & 1) << 0xb |
                (ushort)(SUB161(auVar12 >> 0x67,0) & 1) << 0xc |
                (ushort)(SUB161(auVar12 >> 0x6f,0) & 1) << 0xd |
                (ushort)(SUB161(auVar12 >> 0x77,0) & 1) << 0xe | (ushort)(auVar12[15] >> 7) << 0xf;
        dVar3 = 0;
        if (uVar4 != 0) {
          for (; (uVar4 >> dVar3 & 1) == 0; dVar3 = dVar3 + 1) {
          }
        }
        if ((uVar4 != 0) && (dVar3 < in_EBX)) {
          *in_R8 = (uint)dVar3;
          return;
        }
      }
    }
  }
  else {
    if ((0x20 < CONCAT44(in_register_0000001c,in_EBX)) && (internal_cpu_X86.HasAVX2)) {
      auVar9._8_8_ = 0;
      auVar9._0_8_ = in_RAX;
      pauVar1 = (undefined (*) [32])(in_RSI[-1] + CONCAT44(in_register_0000001c,in_EBX));
      auVar14 = vpbroadcastb_avx2(auVar9);
      pauVar6 = in_RSI;
      bVar7 = internal_cpu_X86.HasAVX2;
      do {
        auVar15 = vmovdqu_avx(*pauVar6);
        auVar15 = vpcmpeqb_avx2(auVar15,auVar14);
        vptest_avx(auVar15,auVar15);
        if (!bVar7) goto LAB_00407b23;
        pauVar6 = pauVar6 + 1;
        bVar7 = pauVar6 == pauVar1;
      } while ((int)pauVar6 < (int)pauVar1);
      auVar15 = vmovdqu_avx(*pauVar1);
      auVar15 = vpcmpeqb_avx2(auVar15,auVar14);
      vptest_avx(auVar15,auVar15);
      pauVar6 = pauVar1;
      if (bVar7) {
        *in_R8 = 0xffffffffffffffff;
        return;
      }
LAB_00407b23:
      dVar5 = (dword)(SUB321(auVar15 >> 7,0) & 1) | (dword)(SUB321(auVar15 >> 0xf,0) & 1) << 1 |
              (dword)(SUB321(auVar15 >> 0x17,0) & 1) << 2 |
              (dword)(SUB321(auVar15 >> 0x1f,0) & 1) << 3 |
              (dword)(SUB321(auVar15 >> 0x27,0) & 1) << 4 |
              (dword)(SUB321(auVar15 >> 0x2f,0) & 1) << 5 |
              (dword)(SUB321(auVar15 >> 0x37,0) & 1) << 6 |
              (dword)(SUB321(auVar15 >> 0x3f,0) & 1) << 7 |
              (dword)(SUB321(auVar15 >> 0x47,0) & 1) << 8 |
              (dword)(SUB321(auVar15 >> 0x4f,0) & 1) << 9 |
              (dword)(SUB321(auVar15 >> 0x57,0) & 1) << 10 |
              (dword)(SUB321(auVar15 >> 0x5f,0) & 1) << 0xb |
              (dword)(SUB321(auVar15 >> 0x67,0) & 1) << 0xc |
              (dword)(SUB321(auVar15 >> 0x6f,0) & 1) << 0xd |
              (dword)(SUB321(auVar15 >> 0x77,0) & 1) << 0xe |
              (dword)SUB321(auVar15 >> 0x7f,0) << 0xf |
              (dword)(SUB321(auVar15 >> 0x87,0) & 1) << 0x10 |
              (dword)(SUB321(auVar15 >> 0x8f,0) & 1) << 0x11 |
              (dword)(SUB321(auVar15 >> 0x97,0) & 1) << 0x12 |
              (dword)(SUB321(auVar15 >> 0x9f,0) & 1) << 0x13 |
              (dword)(SUB321(auVar15 >> 0xa7,0) & 1) << 0x14 |
              (dword)(SUB321(auVar15 >> 0xaf,0) & 1) << 0x15 |
              (dword)(SUB321(auVar15 >> 0xb7,0) & 1) << 0x16 |
              (dword)SUB321(auVar15 >> 0xbf,0) << 0x17 |
              (dword)(SUB321(auVar15 >> 199,0) & 1) << 0x18 |
              (dword)(SUB321(auVar15 >> 0xcf,0) & 1) << 0x19 |
              (dword)(SUB321(auVar15 >> 0xd7,0) & 1) << 0x1a |
              (dword)(SUB321(auVar15 >> 0xdf,0) & 1) << 0x1b |
              (dword)(SUB321(auVar15 >> 0xe7,0) & 1) << 0x1c |
              (dword)(SUB321(auVar15 >> 0xef,0) & 1) << 0x1d |
              (dword)(SUB321(auVar15 >> 0xf7,0) & 1) << 0x1e |
              (dword)(byte)(auVar15[31] >> 7) << 0x1f;
      dVar3 = 0;
      if (dVar5 != 0) {
        for (; (dVar5 >> dVar3 & 1) == 0; dVar3 = dVar3 + 1) {
        }
      }
      *in_R8 = (int)pauVar6 + ((uint)dVar3 - (int)in_RSI);
      return;
    }
    pauVar1 = (undefined (*) [32])(in_RSI[-1] + CONCAT44(in_register_0000001c,in_EBX) + 0x10);
    for (pauVar6 = in_RSI; pauVar6 < pauVar1; pauVar6 = (undefined (*) [32])(*pauVar6 + 0x10)) {
      auVar10[0] = -((*pauVar6)[0] == cVar8);
      auVar10[1] = -((*pauVar6)[1] == cVar8);
      auVar10[2] = -((*pauVar6)[2] == cVar8);
      auVar10[3] = -((*pauVar6)[3] == cVar8);
      auVar10[4] = -((*pauVar6)[4] == cVar8);
      auVar10[5] = -((*pauVar6)[5] == cVar8);
      auVar10[6] = -((*pauVar6)[6] == cVar8);
      auVar10[7] = -((*pauVar6)[7] == cVar8);
      auVar10[8] = -((*pauVar6)[8] == cVar8);
      auVar10[9] = -((*pauVar6)[9] == cVar8);
      auVar10[10] = -((*pauVar6)[10] == cVar8);
      auVar10[11] = -((*pauVar6)[0xb] == cVar8);
      auVar10[12] = -((*pauVar6)[0xc] == cVar8);
      auVar10[13] = -((*pauVar6)[0xd] == cVar8);
      auVar10[14] = -((*pauVar6)[0xe] == cVar8);
      auVar10[15] = -((*pauVar6)[0xf] == cVar8);
      uVar4 = (ushort)(SUB161(auVar10 >> 7,0) & 1) | (ushort)(SUB161(auVar10 >> 0xf,0) & 1) << 1 |
              (ushort)(SUB161(auVar10 >> 0x17,0) & 1) << 2 |
              (ushort)(SUB161(auVar10 >> 0x1f,0) & 1) << 3 |
              (ushort)(SUB161(auVar10 >> 0x27,0) & 1) << 4 |
              (ushort)(SUB161(auVar10 >> 0x2f,0) & 1) << 5 |
              (ushort)(SUB161(auVar10 >> 0x37,0) & 1) << 6 |
              (ushort)(SUB161(auVar10 >> 0x3f,0) & 1) << 7 |
              (ushort)(SUB161(auVar10 >> 0x47,0) & 1) << 8 |
              (ushort)(SUB161(auVar10 >> 0x4f,0) & 1) << 9 |
              (ushort)(SUB161(auVar10 >> 0x57,0) & 1) << 10 |
              (ushort)(SUB161(auVar10 >> 0x5f,0) & 1) << 0xb |
              (ushort)(SUB161(auVar10 >> 0x67,0) & 1) << 0xc |
              (ushort)(SUB161(auVar10 >> 0x6f,0) & 1) << 0xd |
              (ushort)(SUB161(auVar10 >> 0x77,0) & 1) << 0xe | (ushort)(auVar10[15] >> 7) << 0xf;
      dVar3 = 0;
      if (uVar4 != 0) {
        for (; (uVar4 >> dVar3 & 1) == 0; dVar3 = dVar3 + 1) {
        }
      }
      if (uVar4 != 0) goto LAB_00407a82;
    }
    auVar11[0] = -((*pauVar1)[0] == cVar8);
    auVar11[1] = -((*pauVar1)[1] == cVar8);
    auVar11[2] = -((*pauVar1)[2] == cVar8);
    auVar11[3] = -((*pauVar1)[3] == cVar8);
    auVar11[4] = -((*pauVar1)[4] == cVar8);
    auVar11[5] = -((*pauVar1)[5] == cVar8);
    auVar11[6] = -((*pauVar1)[6] == cVar8);
    auVar11[7] = -((*pauVar1)[7] == cVar8);
    auVar11[8] = -((*pauVar1)[8] == cVar8);
    auVar11[9] = -((*pauVar1)[9] == cVar8);
    auVar11[10] = -((*pauVar1)[10] == cVar8);
    auVar11[11] = -((*pauVar1)[0xb] == cVar8);
    auVar11[12] = -((*pauVar1)[0xc] == cVar8);
    auVar11[13] = -((*pauVar1)[0xd] == cVar8);
    auVar11[14] = -((*pauVar1)[0xe] == cVar8);
    auVar11[15] = -((*pauVar1)[0xf] == cVar8);
    uVar4 = (ushort)(SUB161(auVar11 >> 7,0) & 1) | (ushort)(SUB161(auVar11 >> 0xf,0) & 1) << 1 |
            (ushort)(SUB161(auVar11 >> 0x17,0) & 1) << 2 |
            (ushort)(SUB161(auVar11 >> 0x1f,0) & 1) << 3 |
            (ushort)(SUB161(auVar11 >> 0x27,0) & 1) << 4 |
            (ushort)(SUB161(auVar11 >> 0x2f,0) & 1) << 5 |
            (ushort)(SUB161(auVar11 >> 0x37,0) & 1) << 6 |
            (ushort)(SUB161(auVar11 >> 0x3f,0) & 1) << 7 |
            (ushort)(SUB161(auVar11 >> 0x47,0) & 1) << 8 |
            (ushort)(SUB161(auVar11 >> 0x4f,0) & 1) << 9 |
            (ushort)(SUB161(auVar11 >> 0x57,0) & 1) << 10 |
            (ushort)(SUB161(auVar11 >> 0x5f,0) & 1) << 0xb |
            (ushort)(SUB161(auVar11 >> 0x67,0) & 1) << 0xc |
            (ushort)(SUB161(auVar11 >> 0x6f,0) & 1) << 0xd |
            (ushort)(SUB161(auVar11 >> 0x77,0) & 1) << 0xe | (ushort)(auVar11[15] >> 7) << 0xf;
    dVar3 = 0;
    if (uVar4 != 0) {
      for (; (uVar4 >> dVar3 & 1) == 0; dVar3 = dVar3 + 1) {
      }
    }
    pauVar6 = pauVar1;
    if (uVar4 != 0) {
LAB_00407a82:
      *in_R8 = (int)pauVar6 + ((uint)dVar3 - (int)in_RSI);
      return;
    }
  }
  *in_R8 = 0xffffffffffffffff;
  return;
}



// WARNING: Unknown calling convention

void internal_bytealg_IndexByte(void)

{
  indexbytebody();
  return;
}



// WARNING: Unknown calling convention

void internal_bytealg_IndexByteString(void)

{
  indexbytebody();
  return;
}



void internal_bytealg_countGeneric(__uint8 b,uint8 c,int ~r0)

{
  __uint8 in_stack_ffffffffffffffd8;
  
  internal_bytealg_countGeneric(in_stack_ffffffffffffffd8,b.array,b.len);
  return;
}



void internal_bytealg_countGenericString(string s,uint8 c,int ~r0)

{
  string in_stack_ffffffffffffffe0;
  
  internal_bytealg_countGenericString(in_stack_ffffffffffffffe0,s.str,s.len);
  return;
}



void runtime_internal_syscall_EpollWait
               (int32 epfd,__runtime_internal_syscall_EpollEvent events,int32 maxev,int32 waitms,
               int32 n,uintptr errno)

{
  uintptr r1;
  uintptr e;
  void *ev;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_internal_syscall_Syscall6();
  return;
}



void syscall_RawSyscall6(uintptr num,uintptr a1,uintptr a2,uintptr a3,uintptr a4,uintptr a5,
                        uintptr a6,uintptr r1,uintptr r2,uintptr errno)

{
  runtime_internal_syscall_Syscall6();
  return;
}



// WARNING: Unknown calling convention

void runtime_internal_syscall_Syscall6(void)

{
  uint in_RAX;
  
  syscall();
  if (0xfffffffffffff001 < in_RAX) {
    return;
  }
  return;
}



void runtime_memhash8(void *p,uintptr h,uintptr ~r0)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_memhash();
  return;
}



void runtime_memhash16(void *p,uintptr h,uintptr ~r0)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_memhash();
  return;
}



void runtime_memhash128(void *p,uintptr h,uintptr ~r0)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_memhash();
  return;
}



void runtime_memhash_varlen(void *p,uintptr h,uintptr ~r0)

{
  uintptr size;
  uintptr ptr;
  
  runtime_memhash();
  return;
}



// Local variable x:runtime.stringStruct *[RAX:8] conflicts with parameter, skipped.

void runtime_strhashFallback(void *a,uintptr h,uintptr ~r0)

{
  uintptr in_RDI;
  uintptr extraout_RDI;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
                    // WARNING: Load size is inaccurate
  runtime_memhashFallback(*a,h,*(uintptr *)((int)a + 8),in_RDI);
  return;
}



void runtime_f32hash(void *p,uintptr h,uintptr ~r0)

{
  float fVar1;
  runtime_m *mp;
  uint64 hi;
  int unaff_R14;
  float32 f;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
                    // WARNING: Load size is inaccurate
  fVar1 = *p;
  if ((fVar1 == 0.0) && (!NAN(fVar1))) {
    return;
  }
  if (NAN(fVar1)) {
    *(int *)(*(int *)(unaff_R14 + 0x30) + 0x120) =
         *(int *)(*(int *)(unaff_R14 + 0x30) + 0x120) + -0x5f89e29b87429bd1;
    return;
  }
  runtime_memhash();
  return;
}



void runtime_f64hash(void *p,uintptr h,uintptr ~r0)

{
  double dVar1;
  runtime_m *mp;
  uint64 hi;
  int unaff_R14;
  float64 f;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
                    // WARNING: Load size is inaccurate
  dVar1 = *p;
  if ((dVar1 == 0.0) && (!NAN(dVar1))) {
    return;
  }
  if (NAN(dVar1)) {
    *(int *)(*(int *)(unaff_R14 + 0x30) + 0x120) =
         *(int *)(*(int *)(unaff_R14 + 0x30) + 0x120) + -0x5f89e29b87429bd1;
    return;
  }
  runtime_memhash();
  return;
}



// Local variable x:float32[2] *[RAX:8] conflicts with parameter, skipped.

void runtime_c64hash(void *p,uintptr h,uintptr ~r0)

{
  uintptr h_00;
  uintptr extraout_RCX;
  int unaff_R14;
  void *pvStack0000000000000008;
  
  pvStack0000000000000008 = p;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    ~r0 = extraout_RCX;
  }
  runtime_f32hash(pvStack0000000000000008,h,~r0);
  runtime_f32hash((void *)((int)pvStack0000000000000008 + 4),h_00,
                  (uintptr)(void *)((int)pvStack0000000000000008 + 4));
  return;
}



// Local variable x:float64[2] *[RAX:8] conflicts with parameter, skipped.

void runtime_c128hash(void *p,uintptr h,uintptr ~r0)

{
  uintptr h_00;
  uintptr extraout_RCX;
  int unaff_R14;
  void *pvStack0000000000000008;
  
  pvStack0000000000000008 = p;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    ~r0 = extraout_RCX;
  }
  runtime_f64hash(pvStack0000000000000008,h,~r0);
  runtime_f64hash((void *)((int)pvStack0000000000000008 + 8),h_00,
                  (uintptr)(void *)((int)pvStack0000000000000008 + 8));
  return;
}



// Local variable a:runtime.iface *[RAX:8] conflicts with parameter, skipped.

void runtime_interhash(void *p,uintptr h,uintptr ~r0)

{
  runtime_rtype t_00;
  string ~r0_00;
  void *x;
  runtime_itab *tab;
  internal_abi_Type *t;
  int unaff_RBP;
  uintptr in_RDI;
  uintptr extraout_RDI;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffd0;
  string in_stack_ffffffffffffffe0;
  uint8 *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
                    // WARNING: Load size is inaccurate
  if (*p == 0) {
    return;
  }
  t_00.Type = *(internal_abi_Type **)(*p + 8);
  if ((t_00.Type)->Equal == (func_unsafe_Pointer__unsafe_Pointer__bool **)0x0) {
    runtime_rtype_string(t_00,(string)in_stack_ffffffffffffffd0);
    ~r0_00.len = unaff_RBP;
    ~r0_00.str = in_stack_fffffffffffffff0;
    runtime_concatstring2
              ((runtime_tmpBuf *)0x0,(string)in_stack_ffffffffffffffd0,in_stack_ffffffffffffffe0,
               ~r0_00);
    runtime_convTstring((string)in_stack_ffffffffffffffd0,x);
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffffd0);
  }
  if (((t_00.Type)->Kind_ & 0x20) != 0) {
    runtime_typehash(t_00.Type,(void *)((int)p + 8),h ^ 0x756ea16a56a621,in_RDI);
    return;
  }
  runtime_typehash(t_00.Type,*(void **)((int)p + 8),h ^ 0x756ea16a56a621,in_RDI);
  return;
}



// Local variable a:runtime.eface *[RAX:8] conflicts with parameter, skipped.

void runtime_nilinterhash(void *p,uintptr h,uintptr ~r0)

{
  runtime_rtype t_00;
  string ~r0_00;
  void *x;
  internal_abi_Type *t;
  int unaff_RBP;
  uintptr in_RDI;
  uintptr extraout_RDI;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffd0;
  string in_stack_ffffffffffffffe0;
  uint8 *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
                    // WARNING: Load size is inaccurate
  t_00.Type = *p;
  if (t_00.Type == (internal_abi_Type *)0x0) {
    return;
  }
  if ((t_00.Type)->Equal == (func_unsafe_Pointer__unsafe_Pointer__bool **)0x0) {
    runtime_rtype_string(t_00,(string)in_stack_ffffffffffffffd0);
    ~r0_00.len = unaff_RBP;
    ~r0_00.str = in_stack_fffffffffffffff0;
    runtime_concatstring2
              ((runtime_tmpBuf *)0x0,(string)in_stack_ffffffffffffffd0,in_stack_ffffffffffffffe0,
               ~r0_00);
    runtime_convTstring((string)in_stack_ffffffffffffffd0,x);
                    // WARNING: Subroutine does not return
    runtime_gopanic(in_stack_ffffffffffffffd0);
  }
  if (((t_00.Type)->Kind_ & 0x20) != 0) {
    runtime_typehash(t_00.Type,(void *)((int)p + 8),h ^ 0x756ea16a56a621,in_RDI);
    return;
  }
  runtime_typehash(t_00.Type,*(void **)((int)p + 8),h ^ 0x756ea16a56a621,in_RDI);
  return;
}



// Local variable i:internal/abi.InterfaceType *[RAX:8] conflicts with parameter, skipped.
// Local variable a:internal/abi.ArrayType *[RAX:8] conflicts with parameter, skipped.
// Local variable s:internal/abi.StructType *[RAX:8] conflicts with parameter, skipped.

void runtime_typehash(internal_abi_Type *t,void *p,uintptr h,uintptr ~r0)

{
  int iVar1;
  internal_abi_Type *t_00;
  uint8 *puVar2;
  uint uVar3;
  string ~r0_00;
  char extraout_AL;
  uintptr extraout_RAX;
  uintptr extraout_RAX_00;
  void *x;
  uint8 **ppuVar4;
  uint uVar5;
  uintptr i_1;
  int iVar6;
  uintptr ~r0_01;
  void *p_00;
  int unaff_R14;
  interface___ in_stack_ffffffffffffff98;
  string in_stack_ffffffffffffffa8;
