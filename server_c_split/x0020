    struct runtime/internal/atomic.Int32 gcPercent;
    struct runtime/internal/atomic.Int64 memoryLimit;
    uint64 heapMinimum;
    struct runtime/internal/atomic.Uint64 runway;
    float64 consMark;
    float64 lastConsMark[4];
    struct runtime/internal/atomic.Uint64 gcPercentHeapGoal;
    struct runtime/internal/atomic.Uint64 sweepDistMinTrigger;
    uint64 triggered;
    uint64 lastHeapGoal;
    struct runtime/internal/atomic.Uint64 heapLive;
    struct runtime/internal/atomic.Uint64 heapScan;
    uint64 lastHeapScan;
    struct runtime/internal/atomic.Uint64 lastStackScan;
    struct runtime/internal/atomic.Uint64 maxStackScan;
    struct runtime/internal/atomic.Uint64 globalsScan;
    uint64 heapMarked;
    struct runtime/internal/atomic.Int64 heapScanWork;
    struct runtime/internal/atomic.Int64 stackScanWork;
    struct runtime/internal/atomic.Int64 globalsScanWork;
    struct runtime/internal/atomic.Int64 bgScanCredit;
    struct runtime/internal/atomic.Int64 assistTime;
    struct runtime/internal/atomic.Int64 dedicatedMarkTime;
    struct runtime/internal/atomic.Int64 fractionalMarkTime;
    struct runtime/internal/atomic.Int64 idleMarkTime;
    int64 markStartTime;
    struct runtime/internal/atomic.Int64 dedicatedMarkWorkersNeeded;
    struct runtime/internal/atomic.Uint64 idleMarkWorkers;
    struct runtime/internal/atomic.Float64 assistWorkPerByte;
    struct runtime/internal/atomic.Float64 assistBytesPerWork;
    float64 fractionalUtilizationGoal;
    runtime.sysMemStat heapInUse;
    runtime.sysMemStat heapReleased;
    runtime.sysMemStat heapFree;
    struct runtime/internal/atomic.Uint64 totalAlloc;
    struct runtime/internal/atomic.Uint64 totalFree;
    struct runtime/internal/atomic.Uint64 mappedReady;
    bool test;
    struct internal/cpu.CacheLinePad _;
};

typedef struct crypto/internal/edwards25519.Point crypto/internal/edwards25519.Point, *Pcrypto/internal/edwards25519.Point;

struct crypto/internal/edwards25519.Point {
    crypto/internal/edwards25519.incomparable _;
    struct crypto/internal/edwards25519/field.Element x;
    struct crypto/internal/edwards25519/field.Element y;
    struct crypto/internal/edwards25519/field.Element z;
    struct crypto/internal/edwards25519/field.Element t;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.pageAlloc_} noalg.struct_{_F_uintptr;_X0_*runtime.pageAlloc_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.pageAlloc_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.pageAlloc_} { // Original name: noalg.struct { F uintptr; X0 *runtime.pageAlloc }
    uintptr F;
    struct runtime.pageAlloc *X0;
};

typedef struct encoding/asn1.setEncoder encoding/asn1.setEncoder, *Pencoding/asn1.setEncoder;

struct encoding/asn1.setEncoder {
    encoding/asn1.encoder *array;
    int len;
    int cap;
};

typedef struct struct_{_sync.Mutex;_net.byName_map[string]net.byName;_net.byAddr_map[string][]string;_net.expire_time.Time;_net.path_string;_net.mtime_time.Time;_net.size_int64_} struct_{_sync.Mutex;_net.byName_map[string]net.byName;_net.byAddr_map[string][]string;_net.expire_time.Time;_net.path_string;_net.mtime_time.Time;_net.size_int64_}, *Pstruct_{_sync.Mutex;_net.byName_map[string]net.byName;_net.byAddr_map[string][]string;_net.expire_time.Time;_net.path_string;_net.mtime_time.Time;_net.size_int64_};

typedef struct hash<string,net.byName> *map[string]net.byName;

struct struct_{_sync.Mutex;_net.byName_map[string]net.byName;_net.byAddr_map[string][]string;_net.expire_time.Time;_net.path_string;_net.mtime_time.Time;_net.size_int64_} { // Original name: struct { sync.Mutex; net.byName map[string]net.byName; net.byAddr map[string][]string; net.expire time.Time; net.path string; net.mtime time.Time; net.size int64 }
    struct sync.Mutex Mutex;
    map[string]net.byName byName;
    map[string][]string byAddr;
    struct time.Time expire;
    struct string path;
    struct time.Time mtime;
    int64 size;
};

typedef struct noalg.struct_{_F_uintptr;_X0_string;_X1_[]interface_{}_} noalg.struct_{_F_uintptr;_X0_string;_X1_[]interface_{}_}, *Pnoalg.struct_{_F_uintptr;_X0_string;_X1_[]interface_{}_};

struct noalg.struct_{_F_uintptr;_X0_string;_X1_[]interface_{}_} { // Original name: noalg.struct { F uintptr; X0 string; X1 []interface {} }
    uintptr F;
    struct string X0;
    struct []interface_{} X1;
};

typedef struct vendor/golang.org/x/net/dns/dnsmessage.OPTResource vendor/golang.org/x/net/dns/dnsmessage.OPTResource, *Pvendor/golang.org/x/net/dns/dnsmessage.OPTResource;

typedef struct []vendor/golang.org/x/net/dns/dnsmessage.Option []vendor/golang.org/x/net/dns/dnsmessage.Option, *P[]vendor/golang.org/x/net/dns/dnsmessage.Option;

struct []vendor/golang.org/x/net/dns/dnsmessage.Option {
    struct vendor/golang.org/x/net/dns/dnsmessage.Option *array;
    int len;
    int cap;
};

struct vendor/golang.org/x/net/dns/dnsmessage.OPTResource {
    struct []vendor/golang.org/x/net/dns/dnsmessage.Option Options;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.acBalancerWrapper;_X1_*google.golang.org/grpc.refCountedProducer;_X2_google.golang.org/grpc/balancer.ProducerBuilder_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.acBalancerWrapper;_X1_*google.golang.org/grpc.refCountedProducer;_X2_google.golang.org/grpc/balancer.ProducerBuilder_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.acBalancerWrapper;_X1_*google.golang.org/grpc.refCountedProducer;_X2_google.golang.org/grpc/balancer.ProducerBuilder_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.acBalancerWrapper;_X1_*google.golang.org/grpc.refCountedProducer;_X2_google.golang.org/grpc/balancer.ProducerBuilder_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc.acBalancerWrapper; X1 *google.golang.org/grpc.refCountedProducer; X2 google.golang.org/grpc/balancer.ProducerBuilder }
    uintptr F;
    struct google.golang.org/grpc.acBalancerWrapper *X0;
    struct google.golang.org/grpc.refCountedProducer *X1;
    google.golang.org/grpc/balancer.ProducerBuilder X2;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*text/template/parse.RangeNode;_X1_*text/template.state;_X2_int_} noalg.struct_{_F_uintptr;_X0_*text/template/parse.RangeNode;_X1_*text/template.state;_X2_int_}, *Pnoalg.struct_{_F_uintptr;_X0_*text/template/parse.RangeNode;_X1_*text/template.state;_X2_int_};

struct noalg.struct_{_F_uintptr;_X0_*text/template/parse.RangeNode;_X1_*text/template.state;_X2_int_} { // Original name: noalg.struct { F uintptr; X0 *text/template/parse.RangeNode; X1 *text/template.state; X2 int }
    uintptr F;
    struct text/template/parse.RangeNode *X0;
    struct text/template.state *X1;
    int X2;
};

typedef struct google.golang.org/protobuf/internal/impl.messageConverter google.golang.org/protobuf/internal/impl.messageConverter, *Pgoogle.golang.org/protobuf/internal/impl.messageConverter;

struct google.golang.org/protobuf/internal/impl.messageConverter {
    reflect.Type goType;
};

typedef uint64 crypto/internal/nistec/fiat.p224NonMontgomeryDomainFieldElement[4];

typedef struct struct_{_runtime.user_bool;_runtime.runnable_runtime.gQueue;_runtime.n_int32_} struct_{_runtime.user_bool;_runtime.runnable_runtime.gQueue;_runtime.n_int32_}, *Pstruct_{_runtime.user_bool;_runtime.runnable_runtime.gQueue;_runtime.n_int32_};

typedef struct runtime.gQueue runtime.gQueue, *Pruntime.gQueue;

struct runtime.gQueue {
    runtime.guintptr head;
    runtime.guintptr tail;
};

struct struct_{_runtime.user_bool;_runtime.runnable_runtime.gQueue;_runtime.n_int32_} { // Original name: struct { runtime.user bool; runtime.runnable runtime.gQueue; runtime.n int32 }
    bool user;
    struct runtime.gQueue runnable;
    int32 n;
};

typedef struct runtime.siginfo runtime.siginfo, *Pruntime.siginfo;

typedef struct runtime.siginfoFields runtime.siginfoFields, *Pruntime.siginfoFields;

struct runtime.siginfoFields {
    int32 si_signo;
    int32 si_errno;
    int32 si_code;
    uint64 si_addr;
};

struct runtime.siginfo {
    struct runtime.siginfoFields siginfoFields;
    uint8 _[104];
};

typedef struct google.golang.org/grpc/internal/binarylog.Cancel google.golang.org/grpc/internal/binarylog.Cancel, *Pgoogle.golang.org/grpc/internal/binarylog.Cancel;

struct google.golang.org/grpc/internal/binarylog.Cancel {
    bool OnClientSide;
};

typedef struct noalg.struct_{_F_uintptr;_X0_[]string;_X1_string_} noalg.struct_{_F_uintptr;_X0_[]string;_X1_string_}, *Pnoalg.struct_{_F_uintptr;_X0_[]string;_X1_string_};

struct noalg.struct_{_F_uintptr;_X0_[]string;_X1_string_} { // Original name: noalg.struct { F uintptr; X0 []string; X1 string }
    uintptr F;
    struct []string X0;
    struct string X1;
};

typedef google.golang.org/protobuf/encoding/protowire.Number google.golang.org/protobuf/internal/filedesc.fieldRange[2];

typedef struct golang.org/x/net/http2.headerFieldNameError golang.org/x/net/http2.headerFieldNameError, *Pgolang.org/x/net/http2.headerFieldNameError;

struct golang.org/x/net/http2.headerFieldNameError {
    uint8 *str;
    int len;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.FieldRanges;

typedef struct hash<string,[]string> *google.golang.org/grpc/internal/metadata.mdValue;

typedef struct text/template.missingValType text/template.missingValType, *Ptext/template.missingValType;

struct text/template.missingValType {
};

typedef struct noalg.struct_{_crypto/internal/randutil.c_unsafe.Pointer;_crypto/internal/randutil.elem_unsafe.Pointer_} noalg.[2]struct_{_crypto/internal/randutil.c_unsafe.Pointer;_crypto/internal/randutil.elem_unsafe.Pointer_}[2];

typedef struct golang.org/x/net/http2.PriorityFrame golang.org/x/net/http2.PriorityFrame, *Pgolang.org/x/net/http2.PriorityFrame;

struct golang.org/x/net/http2.PriorityFrame {
    struct golang.org/x/net/http2.FrameHeader FrameHeader;
    struct golang.org/x/net/http2.PriorityParam PriorityParam;
};

typedef struct google.golang.org/grpc/internal/transport.outStream *noalg.[8]*google.golang.org/grpc/internal/transport.outStream[8];

typedef struct google.golang.org/grpc/internal/transport.incomingSettings google.golang.org/grpc/internal/transport.incomingSettings, *Pgoogle.golang.org/grpc/internal/transport.incomingSettings;

struct google.golang.org/grpc/internal/transport.incomingSettings {
    struct []golang.org/x/net/http2.Setting ss;
};

typedef struct runtime.arenaHint runtime.arenaHint, *Pruntime.arenaHint;

struct runtime.arenaHint {
    struct runtime/internal/sys.NotInHeap _;
    uintptr addr;
    bool down;
    struct runtime.arenaHint *next;
};

typedef struct golang.org/x/net/http2.RSTStreamFrame golang.org/x/net/http2.RSTStreamFrame, *Pgolang.org/x/net/http2.RSTStreamFrame;

struct golang.org/x/net/http2.RSTStreamFrame {
    struct golang.org/x/net/http2.FrameHeader FrameHeader;
    golang.org/x/net/http2.ErrCode ErrCode;
};

typedef struct vendor/golang.org/x/net/dns/dnsmessage.Builder vendor/golang.org/x/net/dns/dnsmessage.Builder, *Pvendor/golang.org/x/net/dns/dnsmessage.Builder;

struct vendor/golang.org/x/net/dns/dnsmessage.Builder {
    struct []uint8 msg;
    vendor/golang.org/x/net/dns/dnsmessage.section section;
    struct vendor/golang.org/x/net/dns/dnsmessage.header header;
    int start;
    map[string]int compression;
};

typedef struct google.golang.org/protobuf/proto.mergeOptions google.golang.org/protobuf/proto.mergeOptions, *Pgoogle.golang.org/protobuf/proto.mergeOptions;

struct google.golang.org/protobuf/proto.mergeOptions {
};

typedef struct struct_{_internal/testlog.mu_sync.Mutex;_internal/testlog.val_bool_} struct_{_internal/testlog.mu_sync.Mutex;_internal/testlog.val_bool_}, *Pstruct_{_internal/testlog.mu_sync.Mutex;_internal/testlog.val_bool_};

struct struct_{_internal/testlog.mu_sync.Mutex;_internal/testlog.val_bool_} { // Original name: struct { internal/testlog.mu sync.Mutex; internal/testlog.val bool }
    struct sync.Mutex mu;
    bool val;
};

typedef struct struct_{_runtime.enabled_bool;_runtime.pad_[3]uint8;_runtime.needed_bool;_runtime.alignme_uint64_} struct_{_runtime.enabled_bool;_runtime.pad_[3]uint8;_runtime.needed_bool;_runtime.alignme_uint64_}, *Pstruct_{_runtime.enabled_bool;_runtime.pad_[3]uint8;_runtime.needed_bool;_runtime.alignme_uint64_};

struct struct_{_runtime.enabled_bool;_runtime.pad_[3]uint8;_runtime.needed_bool;_runtime.alignme_uint64_} { // Original name: struct { runtime.enabled bool; runtime.pad [3]uint8; runtime.needed bool; runtime.alignme uint64 }
    bool enabled;
    uint8 pad[3];
    bool needed;
    uint64 alignme;
};

typedef struct []*math/big.nat []*math/big.nat, *P[]*math/big.nat;

struct []*math/big.nat {
    struct math/big.nat **array;
    int len;
    int cap;
};

typedef struct runtime.blockRecord runtime.blockRecord, *Pruntime.blockRecord;

struct runtime.blockRecord {
    float64 count;
    int64 cycles;
};

typedef struct []reflect.Type []reflect.Type, *P[]reflect.Type;

struct []reflect.Type {
    reflect.Type *array;
    int len;
    int cap;
};

typedef struct noalg.map.bucket[string]html/template.context noalg.map.bucket[string]html/template.context, *Pnoalg.map.bucket[string]html/template.context;

struct noalg.map.bucket[string]html/template.context {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8]html/template.context elems;
    void *overflow;
};

typedef struct html/template.context noalg.[8]html/template.context[8];

typedef struct context.stopCtx context.stopCtx, *Pcontext.stopCtx;

struct context.stopCtx {
    context.Context Context;
    void (**stop)(bool *);
};

typedef struct runtime.iface google.golang.org/grpc/credentials.internalInfo.1;

typedef struct sync/atomic.Pointer[go.shape.struct_{_sync.m_map[interface_{}]*sync.entry;_sync.amended_bool_}] sync/atomic.Pointer[go.shape.struct_{_sync.m_map[interface_{}]*sync.entry;_sync.amended_bool_}], *Psync/atomic.Pointer[go.shape.struct_{_sync.m_map[interface_{}]*sync.entry;_sync.amended_bool_}];

struct sync/atomic.Pointer[go.shape.struct_{_sync.m_map[interface_{}]*sync.entry;_sync.amended_bool_}] { // Original name: sync/atomic.Pointer[go.shape.struct { sync.m map[interface {}]*sync.entry; sync.amended bool }]
    struct sync/atomic.noCopy _;
    struct go.shape.struct_{_sync.m_map[interface_{}]*sync.entry;_sync.amended_bool_} *_[0];
    void *v;
};

typedef struct runtime.stackObject runtime.stackObject, *Pruntime.stackObject;

struct runtime.stackObject {
    struct runtime/internal/sys.NotInHeap _;
    uint32 off;
    uint32 size;
    struct runtime.stackObjectRecord *r;
    struct runtime.stackObject *left;
    struct runtime.stackObject *right;
};

typedef struct hchan<net.result[[]net.IPAddr].1> hchan<net.result[[]net.IPAddr].1>, *Phchan<net.result[[]net.IPAddr].1>;

typedef struct waitq<net.result[[]net.IPAddr].1> waitq<net.result[[]net.IPAddr].1>, *Pwaitq<net.result[[]net.IPAddr].1>;

struct waitq<net.result[[]net.IPAddr].1> { // Original name: waitq<net.result[[]net.IPAddr]·1>
    struct sudog<net.result[[]net.IPAddr].1> *first;
    struct sudog<net.result[[]net.IPAddr].1> *last;
};

struct hchan<net.result[[]net.IPAddr].1> { // Original name: hchan<net.result[[]net.IPAddr]·1>
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<net.result[[]net.IPAddr].1> recvq;
    struct waitq<net.result[[]net.IPAddr].1> sendq;
    struct runtime.mutex lock;
};

typedef struct noalg.struct_{_F_uintptr;_X0_chan_net.result.3_} noalg.struct_{_F_uintptr;_X0_chan_net.result.3_}, *Pnoalg.struct_{_F_uintptr;_X0_chan_net.result.3_};

struct noalg.struct_{_F_uintptr;_X0_chan_net.result.3_} { // Original name: noalg.struct { F uintptr; X0 chan net.result·3 }
    uintptr F;
    chan_net.result.3 X0;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*log/slog.handleState_} noalg.struct_{_F_uintptr;_X0_*log/slog.handleState_}, *Pnoalg.struct_{_F_uintptr;_X0_*log/slog.handleState_};

struct noalg.struct_{_F_uintptr;_X0_*log/slog.handleState_} { // Original name: noalg.struct { F uintptr; X0 *log/slog.handleState }
    uintptr F;
    struct log/slog.handleState *X0;
};

typedef struct runtime.iface google.golang.org/grpc/internal/resolver/dns/internal.NetResolver;

typedef struct hash<reflect.Type,google.golang.org/protobuf/reflect/protoreflect.MessageDescriptor> *map[reflect.Type]google.golang.org/protobuf/reflect/protoreflect.MessageDescriptor;

typedef struct noalg.struct_{_google.golang.org/grpc/internal/transport.c_unsafe.Pointer;_google.golang.org/grpc/internal/transport.elem_unsafe.Pointer_} noalg.struct_{_google.golang.org/grpc/internal/transport.c_unsafe.Pointer;_google.golang.org/grpc/internal/transport.elem_unsafe.Pointer_}, *Pnoalg.struct_{_google.golang.org/grpc/internal/transport.c_unsafe.Pointer;_google.golang.org/grpc/internal/transport.elem_unsafe.Pointer_};

struct noalg.struct_{_google.golang.org/grpc/internal/transport.c_unsafe.Pointer;_google.golang.org/grpc/internal/transport.elem_unsafe.Pointer_} { // Original name: noalg.struct { google.golang.org/grpc/internal/transport.c unsafe.Pointer; google.golang.org/grpc/internal/transport.elem unsafe.Pointer }
    void *c;
    void *elem;
};

typedef struct net/http/httputil.failureToReadBody net/http/httputil.failureToReadBody, *Pnet/http/httputil.failureToReadBody;

struct net/http/httputil.failureToReadBody {
};

typedef struct noalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc/internal/transport.http2Client_} noalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc/internal/transport.http2Client_}, *Pnoalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc/internal/transport.http2Client_};

struct noalg.struct_{_F_uintptr;_X0_*error;_X1_*google.golang.org/grpc/internal/transport.http2Client_} { // Original name: noalg.struct { F uintptr; X0 *error; X1 *google.golang.org/grpc/internal/transport.http2Client }
    uintptr F;
    error *X0;
    struct google.golang.org/grpc/internal/transport.http2Client *X1;
};

typedef struct runtime.iface log/slog.LogValuer;

typedef struct google.golang.org/grpc/stats.outgoingTraceKey google.golang.org/grpc/stats.outgoingTraceKey, *Pgoogle.golang.org/grpc/stats.outgoingTraceKey;

struct google.golang.org/grpc/stats.outgoingTraceKey {
};

typedef struct []runtime.scase []runtime.scase, *P[]runtime.scase;

struct []runtime.scase {
    struct runtime.scase *array;
    int len;
    int cap;
};

typedef struct noalg.map.hdr[context.canceler]struct_{} noalg.map.hdr[context.canceler]struct_{}, *Pnoalg.map.hdr[context.canceler]struct_{};

typedef struct noalg.map.bucket[context.canceler]struct_{} noalg.map.bucket[context.canceler]struct_{}, *Pnoalg.map.bucket[context.canceler]struct_{};

struct noalg.map.hdr[context.canceler]struct_{} { // Original name: noalg.map.hdr[context.canceler]struct {}
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[context.canceler]struct_{} *buckets;
    struct noalg.map.bucket[context.canceler]struct_{} *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.bucket[context.canceler]struct_{} { // Original name: noalg.map.bucket[context.canceler]struct {}
    uint8 topbits[8];
    noalg.[8]context.canceler keys;
    noalg.[8]struct_{} elems;
    void *overflow;
};

typedef context.canceler noalg.[8]context.canceler[8];

typedef struct []math/big.divisor []math/big.divisor, *P[]math/big.divisor;

struct []math/big.divisor {
    struct math/big.divisor *array;
    int len;
    int cap;
};

typedef struct math/big.Float math/big.Float, *Pmath/big.Float;

struct math/big.Float {
    uint32 prec;
    math/big.RoundingMode mode;
    math/big.Accuracy acc;
    math/big.form form;
    bool neg;
    struct math/big.nat mant;
    int32 exp;
};

typedef struct google.golang.org/grpc/internal/credentials.requestInfoKey google.golang.org/grpc/internal/credentials.requestInfoKey, *Pgoogle.golang.org/grpc/internal/credentials.requestInfoKey;

struct google.golang.org/grpc/internal/credentials.requestInfoKey {
};

typedef uint64 crypto/internal/edwards25519.fiatScalarNonMontgomeryDomainFieldElement[4];

typedef struct noalg.struct_{_F_uintptr;_X0_interface_{};_X1_*google.golang.org/grpc.payloadInfo_} noalg.struct_{_F_uintptr;_X0_interface_{};_X1_*google.golang.org/grpc.payloadInfo_}, *Pnoalg.struct_{_F_uintptr;_X0_interface_{};_X1_*google.golang.org/grpc.payloadInfo_};

struct noalg.struct_{_F_uintptr;_X0_interface_{};_X1_*google.golang.org/grpc.payloadInfo_} { // Original name: noalg.struct { F uintptr; X0 interface {}; X1 *google.golang.org/grpc.payloadInfo }
    uintptr F;
    interface_{} X0;
    struct google.golang.org/grpc.payloadInfo *X1;
};

typedef struct noalg.struct_{_F_uintptr;_X0_bool;_X1_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X2_google.golang.org/protobuf/internal/impl.offset;_X3_reflect.StructField;_X4_reflect.Type;_X5_google.golang.org/protobuf/internal/impl.Converter_} noalg.struct_{_F_uintptr;_X0_bool;_X1_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X2_google.golang.org/protobuf/internal/impl.offset;_X3_reflect.StructField;_X4_reflect.Type;_X5_google.golang.org/protobuf/internal/impl.Converter_}, *Pnoalg.struct_{_F_uintptr;_X0_bool;_X1_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X2_google.golang.org/protobuf/internal/impl.offset;_X3_reflect.StructField;_X4_reflect.Type;_X5_google.golang.org/protobuf/internal/impl.Converter_};

struct noalg.struct_{_F_uintptr;_X0_bool;_X1_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X2_google.golang.org/protobuf/internal/impl.offset;_X3_reflect.StructField;_X4_reflect.Type;_X5_google.golang.org/protobuf/internal/impl.Converter_} { // Original name: noalg.struct { F uintptr; X0 bool; X1 google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor; X2 google.golang.org/protobuf/internal/impl.offset; X3 reflect.StructField; X4 reflect.Type; X5 google.golang.org/protobuf/internal/impl.Converter }
    uintptr F;
    bool X0;
    google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor X1;
    google.golang.org/protobuf/internal/impl.offset X2;
    struct reflect.StructField X3;
    reflect.Type X4;
    google.golang.org/protobuf/internal/impl.Converter X5;
};

typedef google.golang.org/grpc/internal/transport.ServerTransport noalg.[8]google.golang.org/grpc/internal/transport.ServerTransport[8];

typedef struct google.golang.org/grpc/internal/channelz.dummyEntry google.golang.org/grpc/internal/channelz.dummyEntry, *Pgoogle.golang.org/grpc/internal/channelz.dummyEntry;

struct google.golang.org/grpc/internal/channelz.dummyEntry {
    int64 idNotFound;
    google.golang.org/grpc/internal/channelz.Entity Entity;
};

typedef struct runtime.iface fmt.Formatter;

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.atomicSemaphore;_X1_*google.golang.org/grpc.Server;_X2_google.golang.org/grpc/internal/transport.ServerTransport;_X3_*google.golang.org/grpc/internal/transport.Stream_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.atomicSemaphore;_X1_*google.golang.org/grpc.Server;_X2_google.golang.org/grpc/internal/transport.ServerTransport;_X3_*google.golang.org/grpc/internal/transport.Stream_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.atomicSemaphore;_X1_*google.golang.org/grpc.Server;_X2_google.golang.org/grpc/internal/transport.ServerTransport;_X3_*google.golang.org/grpc/internal/transport.Stream_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.atomicSemaphore;_X1_*google.golang.org/grpc.Server;_X2_google.golang.org/grpc/internal/transport.ServerTransport;_X3_*google.golang.org/grpc/internal/transport.Stream_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc.atomicSemaphore; X1 *google.golang.org/grpc.Server; X2 google.golang.org/grpc/internal/transport.ServerTransport; X3 *google.golang.org/grpc/internal/transport.Stream }
    uintptr F;
    struct google.golang.org/grpc.atomicSemaphore *X0;
    struct google.golang.org/grpc.Server *X1;
    google.golang.org/grpc/internal/transport.ServerTransport X2;
    struct google.golang.org/grpc/internal/transport.Stream *X3;
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/grpc.SharedBufferPool_} noalg.struct_{_F_uintptr;_X0_google.golang.org/grpc.SharedBufferPool_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/grpc.SharedBufferPool_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/grpc.SharedBufferPool_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/grpc.SharedBufferPool }
    uintptr F;
    google.golang.org/grpc.SharedBufferPool X0;
};

typedef struct google.golang.org/grpc/internal/transport.ioError google.golang.org/grpc/internal/transport.ioError, *Pgoogle.golang.org/grpc/internal/transport.ioError;

struct google.golang.org/grpc/internal/transport.ioError {
    error error;
};

typedef struct syscall.IPMreqn syscall.IPMreqn, *Psyscall.IPMreqn;

struct syscall.IPMreqn {
    uint8 Multiaddr[4];
    uint8 Address[4];
    int32 Ifindex;
};

typedef struct runtime.iface regexp.input;

typedef struct encoding/json.UnsupportedValueError encoding/json.UnsupportedValueError, *Pencoding/json.UnsupportedValueError;

struct encoding/json.UnsupportedValueError {
    struct reflect.Value Value;
    struct string Str;
};

typedef struct google.golang.org/protobuf/internal/filetype.Out google.golang.org/protobuf/internal/filetype.Out, *Pgoogle.golang.org/protobuf/internal/filetype.Out;

struct google.golang.org/protobuf/internal/filetype.Out {
    google.golang.org/protobuf/reflect/protoreflect.FileDescriptor File;
};

typedef struct net/http.ProtocolError net/http.ProtocolError, *Pnet/http.ProtocolError;

struct net/http.ProtocolError {
    struct string ErrorString;
};

typedef struct crypto/sha1.digest crypto/sha1.digest, *Pcrypto/sha1.digest;

struct crypto/sha1.digest {
    uint32 h[5];
    uint8 x[64];
    int nx;
    uint64 len;
};

typedef struct hash<net.hostLookupOrder,string> *map[net.hostLookupOrder]string;

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_bool;_X3_reflect.Type;_X4_google.golang.org/protobuf/internal/impl.Converter;_X5_bool_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_bool;_X3_reflect.Type;_X4_google.golang.org/protobuf/internal/impl.Converter;_X5_bool_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_bool;_X3_reflect.Type;_X4_google.golang.org/protobuf/internal/impl.Converter;_X5_bool_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.offset;_X1_reflect.StructField;_X2_bool;_X3_reflect.Type;_X4_google.golang.org/protobuf/internal/impl.Converter;_X5_bool_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/internal/impl.offset; X1 reflect.StructField; X2 bool; X3 reflect.Type; X4 google.golang.org/protobuf/internal/impl.Converter; X5 bool }
    uintptr F;
    google.golang.org/protobuf/internal/impl.offset X0;
    struct reflect.StructField X1;
    bool X2;
    reflect.Type X3;
    google.golang.org/protobuf/internal/impl.Converter X4;
    bool X5;
};

typedef struct noalg.struct_{_F_uintptr;_X0_**uint32;_X1_*[]func();_X2_*google.golang.org/grpc/internal/transport.http2Client;_X3_*[]golang.org/x/net/http2.Setting_} noalg.struct_{_F_uintptr;_X0_**uint32;_X1_*[]func();_X2_*google.golang.org/grpc/internal/transport.http2Client;_X3_*[]golang.org/x/net/http2.Setting_}, *Pnoalg.struct_{_F_uintptr;_X0_**uint32;_X1_*[]func();_X2_*google.golang.org/grpc/internal/transport.http2Client;_X3_*[]golang.org/x/net/http2.Setting_};

struct noalg.struct_{_F_uintptr;_X0_**uint32;_X1_*[]func();_X2_*google.golang.org/grpc/internal/transport.http2Client;_X3_*[]golang.org/x/net/http2.Setting_} { // Original name: noalg.struct { F uintptr; X0 **uint32; X1 *[]func(); X2 *google.golang.org/grpc/internal/transport.http2Client; X3 *[]golang.org/x/net/http2.Setting }
    uintptr F;
    uint32 **X0;
    struct []func() *X1;
    struct google.golang.org/grpc/internal/transport.http2Client *X2;
    struct []golang.org/x/net/http2.Setting *X3;
};

typedef struct syscall.Utsname syscall.Utsname, *Psyscall.Utsname;

struct syscall.Utsname {
    int8 Sysname[65];
    int8 Nodename[65];
    int8 Release[65];
    int8 Version[65];
    int8 Machine[65];
    int8 Domainname[65];
};

typedef struct []google.golang.org/grpc.ServerOption []google.golang.org/grpc.ServerOption, *P[]google.golang.org/grpc.ServerOption;

struct []google.golang.org/grpc.ServerOption {
    google.golang.org/grpc.ServerOption *array;
    int len;
    int cap;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*internal/poll.FD_} noalg.struct_{_F_uintptr;_X0_*internal/poll.FD_}, *Pnoalg.struct_{_F_uintptr;_X0_*internal/poll.FD_};

struct noalg.struct_{_F_uintptr;_X0_*internal/poll.FD_} { // Original name: noalg.struct { F uintptr; X0 *internal/poll.FD }
    uintptr F;
    struct internal/poll.FD *X0;
};

typedef struct google.golang.org/grpc/internal/binarylog.ClientMessage google.golang.org/grpc/internal/binarylog.ClientMessage, *Pgoogle.golang.org/grpc/internal/binarylog.ClientMessage;

struct google.golang.org/grpc/internal/binarylog.ClientMessage {
    bool OnClientSide;
    interface_{} Message;
};

typedef struct net/url.Error net/url.Error, *Pnet/url.Error;

struct net/url.Error {
    struct string Op;
    struct string URL;
    error Err;
};

typedef struct vendor/golang.org/x/net/http/httpproxy.config vendor/golang.org/x/net/http/httpproxy.config, *Pvendor/golang.org/x/net/http/httpproxy.config;

typedef struct []vendor/golang.org/x/net/http/httpproxy.matcher []vendor/golang.org/x/net/http/httpproxy.matcher, *P[]vendor/golang.org/x/net/http/httpproxy.matcher;

typedef struct runtime.iface vendor/golang.org/x/net/http/httpproxy.matcher;

struct []vendor/golang.org/x/net/http/httpproxy.matcher {
    vendor/golang.org/x/net/http/httpproxy.matcher *array;
    int len;
    int cap;
};

struct vendor/golang.org/x/net/http/httpproxy.config {
    struct vendor/golang.org/x/net/http/httpproxy.Config Config;
    struct net/url.URL *httpsProxy;
    struct net/url.URL *httpProxy;
    struct []vendor/golang.org/x/net/http/httpproxy.matcher ipMatchers;
    struct []vendor/golang.org/x/net/http/httpproxy.matcher domainMatchers;
};

typedef struct vendor/golang.org/x/net/dns/dnsmessage.Question vendor/golang.org/x/net/dns/dnsmessage.Question, *Pvendor/golang.org/x/net/dns/dnsmessage.Question;

struct vendor/golang.org/x/net/dns/dnsmessage.Question {
    struct vendor/golang.org/x/net/dns/dnsmessage.Name Name;
    vendor/golang.org/x/net/dns/dnsmessage.Type Type;
    vendor/golang.org/x/net/dns/dnsmessage.Class Class;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*[]uint8;_X1_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X2_*error;_X3_google.golang.org/protobuf/proto.MarshalOptions;_X4_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X5_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor_} noalg.struct_{_F_uintptr;_X0_*[]uint8;_X1_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X2_*error;_X3_google.golang.org/protobuf/proto.MarshalOptions;_X4_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X5_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor_}, *Pnoalg.struct_{_F_uintptr;_X0_*[]uint8;_X1_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X2_*error;_X3_google.golang.org/protobuf/proto.MarshalOptions;_X4_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X5_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor_};

struct noalg.struct_{_F_uintptr;_X0_*[]uint8;_X1_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X2_*error;_X3_google.golang.org/protobuf/proto.MarshalOptions;_X4_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X5_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor_} { // Original name: noalg.struct { F uintptr; X0 *[]uint8; X1 google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor; X2 *error; X3 google.golang.org/protobuf/proto.MarshalOptions; X4 google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor; X5 google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor }
    uintptr F;
    struct []uint8 *X0;
    google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor X1;
    error *X2;
    struct google.golang.org/protobuf/proto.MarshalOptions X3;
    google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor X4;
    google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor X5;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.Server_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.Server_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.Server_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.Server_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc.Server }
    uintptr F;
    struct google.golang.org/grpc.Server *X0;
};

typedef struct strings.genericReplacer strings.genericReplacer, *Pstrings.genericReplacer;

struct strings.genericReplacer {
    struct strings.trieNode root;
    int tableSize;
    uint8 mapping[256];
};

typedef struct vendor/golang.org/x/sys/cpu.CacheLinePad vendor/golang.org/x/sys/cpu.CacheLinePad, *Pvendor/golang.org/x/sys/cpu.CacheLinePad;

struct vendor/golang.org/x/sys/cpu.CacheLinePad {
    uint8 _[64];
};

typedef struct []vendor/golang.org/x/text/unicode/norm.Properties []vendor/golang.org/x/text/unicode/norm.Properties, *P[]vendor/golang.org/x/text/unicode/norm.Properties;

struct []vendor/golang.org/x/text/unicode/norm.Properties {
    struct vendor/golang.org/x/text/unicode/norm.Properties *array;
    int len;
    int cap;
};

typedef struct runtime.iface interface_{_GetCommonAuthInfo()_google.golang.org/grpc/credentials.CommonAuthInfo_};

typedef struct compress/flate.dictDecoder compress/flate.dictDecoder, *Pcompress/flate.dictDecoder;

struct compress/flate.dictDecoder {
    struct []uint8 hist;
    int wrPos;
    int rdPos;
    bool full;
};

typedef struct encoding/json.mapEncoder encoding/json.mapEncoder, *Pencoding/json.mapEncoder;

struct encoding/json.mapEncoder {
    void (**elemEnc)(struct encoding/json.encodeState *, struct reflect.Value, struct encoding/json.encOpts);
};

typedef struct noalg.map.hdr[net.Listener]bool noalg.map.hdr[net.Listener]bool, *Pnoalg.map.hdr[net.Listener]bool;

struct noalg.map.hdr[net.Listener]bool {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[net.Listener]bool *buckets;
    struct noalg.map.bucket[net.Listener]bool *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct noalg.map.hdr[runtime._typePair]struct_{} noalg.map.hdr[runtime._typePair]struct_{}, *Pnoalg.map.hdr[runtime._typePair]struct_{};

struct noalg.map.hdr[runtime._typePair]struct_{} { // Original name: noalg.map.hdr[runtime._typePair]struct {}
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[runtime._typePair]struct_{} *buckets;
    struct noalg.map.bucket[runtime._typePair]struct_{} *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.Converter;_X1_google.golang.org/protobuf/internal/impl.offset;_X2_reflect.StructField;_X3_bool_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.Converter;_X1_google.golang.org/protobuf/internal/impl.offset;_X2_reflect.StructField;_X3_bool_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.Converter;_X1_google.golang.org/protobuf/internal/impl.offset;_X2_reflect.StructField;_X3_bool_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/internal/impl.Converter;_X1_google.golang.org/protobuf/internal/impl.offset;_X2_reflect.StructField;_X3_bool_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/internal/impl.Converter; X1 google.golang.org/protobuf/internal/impl.offset; X2 reflect.StructField; X3 bool }
    uintptr F;
    google.golang.org/protobuf/internal/impl.Converter X0;
    google.golang.org/protobuf/internal/impl.offset X1;
    struct reflect.StructField X2;
    bool X3;
};

typedef struct noalg.map.iter[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList noalg.map.iter[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList, *Pnoalg.map.iter[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList;

typedef struct noalg.map.hdr[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList noalg.map.hdr[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList, *Pnoalg.map.hdr[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList;

struct noalg.map.iter[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList {
    struct google.golang.org/grpc/resolver.Address *key;
    struct google.golang.org/grpc/resolver.addressMapEntryList *elem;
    void *t;
    struct noalg.map.hdr[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList *h;
    struct noalg.map.bucket[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList *buckets;
    struct noalg.map.bucket[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

struct noalg.map.hdr[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList *buckets;
    struct noalg.map.bucket[google.golang.org/grpc/resolver.Address]google.golang.org/grpc/resolver.addressMapEntryList *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct google.golang.org/grpc.ServiceDesc google.golang.org/grpc.ServiceDesc, *Pgoogle.golang.org/grpc.ServiceDesc;

typedef struct []google.golang.org/grpc.MethodDesc []google.golang.org/grpc.MethodDesc, *P[]google.golang.org/grpc.MethodDesc;

struct []google.golang.org/grpc.MethodDesc {
    struct google.golang.org/grpc.MethodDesc *array;
    int len;
    int cap;
};

struct google.golang.org/grpc.ServiceDesc {
    struct string ServiceName;
    interface_{} HandlerType;
    struct []google.golang.org/grpc.MethodDesc Methods;
    struct []google.golang.org/grpc.StreamDesc Streams;
    interface_{} Metadata;
};

typedef struct encoding/json.condAddrEncoder encoding/json.condAddrEncoder, *Pencoding/json.condAddrEncoder;

struct encoding/json.condAddrEncoder {
    void (**canAddrEnc)(struct encoding/json.encodeState *, struct reflect.Value, struct encoding/json.encOpts);
    void (**elseEnc)(struct encoding/json.encodeState *, struct reflect.Value, struct encoding/json.encOpts);
};

typedef struct runtime.iface interface_{_Unwrap()_[]error_};

typedef struct noalg.struct_{_F_uintptr;_X0_*sync.WaitGroup_} noalg.struct_{_F_uintptr;_X0_*sync.WaitGroup_}, *Pnoalg.struct_{_F_uintptr;_X0_*sync.WaitGroup_};

struct noalg.struct_{_F_uintptr;_X0_*sync.WaitGroup_} { // Original name: noalg.struct { F uintptr; X0 *sync.WaitGroup }
    uintptr F;
    struct sync.WaitGroup *X0;
};

typedef struct google.golang.org/protobuf/reflect/protoregistry.nameSuffix google.golang.org/protobuf/reflect/protoregistry.nameSuffix, *Pgoogle.golang.org/protobuf/reflect/protoregistry.nameSuffix;

struct google.golang.org/protobuf/reflect/protoregistry.nameSuffix {
    uint8 *str;
    int len;
};

typedef struct noalg.struct_{_net/http.c_unsafe.Pointer;_net/http.elem_unsafe.Pointer_} noalg.struct_{_net/http.c_unsafe.Pointer;_net/http.elem_unsafe.Pointer_}, *Pnoalg.struct_{_net/http.c_unsafe.Pointer;_net/http.elem_unsafe.Pointer_};

struct noalg.struct_{_net/http.c_unsafe.Pointer;_net/http.elem_unsafe.Pointer_} { // Original name: noalg.struct { net/http.c unsafe.Pointer; net/http.elem unsafe.Pointer }
    void *c;
    void *elem;
};

typedef struct sync/atomic.Pointer[math/rand.Rand] sync/atomic.Pointer[math/rand.Rand], *Psync/atomic.Pointer[math/rand.Rand];

typedef struct math/rand.Rand math/rand.Rand, *Pmath/rand.Rand;

typedef struct runtime.iface math/rand.Source;

typedef struct runtime.iface math/rand.Source64;

struct math/rand.Rand {
    math/rand.Source src;
    math/rand.Source64 s64;
    int64 readVal;
    int8 readPos;
};

struct sync/atomic.Pointer[math/rand.Rand] {
    struct sync/atomic.noCopy _;
    struct math/rand.Rand *_[0];
    void *v;
};

typedef struct []error []error, *P[]error;

struct []error {
    error *array;
    int len;
    int cap;
};

typedef struct mime/multipart.writerOnly.1 mime/multipart.writerOnly.1, *Pmime/multipart.writerOnly.1;

struct mime/multipart.writerOnly.1 { // Original name: mime/multipart.writerOnly·1
    io.Writer Writer;
};

typedef struct google.golang.org/grpc/internal/transport.bufConn google.golang.org/grpc/internal/transport.bufConn, *Pgoogle.golang.org/grpc/internal/transport.bufConn;

struct google.golang.org/grpc/internal/transport.bufConn {
    net.Conn Conn;
    io.Reader r;
};

typedef struct hash<string,google.golang.org/grpc/encoding.Codec> *map[string]google.golang.org/grpc/encoding.Codec;

typedef struct vendor/golang.org/x/crypto/cryptobyte.String vendor/golang.org/x/crypto/cryptobyte.String, *Pvendor/golang.org/x/crypto/cryptobyte.String;

struct vendor/golang.org/x/crypto/cryptobyte.String {
    uint8 *array;
    int len;
    int cap;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.EnumDescriptors;

typedef struct google.golang.org/grpc/internal/resolver.RPCInfo google.golang.org/grpc/internal/resolver.RPCInfo, *Pgoogle.golang.org/grpc/internal/resolver.RPCInfo;

struct google.golang.org/grpc/internal/resolver.RPCInfo {
    context.Context Context;
    struct string Method;
};

typedef struct golang.org/x/text/unicode/bidi.bidiTrie golang.org/x/text/unicode/bidi.bidiTrie, *Pgolang.org/x/text/unicode/bidi.bidiTrie;

struct golang.org/x/text/unicode/bidi.bidiTrie {
};

typedef struct encoding/asn1.bytesEncoder encoding/asn1.bytesEncoder, *Pencoding/asn1.bytesEncoder;

struct encoding/asn1.bytesEncoder {
    uint8 *array;
    int len;
    int cap;
};

typedef struct google.golang.org/grpc.pfConfig google.golang.org/grpc.pfConfig, *Pgoogle.golang.org/grpc.pfConfig;

struct google.golang.org/grpc.pfConfig {
    google.golang.org/grpc/serviceconfig.LoadBalancingConfig LoadBalancingConfig;
    bool ShuffleAddressList;
};

typedef struct runtime.iface encoding.TextUnmarshaler;

typedef struct encoding/json.tagOptions encoding/json.tagOptions, *Pencoding/json.tagOptions;

struct encoding/json.tagOptions {
    uint8 *str;
    int len;
};

typedef struct runtime/internal/atomic.Pointer[go.shape.struct_{_runtime.stack_runtime.stack;_runtime.stackguard0_uintptr;_runtime.stackguard1_uintptr;_runtime._panic_*runtime._panic;_runtime._defer_*runtime._defer;_runtime.m_*runtime.m;_runtime.sched_runtime.gobuf;_runtime.syscallsp_uintptr;_runtime.syscallpc_uintptr;_runtime.stktopsp_uintptr;_runtime.param_unsafe.Pointer;_runtime.atomicstatus_runtime/internal/atomic.Uint32;_runtime.stackLock_uint32;_runtime.goid_uint64;_runtime.schedlink_runtime.guintptr;_runtime.waitsince_int64;_runtime.waitreason_runtime.waitReason;_runtime.preempt_bool;_runtime.preemptStop_bool;_runtime.preemptShrink_bool;_runtime.asyncSafePoint_bool;_runtime.paniconfault_bool;_runtime.gcscandone_bool;_runtime.throwsplit_bool;_runtime.activeStackChans_bool;_runtime.parkingOnChan_runtime/internal/atomic.Bool;_runtime.raceignore_int8;_runtime.tracking_bool;_runtime.trackingSeq_uint8;_runtime.trackingStamp_int64;_runtime.runnableTime_int64;_runtime.lockedm_runtime.muintptr;_runtime.sig_uint32;_runtime.writebuf_[]uint8;_runtime.sigcode0_uintptr;_runtime.sigcode1_uintptr;_runtime.sigpc_uintptr;_runtime.parentGoid_uint64;_runtime.gopc_uintptr;_runtime.ancestors_*[]runtime.ancestorInfo;_runtime.startpc_uintptr;_runtime.racectx_uintptr;_runtime.waiting_*runtime.sudog;_runtime.cgoCtxt_[]uintptr;_runtime.labels_unsafe.Pointer;_runtime.timer_*runtime.timer;_runtime.selectDone_runtime/internal/atomic.Uint32;_runtime.goroutineProfiled_runtime.goroutineProfileStateHolder;_runtime.trace_runtime.gTraceState;_runtime.gcAssistBytes_int64_}] runtime/internal/atomic.Pointer[go.shape.struct_{_runtime.stack_runtime.stack;_runtime.stackguard0_uintptr;_runtime.stackguard1_uintptr;_runtime._panic_*runtime._panic;_runtime._defer_*runtime._defer;_runtime.m_*runtime.m;_runtime.sched_runtime.gobuf;_runtime.syscallsp_uintptr;_runtime.syscallpc_uintptr;_runtime.stktopsp_uintptr;_runtime.param_unsafe.Pointer;_runtime.atomicstatus_runtime/internal/atomic.Uint32;_runtime.stackLock_uint32;_runtime.goid_uint64;_runtime.schedlink_runtime.guintptr;_runtime.waitsince_int64;_runtime.waitreason_runtime.waitReason;_runtime.preempt_bool;_runtime.preemptStop_bool;_runtime.preemptShrink_bool;_runtime.asyncSafePoint_bool;_runtime.paniconfault_bool;_runtime.gcscandone_bool;_runtime.throwsplit_bool;_runtime.activeStackChans_bool;_runtime.parkingOnChan_runtime/internal/atomic.Bool;_runtime.raceignore_int8;_runtime.tracking_bool;_runtime.trackingSeq_uint8;_runtime.trackingStamp_int64;_runtime.runnableTime_int64;_runtime.lockedm_runtime.muintptr;_runtime.sig_uint32;_runtime.writebuf_[]uint8;_runtime.sigcode0_uintptr;_runtime.sigcode1_uintptr;_runtime.sigpc_uintptr;_runtime.parentGoid_uint64;_runtime.gopc_uintptr;_runtime.ancestors_*[]runtime.ancestorInfo;_runtime.startpc_uintptr;_runtime.racectx_uintptr;_runtime.waiting_*runtime.sudog;_runtime.cgoCtxt_[]uintptr;_runtime.labels_unsafe.Pointer;_runtime.timer_*runtime.timer;_runtime.selectDone_runtime/internal/atomic.Uint32;_runtime.goroutineProfiled_runtime.goroutineProfileStateHolder;_runtime.trace_runtime.gTraceState;_runtime.gcAssistBytes_int64_}], *Pruntime/internal/atomic.Pointer[go.shape.struct_{_runtime.stack_runtime.stack;_runtime.stackguard0_uintptr;_runtime.stackguard1_uintptr;_runtime._panic_*runtime._panic;_runtime._defer_*runtime._defer;_runtime.m_*runtime.m;_runtime.sched_runtime.gobuf;_runtime.syscallsp_uintptr;_runtime.syscallpc_uintptr;_runtime.stktopsp_uintptr;_runtime.param_unsafe.Pointer;_runtime.atomicstatus_runtime/internal/atomic.Uint32;_runtime.stackLock_uint32;_runtime.goid_uint64;_runtime.schedlink_runtime.guintptr;_runtime.waitsince_int64;_runtime.waitreason_runtime.waitReason;_runtime.preempt_bool;_runtime.preemptStop_bool;_runtime.preemptShrink_bool;_runtime.asyncSafePoint_bool;_runtime.paniconfault_bool;_runtime.gcscandone_bool;_runtime.throwsplit_bool;_runtime.activeStackChans_bool;_runtime.parkingOnChan_runtime/internal/atomic.Bool;_runtime.raceignore_int8;_runtime.tracking_bool;_runtime.trackingSeq_uint8;_runtime.trackingStamp_int64;_runtime.runnableTime_int64;_runtime.lockedm_runtime.muintptr;_runtime.sig_uint32;_runtime.writebuf_[]uint8;_runtime.sigcode0_uintptr;_runtime.sigcode1_uintptr;_runtime.sigpc_uintptr;_runtime.parentGoid_uint64;_runtime.gopc_uintptr;_runtime.ancestors_*[]runtime.ancestorInfo;_runtime.startpc_uintptr;_runtime.racectx_uintptr;_runtime.waiting_*runtime.sudog;_runtime.cgoCtxt_[]uintptr;_runtime.labels_unsafe.Pointer;_runtime.timer_*runtime.timer;_runtime.selectDone_runtime/internal/atomic.Uint32;_runtime.goroutineProfiled_runtime.goroutineProfileStateHolder;_runtime.trace_runtime.gTraceState;_runtime.gcAssistBytes_int64_}];

struct runtime/internal/atomic.Pointer[go.shape.struct_{_runtime.stack_runtime.stack;_runtime.stackguard0_uintptr;_runtime.stackguard1_uintptr;_runtime._panic_*runtime._panic;_runtime._defer_*runtime._defer;_runtime.m_*runtime.m;_runtime.sched_runtime.gobuf;_runtime.syscallsp_uintptr;_runtime.syscallpc_uintptr;_runtime.stktopsp_uintptr;_runtime.param_unsafe.Pointer;_runtime.atomicstatus_runtime/internal/atomic.Uint32;_runtime.stackLock_uint32;_runtime.goid_uint64;_runtime.schedlink_runtime.guintptr;_runtime.waitsince_int64;_runtime.waitreason_runtime.waitReason;_runtime.preempt_bool;_runtime.preemptStop_bool;_runtime.preemptShrink_bool;_runtime.asyncSafePoint_bool;_runtime.paniconfault_bool;_runtime.gcscandone_bool;_runtime.throwsplit_bool;_runtime.activeStackChans_bool;_runtime.parkingOnChan_runtime/internal/atomic.Bool;_runtime.raceignore_int8;_runtime.tracking_bool;_runtime.trackingSeq_uint8;_runtime.trackingStamp_int64;_runtime.runnableTime_int64;_runtime.lockedm_runtime.muintptr;_runtime.sig_uint32;_runtime.writebuf_[]uint8;_runtime.sigcode0_uintptr;_runtime.sigcode1_uintptr;_runtime.sigpc_uintptr;_runtime.parentGoid_uint64;_runtime.gopc_uintptr;_runtime.ancestors_*[]runtime.ancestorInfo;_runtime.startpc_uintptr;_runtime.racectx_uintptr;_runtime.waiting_*runtime.sudog;_runtime.cgoCtxt_[]uintptr;_runtime.labels_unsafe.Pointer;_runtime.timer_*runtime.timer;_runtime.selectDone_runtime/internal/atomic.Uint32;_runtime.goroutineProfiled_runtime.goroutineProfileStateHolder;_runtime.trace_runtime.gTraceState;_runtime.gcAssistBytes_int64_}] { // Original name: runtime/internal/atomic.Pointer[go.shape.struct { runtime.stack runtime.stack; runtime.stackguard0 uintptr; runtime.stackguard1 uintptr; runtime._panic *runtime._panic; runtime._defer *runtime._defer; runtime.m *runtime.m; runtime.sched runtime.gobuf; runtime.syscallsp uintptr; runtime.syscallpc uintptr; runtime.stktopsp uintptr; runtime.param unsafe.Pointer; runtime.atomicstatus runtime/internal/atomic.Uint32; runtime.stackLock uint32; runtime.goid uint64; runtime.schedlink runtime.guintptr; runtime.waitsince int64; runtime.waitreason runtime.waitReason; runtime.preempt bool; runtime.preemptStop bool; runtime.preemptShrink bool; runtime.asyncSafePoint bool; runtime.paniconfault bool; runtime.gcscandone bool; runtime.throwsplit bool; runtime.activeStackChans bool; runtime.parkingOnChan runtime/internal/atomic.Bool; runtime.raceignore int8; runtime.tracking bool; runtime.trackingSeq uint8; runtime.trackingStamp int64; runtime.runnableTime int64; runtime.lockedm runtime.muintptr; runtime.sig uint32; runtime.writebuf []uint8; runtime.sigcode0 uintptr; runtime.sigcode1 uintptr; runtime.sigpc uintptr; runtime.parentGoid uint64; runtime.gopc uintptr; runtime.ancestors *[]runtime.ancestorInfo; runtime.startpc uintptr; runtime.racectx uintptr; runtime.waiting *runtime.sudog; runtime.cgoCtxt []uintptr; runtime.labels unsafe.Pointer; runtime.timer *runtime.timer; runtime.selectDone runtime/internal/atomic.Uint32; runtime.goroutineProfiled runtime.goroutineProfileStateHolder; runtime.trace runtime.gTraceState; runtime.gcAssistBytes int64 }]
    struct runtime/internal/atomic.UnsafePointer u;
};

typedef struct hash<google.golang.org/grpc/internal/channelz.RefChannelType,string> hash<google.golang.org/grpc/internal/channelz.RefChannelType,string>, *Phash<google.golang.org/grpc/internal/channelz.RefChannelType,string>;

struct hash<google.golang.org/grpc/internal/channelz.RefChannelType,string> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/grpc/internal/channelz.RefChannelType,string> *buckets;
    struct bucket<google.golang.org/grpc/internal/channelz.RefChannelType,string> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct math/big.byteReader math/big.byteReader, *Pmath/big.byteReader;

typedef struct runtime.iface fmt.ScanState;

struct math/big.byteReader {
    fmt.ScanState ScanState;
};

typedef struct noalg.map.iter[uint32]*google.golang.org/grpc/internal/transport.outStream noalg.map.iter[uint32]*google.golang.org/grpc/internal/transport.outStream, *Pnoalg.map.iter[uint32]*google.golang.org/grpc/internal/transport.outStream;

typedef struct noalg.map.hdr[uint32]*google.golang.org/grpc/internal/transport.outStream noalg.map.hdr[uint32]*google.golang.org/grpc/internal/transport.outStream, *Pnoalg.map.hdr[uint32]*google.golang.org/grpc/internal/transport.outStream;

typedef struct noalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.outStream noalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.outStream, *Pnoalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.outStream;

struct noalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.outStream {
    uint8 topbits[8];
    noalg.[8]uint32 keys;
    noalg.[8]*google.golang.org/grpc/internal/transport.outStream elems;
    void *overflow;
};

struct noalg.map.hdr[uint32]*google.golang.org/grpc/internal/transport.outStream {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.outStream *buckets;
    struct noalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.outStream *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.iter[uint32]*google.golang.org/grpc/internal/transport.outStream {
    uint32 *key;
    struct google.golang.org/grpc/internal/transport.outStream **elem;
    void *t;
    struct noalg.map.hdr[uint32]*google.golang.org/grpc/internal/transport.outStream *h;
    struct noalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.outStream *buckets;
    struct noalg.map.bucket[uint32]*google.golang.org/grpc/internal/transport.outStream *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*uint32_} noalg.struct_{_F_uintptr;_X0_*uint32_}, *Pnoalg.struct_{_F_uintptr;_X0_*uint32_};

struct noalg.struct_{_F_uintptr;_X0_*uint32_} { // Original name: noalg.struct { F uintptr; X0 *uint32 }
    uintptr F;
    uint32 *X0;
};

typedef struct fmt.wrapErrors fmt.wrapErrors, *Pfmt.wrapErrors;

struct fmt.wrapErrors {
    struct string msg;
    struct []error errs;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_*int64;_X2_*runtime.gcWork_} noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_*int64;_X2_*runtime.gcWork_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_*int64;_X2_*runtime.gcWork_};

struct noalg.struct_{_F_uintptr;_X0_*runtime.g;_X1_*int64;_X2_*runtime.gcWork_} { // Original name: noalg.struct { F uintptr; X0 *runtime.g; X1 *int64; X2 *runtime.gcWork }
    uintptr F;
    struct runtime.g *X0;
    int64 *X1;
    struct runtime.gcWork *X2;
};

typedef struct runtime.iface golang.org/x/net/trace.Trace;

typedef struct waitq<net.result[[]string].1> waitq<net.result[[]string].1>, *Pwaitq<net.result[[]string].1>;

struct waitq<net.result[[]string].1> { // Original name: waitq<net.result[[]string]·1>
    struct sudog<net.result[[]string].1> *first;
    struct sudog<net.result[[]string].1> *last;
};
