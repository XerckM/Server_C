

// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___Addr__String(string ~r0)

{
  string **ppsVar1;
  string ~r0_00;
  uint8 *in_RAX;
  uint8 *unaff_RBP;
  int unaff_R14;
  int unaff_retaddr;
  net_netip_Addr in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.str = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r0.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &~r0)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffe0;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.len = unaff_retaddr;
    ~r0_00.str = unaff_RBP;
    net_netip_Addr_String(in_stack_ffffffffffffffe0,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___Addr__StringExpanded(string ~r0)

{
  string **ppsVar1;
  string ~r0_00;
  uint8 *in_RAX;
  uint8 *unaff_RBP;
  int unaff_R14;
  int unaff_retaddr;
  net_netip_Addr in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.str = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r0.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &~r0)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffe0;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.len = unaff_retaddr;
    ~r0_00.str = unaff_RBP;
    net_netip_Addr_StringExpanded(in_stack_ffffffffffffffe0,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__Unmap(net_netip_Addr ~r0)

{
  net_netip_Addr **ppnVar1;
  int in_RAX;
  int unaff_R14;
  
  ppnVar1 = *(net_netip_Addr ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_netip_Addr **)0x0) && (*ppnVar1 == &~r0)) {
    *ppnVar1 = (net_netip_Addr *)&stack0xfffffffffffffff8;
  }
  if (in_RAX == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicwrap();
  }
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___Addr__WithZone(string zone,net_netip_Addr ~r0)

{
  string **ppsVar1;
  net_netip_Addr ~r0_00;
  uint8 *in_RAX;
  uint64 unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  net_netip_Addr in_stack_ffffffffffffffd0;
  string in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    zone.str = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = zone.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &zone)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffd0;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.z = (internal_intern_Value *)zone.str;
    ~r0_00.addr.lo = unaff_retaddr;
    ~r0_00.addr.hi = unaff_RBP;
    net_netip_Addr_WithZone(in_stack_ffffffffffffffd0,in_stack_ffffffffffffffe8,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__Zone(string ~r0)

{
  string **ppsVar1;
  int in_RAX;
  int unaff_R14;
  
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &~r0)) {
    *ppsVar1 = (string *)&stack0xfffffffffffffff8;
  }
  if (in_RAX == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicwrap();
  }
  return;
}



void net_netip___Prefix__Addr(net_netip_Addr ~r0)

{
  net_netip_Addr **ppnVar1;
  int in_RAX;
  int unaff_R14;
  
  ppnVar1 = *(net_netip_Addr ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_netip_Addr **)0x0) && (*ppnVar1 == &~r0)) {
    *ppnVar1 = (net_netip_Addr *)&stack0xfffffffffffffff8;
  }
  if (in_RAX != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___Prefix__AppendTo(__uint8 b,__uint8 ~r0)

{
  __uint8 **pp_Var1;
  __uint8 ~r0_00;
  uint8 *in_RAX;
  int in_RCX;
  uint8 *unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  net_netip_Prefix in_stack_ffffffffffffffc0;
  __uint8 in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    b.array = in_RAX;
    b.cap = in_RCX;
    runtime_morestack_noctxt();
    in_RAX = b.array;
    in_RCX = b.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &b)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffc0;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.cap = (int)b.array;
    ~r0_00.len = unaff_retaddr;
    ~r0_00.array = unaff_RBP;
    net_netip_Prefix_AppendTo(in_stack_ffffffffffffffc0,in_stack_ffffffffffffffe0,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Prefix__Bits(int ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (~r0 != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Prefix__Contains(net_netip_Addr ip,bool ~r0)

{
  net_netip_Addr **ppnVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  internal_intern_Value *in_RCX;
  uint64 in_RBX;
  int unaff_R14;
  net_netip_Prefix in_stack_ffffffffffffffc0;
  net_netip_Addr in_stack_ffffffffffffffe0;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ip.addr.hi = (uint64)puVar2;
    ip.addr.lo = in_RBX;
    ip.z = in_RCX;
    runtime_morestack_noctxt();
    puVar2 = (undefined8 *)ip.addr.hi;
    in_RCX = ip.z;
    in_RBX = ip.addr.lo;
  }
  ppnVar1 = *(net_netip_Addr ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_netip_Addr **)0x0) && (*ppnVar1 == &ip)) {
    *ppnVar1 = (net_netip_Addr *)&stack0xffffffffffffffc0;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_netip_Prefix_Contains(in_stack_ffffffffffffffc0,in_stack_ffffffffffffffe0,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Prefix__IsSingleIP(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Prefix__IsValid(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___Prefix__MarshalBinary(__uint8 ~r0,error ~r1)

{
  __uint8 **pp_Var1;
  __uint8 ~r0_00;
  uint8 *in_RAX;
  uint8 *unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  net_netip_Prefix in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r0.array;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd8;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.cap = (int)~r0.array;
    ~r0_00.len = unaff_retaddr;
    ~r0_00.array = unaff_RBP;
    net_netip_Prefix_MarshalBinary(in_stack_ffffffffffffffd8,~r0_00,(error)~r0._8_16_);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___Prefix__MarshalText(__uint8 ~r0,error ~r1)

{
  __uint8 **pp_Var1;
  __uint8 ~r0_00;
  uint8 *in_RAX;
  uint8 *unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  net_netip_Prefix in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r0.array;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd8;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.cap = (int)~r0.array;
    ~r0_00.len = unaff_retaddr;
    ~r0_00.array = unaff_RBP;
    net_netip_Prefix_MarshalText(in_stack_ffffffffffffffd8,~r0_00,(error)~r0._8_16_);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___Prefix__Masked(net_netip_Prefix ~r0)

{
  net_netip_Prefix **ppnVar1;
  net_netip_Prefix ~r0_00;
  int *in_RAX;
  uint64 unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  net_netip_Addr in_stack_ffffffffffffffd8;
  uint64 in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.ip.addr.hi = (uint64)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (int *)~r0.ip.addr.hi;
  }
  ppnVar1 = *(net_netip_Prefix ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_netip_Prefix **)0x0) && (*ppnVar1 == &~r0)) {
    *ppnVar1 = (net_netip_Prefix *)&stack0xffffffffffffffd8;
  }
  if (in_RAX != (int *)0x0) {
    ~r0_00.ip.addr.lo = unaff_RBP;
    ~r0_00.ip.addr.hi = in_stack_fffffffffffffff0;
    ~r0_00._24_8_ = ~r0.ip.addr.hi;
    ~r0_00.ip.z = (internal_intern_Value *)unaff_retaddr;
    net_netip_Addr_Prefix(in_stack_ffffffffffffffd8,*in_RAX,~r0_00,(error)~r0.ip._8_16_);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Prefix__Overlaps(net_netip_Prefix o,bool ~r0)

{
  net_netip_Prefix **ppnVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  internal_intern_Value *in_RCX;
  uint64 in_RBX;
  int unaff_R14;
  net_netip_Prefix in_stack_ffffffffffffffb8;
  net_netip_Prefix in_stack_ffffffffffffffd8;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    o.ip.addr.hi = (uint64)puVar2;
    o.ip.addr.lo = in_RBX;
    o.ip.z = in_RCX;
    runtime_morestack_noctxt();
    puVar2 = (undefined8 *)o.ip.addr.hi;
    in_RCX = o.ip.z;
    in_RBX = o.ip.addr.lo;
  }
  ppnVar1 = *(net_netip_Prefix ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_netip_Prefix **)0x0) && (*ppnVar1 == &o)) {
    *ppnVar1 = (net_netip_Prefix *)&stack0xffffffffffffffb8;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_netip_Prefix_Overlaps(in_stack_ffffffffffffffb8,in_stack_ffffffffffffffd8,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___Prefix__String(string ~r0)

{
  string **ppsVar1;
  string ~r0_00;
  uint8 *in_RAX;
  uint8 *unaff_RBP;
  int unaff_R14;
  int unaff_retaddr;
  net_netip_Prefix in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.str = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r0.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &~r0)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffd8;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.len = unaff_retaddr;
    ~r0_00.str = unaff_RBP;
    net_netip_Prefix_String(in_stack_ffffffffffffffd8,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___parseAddrError__Error(string ~r0)

{
  string **ppsVar1;
  string *in_RAX;
  int unaff_R14;
  net_netip_parseAddrError in_stack_ffffffffffffff98;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.str = (uint8 *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (string *)~r0.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &~r0)) {
    *ppsVar1 = (string *)&stack0xffffffffffffff98;
  }
  if (in_RAX != (string *)0x0) {
    net_netip_parseAddrError_Error(in_stack_ffffffffffffff98,*in_RAX);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___AddrPort__Addr(net_netip_Addr ~r0)

{
  net_netip_Addr **ppnVar1;
  int in_RAX;
  int unaff_R14;
  
  ppnVar1 = *(net_netip_Addr ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_netip_Addr **)0x0) && (*ppnVar1 == &~r0)) {
    *ppnVar1 = (net_netip_Addr *)&stack0xfffffffffffffff8;
  }
  if (in_RAX != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___AddrPort__AppendTo(__uint8 b,__uint8 ~r0)

{
  __uint8 **pp_Var1;
  __uint8 ~r0_00;
  uint8 *in_RAX;
  int in_RCX;
  uint8 *unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  net_netip_AddrPort in_stack_ffffffffffffffc0;
  __uint8 in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    b.array = in_RAX;
    b.cap = in_RCX;
    runtime_morestack_noctxt();
    in_RAX = b.array;
    in_RCX = b.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &b)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffc0;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.cap = (int)b.array;
    ~r0_00.len = unaff_retaddr;
    ~r0_00.array = unaff_RBP;
    net_netip_AddrPort_AppendTo(in_stack_ffffffffffffffc0,in_stack_ffffffffffffffe0,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___AddrPort__IsValid(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___AddrPort__MarshalBinary(__uint8 ~r0,error ~r1)

{
  __uint8 **pp_Var1;
  __uint8 ~r0_00;
  uint8 *in_RAX;
  uint8 *unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  net_netip_AddrPort in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r0.array;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd8;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.cap = (int)~r0.array;
    ~r0_00.len = unaff_retaddr;
    ~r0_00.array = unaff_RBP;
    net_netip_AddrPort_MarshalBinary(in_stack_ffffffffffffffd8,~r0_00,(error)~r0._8_16_);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___AddrPort__MarshalText(__uint8 ~r0,error ~r1)

{
  __uint8 **pp_Var1;
  __uint8 ~r0_00;
  uint8 *in_RAX;
  uint8 *unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  net_netip_AddrPort in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r0.array;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd8;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.cap = (int)~r0.array;
    ~r0_00.len = unaff_retaddr;
    ~r0_00.array = unaff_RBP;
    net_netip_AddrPort_MarshalText(in_stack_ffffffffffffffd8,~r0_00,(error)~r0._8_16_);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___AddrPort__Port(uint16 ~r0)

{
  int *piVar1;
  undefined6 in_register_00000002;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT62(in_register_00000002,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___AddrPort__String(string ~r0)

{
  string **ppsVar1;
  string ~r0_00;
  uint8 *in_RAX;
  uint8 *unaff_RBP;
  int unaff_R14;
  int unaff_retaddr;
  net_netip_AddrPort in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.str = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r0.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &~r0)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffd8;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.len = unaff_retaddr;
    ~r0_00.str = unaff_RBP;
    net_netip_AddrPort_String(in_stack_ffffffffffffffd8,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void type__eq_net_netip_Prefix(net_netip_Prefix *p,net_netip_Prefix *q,bool r)

{
  if ((((q->ip).addr.hi == (p->ip).addr.hi) && ((q->ip).addr.lo == (p->ip).addr.lo)) &&
     ((q->ip).z == (p->ip).z)) {
    return;
  }
  return;
}



void type__eq_net_netip_AddrPort(net_netip_AddrPort *p,net_netip_AddrPort *q,bool r)

{
  if ((((q->ip).addr.hi == (p->ip).addr.hi) && ((q->ip).addr.lo == (p->ip).addr.lo)) &&
     ((q->ip).z == (p->ip).z)) {
    return;
  }
  return;
}



void vendor_golang_org_x_net_dns_dnsmessage_Type_String
               (vendor_golang_org_x_net_dns_dnsmessage_Type t,string ~r0)

{
  uint uVar1;
  uint32 d;
  uint uVar2;
  int iVar3;
  dword dVar4;
  char extraout_BL;
  bool ok;
  undefined2 *puVar5;
  undefined8 in_RSI;
  int n;
  undefined8 extraout_RSI;
  void *in_RDI;
  undefined2 *ptr;
  void *extraout_RDI;
  char cVar6;
  int unaff_R14;
  string in_stack_ffffffffffffffd0;
  undefined2 local_12;
  undefined6 uStack_10;
  undefined2 uStack_a;
  
  ~r0.str._0_2_ = t;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RSI = extraout_RSI;
    in_RDI = extraout_RDI;
  }
  runtime_mapaccess2((internal_abi_MapType *)&DAT_0082e360,
                     (runtime_hmap *)vendor_golang_org_x_net_dns_dnsmessage_typeNames,&~r0,in_RDI,
                     SUB81(in_RSI,0));
  if (extraout_BL == '\0') {
    dVar4 = (dword)(vendor_golang_org_x_net_dns_dnsmessage_Type)~r0.str;
    local_12 = 0;
    uStack_10 = 0;
    uStack_a = 0;
    uVar2 = 1000000000;
    iVar3 = 10;
    puVar5 = &local_12;
    n = 10;
    ptr = &local_12;
    while( true ) {
      d = (uint32)uVar2;
      if (d == 0) {
        runtime_slicebytetostring((runtime_tmpBuf *)0x0,(uint8 *)ptr,n,in_stack_ffffffffffffffd0);
        return;
      }
      uVar1 = dVar4 / uVar2;
      dVar4 = (dword)((uint)dVar4 % uVar2);
      if (iVar3 == 0) break;
      cVar6 = (char)uVar1 + (char)(uVar1 / 10) * -10 + '0';
      *(char *)puVar5 = cVar6;
      if (((cVar6 == '0') && (n == iVar3)) && (1 < n)) {
        ptr = (undefined2 *)((int)ptr + 1);
        n = n + -1;
      }
      iVar3 = iVar3 + -1;
      uVar2 = uVar2 / 10;
      puVar5 = (undefined2 *)((int)puVar5 + (uint)((dword)(-iVar3 >> 0x3f) & 1));
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  return;
}



void vendor_golang_org_x_net_dns_dnsmessage_Type_GoString
               (vendor_golang_org_x_net_dns_dnsmessage_Type t,string ~r0)

{
  uint uVar1;
  string ~r0_00;
  uint32 d;
  uint uVar2;
  int iVar3;
  dword dVar4;
  char extraout_BL;
  bool ok;
  char *pcVar5;
  undefined8 in_RSI;
  int n;
  undefined8 extraout_RSI;
  void *in_RDI;
  uint8 *ptr;
  void *extraout_RDI;
  char cVar6;
  int unaff_R14;
  string in_stack_ffffffffffffffc0;
  string in_stack_ffffffffffffffd0;
  undefined in_stack_ffffffffffffffe0 [14];
  undefined2 in_stack_ffffffffffffffee;
  
  ~r0.str._0_2_ = t;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RSI = extraout_RSI;
    in_RDI = extraout_RDI;
  }
  runtime_mapaccess2((internal_abi_MapType *)&DAT_0082e360,
                     (runtime_hmap *)vendor_golang_org_x_net_dns_dnsmessage_typeNames,&~r0,in_RDI,
                     SUB81(in_RSI,0));
  if (extraout_BL == '\0') {
    dVar4 = (dword)(vendor_golang_org_x_net_dns_dnsmessage_Type)~r0.str;
    uVar2 = 1000000000;
    iVar3 = 10;
    pcVar5 = &stack0xffffffffffffffee;
    n = 10;
    ptr = &stack0xffffffffffffffee;
    while( true ) {
      d = (uint32)uVar2;
      if (d == 0) {
        runtime_slicebytetostring((runtime_tmpBuf *)0x0,ptr,n,in_stack_ffffffffffffffc0);
        return;
      }
      uVar1 = dVar4 / uVar2;
      dVar4 = (dword)((uint)dVar4 % uVar2);
      if (iVar3 == 0) break;
      cVar6 = (char)uVar1 + (char)(uVar1 / 10) * -10 + '0';
      *pcVar5 = cVar6;
      if (((cVar6 == '0') && (n == iVar3)) && (1 < n)) {
        ptr = ptr + 1;
        n = n + -1;
      }
      iVar3 = iVar3 + -1;
      uVar2 = uVar2 / 10;
      pcVar5 = pcVar5 + ((dword)(-iVar3 >> 0x3f) & 1);
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  ~r0_00.len._6_2_ = in_stack_ffffffffffffffee;
  ~r0_00._0_14_ = in_stack_ffffffffffffffe0;
  runtime_concatstring2
            ((runtime_tmpBuf *)0x0,in_stack_ffffffffffffffc0,in_stack_ffffffffffffffd0,~r0_00);
  return;
}



void vendor_golang_org_x_net_dns_dnsmessage_Class_String
               (vendor_golang_org_x_net_dns_dnsmessage_Class c,string ~r0)

{
  uint uVar1;
  uint32 d;
  uint uVar2;
  int iVar3;
  dword dVar4;
  char extraout_BL;
  bool ok;
  undefined2 *puVar5;
  undefined8 in_RSI;
  int n;
  undefined8 extraout_RSI;
  void *in_RDI;
  undefined2 *ptr;
  void *extraout_RDI;
  char cVar6;
  int unaff_R14;
  string in_stack_ffffffffffffffd0;
  undefined2 local_12;
  undefined6 uStack_10;
  undefined2 uStack_a;
  
  ~r0.str._0_2_ = c;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RSI = extraout_RSI;
    in_RDI = extraout_RDI;
  }
  runtime_mapaccess2((internal_abi_MapType *)&DAT_0082e2a0,
                     (runtime_hmap *)vendor_golang_org_x_net_dns_dnsmessage_classNames,&~r0,in_RDI,
                     SUB81(in_RSI,0));
  if (extraout_BL == '\0') {
    dVar4 = (dword)(vendor_golang_org_x_net_dns_dnsmessage_Class)~r0.str;
    local_12 = 0;
    uStack_10 = 0;
    uStack_a = 0;
    uVar2 = 1000000000;
    iVar3 = 10;
    puVar5 = &local_12;
    n = 10;
    ptr = &local_12;
    while( true ) {
      d = (uint32)uVar2;
      if (d == 0) {
        runtime_slicebytetostring((runtime_tmpBuf *)0x0,(uint8 *)ptr,n,in_stack_ffffffffffffffd0);
        return;
      }
      uVar1 = dVar4 / uVar2;
      dVar4 = (dword)((uint)dVar4 % uVar2);
      if (iVar3 == 0) break;
      cVar6 = (char)uVar1 + (char)(uVar1 / 10) * -10 + '0';
      *(char *)puVar5 = cVar6;
      if (((cVar6 == '0') && (n == iVar3)) && (1 < n)) {
        ptr = (undefined2 *)((int)ptr + 1);
        n = n + -1;
      }
      iVar3 = iVar3 + -1;
      uVar2 = uVar2 / 10;
      puVar5 = (undefined2 *)((int)puVar5 + (uint)((dword)(-iVar3 >> 0x3f) & 1));
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  return;
}



void vendor_golang_org_x_net_dns_dnsmessage_Class_GoString
               (vendor_golang_org_x_net_dns_dnsmessage_Class c,string ~r0)

{
  uint uVar1;
  string ~r0_00;
  uint32 d;
  uint uVar2;
  int iVar3;
  dword dVar4;
  char extraout_BL;
  bool ok;
  char *pcVar5;
  undefined8 in_RSI;
  int n;
  undefined8 extraout_RSI;
  void *in_RDI;
  uint8 *ptr;
  void *extraout_RDI;
  char cVar6;
  int unaff_R14;
  string in_stack_ffffffffffffffc0;
  string in_stack_ffffffffffffffd0;
  undefined in_stack_ffffffffffffffe0 [14];
  undefined2 in_stack_ffffffffffffffee;
  
  ~r0.str._0_2_ = c;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RSI = extraout_RSI;
    in_RDI = extraout_RDI;
  }
  runtime_mapaccess2((internal_abi_MapType *)&DAT_0082e2a0,
                     (runtime_hmap *)vendor_golang_org_x_net_dns_dnsmessage_classNames,&~r0,in_RDI,
                     SUB81(in_RSI,0));
  if (extraout_BL == '\0') {
    dVar4 = (dword)(vendor_golang_org_x_net_dns_dnsmessage_Class)~r0.str;
    uVar2 = 1000000000;
    iVar3 = 10;
    pcVar5 = &stack0xffffffffffffffee;
    n = 10;
    ptr = &stack0xffffffffffffffee;
    while( true ) {
      d = (uint32)uVar2;
      if (d == 0) {
        runtime_slicebytetostring((runtime_tmpBuf *)0x0,ptr,n,in_stack_ffffffffffffffc0);
        return;
      }
      uVar1 = dVar4 / uVar2;
      dVar4 = (dword)((uint)dVar4 % uVar2);
      if (iVar3 == 0) break;
      cVar6 = (char)uVar1 + (char)(uVar1 / 10) * -10 + '0';
      *pcVar5 = cVar6;
      if (((cVar6 == '0') && (n == iVar3)) && (1 < n)) {
