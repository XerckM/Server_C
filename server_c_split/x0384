    if (oldCap < uVar3) {
      runtime_growslice(oldPtr,uVar3,oldCap,1,(internal_abi_Type *)&DAT_00807920,
                        in_stack_ffffffffffffff98);
      oldPtr = extraout_RAX_04;
      oldCap = extraout_RCX_03;
      uVar3 = extraout_RBX_03;
    }
    *(char *)((uVar3 - 1) + (int)oldPtr) = cVar5;
  }
  if (9 < (byte)dVar1) {
    uVar2 = (uint)(dword)(((dVar1 & 0xff) / 10) % 10);
    if (0xf < uVar2) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    uVar3 = uVar3 + 1;
    cVar5 = "goal , cons/mark  maxTrigger= pages/byte\n s.sweepgen= allocCount end tracegc\ntimer_deletens} value: {}, want {r1= [recovered]bad recoverybad g statusentersyscallwirep: p->m=) p->status=releasep: m= sysmonwait= preemptoff=cas64 failedGOTRACEBACK= m->gsignal=-byte limit\nruntime: sp=abi mismatchillegal seekinvalid slothost is downnot pollable<unknown:%d>Sfixed32KindSfixed64Kindmessage_typejava_packageoptimize_forswift_prefixruby_packagedebug_redactdouble_valuestring_valueverificationis_extension has no name has no typereflect.CopyOUT_OF_RANGENormalSocketgrpc-messageContent-Typegrpc-timeoutGrpc-MessageAddr: \'%s\', Cookie.Valuemax-forwardshttp2debug=1http2debug=2status code Multi-StatusNot ModifiedUnauthorizedI\'m a teapotNot ExtendedPUSH_PROMISECONTINUATION152587890625762939453125Cypro_MinoanMeetei_MayekPahawh_HmongSora_SompengSyloti_NagriRCodeSuccessRCodeRefusedprotobuf_keyprotobuf_val (sensitive)grpc_config=ECDSA-SHA256ECDSA-SHA384ECDSA-SHA512SSL_CERT_DIRTYPE_UNKNOWNempty objectMime-VersionX-ImforwardsX-Powered-By/dev/urandomautocompleteFieldNumbersSERIALNUMBERinvalid baseInstAltMatchunexpected )altmatch -> anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen..." /* TRUNCATED STRING LITERAL */
            [uVar2 + 0x1f44];
    if (oldCap < uVar3) {
      runtime_growslice(oldPtr,uVar3,oldCap,1,(internal_abi_Type *)&DAT_00807920,
                        in_stack_ffffffffffffff98);
      oldPtr = extraout_RAX_05;
      oldCap = extraout_RCX_04;
      uVar3 = extraout_RBX_04;
    }
    *(char *)((uVar3 - 1) + (int)oldPtr) = cVar5;
  }
  uVar2 = (uint)(dVar1 + ((dVar1 & 0xff) / 10) * -10 & 0xff);
  if (0xf < uVar2) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  uVar3 = uVar3 + 1;
  cVar5 = "goal , cons/mark  maxTrigger= pages/byte\n s.sweepgen= allocCount end tracegc\ntimer_deletens} value: {}, want {r1= [recovered]bad recoverybad g statusentersyscallwirep: p->m=) p->status=releasep: m= sysmonwait= preemptoff=cas64 failedGOTRACEBACK= m->gsignal=-byte limit\nruntime: sp=abi mismatchillegal seekinvalid slothost is downnot pollable<unknown:%d>Sfixed32KindSfixed64Kindmessage_typejava_packageoptimize_forswift_prefixruby_packagedebug_redactdouble_valuestring_valueverificationis_extension has no name has no typereflect.CopyOUT_OF_RANGENormalSocketgrpc-messageContent-Typegrpc-timeoutGrpc-MessageAddr: \'%s\', Cookie.Valuemax-forwardshttp2debug=1http2debug=2status code Multi-StatusNot ModifiedUnauthorizedI\'m a teapotNot ExtendedPUSH_PROMISECONTINUATION152587890625762939453125Cypro_MinoanMeetei_MayekPahawh_HmongSora_SompengSyloti_NagriRCodeSuccessRCodeRefusedprotobuf_keyprotobuf_val (sensitive)grpc_config=ECDSA-SHA256ECDSA-SHA384ECDSA-SHA512SSL_CERT_DIRTYPE_UNKNOWNempty objectMime-VersionX-ImforwardsX-Powered-By/dev/urandomautocompleteFieldNumbersSERIALNUMBERinvalid baseInstAltMatchunexpected )altmatch -> anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen..." /* TRUNCATED STRING LITERAL */
          [uVar2 + 0x1f44];
  if (oldCap < uVar3) {
    runtime_growslice(oldPtr,uVar3,oldCap,1,(internal_abi_Type *)&DAT_00807920,
                      in_stack_ffffffffffffff98);
    oldPtr = extraout_RAX_06;
    uVar3 = extraout_RBX_05;
  }
  *(char *)((uVar3 - 1) + (int)oldPtr) = cVar5;
  return;
}



void net_netip_Prefix_MarshalText(net_netip_Prefix p,__uint8 ~r0,error ~r1)

{
  __uint8 ~r0_00;
  int in_RAX;
  internal_intern_Value *in_RCX;
  int max;
  undefined uVar1;
  void *in_RDI;
  int unaff_R14;
  net_netip_Prefix in_stack_ffffffffffffff98;
  __uint8 in_stack_ffffffffffffffb8;
  undefined7 in_stack_ffffffffffffffd0;
  
  while (uVar1 = SUB81(in_RDI,0), &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = (void *)((uint)in_RDI & 0xff);
  }
  if (net_netip_z0 == in_RCX) {
    max = 0;
  }
  else if (net_netip_z4 == in_RCX) {
    max = 0x12;
  }
  else {
    max = 0x32;
  }
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,0,max,in_RDI);
  ~r0_00.array._7_1_ = uVar1;
  ~r0_00.array._0_7_ = in_stack_ffffffffffffffd0;
  ~r0_00.len = max;
  ~r0_00.cap = in_RAX;
  net_netip_Prefix_AppendTo(in_stack_ffffffffffffff98,in_stack_ffffffffffffffb8,~r0_00);
  return;
}


/*
Unable to decompile 'net/netip.(*Prefix).UnmarshalText'
Cause: 
Low-level Error: Overlapping input varnodes
*/


void net_netip_Prefix_MarshalBinary(net_netip_Prefix p,__uint8 ~r0,error ~r1)

{
  __uint8 ~r0_00;
  int in_RAX;
  int extraout_RAX;
  uint extraout_RBX;
  int unaff_RBP;
  char in_DIL;
  int unaff_R14;
  net_netip_Addr in_stack_ffffffffffffffd0;
  undefined in_stack_ffffffffffffffe8 [15];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ~r0_00.len._7_1_ = in_DIL;
  ~r0_00._0_15_ = in_stack_ffffffffffffffe8;
  ~r0_00.cap = unaff_RBP;
  net_netip_Addr_marshalBinaryWithTrailingBytes(in_stack_ffffffffffffffd0,in_RAX,~r0_00);
  if (extraout_RBX <= extraout_RBX - 1) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  *(char *)((extraout_RBX - 1) + extraout_RAX) = in_DIL + -1;
  return;
}



// WARNING: Removing unreachable block (ram,0x005c7175)
// WARNING: Variable defined which should be unmapped: addr

void net_netip___Prefix__UnmarshalBinary(net_netip_Prefix *p,__uint8 b,error ~r0)

{
  byte bVar1;
  error ~r0_00;
  int extraout_RAX;
  undefined8 *extraout_RAX_00;
  int in_RCX;
  internal_intern_Value *extraout_RCX;
  internal_intern_Value *piVar2;
  void *in_RBX;
  uint8 uVar3;
  uint8 bitsPlusOne;
  byte bVar4;
  net_netip_Prefix *extraout_R8;
  internal_intern_Value **extraout_R11;
  int unaff_R14;
  net_netip_uint128 in_XMM15;
  __uint8 in_stack_ffffffffffffffc0;
  uint uStack_28;
  net_netip_Addr addr;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RCX == 0) {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,in_RBX);
    extraout_RAX_00[1] = 0x15;
    *extraout_RAX_00 = &DAT_008b9a3f;
    return;
  }
  addr.addr.hi = 0;
  ~r0_00.data = (void *)0x0;
  ~r0_00.tab = (runtime_itab *)uStack_28;
  addr._8_16_ = in_XMM15;
  net_netip___Addr__UnmarshalBinary(&addr,in_stack_ffffffffffffffc0,~r0_00);
  if (extraout_RAX != 0) {
    return;
  }
  bVar1 = *(byte *)(in_RCX + -1 + (int)in_RBX);
  if (net_netip_z0 != addr.z) {
    bVar4 = 0x80;
    if (net_netip_z4 == addr.z) {
      bVar4 = 0x20;
    }
    if (bVar1 <= bVar4) {
      uVar3 = bVar1 + 1;
      goto code_r0x005c7180;
    }
  }
  uVar3 = 0;
code_r0x005c7180:
  piVar2 = addr.z;
  if ((net_netip_z0 != addr.z) && (net_netip_z4 != addr.z)) {
    piVar2 = net_netip_z6noz;
  }
  (p->ip).addr.hi = addr.addr.hi;
  (p->ip).addr.lo = addr.addr.lo;
  p->bitsPlusOne = uVar3;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RCX;
    extraout_R11[1] = (extraout_R8->ip).z;
    piVar2 = extraout_RCX;
    p = extraout_R8;
  }
  (p->ip).z = piVar2;
  return;
}



void net_netip_Prefix_String(net_netip_Prefix p,string ~r0)

{
  net_netip_Addr ip;
  string a1;
  string ~r0_00;
  string a2;
  string ~r0_01;
  byte in_DIL;
  int unaff_R14;
  net_netip_uint128 in_stack_ffffffffffffffa8;
  internal_intern_Value *in_stack_ffffffffffffffb8;
  uint8 *in_stack_ffffffffffffffc0;
  uint8 *in_stack_ffffffffffffffc8;
  int in_stack_ffffffffffffffd0;
  undefined in_stack_ffffffffffffffd8 [15];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_DIL != 0) {
    ip.z = in_stack_ffffffffffffffb8;
    ip.addr = in_stack_ffffffffffffffa8;
    ~r0_00.len = (int)in_stack_ffffffffffffffc8;
    ~r0_00.str = in_stack_ffffffffffffffc0;
    net_netip_Addr_String(ip,~r0_00);
    internal_itoa_Itoa(in_DIL - 1,(string)in_stack_ffffffffffffffa8);
    a1.len = (int)in_stack_ffffffffffffffc0;
    a1.str = (uint8 *)in_stack_ffffffffffffffb8;
    a2.len = in_stack_ffffffffffffffd0;
    a2.str = in_stack_ffffffffffffffc8;
    ~r0_01.len._7_1_ = in_DIL;
    ~r0_01._0_15_ = in_stack_ffffffffffffffd8;
    runtime_concatstring3((runtime_tmpBuf *)0x0,(string)in_stack_ffffffffffffffa8,a1,a2,~r0_01);
    return;
  }
  return;
}



int net_netip_init(EVP_PKEY_CTX *ctx)

{
  internal_intern_Value *extraout_RAX;
  internal_intern_Value *extraout_RAX_00;
  internal_intern_Value *extraout_RAX_01;
  internal_intern_Value *extraout_RAX_02;
  internal_intern_Value *piVar1;
  void *in_RBX;
  void *extraout_RBX;
  void *extraout_RBX_00;
  void *~r0;
  void *extraout_RBX_01;
  internal_intern_Value **extraout_R11;
  internal_intern_Value **extraout_R11_00;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RBX = extraout_RBX_01;
  }
  runtime_newobject((internal_abi_Type *)&DAT_00864d80,in_RBX);
  piVar1 = extraout_RAX;
  ~r0 = extraout_RBX;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RAX_00;
    extraout_R11[1] = net_netip_z4;
    piVar1 = extraout_RAX_00;
    ~r0 = extraout_RBX_00;
  }
  net_netip_z4 = piVar1;
  runtime_newobject((internal_abi_Type *)&DAT_00864d80,~r0);
  piVar1 = extraout_RAX_01;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = extraout_RAX_02;
    extraout_R11_00[1] = net_netip_z6noz;
    piVar1 = extraout_RAX_02;
  }
  net_netip_z6noz = piVar1;
  return (int)piVar1;
}



void type__eq_net_netip_parseAddrError
               (net_netip_parseAddrError *p,net_netip_parseAddrError *q,bool r)

{
  char extraout_AL;
  char extraout_AL_00;
  int unaff_R14;
  net_netip_parseAddrError *pnStack0000000000000008;
  net_netip_parseAddrError *pnStack0000000000000010;
  
  pnStack0000000000000008 = p;
  pnStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (((((pnStack0000000000000010->in).len == (pnStack0000000000000008->in).len) &&
       ((pnStack0000000000000008->msg).len == (pnStack0000000000000010->msg).len)) &&
      ((pnStack0000000000000010->at).len == (pnStack0000000000000008->at).len)) &&
     ((runtime_memequal(), extraout_AL != '\0' && (runtime_memequal(), extraout_AL_00 != '\0')))) {
    runtime_memequal();
  }
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___Addr__AppendTo(__uint8 b,__uint8 ~r0)

{
  __uint8 **pp_Var1;
  __uint8 ~r0_00;
  uint8 *in_RAX;
  int in_RCX;
  uint8 *unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  __uint8 in_stack_ffffffffffffffc8;
  __uint8 in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    b.array = in_RAX;
    b.cap = in_RCX;
    runtime_morestack_noctxt();
    in_RAX = b.array;
    in_RCX = b.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &b)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffc8;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.cap = (int)b.array;
    ~r0_00.len = unaff_retaddr;
    ~r0_00.array = unaff_RBP;
    net_netip_Addr_AppendTo
              ((net_netip_Addr)in_stack_ffffffffffffffc8,in_stack_ffffffffffffffe0,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__As16(uint8 a16 [16])

{
  uint8 **ppuVar1;
  net_netip_Addr ip;
  int in_RAX;
  int unaff_R14;
  undefined4 in_stack_ffffffffffffffc0;
  undefined4 in_stack_ffffffffffffffc4;
  undefined4 in_stack_ffffffffffffffc8;
  undefined4 in_stack_ffffffffffffffcc;
  internal_intern_Value *in_stack_ffffffffffffffd0;
  uint8 in_stack_ffffffffffffffd8 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ppuVar1 = *(uint8 ***)(unaff_R14 + 0x20);
  if ((ppuVar1 != (uint8 **)0x0) && (*ppuVar1 == a16)) {
    *ppuVar1 = &stack0xffffffffffffffc0;
  }
  if (in_RAX != 0) {
    ip.addr.hi._4_4_ = in_stack_ffffffffffffffc4;
    ip.addr.hi._0_4_ = in_stack_ffffffffffffffc0;
    ip.addr.lo._0_4_ = in_stack_ffffffffffffffc8;
    ip.addr.lo._4_4_ = in_stack_ffffffffffffffcc;
    ip.z = in_stack_ffffffffffffffd0;
    net_netip_Addr_As16(ip,in_stack_ffffffffffffffd8);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__As4(uint8 a4 [4])

{
  int *piVar1;
  net_netip_Addr ip;
  undefined4 in_register_00000004;
  undefined8 *puVar2;
  int unaff_R14;
  undefined4 uStack0000000000000008;
  undefined8 *in_stack_00000010;
  undefined4 in_stack_ffffffffffffffd8;
  undefined in_stack_ffffffffffffffdc [20];
  
  puVar2 = (undefined8 *)CONCAT44(in_register_00000004,a4);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000010 = puVar2;
    runtime_morestack_noctxt();
    puVar2 = in_stack_00000010;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined4 *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffd8;
  }
  uStack0000000000000008 = 0;
  if (puVar2 != (undefined8 *)0x0) {
    ip._4_20_ = in_stack_ffffffffffffffdc;
    ip.addr.hi._0_4_ = in_stack_ffffffffffffffd8;
    net_netip_Addr_As4(ip,SUB84(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___Addr__AsSlice(__uint8 ~r0)

{
  __uint8 **pp_Var1;
  __uint8 ~r0_00;
  uint8 *in_RAX;
  uint8 *unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  __uint8 in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r0.array;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffe0;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.cap = (int)~r0.array;
    ~r0_00.len = unaff_retaddr;
    ~r0_00.array = unaff_RBP;
    net_netip_Addr_AsSlice((net_netip_Addr)in_stack_ffffffffffffffe0,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__BitLen(int ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (~r0 == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicwrap();
  }
  return;
}



void net_netip___Addr__Compare(net_netip_Addr ip2,int ~r0)

{
  net_netip_Addr **ppnVar1;
  internal_intern_Value *in_RCX;
  uint64 in_RBX;
  int unaff_R14;
  net_netip_Addr in_stack_ffffffffffffffc8;
  net_netip_Addr in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ip2.addr.hi = ~r0;
    ip2.addr.lo = in_RBX;
    ip2.z = in_RCX;
    runtime_morestack_noctxt();
    ~r0 = ip2.addr.hi;
    in_RCX = ip2.z;
    in_RBX = ip2.addr.lo;
  }
  ppnVar1 = *(net_netip_Addr ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_netip_Addr **)0x0) && (*ppnVar1 == &ip2)) {
    *ppnVar1 = (net_netip_Addr *)&stack0xffffffffffffffc8;
  }
  if ((int *)~r0 != (int *)0x0) {
    net_netip_Addr_Compare(in_stack_ffffffffffffffc8,in_stack_ffffffffffffffe0,*(int *)~r0);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__Is4(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__Is4In6(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__Is6(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__IsGlobalUnicast(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  int unaff_R14;
  undefined8 *in_stack_00000008;
  net_netip_Addr in_stack_ffffffffffffffe0;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = puVar2;
    runtime_morestack_noctxt();
    puVar2 = in_stack_00000008;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined8 **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe0;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_netip_Addr_IsGlobalUnicast(in_stack_ffffffffffffffe0,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__IsInterfaceLocalMulticast(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  undefined local_20 [24];
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)local_20;
  }
  if (CONCAT71(in_register_00000001,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__IsLinkLocalMulticast(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  int unaff_R14;
  undefined8 *in_stack_00000008;
  net_netip_Addr in_stack_ffffffffffffffe0;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = puVar2;
    runtime_morestack_noctxt();
    puVar2 = in_stack_00000008;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined8 **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe0;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_netip_Addr_IsLinkLocalMulticast(in_stack_ffffffffffffffe0,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__IsLinkLocalUnicast(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  int unaff_R14;
  undefined8 *in_stack_00000008;
  net_netip_Addr in_stack_ffffffffffffffe0;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = puVar2;
    runtime_morestack_noctxt();
    puVar2 = in_stack_00000008;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined8 **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe0;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_netip_Addr_IsLinkLocalUnicast(in_stack_ffffffffffffffe0,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__IsLoopback(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  int unaff_R14;
  undefined8 *in_stack_00000008;
  net_netip_Addr in_stack_ffffffffffffffe0;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = puVar2;
    runtime_morestack_noctxt();
    puVar2 = in_stack_00000008;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined8 **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe0;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_netip_Addr_IsLoopback(in_stack_ffffffffffffffe0,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__IsMulticast(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  int unaff_R14;
  undefined8 *in_stack_00000008;
  net_netip_Addr in_stack_ffffffffffffffe0;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = puVar2;
    runtime_morestack_noctxt();
    puVar2 = in_stack_00000008;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined8 **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe0;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_netip_Addr_IsMulticast(in_stack_ffffffffffffffe0,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__IsPrivate(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  int unaff_R14;
  undefined8 *in_stack_00000008;
  net_netip_Addr in_stack_ffffffffffffffe0;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = puVar2;
    runtime_morestack_noctxt();
    puVar2 = in_stack_00000008;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined8 **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe0;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_netip_Addr_IsPrivate(in_stack_ffffffffffffffe0,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__IsUnspecified(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicwrap();
  }
  return;
}



void net_netip___Addr__IsValid(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__Less(net_netip_Addr ip2,bool ~r0)

{
  net_netip_Addr **ppnVar1;
  undefined7 in_register_00000001;
  int *piVar2;
  internal_intern_Value *in_RCX;
  uint64 in_RBX;
  int unaff_R14;
  net_netip_Addr in_stack_ffffffffffffffc8;
  net_netip_Addr in_stack_ffffffffffffffe0;
  
  piVar2 = (int *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ip2.addr.hi = (uint64)piVar2;
    ip2.addr.lo = in_RBX;
    ip2.z = in_RCX;
    runtime_morestack_noctxt();
    piVar2 = (int *)ip2.addr.hi;
    in_RCX = ip2.z;
    in_RBX = ip2.addr.lo;
  }
  ppnVar1 = *(net_netip_Addr ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_netip_Addr **)0x0) && (*ppnVar1 == &ip2)) {
    *ppnVar1 = (net_netip_Addr *)&stack0xffffffffffffffc8;
  }
  if (piVar2 != (int *)0x0) {
    net_netip_Addr_Compare(in_stack_ffffffffffffffc8,in_stack_ffffffffffffffe0,*piVar2);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___Addr__MarshalBinary(__uint8 ~r0,error ~r1)

{
  __uint8 **pp_Var1;
  __uint8 ~r0_00;
  int *in_RAX;
  undefined8 unaff_RBP;
  int unaff_R14;
  int unaff_retaddr;
  __uint8 in_stack_ffffffffffffffd8;
  undefined8 in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = (uint8 *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (int *)~r0.array;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd8;
  }
  if (in_RAX != (int *)0x0) {
    ~r0_00.len = unaff_RBP;
    ~r0_00.array = (uint8 *)in_stack_fffffffffffffff0;
    ~r0_00.cap = unaff_retaddr;
    net_netip_Addr_marshalBinaryWithTrailingBytes
              ((net_netip_Addr)in_stack_ffffffffffffffd8,*in_RAX,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___Addr__MarshalText(__uint8 ~r0,error ~r1)

{
  __uint8 **pp_Var1;
  __uint8 ~r0_00;
  uint8 *in_RAX;
  uint8 *unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  __uint8 in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r0.array;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffe0;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.cap = (int)~r0.array;
    ~r0_00.len = unaff_retaddr;
    ~r0_00.array = unaff_RBP;
    net_netip_Addr_MarshalText((net_netip_Addr)in_stack_ffffffffffffffe0,~r0_00,(error)~r0._8_16_);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__Next(net_netip_Addr ~r0)

{
  net_netip_Addr **ppnVar1;
  int in_RAX;
  uint64 lo;
  int unaff_R14;
  
  ppnVar1 = *(net_netip_Addr ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_netip_Addr **)0x0) && (*ppnVar1 == &~r0)) {
    *ppnVar1 = (net_netip_Addr *)&stack0xfffffffffffffff8;
  }
  if (in_RAX == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicwrap();
  }
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net_netip___Addr__Prefix(int b,net_netip_Prefix ~r0,error ~r1)

{
  net_netip_Prefix **ppnVar1;
  error ~r1_00;
  net_netip_Prefix ~r0_00;
  uint64 in_RBX;
  uint64 unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  net_netip_Addr in_stack_ffffffffffffffd8;
  uint64 in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.ip.addr.hi = b;
    ~r0.ip.addr.lo = in_RBX;
    runtime_morestack_noctxt();
    b = ~r0.ip.addr.hi;
    in_RBX = ~r0.ip.addr.lo;
  }
  ppnVar1 = *(net_netip_Prefix ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_netip_Prefix **)0x0) && (*ppnVar1 == &~r0)) {
    *ppnVar1 = (net_netip_Prefix *)&stack0xffffffffffffffd8;
  }
  if ((int *)b != (int *)0x0) {
    ~r0_00.ip.addr.lo = unaff_RBP;
    ~r0_00.ip.addr.hi = in_stack_fffffffffffffff0;
    ~r0_00._24_8_ = ~r0.ip.addr.hi;
    ~r0_00.ip.z = (internal_intern_Value *)unaff_retaddr;
    ~r1_00.data = ~r0.ip.z;
    ~r1_00.tab = (runtime_itab *)~r0.ip.addr.lo;
    net_netip_Addr_Prefix(in_stack_ffffffffffffffd8,*(int *)b,~r0_00,~r1_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net_netip___Addr__Prev(net_netip_Addr ~r0)

{
  net_netip_Addr **ppnVar1;
  int in_RAX;
  uint64 lo;
  uint64 borrow;
  int unaff_R14;
  
  ppnVar1 = *(net_netip_Addr ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_netip_Addr **)0x0) && (*ppnVar1 == &~r0)) {
    *ppnVar1 = (net_netip_Addr *)&stack0xfffffffffffffff8;
  }
  if (in_RAX != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}

