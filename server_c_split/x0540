    while( true ) {
      if (iVar5 <= i_3) {
        if (CONCAT44(params.FullBytes.len._4_4_,(undefined4)params.FullBytes.len) == 0) {
          key.cap = in_stack_fffffffffffffed0;
          key.array = (uint8 *)in_stack_fffffffffffffec0._type;
          key.len = (int)in_stack_fffffffffffffec0.data;
          ~r1_00.data = in_stack_fffffffffffffee0;
          ~r1_00.tab = in_stack_fffffffffffffed8;
          crypto_ecdh___x25519Curve__NewPublicKey(crypto_ecdh_x25519,key,~r0_02,~r1_00);
          return;
        }
        runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_04);
        extraout_RAX_16[1] = 0x30;
        *extraout_RAX_16 = &DAT_008c8248;
        return;
      }
      if (crypto_x509_oidPublicKeyX25519.array[i_3] != piVar1[i_3]) break;
      i_3 = i_3 + 1;
    }
  }
  pvVar6 = ~r0_04;
  if (crypto_x509_oidPublicKeyDSA.len == iVar5) {
    i_4 = 0;
    while( true ) {
      if (iVar5 <= i_4) {
        runtime_newobject((internal_abi_Type *)&DAT_00855ba0,pvVar6);
        vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Integer
                  (&der,in_stack_fffffffffffffec0,false);
        if (extraout_AL_04 == '\0') {
          runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_11);
          extraout_RAX_26[1] = 0x1c;
          *extraout_RAX_26 = &DAT_008bdcf1;
          return;
        }
        runtime_newobject((internal_abi_Type *)&DAT_00855ba0,~r0_11);
        runtime_newobject((internal_abi_Type *)&DAT_00855ba0,~r0_12);
        runtime_newobject((internal_abi_Type *)&DAT_00855ba0,~r0_13);
        runtime_newobject((internal_abi_Type *)&DAT_008559c0,~r0_14);
        ~r0_03 = extraout_RAX_22;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier4();
          *extraout_R11_01 = extraout_RAX_18;
          extraout_R11_01[1] = extraout_RAX_19;
          extraout_R11_01[2] = extraout_RAX_20;
          extraout_R11_01[3] = extraout_RAX_21;
          ~r0_03 = extraout_RAX_23;
        }
        ~r0_03[3] = extraout_RAX_18;
        *~r0_03 = extraout_RAX_19;
        ~r0_03[1] = extraout_RAX_20;
        ~r0_03[2] = extraout_RAX_21;
        paramsDer_1.array =
             (uint8 *)CONCAT44(params.FullBytes.array._4_4_,params.FullBytes.array._0_4_);
        paramsDer_1.len = CONCAT44(params.FullBytes.len._4_4_,(undefined4)params.FullBytes.len);
        paramsDer_1.cap = CONCAT44(params.FullBytes.cap._4_4_,(undefined4)params.FullBytes.cap);
        vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1
                  (&paramsDer_1,&paramsDer_1,0x30,SUB41((undefined4)params.FullBytes.cap,0));
        if (extraout_AL_05 == '\0') {
          bVar2 = 1;
          pvVar6 = extraout_RBX;
        }
        else {
          vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Integer
                    (&paramsDer_1,in_stack_fffffffffffffec0,false);
          if (extraout_AL_06 == '\0') {
            bVar2 = 1;
            pvVar6 = extraout_RBX_00;
          }
          else {
            vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Integer
                      (&paramsDer_1,in_stack_fffffffffffffec0,false);
            bVar2 = extraout_AL_07 ^ 1;
            pvVar6 = extraout_RBX_01;
          }
        }
        if ((bVar2 == 0) &&
           (vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Integer
                      (&paramsDer_1,in_stack_fffffffffffffec0,false), pvVar6 = extraout_RBX_02,
           extraout_AL_08 != '\0')) {
          if (*(int *)(~r0_03[3] + 0x10) == 0) {
            iVar5 = 0;
          }
          else if (*~r0_03[3] == '\0') {
            iVar5 = 1;
          }
          else {
            iVar5 = -1;
          }
          if (0 < iVar5) {
            if (*(int *)(*~r0_03 + 0x10) == 0) {
              iVar5 = 0;
            }
            else if (**~r0_03 == '\0') {
              iVar5 = 1;
            }
            else {
              iVar5 = -1;
            }
            if (0 < iVar5) {
              if (*(int *)(~r0_03[1] + 0x10) == 0) {
                iVar5 = 0;
              }
              else if (*~r0_03[1] == '\0') {
                iVar5 = 1;
              }
              else {
                iVar5 = -1;
              }
              if (0 < iVar5) {
                if (*(int *)(~r0_03[2] + 0x10) == 0) {
                  iVar5 = 0;
                }
                else if (*~r0_03[2] == '\0') {
                  iVar5 = 1;
                }
                else {
                  iVar5 = -1;
                }
                if (0 < iVar5) {
                  return;
                }
              }
            }
          }
          runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_03);
          extraout_RAX_24[1] = 0x24;
          *extraout_RAX_24 = &DAT_008c2a23;
          return;
        }
        runtime_newobject((internal_abi_Type *)&DAT_0083e560,pvVar6);
        extraout_RAX_25[1] = 0x1c;
        *extraout_RAX_25 = &DAT_008bdd0d;
        return;
      }
      pvVar6 = (void *)piVar1[i_4];
      if ((void *)crypto_x509_oidPublicKeyDSA.array[i_4] != pvVar6) break;
      i_4 = i_4 + 1;
    }
  }
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,pvVar6);
  extraout_RAX_17[1] = 0x22;
  *extraout_RAX_17 = &DAT_008c18e6;
  return;
}



void crypto_x509_parseKeyUsageExtension
               (vendor_golang_org_x_crypto_cryptobyte_String der,crypto_x509_KeyUsage ~r0,error ~r1)

{
  char extraout_AL;
  int iVar1;
  undefined8 *extraout_RAX;
  int usage;
  int in_RCX;
  void *~r0_00;
  int i;
  int x;
  uint y;
  int unaff_R14;
  undefined in_XMM15 [16];
  encoding_asn1_BitString usageBits;
  
  der.array = (uint8 *)~r0;
  der.cap = in_RCX;
  while (usageBits.BitLength = in_XMM15._8_8_, &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)
        ) {
    runtime_morestack_noctxt();
  }
  usageBits.Bytes.len = usageBits.BitLength;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1BitString
            (&der,&usageBits,SUB81(der.cap,0));
  if (extraout_AL != '\0') {
    iVar1 = 0;
    while( true ) {
      if (8 < iVar1) {
        return;
      }
      if ((iVar1 < usageBits.BitLength) && ((uint)usageBits.Bytes.len <= (uint)(iVar1 >> 3))) break;
      iVar1 = iVar1 + 1;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_00);
  extraout_RAX[1] = 0x17;
  *extraout_RAX = &DAT_008baed9;
  return;
}



void crypto_x509_parseBasicConstraintsExtension
               (vendor_golang_org_x_crypto_cryptobyte_String der,bool ~r0,int ~r1,error ~r2)

{
  char extraout_AL;
  char extraout_AL_00;
  char extraout_AL_01;
  undefined7 in_register_00000001;
  undefined8 *extraout_RAX;
  undefined8 *extraout_RAX_00;
  undefined8 *extraout_RAX_01;
  bool ~r0_00;
  void *~r0_01;
  void *~r0_02;
  void *~r0_03;
  undefined8 in_RDI;
  undefined8 extraout_RDI;
  int unaff_R14;
  interface___ in_stack_ffffffffffffffd0;
  bool local_11;
  undefined8 local_10;
  
  der.array = (uint8 *)CONCAT71(in_register_00000001,~r0);
  der.len = ~r1;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  local_11 = false;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(&der,&der,0x30,SUB81(in_RDI,0));
  if (extraout_AL != '\0') {
    if ((der.len != 0) && (*der.array == 1)) {
      vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Boolean(&der,&local_11,~r0_00);
      if (extraout_AL_00 == '\0') {
        runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_02);
        extraout_RAX_00[1] = 0x1f;
        *extraout_RAX_00 = &DAT_008bfb1f;
        return;
      }
    }
    local_10 = 0xffffffffffffffff;
    if ((der.len != 0) && (*der.array == 2)) {
      vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Integer
                (&der,in_stack_ffffffffffffffd0,true);
      if (extraout_AL_01 == '\0') {
        runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_03);
        extraout_RAX[1] = 0x1f;
        *extraout_RAX = &DAT_008bfb1f;
        return;
      }
    }
    return;
  }
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_01);
  extraout_RAX_01[1] = 0x1f;
  *extraout_RAX_01 = &DAT_008bfb1f;
  return;
}



void crypto_x509_forEachSAN
               (vendor_golang_org_x_crypto_cryptobyte_String der,func_int____uint8__error **callback
               ,error ~r0)

{
  char extraout_AL;
  char extraout_AL_00;
  undefined8 *extraout_RAX;
  int iVar1;
  undefined8 *extraout_RAX_00;
  int in_RBX;
  void *~r0_00;
  void *~r0_01;
  undefined8 extraout_RSI;
  undefined8 uVar2;
  undefined8 extraout_RSI_00;
  code **in_RDI;
  int unaff_R14;
  undefined in_XMM15 [16];
  byte local_21;
  vendor_golang_org_x_crypto_cryptobyte_String san;
  
  der.array = (uint8 *)callback;
  der.len = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(&der,&der,0x30,SUB81(in_RDI,0));
  uVar2 = extraout_RSI;
  if (extraout_AL == '\0') {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_00);
    extraout_RAX[1] = 0x27;
    *extraout_RAX = &DAT_008c436a;
    return;
  }
  while( true ) {
    if (der.len == 0) {
      return;
    }
    san.array = (uint8 *)0x0;
    local_21 = 0;
    san._8_16_ = in_XMM15;
    vendor_golang_org_x_crypto_cryptobyte___String__readASN1
              (&der,&san,&local_21,true,SUB81(uVar2,0));
    if (extraout_AL_00 == '\0') break;
    iVar1 = (**in_RDI)(local_21 ^ 0x80,san.array,san.len,san.cap);
    uVar2 = extraout_RSI_00;
    if (iVar1 != 0) {
      return;
    }
  }
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_01);
  extraout_RAX_00[1] = 0x26;
  *extraout_RAX_00 = &DAT_008c3b93;
  return;
}



void crypto_x509_parseExtKeyUsageExtension
               (vendor_golang_org_x_crypto_cryptobyte_String der,__crypto_x509_ExtKeyUsage ~r0,
               __encoding_asn1_ObjectIdentifier ~r1,error ~r2)

{
  char extraout_AL;
  char extraout_AL_00;
  uint oldCap;
  undefined8 *extraout_RAX;
  crypto_x509_ExtKeyUsage extKeyUsage;
  void *extraout_RAX_00;
  void *extraout_RAX_01;
  void *extraout_RAX_02;
  void *oldPtr;
  undefined8 *extraout_RAX_03;
  int iVar1;
  void *oldPtr_00;
  uint extraout_RCX;
  uint extraout_RCX_00;
  uint extraout_RCX_01;
  uint oldCap_00;
  struct___crypto_x509_extKeyUsage_crypto_x509_ExtKeyUsage__crypto_x509_oid_encoding_asn1_ObjectIdentifier__
  *psVar2;
  int in_RBX;
  void *~r0_00;
  void *~r0_01;
  uint newLen;
  uint extraout_RBX;
  uint newLen_00;
  uint extraout_RBX_00;
  uint extraout_RBX_01;
  int i;
  undefined8 in_RDI;
  undefined8 extraout_RDI;
  int **extraout_R11;
  int unaff_R14;
  undefined in_XMM15 [16];
  runtime_slice in_stack_ffffffffffffff68;
  encoding_asn1_ObjectIdentifier eku;
  
  der.len = in_RBX;
  while (&eku.len <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(&der,&der,0x30,SUB81(in_RDI,0));
  if (extraout_AL == '\0') {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_00);
    extraout_RAX[1] = 0x21;
    *extraout_RAX = &DAT_008c1097;
    return;
  }
  oldCap = 0;
  oldPtr_00 = (void *)0x0;
  newLen = 0;
  oldCap_00 = 0;
  oldPtr = (void *)0x0;
  newLen_00 = 0;
  do {
    if (der.len == 0) {
      return;
    }
    eku.array = (int *)0x0;
    eku._8_16_ = in_XMM15;
    vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1ObjectIdentifier
              (&der,&eku,SUB81(oldPtr_00,0));
    if (extraout_AL_00 == '\0') {
      runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_01);
      extraout_RAX_03[1] = 0x21;
      *extraout_RAX_03 = &DAT_008c1097;
      return;
    }
    psVar2 = crypto_x509_extKeyUsageOIDs.array;
    for (iVar1 = 0; iVar1 < crypto_x509_extKeyUsageOIDs.len; iVar1 = iVar1 + 1) {
      if ((psVar2->oid).len == eku.len) {
        i = 0;
        while( true ) {
          if (eku.len <= i) {
            extKeyUsage = psVar2->extKeyUsage;
            goto LAB_0068f757;
          }
          if ((psVar2->oid).array[i] != eku.array[i]) break;
          i = i + 1;
        }
      }
      psVar2 = psVar2 + 1;
    }
    extKeyUsage = 0;
LAB_0068f757:
    if (iVar1 < crypto_x509_extKeyUsageOIDs.len) {
      newLen = newLen + 1;
      if (oldCap < newLen) {
        runtime_growslice(oldPtr_00,newLen,oldCap,1,(internal_abi_Type *)&DAT_008084e0,
                          in_stack_ffffffffffffff68);
        oldCap = extraout_RCX;
        oldPtr_00 = extraout_RAX_00;
        newLen = extraout_RBX;
      }
      *(crypto_x509_ExtKeyUsage *)((int)oldPtr_00 + newLen * 8 + -8) = extKeyUsage;
    }
    else {
      newLen_00 = newLen_00 + 1;
      if (oldCap_00 < newLen_00) {
        runtime_growslice(oldPtr,newLen_00,oldCap_00,1,(internal_abi_Type *)&DAT_0083aac0,
                          in_stack_ffffffffffffff68);
        oldPtr = extraout_RAX_01;
        oldCap_00 = extraout_RCX_00;
        newLen_00 = extraout_RBX_00;
      }
      iVar1 = newLen_00 * 3;
      *(int *)((int)oldPtr + newLen_00 * 0x18 + -0x10) = eku.len;
      *(int *)((int)oldPtr + newLen_00 * 0x18 + -8) = eku.cap;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11 = eku.array;
        extraout_R11[1] = *(int **)((int)extraout_RAX_02 + iVar1 * 8 + -0x18);
        oldPtr = extraout_RAX_02;
        oldCap_00 = extraout_RCX_01;
        newLen_00 = extraout_RBX_01;
      }
      *(int **)((int)oldPtr + iVar1 * 8 + -0x18) = eku.array;
    }
  } while( true );
}



void crypto_x509_parseCertificatePoliciesExtension
               (vendor_golang_org_x_crypto_cryptobyte_String der,
               __encoding_asn1_ObjectIdentifier ~r0,error ~r1)

{
  char extraout_AL;
  char extraout_AL_00;
  char extraout_AL_01;
  uint oldCap;
  undefined8 *extraout_RAX;
  void *oldPtr;
  void *extraout_RAX_00;
  void *extraout_RAX_01;
  undefined8 *extraout_RAX_02;
  undefined8 *extraout_RAX_03;
  bool ~r0_00;
  uint extraout_RCX;
  uint extraout_RCX_00;
  int iVar1;
  int in_RBX;
  void *~r0_01;
  void *~r0_02;
  void *~r0_03;
  uint newLen;
  uint extraout_RBX;
  uint extraout_RBX_00;
  undefined8 in_RDI;
  undefined8 extraout_RDI;
  undefined8 uVar2;
  undefined8 extraout_RDI_00;
  undefined8 extraout_RDI_01;
  undefined8 extraout_RDI_02;
  undefined8 extraout_RDI_03;
  int *piVar3;
  int *extraout_R10;
  int **extraout_R11;
  int unaff_R14;
  undefined in_XMM15 [16];
  runtime_slice in_stack_ffffffffffffff70;
  encoding_asn1_ObjectIdentifier oid;
  vendor_golang_org_x_crypto_cryptobyte_String cp;
  
  der.len = in_RBX;
  while (&cp.cap <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI_03;
  }
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(&der,&der,0x30,SUB81(in_RDI,0));
  if (extraout_AL == '\0') {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_01);
    extraout_RAX[1] = 0x22;
    *extraout_RAX = &DAT_008c1908;
    return;
  }
  oldCap = 0;
  oldPtr = (void *)0x0;
  newLen = 0;
  uVar2 = extraout_RDI;
  while( true ) {
    if (der.len == 0) {
      return;
    }
    cp.array = (uint8 *)0x0;
    vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(&der,&cp,0x30,SUB81(uVar2,0));
    if (extraout_AL_00 == '\0') break;
    oid.array = (int *)0x0;
    oid._8_16_ = in_XMM15;
    vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1ObjectIdentifier(&cp,&oid,~r0_00);
    if (extraout_AL_01 == '\0') {
      runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_03);
      extraout_RAX_02[1] = 0x22;
      *extraout_RAX_02 = &DAT_008c1908;
      return;
    }
    newLen = newLen + 1;
    uVar2 = extraout_RDI_00;
    if (oldCap < newLen) {
      runtime_growslice(oldPtr,newLen,oldCap,1,(internal_abi_Type *)&DAT_0083aac0,
                        in_stack_ffffffffffffff70);
      oldPtr = extraout_RAX_00;
      oldCap = extraout_RCX;
      newLen = extraout_RBX;
      uVar2 = extraout_RDI_01;
    }
    iVar1 = newLen * 3;
    *(int *)((int)oldPtr + newLen * 0x18 + -0x10) = oid.len;
    *(int *)((int)oldPtr + newLen * 0x18 + -8) = oid.cap;
    piVar3 = oid.array;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_R10;
      extraout_R11[1] = *(int **)((int)extraout_RAX_01 + iVar1 * 8 + -0x18);
      oldPtr = extraout_RAX_01;
      oldCap = extraout_RCX_00;
      newLen = extraout_RBX_00;
      uVar2 = extraout_RDI_02;
      piVar3 = extraout_R10;
    }
    *(int **)((int)oldPtr + iVar1 * 8 + -0x18) = piVar3;
  }
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_02);
  extraout_RAX_03[1] = 0x22;
  *extraout_RAX_03 = &DAT_008c1908;
  return;
}



// WARNING: Variable defined which should be unmapped: toplevel
// WARNING: Exceeded maximum restarts with more pending
// DWARF original prototype: void crypto/x509.parseNameConstraintsExtension(crypto/x509.Certificate
// * out, crypto/x509/pkix.Extension e, bool unhandled, bool unhandled, error err)

void crypto_x509_parseNameConstraintsExtension
               (crypto_x509_Certificate *out,crypto_x509_pkix_Extension e,bool unhandled,
               bool unhandled_1,error err)

{
  vendor_golang_org_x_crypto_cryptobyte_String subtrees;
  __string dnsNames;
  ___net_IPNet ips;
  __string emails;
  __string uriDomains;
  char extraout_AL;
  char extraout_AL_00;
  byte extraout_AL_01;
  byte bVar1;
  string *extraout_RAX;
  string *extraout_RAX_00;
  int extraout_RAX_01;
  string *extraout_RAX_02;
  string *extraout_RAX_03;
  string *psVar2;
  int extraout_RAX_04;
  undefined8 *extraout_RAX_05;
  undefined8 *extraout_RAX_06;
  int extraout_RCX;
  int extraout_RCX_00;
  int extraout_RCX_01;
  int extraout_RCX_02;
  int iVar3;
  void *extraout_RBX;
  void *extraout_RBX_00;
  void *extraout_RBX_01;
  void *pvVar4;
  int extraout_RBX_02;
  int extraout_RBX_03;
  bool in_SIL;
  bool ~r0;
  bool ~r0_00;
  int extraout_RSI;
  int extraout_RSI_00;
  int extraout_RSI_01;
  int extraout_RSI_02;
  int iVar5;
  net_IPNet **extraout_RDI;
  net_IPNet **extraout_RDI_00;
  net_IPNet **extraout_RDI_01;
  net_IPNet **extraout_RDI_02;
  net_IPNet **extraout_RDI_03;
  net_IPNet **extraout_RDI_04;
  net_IPNet **ppnVar6;
  int extraout_R8;
  int extraout_R8_00;
  int extraout_R8_01;
  int extraout_R8_02;
  int iVar7;
  int in_R9;
  string *extraout_R9;
  string *extraout_R9_00;
  string *extraout_R9_01;
  string *extraout_R9_02;
  string *extraout_R9_03;
  string *extraout_R9_04;
  string *extraout_R9_05;
  string *extraout_R9_06;
  string *psVar8;
  bool in_R10B;
  int extraout_R10;
  int extraout_R10_00;
  int extraout_R10_01;
  int extraout_R10_02;
  int extraout_R10_03;
  int extraout_R10_04;
  int iVar9;
  int extraout_R11;
  string **extraout_R11_00;
  undefined8 *extraout_R11_01;
  string **extraout_R11_02;
  string **extraout_R11_03;
  int extraout_R11_04;
  string **extraout_R11_05;
  undefined8 *extraout_R11_06;
  int iVar10;
  string **extraout_R11_07;
  string **extraout_R11_08;
  crypto_x509_Certificate *pcVar11;
  int iVar12;
  int unaff_R14;
  int iVar13;
  undefined in_XMM15 [16];
  string *in_stack_ffffffffffffff28;
  int in_stack_ffffffffffffff30;
  int in_stack_ffffffffffffff38;
  int in_stack_ffffffffffffff40;
  undefined8 in_stack_ffffffffffffff48;
  int in_stack_ffffffffffffff50;
  undefined in_stack_ffffffffffffff58 [21];
  undefined uVar14;
  bool bVar15;
  bool bVar16;
  undefined8 in_stack_ffffffffffffff70;
  undefined8 in_stack_ffffffffffffff78;
  int in_stack_ffffffffffffff80;
  string *psVar17;
  vendor_golang_org_x_crypto_cryptobyte_String toplevel;
  vendor_golang_org_x_crypto_cryptobyte_String permitted;
  vendor_golang_org_x_crypto_cryptobyte_String outer;
  vendor_golang_org_x_crypto_cryptobyte_String excluded;
  
  while (permitted.len = in_XMM15._0_8_, &toplevel.cap <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar14 = 0;
  toplevel.array = (uint8 *)0x0;
  permitted.array = (uint8 *)0x0;
  excluded.array = (uint8 *)0x0;
  bVar15 = false;
  bVar16 = false;
  toplevel._8_16_ = in_XMM15;
  outer.len = in_R9;
  excluded._8_16_ = in_XMM15;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(&outer,&toplevel,0x30,in_R10B);
  pvVar4 = extraout_RBX;
  if (extraout_AL == '\0') {
    bVar1 = 1;
  }
  else if (outer.len == 0) {
    vendor_golang_org_x_crypto_cryptobyte___String__ReadOptionalASN1
              (&toplevel,&permitted,(bool *)&stack0xffffffffffffff6e,0xa0,~r0);
    if (extraout_AL_00 == '\0') {
      bVar1 = 1;
      pvVar4 = extraout_RBX_00;
    }
    else {
      vendor_golang_org_x_crypto_cryptobyte___String__ReadOptionalASN1
                (&toplevel,&excluded,(bool *)&stack0xffffffffffffff6f,0xa1,~r0_00);
      bVar1 = extraout_AL_01 ^ 1;
      pvVar4 = extraout_RBX_01;
    }
  }
  else {
    bVar1 = 1;
  }
  if ((bVar1 != 0) || (toplevel.len != 0)) {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,pvVar4);
    extraout_RAX_06[1] = 0x27;
    *extraout_RAX_06 = &DAT_008c4391;
    return;
  }
  if (((bVar15 == false) && (bVar16 == false)) || ((permitted.len == 0 && (excluded.len == 0)))) {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,pvVar4);
    extraout_RAX_05[1] = 0x26;
    *extraout_RAX_05 = &DAT_008c3bb9;
    return;
  }
  subtrees.len = in_stack_ffffffffffffff30;
  subtrees.array = (uint8 *)in_stack_ffffffffffffff28;
  subtrees.cap = in_stack_ffffffffffffff38;
  dnsNames.len = in_stack_ffffffffffffff48;
  dnsNames.array = (string *)in_stack_ffffffffffffff40;
  dnsNames.cap = in_stack_ffffffffffffff50;
  ips.cap._5_1_ = uVar14;
  ips._0_21_ = in_stack_ffffffffffffff58;
  ips.cap._6_1_ = bVar15;
  ips.cap._7_1_ = bVar16;
  emails.len = in_stack_ffffffffffffff78;
  emails.array = (string *)in_stack_ffffffffffffff70;
  emails.cap = in_stack_ffffffffffffff80;
  uriDomains.len = (int)&stack0xffffffffffffff6d;
  uriDomains.array = (string *)crypto_x509_parseNameConstraintsExtension_func1;
  uriDomains.cap = (int)toplevel.array;
  crypto_x509_parseNameConstraintsExtension_func1
            (subtrees,dnsNames,ips,emails,uriDomains,(error)toplevel._8_16_);
  (out->PermittedDNSDomains).len = extraout_RBX_02;
  (out->PermittedDNSDomains).cap = extraout_RCX;
  psVar2 = extraout_RAX;
  iVar5 = extraout_RSI;
  ppnVar6 = extraout_RDI;
  iVar7 = extraout_R8;
  psVar8 = extraout_R9;
  iVar9 = extraout_R10;
  iVar10 = extraout_R11;
  pcVar11 = out;
  iVar12 = in_stack_ffffffffffffff30;
  iVar13 = in_stack_ffffffffffffff38;
  iVar3 = in_stack_ffffffffffffff40;
  psVar17 = in_stack_ffffffffffffff28;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = extraout_RAX_00;
    extraout_R11_00[1] = (pcVar11->PermittedDNSDomains).array;
    psVar2 = extraout_RAX_00;
    iVar5 = extraout_RSI_00;
    ppnVar6 = extraout_RDI_00;
    iVar7 = extraout_R8_00;
    psVar8 = extraout_R9_00;
    iVar9 = extraout_R10_00;
    iVar10 = extraout_RCX_00;
  }
  (pcVar11->PermittedDNSDomains).array = psVar2;
  (pcVar11->PermittedIPRanges).len = iVar5;
  (pcVar11->PermittedIPRanges).cap = iVar7;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_01 = extraout_RDI_01;
    extraout_R11_01[1] = (pcVar11->PermittedIPRanges).array;
    ppnVar6 = extraout_RDI_01;
    psVar8 = extraout_R9_01;
    iVar9 = extraout_R10_01;
    iVar10 = extraout_RAX_01;
  }
  (pcVar11->PermittedIPRanges).array = ppnVar6;
  (pcVar11->PermittedEmailAddresses).len = iVar9;
  (pcVar11->PermittedEmailAddresses).cap = iVar10;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_02 = extraout_R9_02;
    extraout_R11_02[1] = (pcVar11->PermittedEmailAddresses).array;
    psVar8 = extraout_R9_02;
  }
  (pcVar11->PermittedEmailAddresses).array = psVar8;
  (pcVar11->PermittedURIDomains).len = in_stack_ffffffffffffff30;
  (pcVar11->PermittedURIDomains).cap = in_stack_ffffffffffffff38;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_03 = psVar17;
    extraout_R11_03[1] = (pcVar11->PermittedURIDomains).array;
  }
  (pcVar11->PermittedURIDomains).array = psVar17;
  if (in_stack_ffffffffffffff40 != 0) {
    return;
  }
  crypto_x509_parseNameConstraintsExtension_func1(excluded.array,excluded.len,excluded.cap);
  (out->ExcludedDNSDomains).len = extraout_RBX_03;
  (out->ExcludedDNSDomains).cap = extraout_RCX_01;
  psVar2 = extraout_RAX_02;
  iVar5 = extraout_RSI_01;
  ppnVar6 = extraout_RDI_02;
  iVar7 = extraout_R8_01;
  psVar8 = extraout_R9_03;
  iVar9 = extraout_R10_02;
  iVar10 = extraout_R11_04;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_05 = extraout_RAX_03;
    extraout_R11_05[1] = (out->ExcludedDNSDomains).array;
    psVar2 = extraout_RAX_03;
    iVar5 = extraout_RSI_02;
    ppnVar6 = extraout_RDI_03;
    iVar7 = extraout_R8_02;
    psVar8 = extraout_R9_04;
    iVar9 = extraout_R10_03;
    iVar10 = extraout_RCX_02;
  }
  (out->ExcludedDNSDomains).array = psVar2;
  (out->ExcludedIPRanges).len = iVar5;
  (out->ExcludedIPRanges).cap = iVar7;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_06 = extraout_RDI_04;
    extraout_R11_06[1] = (out->ExcludedIPRanges).array;
    ppnVar6 = extraout_RDI_04;
    psVar8 = extraout_R9_05;
    iVar9 = extraout_R10_04;
    iVar10 = extraout_RAX_04;
  }
  (out->ExcludedIPRanges).array = ppnVar6;
  (out->ExcludedEmailAddresses).len = iVar9;
  (out->ExcludedEmailAddresses).cap = iVar10;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_07 = extraout_R9_06;
    extraout_R11_07[1] = (out->ExcludedEmailAddresses).array;
    psVar8 = extraout_R9_06;
  }
  (out->ExcludedEmailAddresses).array = psVar8;
  (out->ExcludedURIDomains).len = iVar12;
  (out->ExcludedURIDomains).cap = iVar13;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_08 = in_stack_ffffffffffffff28;
    extraout_R11_08[1] = (out->ExcludedURIDomains).array;
  }
  (out->ExcludedURIDomains).array = in_stack_ffffffffffffff28;
  if (iVar3 == 0) {
    out->PermittedDNSDomainsCritical = in_SIL;
    return;
  }
  return;
}



void crypto_x509_parseNameConstraintsExtension_func1
               (vendor_golang_org_x_crypto_cryptobyte_String subtrees,__string dnsNames,
               ___net_IPNet ips,__string emails,__string uriDomains,error err)

{
  byte bVar1;
  string ~r0;
  string ~r0_00;
  string ~r0_01;
  string val;
  string format;
  string domain;
  string format_00;
  string format_01;
  string s;
  string val_00;
  string format_02;
  string a0;
  string s_00;
  string val_01;
  string format_03;
  string s_01;
  string domain_00;
  string val_02;
  string format_04;
  string in;
  string val_03;
  string format_05;
  string a0_00;
  string s_02;
  string val_04;
  string format_06;
  string s_03;
  string domain_01;
  string val_05;
  string format_07;
  string val_06;
  string format_08;
  string a0_01;
  string format_09;
  runtime_slice ~r0_02;
  runtime_slice ~r0_03;
  runtime_slice ~r0_04;
  __uint8 val_07;
  runtime_slice ~r0_05;
  string a1;
  string substr;
  string a1_00;
  uint8 ~r0_06 [16];
  string a1_01;
  __interface___ a;
  __string reverseLabels;
  __interface___ a_00;
  __interface___ a_01;
  __interface___ a_02;
  __interface___ a_03;
  __string reverseLabels_00;
  __interface___ a_04;
  __interface___ a_05;
  __interface___ a_06;
  __string reverseLabels_01;
  __interface___ a_07;
  __interface___ a_08;
  __interface___ a_09;
  crypto_x509_rfc2821Mailbox mailbox;
  string ~r0_07;
  string ~r0_08;
  string ~r0_09;
  error ~r0_10;
  error ~r0_11;
  error ~r0_12;
  error ~r0_13;
  error ~r0_14;
  error ~r0_15;
  error ~r0_16;
  error ~r0_17;
  error ~r0_18;
  error ~r0_19;
  error ~r0_20;
  int32 r_2;
  int32 r_1;
  int32 r;
  char extraout_AL;
  char extraout_AL_00;
  char extraout_AL_01;
  bool valid;
  char cVar2;
  int32 extraout_EAX;
  int32 extraout_EAX_00;
  int32 extraout_EAX_01;
  uint8 *puVar3;
  char *extraout_RAX;
  char *extraout_RAX_00;
  char *extraout_RAX_01;
  undefined8 extraout_RAX_02;
  int extraout_RAX_03;
  void *extraout_RAX_04;
  void *extraout_RAX_05;
  void *pvVar4;
  undefined8 extraout_RAX_06;
  undefined8 extraout_RAX_07;
  undefined8 extraout_RAX_08;
  undefined8 *extraout_RAX_09;
  undefined8 *extraout_RAX_10;
  undefined8 extraout_RAX_11;
  int extraout_RAX_12;
  int extraout_RAX_13;
  undefined8 extraout_RAX_14;
  void *extraout_RAX_15;
  void *extraout_RAX_16;
  undefined8 extraout_RAX_17;
  undefined8 extraout_RAX_18;
  undefined8 *extraout_RAX_19;
  undefined8 *extraout_RAX_20;
  undefined8 extraout_RAX_21;
  int extraout_RAX_22;
  void *extraout_RAX_23;
  void *extraout_RAX_24;
  void *pvVar5;
  undefined8 extraout_RAX_25;
  undefined8 extraout_RAX_26;
  undefined8 extraout_RAX_27;
  undefined8 *extraout_RAX_28;
  undefined8 *extraout_RAX_29;
  undefined8 *puVar6;
  undefined8 extraout_RAX_30;
  uint8 **extraout_RAX_31;
  uint8 **extraout_RAX_32;
  uint8 **extraout_RAX_33;
  void *extraout_RAX_34;
  uint8 **extraout_RAX_35;
  char *pcVar7;
  uint extraout_RCX;
  uint extraout_RCX_00;
  uint extraout_RCX_01;
  uint extraout_RCX_02;
  uint extraout_RCX_03;
  uint extraout_RCX_04;
  uint uVar8;
  int iVar9;
  uint8 *extraout_RCX_05;
  uint8 *puVar10;
  uint extraout_RCX_06;
  uint extraout_RCX_07;
  int in_RDX;
  bool *_unhandled;
  undefined8 uVar11;
  bool seenZero;
  int in_RBX;
  void *x;
  int extraout_RBX;
  int extraout_RBX_00;
  int extraout_RBX_01;
  undefined8 extraout_RBX_02;
  uint newLen;
  uint extraout_RBX_03;
