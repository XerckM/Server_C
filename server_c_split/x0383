          ~r0_02.array._4_4_ = in_stack_ffffffffffffff6c;
          ~r0_02.array._0_4_ = in_stack_ffffffffffffff68;
          ~r0_02.len = in_stack_ffffffffffffff70;
          ~r0_02.cap._0_1_ = in_stack_ffffffffffffff78;
          ~r0_02.cap._1_7_ = in_stack_ffffffffffffff79;
          runtime_growslice(oldPtr,base,oldCap,1,(internal_abi_Type *)&DAT_00807920,~r0_02);
          i_00 = extraout_RAX_00;
          base = extraout_RBX_01;
        }
        *(undefined *)((base - 1) + (int)i_00) = uVar6;
      }
      dst_00.array._4_4_ = in_stack_ffffffffffffff6c;
      dst_00.array._0_4_ = in_stack_ffffffffffffff68;
      dst_00.len = in_stack_ffffffffffffff70;
      dst_00.cap._0_1_ = in_stack_ffffffffffffff78;
      dst_00.cap._1_7_ = in_stack_ffffffffffffff79;
      ~r0_05.len = (int)in_stack_ffffffffffffff88;
      ~r0_05.array = in_stack_ffffffffffffff80;
      ~r0_05.cap = in_stack_ffffffffffffff90;
      strconv_AppendUint(dst_00,(uint64)i_00,base,~r0_05);
      ~r0_01.str._4_4_ = in_stack_ffffffffffffff6c;
      ~r0_01.str._0_4_ = in_stack_ffffffffffffff68;
      ~r0_01.len = in_stack_ffffffffffffff70;
      runtime_slicebytetostring((runtime_tmpBuf *)0x0,ptr,n,~r0_01);
      return;
    }
    ip_00.addr.hi._4_4_ = in_stack_ffffffffffffff6c;
    ip_00.addr.hi._0_4_ = in_stack_ffffffffffffff68;
    ip_00.addr.lo = in_stack_ffffffffffffff70;
    ip_00.z._0_1_ = in_stack_ffffffffffffff78;
    ip_00.z._1_7_ = in_stack_ffffffffffffff79;
    ~r0_03.len = (int)in_stack_ffffffffffffff88;
    ~r0_03.str = in_stack_ffffffffffffff80;
    net_netip_Addr_String(ip_00,~r0_03);
    ~r0_00.str._4_4_ = in_stack_ffffffffffffff6c;
    ~r0_00.str._0_4_ = in_stack_ffffffffffffff68;
    ~r0_00.len = in_stack_ffffffffffffff70;
    local_10 = extraout_RAX;
    internal_itoa_Itoa((uint)in_DI,~r0_00);
    uVar4 = (undefined4)local_10;
    uVar5 = (undefined4)((uint)local_10 >> 0x20);
    uVar6 = 0x3a;
    iVar3 = extraout_RBX;
    internal_bytealg_IndexByteString();
    if ((int)in_stack_ffffffffffffff80 < 0) {
      a0_00.str._4_4_ = uVar5;
      a0_00.str._0_4_ = uVar4;
      a0_00.len = iVar3;
      a1_00.str._1_7_ = in_stack_ffffffffffffff79;
      a1_00.str._0_1_ = uVar6;
      a1_00.len = (int)in_stack_ffffffffffffff80;
      a2_00.len = in_stack_ffffffffffffff90;
      a2_00.str = in_stack_ffffffffffffff88;
      runtime_concatstring3((runtime_tmpBuf *)0x0,a0_00,a1_00,a2_00,in_stack_ffffffffffffff98);
    }
    else {
      a0.str._4_4_ = uVar5;
      a0.str._0_4_ = uVar4;
      a0.len = iVar3;
      a1.str._1_7_ = in_stack_ffffffffffffff79;
      a1.str._0_1_ = uVar6;
      a1.len = (int)in_stack_ffffffffffffff80;
      a2.len = in_stack_ffffffffffffff90;
      a2.str = in_stack_ffffffffffffff88;
      ~r0_06.len._1_1_ = in_stack_ffffffffffffffb1;
      ~r0_06._0_9_ = in_stack_ffffffffffffffa8;
      ~r0_06.len._2_2_ = in_DI;
      ~r0_06.len._4_4_ = in_stack_ffffffffffffffb4;
      runtime_concatstring4((runtime_tmpBuf *)0x0,a0,a1,a2,in_stack_ffffffffffffff98,~r0_06);
    }
    return;
  }
  return;
}



void net_netip_AddrPort_AppendTo(net_netip_AddrPort p,__uint8 b,__uint8 ~r0)

{
  void **ppvVar1;
  __uint8 ~r0_00;
  __uint8 ~r0_01;
  __uint8 ~r0_02;
  int in_RAX;
  void *extraout_RAX;
  void *oldPtr;
  void *extraout_RAX_00;
  void *extraout_RAX_01;
  void *oldPtr_00;
  void *extraout_RAX_02;
  void *extraout_RAX_03;
  void *extraout_RAX_04;
  void *extraout_RAX_05;
  void *extraout_RAX_06;
  internal_intern_Value *in_RCX;
  uint oldCap;
  uint extraout_RCX;
  uint extraout_RCX_00;
  uint oldCap_00;
  uint extraout_RCX_01;
  uint extraout_RCX_02;
  uint extraout_RCX_03;
  void *__n;
  uint in_RBX;
  uint extraout_RBX;
  uint newLen;
  uint extraout_RBX_00;
  uint extraout_RBX_01;
  uint extraout_RBX_02;
  uint extraout_RBX_03;
  uint uVar2;
  uint extraout_RBX_04;
  uint extraout_RBX_05;
  uint extraout_RBX_06;
  void *in_RSI;
  undefined2 in_DI;
  int in_R8;
  void *__src;
  uint in_R9;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffff70;
  __uint8 in_stack_ffffffffffffff88;
  undefined in_stack_ffffffffffffffa0 [22];
  internal_intern_Value *local_10;
  
  while (&local_10 <= *(internal_intern_Value ***)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (net_netip_z0 == in_RCX) {
    return;
  }
  if (net_netip_z4 == in_RCX) {
    ~r0_02.cap._6_2_ = in_DI;
    ~r0_02._0_22_ = in_stack_ffffffffffffffa0;
    net_netip_Addr_appendTo4
              ((net_netip_Addr)in_stack_ffffffffffffff70,in_stack_ffffffffffffff88,~r0_02);
    oldPtr_00 = extraout_RAX_05;
    oldCap_00 = extraout_RCX_03;
    uVar2 = extraout_RBX_05;
  }
  else {
    if ((in_RAX == 0) && (in_RBX >> 0x20 == 0xffff)) {
      local_10 = in_RCX;
      if (in_R9 < in_R8 + 8U) {
        runtime_growslice(in_RSI,in_R8 + 8U,in_R9,8,(internal_abi_Type *)&DAT_00807920,
                          (runtime_slice)in_stack_ffffffffffffff70);
        in_RSI = extraout_RAX;
      }
      *(undefined8 *)((int)in_RSI + in_R8) = 0x3a666666663a3a5b;
      ~r0_00.cap._6_2_ = in_DI;
      ~r0_00._0_22_ = in_stack_ffffffffffffffa0;
      net_netip_Addr_appendTo4
                ((net_netip_Addr)in_stack_ffffffffffffff70,in_stack_ffffffffffffff88,~r0_00);
      if (local_10 == (internal_intern_Value *)0x0) {
        __n = (void *)0x0;
        __src = (void *)0x0;
      }
      else if ((local_10->cmpVal)._type == (internal_abi_Type *)&DAT_008075e0) {
        ppvVar1 = (void **)(local_10->cmpVal).data;
        __src = *ppvVar1;
        __n = ppvVar1[1];
      }
      else {
        __n = (void *)0x0;
        __src = (void *)0x0;
      }
      oldPtr_00 = oldPtr;
      oldCap_00 = oldCap;
      uVar2 = extraout_RBX;
      if (__n != (void *)0x0) {
        newLen = extraout_RBX + 1;
        if (oldCap < newLen) {
          runtime_growslice(oldPtr,newLen,oldCap,1,(internal_abi_Type *)&DAT_00807920,
                            (runtime_slice)in_stack_ffffffffffffff70);
          oldPtr_00 = extraout_RAX_00;
          oldCap_00 = extraout_RCX;
          newLen = extraout_RBX_00;
        }
        *(undefined *)((newLen - 1) + (int)oldPtr_00) = 0x25;
        uVar2 = newLen + (int)__n;
        if (oldCap_00 < uVar2) {
          runtime_growslice(oldPtr_00,uVar2,oldCap_00,(int)__n,(internal_abi_Type *)&DAT_00807920,
                            (runtime_slice)in_stack_ffffffffffffff70);
          oldPtr_00 = extraout_RAX_01;
          oldCap_00 = extraout_RCX_00;
          uVar2 = extraout_RBX_01;
        }
        runtime_memmove((void *)((int)oldPtr_00 + newLen),__src,(size_t)__n);
      }
    }
    else {
      uVar2 = in_R8 + 1;
      if (in_R9 < uVar2) {
        runtime_growslice(in_RSI,uVar2,in_R9,1,(internal_abi_Type *)&DAT_00807920,
                          (runtime_slice)in_stack_ffffffffffffff70);
        uVar2 = extraout_RBX_02;
        in_RSI = extraout_RAX_02;
      }
      *(undefined *)((uVar2 - 1) + (int)in_RSI) = 0x5b;
      ~r0_01.cap._6_2_ = in_DI;
      ~r0_01._0_22_ = in_stack_ffffffffffffffa0;
      net_netip_Addr_appendTo6
                ((net_netip_Addr)in_stack_ffffffffffffff70,in_stack_ffffffffffffff88,~r0_01);
      oldPtr_00 = extraout_RAX_03;
      oldCap_00 = extraout_RCX_01;
      uVar2 = extraout_RBX_03;
    }
    uVar2 = uVar2 + 1;
    if (oldCap_00 < uVar2) {
      runtime_growslice(oldPtr_00,uVar2,oldCap_00,1,(internal_abi_Type *)&DAT_00807920,
                        (runtime_slice)in_stack_ffffffffffffff70);
      oldPtr_00 = extraout_RAX_04;
      oldCap_00 = extraout_RCX_02;
      uVar2 = extraout_RBX_04;
    }
    *(undefined *)((uVar2 - 1) + (int)oldPtr_00) = 0x5d;
  }
  uVar2 = uVar2 + 1;
  if (oldCap_00 < uVar2) {
    runtime_growslice(oldPtr_00,uVar2,oldCap_00,1,(internal_abi_Type *)&DAT_00807920,
                      (runtime_slice)in_stack_ffffffffffffff70);
    oldPtr_00 = extraout_RAX_06;
    uVar2 = extraout_RBX_06;
  }
  *(undefined *)((uVar2 - 1) + (int)oldPtr_00) = 0x3a;
  strconv_AppendUint(in_stack_ffffffffffffff70,(uint64)oldPtr_00,uVar2,in_stack_ffffffffffffff88);
  return;
}



void net_netip_AddrPort_MarshalText(net_netip_AddrPort p,__uint8 ~r0,error ~r1)

{
  __uint8 ~r0_00;
  int in_RAX;
  internal_intern_Value *in_RCX;
  int max;
  undefined2 uVar1;
  void *in_RDI;
  int unaff_R14;
  net_netip_AddrPort in_stack_ffffffffffffff98;
  __uint8 in_stack_ffffffffffffffb8;
  undefined6 in_stack_ffffffffffffffd0;
  
  while (uVar1 = SUB82(in_RDI,0), &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = (void *)((uint)in_RDI & 0xffff);
  }
  if (net_netip_z0 == in_RCX) {
    max = 0;
  }
  else if (net_netip_z4 == in_RCX) {
    max = 0x15;
  }
  else {
    max = 0x36;
  }
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,0,max,in_RDI);
  ~r0_00.array._6_2_ = uVar1;
  ~r0_00.array._0_6_ = in_stack_ffffffffffffffd0;
  ~r0_00.len = max;
  ~r0_00.cap = in_RAX;
  net_netip_AddrPort_AppendTo(in_stack_ffffffffffffff98,in_stack_ffffffffffffffb8,~r0_00);
  return;
}


/*
Unable to decompile 'net/netip.(*AddrPort).UnmarshalText'
Cause: 
Low-level Error: Overlapping input varnodes
*/


void net_netip_AddrPort_MarshalBinary(net_netip_AddrPort p,__uint8 ~r0,error ~r1)

{
  __uint8 ~r0_00;
  int in_RAX;
  int extraout_RAX;
  int extraout_RCX;
  uint extraout_RBX;
  int unaff_RBP;
  undefined2 in_DI;
  int unaff_R14;
  net_netip_Addr in_stack_ffffffffffffffd0;
  undefined in_stack_ffffffffffffffe8 [14];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ~r0_00.len._6_2_ = in_DI;
  ~r0_00._0_14_ = in_stack_ffffffffffffffe8;
  ~r0_00.cap = unaff_RBP;
  net_netip_Addr_marshalBinaryWithTrailingBytes(in_stack_ffffffffffffffd0,in_RAX,~r0_00);
  if (extraout_RBX - 2 <= extraout_RBX) {
    *(undefined2 *)
     (extraout_RAX + (extraout_RBX - 2 & (int)-((extraout_RCX - extraout_RBX) + 2) >> 0x3f)) = in_DI
    ;
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceB();
}



void net_netip___AddrPort__UnmarshalBinary(net_netip_AddrPort *p,__uint8 b,error ~r0)

{
  uint16 uVar1;
  error ~r0_00;
  int extraout_RAX;
  undefined8 *extraout_RAX_00;
  int in_RCX;
  void *in_RBX;
  int in_RDI;
  internal_intern_Value *extraout_RDI;
  net_netip_AddrPort *extraout_R8;
  internal_intern_Value **extraout_R11;
  int unaff_R14;
  net_netip_uint128 in_XMM15;
  __uint8 in_stack_ffffffffffffffb8;
  runtime_itab *in_stack_ffffffffffffffd0;
  void *pvVar2;
  net_netip_Addr addr;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (1 < in_RCX) {
    addr.addr.hi = 0;
    pvVar2 = (void *)(in_RCX + -2);
    ~r0_00.data = pvVar2;
    ~r0_00.tab = in_stack_ffffffffffffffd0;
    addr._8_16_ = in_XMM15;
    net_netip___Addr__UnmarshalBinary(&addr,in_stack_ffffffffffffffb8,~r0_00);
    if (extraout_RAX == 0) {
      uVar1 = *(uint16 *)((int)in_RBX + ((uint)pvVar2 & -((in_RDI - in_RCX) + 2) >> 0x3f));
      (p->ip).addr.hi = addr.addr.hi;
      (p->ip).addr.lo = addr.addr.lo;
      p->port = uVar1;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11 = extraout_RDI;
        extraout_R11[1] = (extraout_R8->ip).z;
        addr.z = extraout_RDI;
        p = extraout_R8;
      }
      (p->ip).z = addr.z;
      return;
    }
    return;
  }
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,in_RBX);
  extraout_RAX_00[1] = 0x15;
  *extraout_RAX_00 = &DAT_008b9a3f;
  return;
}



void net_netip_Prefix_Addr(net_netip_Prefix p,net_netip_Addr ~r0)

{
  return;
}



void net_netip_Prefix_Bits(net_netip_Prefix p,int ~r0)

{
  return;
}



void net_netip_Prefix_IsValid(net_netip_Prefix p,bool ~r0)

{
  return;
}



void net_netip_Prefix_IsSingleIP(net_netip_Prefix p,bool ~r0)

{
  return;
}



void net_netip_ParsePrefix(string s,net_netip_Prefix ~r0,error ~r1)

{
  __uint8 buf;
  __uint8 buf_00;
  __uint8 buf_01;
  __uint8 buf_02;
  __uint8 buf_03;
  __uint8 buf_04;
  string a1;
  error ~r1_00;
  string a1_00;
  string a1_01;
  string a1_02;
  string a1_03;
  net_netip_Addr ~r0_00;
  string s_00;
  string s_01;
  string s_02;
  string s_03;
  string s_04;
  string s_05;
  string a2;
  string a2_00;
  string a2_01;
  string a2_02;
  string a2_03;
  error ~r1_01;
  __uint8 ~r0_01;
  __uint8 ~r0_02;
  __uint8 ~r0_03;
  __uint8 ~r0_04;
  __uint8 ~r0_05;
  __uint8 ~r0_06;
  string ~r0_07;
  string ~r0_08;
  string a3;
  string a3_00;
  string ~r0_09;
  string ~r0_10;
  string ~r0_11;
  uint8 quote;
  uint8 quote_00;
  uint8 quote_01;
  uint8 quote_02;
  uint8 quote_03;
  uint8 quote_04;
  int in_RAX;
  uint8 *ptr;
  undefined8 extraout_RAX;
  undefined8 *extraout_RAX_00;
  undefined8 *extraout_RAX_01;
  int extraout_RAX_02;
  int bits;
  uint8 *ptr_00;
  undefined8 extraout_RAX_03;
  undefined8 *extraout_RAX_04;
  undefined8 *extraout_RAX_05;
  undefined8 *puVar1;
  uint8 *ptr_01;
  uint8 *ptr_02;
  undefined8 extraout_RAX_06;
  undefined8 *extraout_RAX_07;
  undefined8 *extraout_RAX_08;
  uint8 *ptr_03;
  undefined8 extraout_RAX_09;
  undefined8 *extraout_RAX_10;
  undefined8 *extraout_RAX_11;
  uint8 *ptr_04;
  undefined8 extraout_RAX_12;
  undefined8 *extraout_RAX_13;
  undefined8 *extraout_RAX_14;
  internal_intern_Value *extraout_RCX;
  int maxBits;
  uint in_RBX;
  int n;
  void *~r0_12;
  int extraout_RBX;
  int n_00;
  void *~r0_13;
  int n_01;
  int extraout_RBX_00;
  int n_02;
  void *~r0_14;
  int n_03;
  void *~r0_15;
  int n_04;
  void *~r0_16;
  int i_1;
  int i;
  undefined8 extraout_RSI;
  void *in_RDI;
  int extraout_RDI;
  void *~r0_17;
  void *~r0_18;
  void *extraout_RDI_00;
  uint8 bitsPlusOne;
  undefined8 *extraout_R11;
  undefined8 *extraout_R11_00;
  undefined8 *extraout_R11_01;
  undefined8 *extraout_R11_02;
  undefined8 *extraout_R11_03;
  int unaff_R14;
  string in_stack_fffffffffffffe30;
  runtime_itab *in_stack_fffffffffffffe40;
  uint8 *in_stack_fffffffffffffe48;
  internal_intern_Value *in_stack_fffffffffffffe50;
  runtime_itab *in_stack_fffffffffffffe58;
  uint8 *in_stack_fffffffffffffe60;
  int in_stack_fffffffffffffe68;
  uint8 *in_stack_fffffffffffffe70;
  int in_stack_fffffffffffffe78;
  int iVar2;
  void *local_150;
  int local_148;
  int local_140;
  int local_138;
  int local_120;
  uint8 local_118 [32];
  uint8 local_f8 [32];
  uint8 local_d8 [32];
  uint8 local_b8 [32];
  uint8 local_98 [32];
  uint8 local_78 [48];
  undefined8 local_48;
  undefined8 local_40;
  undefined8 local_38;
  undefined8 local_30;
  undefined8 local_28;
  undefined8 local_20;
  int local_18;
  internal_intern_Value *local_10;
  
  while (i = in_RBX, &local_150 <= *(void ***)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI_00;
  }
  do {
    i = i - 1;
    if (i < 0) {
      i = -1;
      break;
    }
    in_RDI = (void *)(uint)*(byte *)(in_RAX + i);
  } while (*(byte *)(in_RAX + i) != 0x2f);
  if (i < 0) {
    local_120 = (int)(in_RBX * 3) / 2;
    runtime_makeslice((internal_abi_Type *)&DAT_00807920,0,local_120,in_RDI);
    buf_04.cap = (int)in_stack_fffffffffffffe40;
    buf_04.array = in_stack_fffffffffffffe30.str;
    buf_04.len = in_stack_fffffffffffffe30.len;
    s_05.len = (int)in_stack_fffffffffffffe50;
    s_05.str = in_stack_fffffffffffffe48;
    ~r0_06.len = (int)in_stack_fffffffffffffe60;
    ~r0_06.array = (uint8 *)in_stack_fffffffffffffe58;
    ~r0_06.cap = in_stack_fffffffffffffe68;
    strconv_appendQuotedWith(buf_04,s_05,quote_04,false,SUB81(local_120,0),~r0_06);
    runtime_slicebytetostring(&local_f8,ptr_04,n_04,in_stack_fffffffffffffe30);
    a1_03.len = (int)in_stack_fffffffffffffe48;
    a1_03.str = (uint8 *)in_stack_fffffffffffffe40;
    a2_03.len = (int)in_stack_fffffffffffffe58;
    a2_03.str = (uint8 *)in_stack_fffffffffffffe50;
    ~r0_09.len = in_stack_fffffffffffffe68;
    ~r0_09.str = in_stack_fffffffffffffe60;
    runtime_concatstring3((runtime_tmpBuf *)0x0,in_stack_fffffffffffffe30,a1_03,a2_03,~r0_09);
    local_150 = ~r0_16;
    local_28 = extraout_RAX_12;
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_16);
    extraout_RAX_13[1] = local_150;
    puVar1 = extraout_RAX_13;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_03 = local_28;
      puVar1 = extraout_RAX_14;
    }
    *puVar1 = local_28;
    return;
  }
  if (in_RBX < (uint)i) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAlen();
  }
  ~r0_00.addr.lo = (uint64)in_stack_fffffffffffffe48;
  ~r0_00.addr.hi = (uint64)in_stack_fffffffffffffe40;
  ~r0_00.z = in_stack_fffffffffffffe50;
  ~r1_01.data = in_stack_fffffffffffffe60;
  ~r1_01.tab = in_stack_fffffffffffffe58;
  net_netip_ParseAddr(in_stack_fffffffffffffe30,~r0_00,~r1_01);
  if (extraout_RDI != 0) {
    local_120 = (int)(void *)(in_RBX * 3) / 2;
    local_148 = extraout_RDI;
    local_20 = extraout_RSI;
    runtime_makeslice((internal_abi_Type *)&DAT_00807920,0,local_120,(void *)(in_RBX * 3));
    buf_03.cap = (int)in_stack_fffffffffffffe40;
    buf_03.array = in_stack_fffffffffffffe30.str;
    buf_03.len = in_stack_fffffffffffffe30.len;
    s_04.len = (int)in_stack_fffffffffffffe50;
    s_04.str = in_stack_fffffffffffffe48;
    ~r0_05.len = (int)in_stack_fffffffffffffe60;
    ~r0_05.array = (uint8 *)in_stack_fffffffffffffe58;
    ~r0_05.cap = in_stack_fffffffffffffe68;
    strconv_appendQuotedWith(buf_03,s_04,quote_03,false,SUB81(local_120,0),~r0_05);
    runtime_slicebytetostring(&local_118,ptr_03,n_03,in_stack_fffffffffffffe30);
    (**(code **)(local_148 + 0x18))(local_20);
    a1_02.len = (int)in_stack_fffffffffffffe48;
    a1_02.str = (uint8 *)in_stack_fffffffffffffe40;
    a2_02.len = (int)in_stack_fffffffffffffe58;
    a2_02.str = (uint8 *)in_stack_fffffffffffffe50;
    a3_00.len = in_stack_fffffffffffffe68;
    a3_00.str = in_stack_fffffffffffffe60;
    ~r0_11.len = in_stack_fffffffffffffe78;
    ~r0_11.str = in_stack_fffffffffffffe70;
    runtime_concatstring4((runtime_tmpBuf *)0x0,in_stack_fffffffffffffe30,a1_02,a2_02,a3_00,~r0_11);
    local_30 = extraout_RAX_09;
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_15);
    extraout_RAX_10[1] = ~r0_15;
    puVar1 = extraout_RAX_10;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_02 = local_30;
      puVar1 = extraout_RAX_11;
    }
    *puVar1 = local_30;
    return;
  }
  if (((net_netip_z0 != extraout_RCX) && (net_netip_z4 != extraout_RCX)) &&
     (net_netip_z6noz != extraout_RCX)) {
    local_120 = (int)(void *)(in_RBX * 3) / 2;
    runtime_makeslice((internal_abi_Type *)&DAT_00807920,0,local_120,(void *)(in_RBX * 3));
    buf.cap = (int)in_stack_fffffffffffffe40;
    buf.array = in_stack_fffffffffffffe30.str;
    buf.len = in_stack_fffffffffffffe30.len;
    s_00.len = (int)in_stack_fffffffffffffe50;
    s_00.str = in_stack_fffffffffffffe48;
    ~r0_01.len = (int)in_stack_fffffffffffffe60;
    ~r0_01.array = (uint8 *)in_stack_fffffffffffffe58;
    ~r0_01.cap = in_stack_fffffffffffffe68;
    strconv_appendQuotedWith(buf,s_00,quote,false,SUB81(local_120,0),~r0_01);
    runtime_slicebytetostring((runtime_tmpBuf *)local_78,ptr,n,in_stack_fffffffffffffe30);
    a1.len = (int)in_stack_fffffffffffffe48;
    a1.str = (uint8 *)in_stack_fffffffffffffe40;
    a2.len = (int)in_stack_fffffffffffffe58;
    a2.str = (uint8 *)in_stack_fffffffffffffe50;
    ~r0_07.len = in_stack_fffffffffffffe68;
    ~r0_07.str = in_stack_fffffffffffffe60;
    runtime_concatstring3((runtime_tmpBuf *)0x0,in_stack_fffffffffffffe30,a1,a2,~r0_07);
    local_38 = extraout_RAX;
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_12);
    extraout_RAX_00[1] = ~r0_12;
    puVar1 = extraout_RAX_00;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11 = local_38;
      puVar1 = extraout_RAX_01;
    }
    *puVar1 = local_38;
    return;
  }
  if (in_RBX < i + 1U) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  local_120 = in_RBX - i;
  local_140 = local_120 + -1;
  local_18 = in_RAX + (i + 1U & -local_140 >> 0x3f);
  ~r1_00.data = in_stack_fffffffffffffe48;
  ~r1_00.tab = in_stack_fffffffffffffe40;
  local_10 = extraout_RCX;
  strconv_Atoi(in_stack_fffffffffffffe30,local_18,~r1_00);
  if (extraout_RBX == 0) {
    if ((local_10 == net_netip_z0) || (net_netip_z4 == local_10)) {
      maxBits = 0x20;
    }
    else {
      maxBits = 0x80;
    }
    if ((-1 < extraout_RAX_02) && (extraout_RAX_02 <= maxBits)) {
      return;
    }
    local_120 = (int)(void *)(in_RBX * 3) / 2;
    runtime_makeslice((internal_abi_Type *)&DAT_00807920,0,local_120,(void *)(in_RBX * 3));
    buf_00.cap = (int)in_stack_fffffffffffffe40;
    buf_00.array = in_stack_fffffffffffffe30.str;
    buf_00.len = in_stack_fffffffffffffe30.len;
    s_01.len = (int)in_stack_fffffffffffffe50;
    s_01.str = in_stack_fffffffffffffe48;
    ~r0_02.len = (int)in_stack_fffffffffffffe60;
    ~r0_02.array = (uint8 *)in_stack_fffffffffffffe58;
    ~r0_02.cap = in_stack_fffffffffffffe68;
    strconv_appendQuotedWith(buf_00,s_01,quote_00,false,SUB81(local_120,0),~r0_02);
    runtime_slicebytetostring(&local_d8,ptr_00,n_00,in_stack_fffffffffffffe30);
    a1_00.len = (int)in_stack_fffffffffffffe48;
    a1_00.str = (uint8 *)in_stack_fffffffffffffe40;
    a2_00.len = (int)in_stack_fffffffffffffe58;
    a2_00.str = (uint8 *)in_stack_fffffffffffffe50;
    ~r0_08.len = in_stack_fffffffffffffe68;
    ~r0_08.str = in_stack_fffffffffffffe60;
    runtime_concatstring3((runtime_tmpBuf *)0x0,in_stack_fffffffffffffe30,a1_00,a2_00,~r0_08);
    local_48 = extraout_RAX_03;
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_13);
    extraout_RAX_04[1] = ~r0_13;
    puVar1 = extraout_RAX_04;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_00 = local_48;
      puVar1 = extraout_RAX_05;
    }
    *puVar1 = local_48;
    return;
  }
  local_138 = (int)(in_RBX * 3) / 2;
  ~r0_17 = (void *)-(local_120 * 3 + -3 >> 0x3f);
  local_120 = (int)~r0_17 + local_120 * 3 + -3 >> 1;
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,0,local_138,~r0_17);
  buf_01.cap = (int)in_stack_fffffffffffffe40;
  buf_01.array = in_stack_fffffffffffffe30.str;
  buf_01.len = in_stack_fffffffffffffe30.len;
  s_02.len = (int)in_stack_fffffffffffffe50;
  s_02.str = in_stack_fffffffffffffe48;
  ~r0_03.len = (int)in_stack_fffffffffffffe60;
  ~r0_03.array = (uint8 *)in_stack_fffffffffffffe58;
  ~r0_03.cap = in_stack_fffffffffffffe68;
  strconv_appendQuotedWith(buf_01,s_02,quote_01,false,SUB81(local_138,0),~r0_03);
  runtime_slicebytetostring(&local_98,ptr_01,n_01,in_stack_fffffffffffffe30);
  iVar2 = extraout_RBX_00;
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,0,local_120,~r0_18);
  buf_02.cap = (int)in_stack_fffffffffffffe40;
  buf_02.array = in_stack_fffffffffffffe30.str;
  buf_02.len = in_stack_fffffffffffffe30.len;
  s_03.len = (int)in_stack_fffffffffffffe50;
  s_03.str = in_stack_fffffffffffffe48;
  ~r0_04.len = (int)in_stack_fffffffffffffe60;
  ~r0_04.array = (uint8 *)in_stack_fffffffffffffe58;
  ~r0_04.cap = in_stack_fffffffffffffe68;
  strconv_appendQuotedWith(buf_02,s_03,quote_02,false,SUB81(local_120,0),~r0_04);
  runtime_slicebytetostring(&local_b8,ptr_02,n_02,in_stack_fffffffffffffe30);
  a1_01.len = (int)in_stack_fffffffffffffe48;
  a1_01.str = (uint8 *)in_stack_fffffffffffffe40;
  a2_01.len = (int)in_stack_fffffffffffffe58;
  a2_01.str = (uint8 *)in_stack_fffffffffffffe50;
  a3.len = in_stack_fffffffffffffe68;
  a3.str = in_stack_fffffffffffffe60;
  ~r0_10.len = iVar2;
  ~r0_10.str = in_stack_fffffffffffffe70;
  runtime_concatstring4((runtime_tmpBuf *)0x0,in_stack_fffffffffffffe30,a1_01,a2_01,a3,~r0_10);
  local_40 = extraout_RAX_06;
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_14);
  extraout_RAX_07[1] = ~r0_14;
  puVar1 = extraout_RAX_07;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11_01 = local_40;
    puVar1 = extraout_RAX_08;
  }
  *puVar1 = local_40;
  return;
}


/*
Unable to decompile 'net/netip.Prefix.Masked'
Cause: 
Low-level Error: Overlapping input varnodes
*/


void net_netip_Prefix_Contains(net_netip_Prefix p,net_netip_Addr ip,bool ~r0)

{
  internal_intern_Value *in_RCX;
  int f1;
  int f2;
  byte in_DIL;
  internal_intern_Value *in_R9;
  
  if ((in_DIL == 0) ||
     (((in_R9 != net_netip_z0 && (net_netip_z4 != in_R9)) && (net_netip_z6noz != in_R9)))) {
    return;
  }
  if (in_RCX == net_netip_z0) {
    f1 = 0;
  }
  else if (net_netip_z4 == in_RCX) {
    f1 = 0x20;
  }
  else {
    f1 = 0x80;
  }
  if (in_R9 == net_netip_z0) {
    f2 = 0;
  }
  else if (net_netip_z4 == in_R9) {
    f2 = 0x20;
  }
  else {
    f2 = 0x80;
  }
  if (((f1 != 0) && (f2 != 0)) && (f1 == f2)) {
    if (net_netip_z4 == in_R9) {
      return;
    }
    if ((-1 < (int)(in_DIL - 1)) && ((int)(in_DIL - 0x81) < 1)) {
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicshift();
  }
  return;
}



void net_netip_Prefix_Overlaps(net_netip_Prefix p,net_netip_Prefix o,bool ~r0)

{
  net_netip_Prefix ~r0_00;
  net_netip_Prefix ~r0_01;
  error ~r1;
  error ~r1_00;
  undefined7 in_register_00000001;
  internal_intern_Value *extraout_RAX;
  internal_intern_Value *in_RCX;
  int minBits;
  void *in_RBX;
  undefined8 extraout_RBX;
  runtime_itab *in_RSI;
  int extraout_RSI;
  int extraout_RSI_00;
  byte in_DIL;
  int ob;
  uint64 uVar1;
  void *in_R8;
  internal_intern_Value *in_R9;
  byte in_R10B;
  int unaff_R14;
  net_netip_Addr in_stack_ffffffffffffffa0;
  uint64 in_stack_ffffffffffffffb8;
  internal_intern_Value *in_stack_ffffffffffffffc8;
  undefined8 in_stack_ffffffffffffffd0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((in_DIL == 0) || (in_R10B == 0)) {
    return;
  }
  if (((((runtime_itab *)CONCAT71(in_register_00000001,~r0) == in_RSI) && (in_RBX == in_R8)) &&
      (in_RCX == in_R9)) && (in_DIL == in_R10B)) {
    return;
  }
  if ((in_R9 == net_netip_z4) != (in_RCX == net_netip_z4)) {
    return;
  }
  uVar1 = in_R10B - 1;
  if ((int)(in_DIL - 1) < (int)(in_R10B - 1)) {
    uVar1 = in_DIL - 1;
  }
  if (uVar1 == 0) {
    return;
  }
  ~r0_00.ip.addr.lo = uVar1;
  ~r0_00.ip.addr.hi = in_stack_ffffffffffffffb8;
  ~r0_00.ip.z = in_stack_ffffffffffffffc8;
  ~r0_00._24_8_ = in_stack_ffffffffffffffd0;
  ~r1.data = in_R8;
  ~r1.tab = in_RSI;
  net_netip_Addr_Prefix
            (in_stack_ffffffffffffffa0,(int)(runtime_itab *)CONCAT71(in_register_00000001,~r0),
             ~r0_00,~r1);
  if (extraout_RSI != 0) {
    return;
  }
  ~r0_01.ip.addr.lo = uVar1;
  ~r0_01.ip.addr.hi = in_stack_ffffffffffffffb8;
  ~r0_01.ip.z = extraout_RAX;
  ~r0_01._24_8_ = extraout_RBX;
  ~r1_00.data = in_R8;
  ~r1_00.tab = in_RSI;
  net_netip_Addr_Prefix(in_stack_ffffffffffffffa0,(int)in_RSI,~r0_01,~r1_00);
  if (extraout_RSI_00 != 0) {
    return;
  }
  return;
}



void net_netip_Prefix_AppendTo(net_netip_Prefix p,__uint8 b,__uint8 ~r0)

{
  __uint8 ~r0_00;
  __uint8 ~r0_01;
  __uint8 ~r0_02;
  int in_RAX;
  void *extraout_RAX;
  void *extraout_RAX_00;
  void *extraout_RAX_01;
  void *extraout_RAX_02;
  void *extraout_RAX_03;
  void *extraout_RAX_04;
  void *extraout_RAX_05;
  void *extraout_RAX_06;
  void *oldPtr;
  void *extraout_RAX_07;
  internal_intern_Value *in_RCX;
  uint extraout_RCX;
  uint extraout_RCX_00;
  uint extraout_RCX_01;
  uint extraout_RCX_02;
  uint extraout_RCX_03;
  uint extraout_RCX_04;
  uint oldCap;
  dword dVar1;
  uint uVar2;
  uint in_RBX;
  int extraout_RBX;
  int extraout_RBX_00;
  int extraout_RBX_01;
  uint uVar3;
  uint extraout_RBX_02;
  uint extraout_RBX_03;
  uint extraout_RBX_04;
  uint extraout_RBX_05;
  void *in_RSI;
  byte in_DIL;
  char cVar5;
  int in_R8;
  uint in_R9;
  int unaff_R14;
  runtime_slice in_stack_ffffffffffffff98;
  __uint8 in_stack_ffffffffffffffb0;
  undefined in_stack_ffffffffffffffc8 [23];
  int iVar4;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((((in_RAX == 0) && (in_RBX == 0)) && (in_RCX == (internal_intern_Value *)0x0)) &&
     (in_DIL == 0)) {
    return;
  }
  if (in_DIL == 0) {
    if (in_R9 < in_R8 + 0xeU) {
      runtime_growslice(in_RSI,in_R8 + 0xeU,in_R9,0xe,(internal_abi_Type *)&DAT_00807920,
                        in_stack_ffffffffffffff98);
      in_RSI = extraout_RAX_07;
    }
    *(undefined8 *)((int)in_RSI + in_R8) = 0x2064696c61766e69;
    *(undefined8 *)((int)in_RSI + in_R8 + 6) = 0x7869666572502064;
    return;
  }
  if (net_netip_z4 == in_RCX) {
    ~r0_02.cap._7_1_ = in_DIL;
    ~r0_02._0_23_ = in_stack_ffffffffffffffc8;
    net_netip_Addr_appendTo4
              ((net_netip_Addr)in_stack_ffffffffffffff98,in_stack_ffffffffffffffb0,~r0_02);
    oldPtr = extraout_RAX_02;
    oldCap = extraout_RCX_01;
    iVar4 = extraout_RBX_01;
  }
  else if (((net_netip_z0 == in_RCX) || (in_RAX != 0)) || (in_RBX >> 0x20 != 0xffff)) {
    ~r0_01.cap._7_1_ = in_DIL;
    ~r0_01._0_23_ = in_stack_ffffffffffffffc8;
    net_netip_Addr_appendTo6
              ((net_netip_Addr)in_stack_ffffffffffffff98,in_stack_ffffffffffffffb0,~r0_01);
    oldPtr = extraout_RAX_01;
    oldCap = extraout_RCX_00;
    iVar4 = extraout_RBX_00;
  }
  else {
    if (in_R9 < in_R8 + 7U) {
      runtime_growslice(in_RSI,in_R8 + 7U,in_R9,7,(internal_abi_Type *)&DAT_00807920,
                        in_stack_ffffffffffffff98);
      in_RSI = extraout_RAX;
    }
    *(undefined4 *)((int)in_RSI + in_R8) = 0x66663a3a;
    *(undefined4 *)((int)in_RSI + in_R8 + 3) = 0x3a666666;
    ~r0_00.cap._7_1_ = in_DIL;
    ~r0_00._0_23_ = in_stack_ffffffffffffffc8;
    net_netip_Addr_appendTo4
              ((net_netip_Addr)in_stack_ffffffffffffff98,in_stack_ffffffffffffffb0,~r0_00);
    oldPtr = extraout_RAX_00;
    oldCap = extraout_RCX;
    iVar4 = extraout_RBX;
  }
  uVar3 = iVar4 + 1;
  if (oldCap < uVar3) {
    runtime_growslice(oldPtr,uVar3,oldCap,1,(internal_abi_Type *)&DAT_00807920,
                      in_stack_ffffffffffffff98);
    oldPtr = extraout_RAX_03;
    oldCap = extraout_RCX_02;
    uVar3 = extraout_RBX_02;
  }
  *(undefined *)((uVar3 - 1) + (int)oldPtr) = 0x2f;
  dVar1 = in_DIL - 1;
  if (99 < (byte)dVar1) {
    uVar2 = (uint)((dVar1 & 0xff) / 100);
    if (0xf < uVar2) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    uVar3 = uVar3 + 1;
    cVar5 = "goal , cons/mark  maxTrigger= pages/byte\n s.sweepgen= allocCount end tracegc\ntimer_deletens} value: {}, want {r1= [recovered]bad recoverybad g statusentersyscallwirep: p->m=) p->status=releasep: m= sysmonwait= preemptoff=cas64 failedGOTRACEBACK= m->gsignal=-byte limit\nruntime: sp=abi mismatchillegal seekinvalid slothost is downnot pollable<unknown:%d>Sfixed32KindSfixed64Kindmessage_typejava_packageoptimize_forswift_prefixruby_packagedebug_redactdouble_valuestring_valueverificationis_extension has no name has no typereflect.CopyOUT_OF_RANGENormalSocketgrpc-messageContent-Typegrpc-timeoutGrpc-MessageAddr: \'%s\', Cookie.Valuemax-forwardshttp2debug=1http2debug=2status code Multi-StatusNot ModifiedUnauthorizedI\'m a teapotNot ExtendedPUSH_PROMISECONTINUATION152587890625762939453125Cypro_MinoanMeetei_MayekPahawh_HmongSora_SompengSyloti_NagriRCodeSuccessRCodeRefusedprotobuf_keyprotobuf_val (sensitive)grpc_config=ECDSA-SHA256ECDSA-SHA384ECDSA-SHA512SSL_CERT_DIRTYPE_UNKNOWNempty objectMime-VersionX-ImforwardsX-Powered-By/dev/urandomautocompleteFieldNumbersSERIALNUMBERinvalid baseInstAltMatchunexpected )altmatch -> anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen..." /* TRUNCATED STRING LITERAL */
            [uVar2 + 0x1f44];
