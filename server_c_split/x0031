void internal_abi___MapType__FieldAlign(int ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___MapType__FuncType(internal_abi_FuncType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___MapType__GcSlice(uintptr begin,uintptr end,__uint8 ~r0)

{
  __uint8 **pp_Var1;
  uint in_RCX;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = (uint8 *)begin;
    ~r0.len = end;
    ~r0.cap = in_RCX;
    runtime_morestack_noctxt();
    begin = (uintptr)~r0.array;
    in_RCX = ~r0.cap;
    end = ~r0.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffe8;
  }
  if ((int)in_RCX < 0) {
                    // WARNING: Subroutine does not return
    runtime_panicunsafeslicelen();
  }
  if ((uint)-*(int *)(begin + 0x20) < in_RCX) {
    if (*(int *)(begin + 0x20) != 0) {
                    // WARNING: Subroutine does not return
      runtime_panicunsafeslicelen();
    }
                    // WARNING: Subroutine does not return
    runtime_panicunsafeslicenilptr();
  }
  if (end <= in_RCX) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceBU();
}



void internal_abi___MapType__HasName(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___MapType__IfaceIndir(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___MapType__InterfaceType(internal_abi_InterfaceType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___MapType__IsDirectIface(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___MapType__Kind(internal_abi_Kind ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___MapType__Len(int ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___MapType__MapType(internal_abi_MapType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___MapType__NumMethod(int ~r0)

{
  int *piVar1;
  int in_RBX;
  int extraout_RBX;
  int unaff_R14;
  internal_abi_Type *in_stack_00000008;
  undefined auStack_10 [8];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = (internal_abi_Type *)~r0;
    runtime_morestack_noctxt();
    ~r0 = (int)in_stack_00000008;
    in_RBX = extraout_RBX;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((internal_abi_Type **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  internal_abi___Type__NumMethod((internal_abi_Type *)~r0,in_RBX);
  return;
}



void internal_abi___MapType__Pointers(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___MapType__Size(uintptr ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___MapType__StructType(internal_abi_StructType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___MapType__Uncommon(internal_abi_UncommonType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  if ((*(byte *)&~r0[1].Mcount & 1) != 0) {
    switch(*(byte *)((int)&~r0[1].Xcount + 1) & 0x1f) {
    case 0x11:
      break;
    case 0x12:
      break;
    case 0x13:
      break;
    case 0x14:
      break;
    case 0x15:
      break;
    case 0x16:
      break;
    case 0x17:
      break;
    case 0x19:
    }
  }
  return;
}



void internal_abi___ArrayType__Align(int ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___ArrayType__ArrayType(internal_abi_ArrayType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___ArrayType__ChanDir(internal_abi_ChanDir ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___ArrayType__Common(internal_abi_Type *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void internal_abi___ArrayType__ExportedMethods(__internal_abi_Method ~r0)

{
  __internal_abi_Method **pp_Var1;
  __internal_abi_Method ~r0_00;
  internal_abi_Type *in_RAX;
  undefined8 unaff_RBP;
  int unaff_R14;
  int unaff_retaddr;
  internal_abi_Method *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = (internal_abi_Method *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (internal_abi_Type *)~r0.array;
  }
  pp_Var1 = *(__internal_abi_Method ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__internal_abi_Method **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__internal_abi_Method *)&stack0xfffffffffffffff0;
  }
  ~r0_00.len = unaff_RBP;
  ~r0_00.array = in_stack_fffffffffffffff0;
  ~r0_00.cap = unaff_retaddr;
  internal_abi___Type__ExportedMethods(in_RAX,~r0_00);
  return;
}



void internal_abi___ArrayType__FieldAlign(int ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___ArrayType__FuncType(internal_abi_FuncType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___ArrayType__GcSlice(uintptr begin,uintptr end,__uint8 ~r0)

{
  __uint8 **pp_Var1;
  uint in_RCX;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = (uint8 *)begin;
    ~r0.len = end;
    ~r0.cap = in_RCX;
    runtime_morestack_noctxt();
    begin = (uintptr)~r0.array;
    in_RCX = ~r0.cap;
    end = ~r0.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffe8;
  }
  if ((int)in_RCX < 0) {
                    // WARNING: Subroutine does not return
    runtime_panicunsafeslicelen();
  }
  if ((uint)-*(int *)(begin + 0x20) < in_RCX) {
    if (*(int *)(begin + 0x20) != 0) {
                    // WARNING: Subroutine does not return
      runtime_panicunsafeslicelen();
    }
                    // WARNING: Subroutine does not return
    runtime_panicunsafeslicenilptr();
  }
  if (end <= in_RCX) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceBU();
}



void internal_abi___ArrayType__HasName(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___ArrayType__IfaceIndir(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___ArrayType__InterfaceType(internal_abi_InterfaceType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___ArrayType__IsDirectIface(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___ArrayType__Key(internal_abi_Type *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___ArrayType__Kind(internal_abi_Kind ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___ArrayType__MapType(internal_abi_MapType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___ArrayType__NumMethod(int ~r0)

{
  int *piVar1;
  int in_RBX;
  int extraout_RBX;
  int unaff_R14;
  internal_abi_Type *in_stack_00000008;
  undefined auStack_10 [8];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = (internal_abi_Type *)~r0;
    runtime_morestack_noctxt();
    ~r0 = (int)in_stack_00000008;
    in_RBX = extraout_RBX;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((internal_abi_Type **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  internal_abi___Type__NumMethod((internal_abi_Type *)~r0,in_RBX);
  return;
}



void internal_abi___ArrayType__Pointers(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___ArrayType__Size(uintptr ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___ArrayType__StructType(internal_abi_StructType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___ArrayType__Uncommon(internal_abi_UncommonType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  if ((*(byte *)&~r0[1].Mcount & 1) != 0) {
    switch(*(byte *)((int)&~r0[1].Xcount + 1) & 0x1f) {
    case 0x11:
      break;
    case 0x12:
      break;
    case 0x13:
      break;
    case 0x14:
      break;
    case 0x15:
      break;
    case 0x16:
      break;
    case 0x17:
      break;
    case 0x19:
    }
  }
  return;
}



void internal_abi___FuncType__Align(int ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__ArrayType(internal_abi_ArrayType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__ChanDir(internal_abi_ChanDir ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__Common(internal_abi_Type *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__Elem(internal_abi_Type *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void internal_abi___FuncType__ExportedMethods(__internal_abi_Method ~r0)

{
  __internal_abi_Method **pp_Var1;
  __internal_abi_Method ~r0_00;
  internal_abi_Type *in_RAX;
  undefined8 unaff_RBP;
  int unaff_R14;
  int unaff_retaddr;
  internal_abi_Method *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = (internal_abi_Method *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (internal_abi_Type *)~r0.array;
  }
  pp_Var1 = *(__internal_abi_Method ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__internal_abi_Method **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__internal_abi_Method *)&stack0xfffffffffffffff0;
  }
  ~r0_00.len = unaff_RBP;
  ~r0_00.array = in_stack_fffffffffffffff0;
  ~r0_00.cap = unaff_retaddr;
  internal_abi___Type__ExportedMethods(in_RAX,~r0_00);
  return;
}



void internal_abi___FuncType__FieldAlign(int ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__FuncType(internal_abi_FuncType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__GcSlice(uintptr begin,uintptr end,__uint8 ~r0)

{
  __uint8 **pp_Var1;
  uint in_RCX;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = (uint8 *)begin;
    ~r0.len = end;
    ~r0.cap = in_RCX;
    runtime_morestack_noctxt();
    begin = (uintptr)~r0.array;
    in_RCX = ~r0.cap;
    end = ~r0.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffe8;
  }
  if ((int)in_RCX < 0) {
                    // WARNING: Subroutine does not return
    runtime_panicunsafeslicelen();
  }
  if ((uint)-*(int *)(begin + 0x20) < in_RCX) {
    if (*(int *)(begin + 0x20) != 0) {
                    // WARNING: Subroutine does not return
      runtime_panicunsafeslicelen();
    }
                    // WARNING: Subroutine does not return
    runtime_panicunsafeslicenilptr();
  }
  if (end <= in_RCX) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceBU();
}



void internal_abi___FuncType__HasName(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__IfaceIndir(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__InterfaceType(internal_abi_InterfaceType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__IsDirectIface(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__Key(internal_abi_Type *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__Kind(internal_abi_Kind ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__Len(int ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__MapType(internal_abi_MapType *~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__NumMethod(int ~r0)

{
  int *piVar1;
  int in_RBX;
  int extraout_RBX;
  int unaff_R14;
  internal_abi_Type *in_stack_00000008;
  undefined auStack_10 [8];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = (internal_abi_Type *)~r0;
    runtime_morestack_noctxt();
    ~r0 = (int)in_stack_00000008;
    in_RBX = extraout_RBX;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((internal_abi_Type **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  internal_abi___Type__NumMethod((internal_abi_Type *)~r0,in_RBX);
  return;
}



void internal_abi___FuncType__Pointers(bool ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



void internal_abi___FuncType__Size(uintptr ~r0)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
