
typedef struct google.golang.org/grpc.MethodDesc google.golang.org/grpc.MethodDesc, *Pgoogle.golang.org/grpc.MethodDesc;

struct google.golang.org/grpc.MethodDesc {
    struct string MethodName;
    void (**Handler)(interface_{}, context.Context, void (**)(interface_{}, error *), void (**)(context.Context, interface_{}, struct google.golang.org/grpc.UnaryServerInfo *, void (**)(context.Context, interface_{}, interface_{} *, error *), interface_{} *, error *), interface_{} *, error *);
};

struct google.golang.org/grpc.StreamServerInfo {
    struct string FullMethod;
    bool IsClientStream;
    bool IsServerStream;
};

struct waitq<func()> {
    struct sudog<func()> *first;
    struct sudog<func()> *last;
};

struct hash<string,*google.golang.org/grpc.StreamDesc> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,*google.golang.org/grpc.StreamDesc> *buckets;
    struct bucket<string,*google.golang.org/grpc.StreamDesc> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<string,*google.golang.org/grpc.StreamDesc> {
    uint8 tophash[8];
    struct string keys[8];
    struct google.golang.org/grpc.StreamDesc *values[8];
    struct bucket<string,*google.golang.org/grpc.StreamDesc> *overflow;
};

struct sync/atomic.Uint64 {
    struct sync/atomic.align64 _;
    struct sync/atomic.noCopy _;
    uint64 v;
};

struct google.golang.org/grpc.payloadInfo {
    int compressedLength;
    struct []uint8 uncompressedBytes;
};

struct bucket<string,map[google.golang.org/grpc/internal/transport.ServerTransport]bool> {
    uint8 tophash[8];
    struct string keys[8];
    map[google.golang.org/grpc/internal/transport.ServerTransport]bool values[8];
    struct bucket<string,map[google.golang.org/grpc/internal/transport.ServerTransport]bool> *overflow;
};

struct hchan<func()> {
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<func()> recvq;
    struct waitq<func()> sendq;
    struct runtime.mutex lock;
};

struct hash<net.Listener,bool> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<net.Listener,bool> *buckets;
    struct bucket<net.Listener,bool> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<string,*google.golang.org/grpc.serviceInfo> {
    uint8 tophash[8];
    struct string keys[8];
    struct google.golang.org/grpc.serviceInfo *values[8];
    struct bucket<string,*google.golang.org/grpc.serviceInfo> *overflow;
};

struct []google.golang.org/grpc.StreamServerInterceptor {
    void (***array)(interface_{}, google.golang.org/grpc.ServerStream, struct google.golang.org/grpc.StreamServerInfo *, void (**)(interface_{}, google.golang.org/grpc.ServerStream, error *), error *);
    int len;
    int cap;
};

struct bucket<string,*google.golang.org/grpc.MethodDesc> {
    uint8 tophash[8];
    struct string keys[8];
    struct google.golang.org/grpc.MethodDesc *values[8];
    struct bucket<string,*google.golang.org/grpc.MethodDesc> *overflow;
};

struct []google.golang.org/grpc.UnaryServerInterceptor {
    void (***array)(context.Context, interface_{}, struct google.golang.org/grpc.UnaryServerInfo *, void (**)(context.Context, interface_{}, interface_{} *, error *), interface_{} *, error *);
    int len;
    int cap;
};

struct bucket<net.Listener,bool> {
    uint8 tophash[8];
    net.Listener keys[8];
    bool values[8];
    struct bucket<net.Listener,bool> *overflow;
};

struct hash<string,*google.golang.org/grpc.MethodDesc> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,*google.golang.org/grpc.MethodDesc> *buckets;
    struct bucket<string,*google.golang.org/grpc.MethodDesc> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct noalg.struct_{_F_uintptr;_X0_func();_X1_*google.golang.org/grpc.Server;_X2_*google.golang.org/grpc/internal/transport.Stream;_X3_[]uint8;_X4_[]google.golang.org/grpc/stats.Handler;_X5_*context.Context;_X6_*google.golang.org/grpc.payloadInfo;_X7_[]google.golang.org/grpc/internal/binarylog.MethodLogger;_X8_*google.golang.org/grpc.traceInfo_} { // Original name: noalg.struct { F uintptr; X0 func(); X1 *google.golang.org/grpc.Server; X2 *google.golang.org/grpc/internal/transport.Stream; X3 []uint8; X4 []google.golang.org/grpc/stats.Handler; X5 *context.Context; X6 *google.golang.org/grpc.payloadInfo; X7 []google.golang.org/grpc/internal/binarylog.MethodLogger; X8 *google.golang.org/grpc.traceInfo }
    uintptr F;
    void (**X0)(void);
    struct google.golang.org/grpc.Server *X1;
    struct google.golang.org/grpc/internal/transport.Stream *X2;
    struct []uint8 X3;
    struct []google.golang.org/grpc/stats.Handler X4;
    context.Context *X5;
    struct google.golang.org/grpc.payloadInfo *X6;
    struct []google.golang.org/grpc/internal/binarylog.MethodLogger X7;
    struct google.golang.org/grpc.traceInfo *X8;
};

struct sync.WaitGroup {
    struct sync.noCopy noCopy;
    struct sync/atomic.Uint64 state;
    uint32 sema;
};

struct sudog<func()> {
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    void (***elem)(void);
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

struct google.golang.org/grpc.serviceInfo {
    interface_{} serviceImpl;
    map[string]*google.golang.org/grpc.MethodDesc methods;
    map[string]*google.golang.org/grpc.StreamDesc streams;
    interface_{} mdata;
};

struct hash<google.golang.org/grpc/internal/transport.ServerTransport,bool> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/grpc/internal/transport.ServerTransport,bool> *buckets;
    struct bucket<google.golang.org/grpc/internal/transport.ServerTransport,bool> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct google.golang.org/grpc.serverOptions {
    google.golang.org/grpc/credentials.TransportCredentials creds;
    google.golang.org/grpc.baseCodec codec;
    google.golang.org/grpc.Compressor cp;
    google.golang.org/grpc.Decompressor dc;
    void (**unaryInt)(context.Context, interface_{}, struct google.golang.org/grpc.UnaryServerInfo *, void (**)(context.Context, interface_{}, interface_{} *, error *), interface_{} *, error *);
    void (**streamInt)(interface_{}, google.golang.org/grpc.ServerStream, struct google.golang.org/grpc.StreamServerInfo *, void (**)(interface_{}, google.golang.org/grpc.ServerStream, error *), error *);
    struct []google.golang.org/grpc.UnaryServerInterceptor chainUnaryInts;
    struct []google.golang.org/grpc.StreamServerInterceptor chainStreamInts;
    google.golang.org/grpc/internal/binarylog.Logger binaryLogger;
    void (**inTapHandle)(context.Context, struct google.golang.org/grpc/tap.Info *, context.Context *, error *);
    struct []google.golang.org/grpc/stats.Handler statsHandlers;
    uint32 maxConcurrentStreams;
    int maxReceiveMessageSize;
    int maxSendMessageSize;
    struct google.golang.org/grpc.StreamDesc *unknownStreamDesc;
    struct google.golang.org/grpc/keepalive.ServerParameters keepaliveParams;
    struct google.golang.org/grpc/keepalive.EnforcementPolicy keepalivePolicy;
    int32 initialWindowSize;
    int32 initialConnWindowSize;
    int writeBufferSize;
    int readBufferSize;
    bool sharedWriteBuffer;
    time.Duration connectionTimeout;
    uint32 *maxHeaderListSize;
    uint32 *headerTableSize;
    uint32 numServerWorkers;
    google.golang.org/grpc.SharedBufferPool recvBufferPool;
    bool waitForHandlers;
};

struct google.golang.org/grpc.Server {
    struct google.golang.org/grpc.serverOptions opts;
    struct sync.Mutex mu;
    map[net.Listener]bool lis;
    map[string]map[google.golang.org/grpc/internal/transport.ServerTransport]bool conns;
    bool serve;
    bool drain;
    struct sync.Cond *cv;
    map[string]*google.golang.org/grpc.serviceInfo services;
    google.golang.org/grpc.traceEventLog events;
    struct google.golang.org/grpc/internal/grpcsync.Event *quit;
    struct google.golang.org/grpc/internal/grpcsync.Event *done;
    struct sync.Once channelzRemoveOnce;
    struct sync.WaitGroup serveWG;
    struct sync.WaitGroup handlersWG;
    struct google.golang.org/grpc/internal/channelz.Server *channelz;
    chan_func() serverWorkerChannel;
    void (**serverWorkerChannelClose)(void);
};

struct hash<string,*google.golang.org/grpc.serviceInfo> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,*google.golang.org/grpc.serviceInfo> *buckets;
    struct bucket<string,*google.golang.org/grpc.serviceInfo> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct hash<string,map[google.golang.org/grpc/internal/transport.ServerTransport]bool> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,map[google.golang.org/grpc/internal/transport.ServerTransport]bool> *buckets;
    struct bucket<string,map[google.golang.org/grpc/internal/transport.ServerTransport]bool> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.clientStream;_X1_[]uint8;_X2_[]uint8;_X3_func(*google.golang.org/grpc.csAttempt)_error_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.clientStream;_X1_[]uint8;_X2_[]uint8;_X3_func(*google.golang.org/grpc.csAttempt)_error_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.clientStream;_X1_[]uint8;_X2_[]uint8;_X3_func(*google.golang.org/grpc.csAttempt)_error_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.clientStream;_X1_[]uint8;_X2_[]uint8;_X3_func(*google.golang.org/grpc.csAttempt)_error_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc.clientStream; X1 []uint8; X2 []uint8; X3 func(*google.golang.org/grpc.csAttempt) error }
    uintptr F;
    struct google.golang.org/grpc.clientStream *X0;
    struct []uint8 X1;
    struct []uint8 X2;
    void (**X3)(struct google.golang.org/grpc.csAttempt *, error *);
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.FileImports;

typedef struct crypto/ecdh.PrivateKey crypto/ecdh.PrivateKey, *Pcrypto/ecdh.PrivateKey;

typedef struct runtime.iface crypto/ecdh.Curve;

typedef struct crypto/internal/boring.PrivateKeyECDH crypto/internal/boring.PrivateKeyECDH, *Pcrypto/internal/boring.PrivateKeyECDH;

typedef struct crypto/ecdh.PublicKey crypto/ecdh.PublicKey, *Pcrypto/ecdh.PublicKey;

typedef struct crypto/internal/boring.PublicKeyECDH crypto/internal/boring.PublicKeyECDH, *Pcrypto/internal/boring.PublicKeyECDH;

struct crypto/internal/boring.PrivateKeyECDH {
};

struct crypto/ecdh.PrivateKey {
    crypto/ecdh.Curve curve;
    struct []uint8 privateKey;
    struct crypto/internal/boring.PrivateKeyECDH *boring;
    struct crypto/ecdh.PublicKey *publicKey;
    struct sync.Once publicKeyOnce;
};

struct crypto/ecdh.PublicKey {
    crypto/ecdh.Curve curve;
    struct []uint8 publicKey;
    struct crypto/internal/boring.PublicKeyECDH *boring;
};

struct crypto/internal/boring.PublicKeyECDH {
};

typedef struct []map[string]encoding/json.RawMessage []map[string]encoding/json.RawMessage, *P[]map[string]encoding/json.RawMessage;

typedef struct hash<string,encoding/json.RawMessage> *map[string]encoding/json.RawMessage;

struct []map[string]encoding/json.RawMessage {
    map[string]encoding/json.RawMessage *array;
    int len;
    int cap;
};

typedef struct runtime.errorString runtime.errorString, *Pruntime.errorString;

struct runtime.errorString {
    uint8 *str;
    int len;
};

typedef struct hchan<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> hchan<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1>, *Phchan<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1>;

typedef struct waitq<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> waitq<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1>, *Pwaitq<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1>;

typedef struct sudog<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> sudog<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1>, *Psudog<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1>;

typedef struct net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1 net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1, *Pnet.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1;

struct net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1 { // Original name: net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource]·1
    struct go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource res;
    error err;
};

struct waitq<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> { // Original name: waitq<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource]·1>
    struct sudog<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> *first;
    struct sudog<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> *last;
};

struct sudog<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> { // Original name: sudog<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource]·1>
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    struct net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1 *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

struct hchan<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> { // Original name: hchan<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource]·1>
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> recvq;
    struct waitq<net.result[go.shape.[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> sendq;
    struct runtime.mutex lock;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*runtime.traceStackTable;_X1_*uint32;_X2_[]uintptr;_X3_uintptr_} noalg.struct_{_F_uintptr;_X0_*runtime.traceStackTable;_X1_*uint32;_X2_[]uintptr;_X3_uintptr_}, *Pnoalg.struct_{_F_uintptr;_X0_*runtime.traceStackTable;_X1_*uint32;_X2_[]uintptr;_X3_uintptr_};

typedef struct runtime.traceStackTable runtime.traceStackTable, *Pruntime.traceStackTable;

struct noalg.struct_{_F_uintptr;_X0_*runtime.traceStackTable;_X1_*uint32;_X2_[]uintptr;_X3_uintptr_} { // Original name: noalg.struct { F uintptr; X0 *runtime.traceStackTable; X1 *uint32; X2 []uintptr; X3 uintptr }
    uintptr F;
    struct runtime.traceStackTable *X0;
    uint32 *X1;
    struct []uintptr X2;
    uintptr X3;
};

struct runtime.traceStackTable {
    struct runtime.mutex lock;
    uint32 seq;
    struct runtime.traceAlloc mem;
    runtime.traceStackPtr tab[8192];
};

typedef struct []runtime.StackRecord []runtime.StackRecord, *P[]runtime.StackRecord;

typedef struct runtime.StackRecord runtime.StackRecord, *Pruntime.StackRecord;

struct []runtime.StackRecord {
    struct runtime.StackRecord *array;
    int len;
    int cap;
};

struct runtime.StackRecord {
    uintptr Stack0[32];
};

typedef struct hchan<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> hchan<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1>, *Phchan<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1>;

typedef struct waitq<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> waitq<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1>, *Pwaitq<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1>;

typedef struct sudog<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> sudog<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1>, *Psudog<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1>;

typedef struct net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1 net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1, *Pnet.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1;

typedef struct []vendor/golang.org/x/net/dns/dnsmessage.Resource []vendor/golang.org/x/net/dns/dnsmessage.Resource, *P[]vendor/golang.org/x/net/dns/dnsmessage.Resource;

struct waitq<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> { // Original name: waitq<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource]·1>
    struct sudog<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> *first;
    struct sudog<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> *last;
};

struct hchan<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> { // Original name: hchan<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource]·1>
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> recvq;
    struct waitq<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> sendq;
    struct runtime.mutex lock;
};

struct []vendor/golang.org/x/net/dns/dnsmessage.Resource {
    struct vendor/golang.org/x/net/dns/dnsmessage.Resource *array;
    int len;
    int cap;
};

struct net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1 { // Original name: net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource]·1
    struct []vendor/golang.org/x/net/dns/dnsmessage.Resource res;
    error err;
};

struct sudog<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1> { // Original name: sudog<net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource]·1>
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    struct net.result[[]vendor/golang.org/x/net/dns/dnsmessage.Resource].1 *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

typedef struct runtime.specialsIter runtime.specialsIter, *Pruntime.specialsIter;

struct runtime.specialsIter {
    struct runtime.special **pprev;
    struct runtime.special *s;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*struct_{_sync.Once;_crypto/x509.v_*crypto/x509.Certificate_};_X1_*[]uint8_} noalg.struct_{_F_uintptr;_X0_*struct_{_sync.Once;_crypto/x509.v_*crypto/x509.Certificate_};_X1_*[]uint8_}, *Pnoalg.struct_{_F_uintptr;_X0_*struct_{_sync.Once;_crypto/x509.v_*crypto/x509.Certificate_};_X1_*[]uint8_};

typedef struct struct_{_sync.Once;_crypto/x509.v_*crypto/x509.Certificate_} struct_{_sync.Once;_crypto/x509.v_*crypto/x509.Certificate_}, *Pstruct_{_sync.Once;_crypto/x509.v_*crypto/x509.Certificate_};

struct noalg.struct_{_F_uintptr;_X0_*struct_{_sync.Once;_crypto/x509.v_*crypto/x509.Certificate_};_X1_*[]uint8_} { // Original name: noalg.struct { F uintptr; X0 *struct { sync.Once; crypto/x509.v *crypto/x509.Certificate }; X1 *[]uint8 }
    uintptr F;
    struct struct_{_sync.Once;_crypto/x509.v_*crypto/x509.Certificate_} *X0;
    struct []uint8 *X1;
};

struct struct_{_sync.Once;_crypto/x509.v_*crypto/x509.Certificate_} { // Original name: struct { sync.Once; crypto/x509.v *crypto/x509.Certificate }
    struct sync.Once Once;
    struct crypto/x509.Certificate *v;
};

typedef struct google.golang.org/protobuf/internal/impl.legacyEnumWrapper google.golang.org/protobuf/internal/impl.legacyEnumWrapper, *Pgoogle.golang.org/protobuf/internal/impl.legacyEnumWrapper;

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.EnumType;

struct google.golang.org/protobuf/internal/impl.legacyEnumWrapper {
    google.golang.org/protobuf/reflect/protoreflect.EnumNumber num;
    google.golang.org/protobuf/reflect/protoreflect.EnumType pbTyp;
    reflect.Type goTyp;
};

typedef struct hash<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.RawFields> hash<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.RawFields>, *Phash<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.RawFields>;

typedef struct bucket<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.RawFields> bucket<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.RawFields>, *Pbucket<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.RawFields>;

struct hash<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.RawFields> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.RawFields> *buckets;
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.RawFields> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.RawFields> {
    uint8 tophash[8];
    google.golang.org/protobuf/encoding/protowire.Number keys[8];
    struct google.golang.org/protobuf/reflect/protoreflect.RawFields values[8];
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,google.golang.org/protobuf/reflect/protoreflect.RawFields> *overflow;
};

typedef struct []*net.SRV []*net.SRV, *P[]*net.SRV;

typedef struct net.SRV net.SRV, *Pnet.SRV;

struct []*net.SRV {
    struct net.SRV **array;
    int len;
    int cap;
};

struct net.SRV {
    struct string Target;
    uint16 Port;
    uint16 Priority;
    uint16 Weight;
};

typedef struct runtime.elfEhdr runtime.elfEhdr, *Pruntime.elfEhdr;

struct runtime.elfEhdr {
    uint8 e_ident[16];
    uint16 e_type;
    uint16 e_machine;
    uint32 e_version;
    uint64 e_entry;
    uint64 e_phoff;
    uint64 e_shoff;
    uint32 e_flags;
    uint16 e_ehsize;
    uint16 e_phentsize;
    uint16 e_phnum;
    uint16 e_shentsize;
    uint16 e_shnum;
    uint16 e_shstrndx;
};

typedef struct google.golang.org/protobuf/internal/impl.float32Converter google.golang.org/protobuf/internal/impl.float32Converter, *Pgoogle.golang.org/protobuf/internal/impl.float32Converter;

struct google.golang.org/protobuf/internal/impl.float32Converter {
    reflect.Type goType;
    struct google.golang.org/protobuf/reflect/protoreflect.Value def;
};

typedef struct otp/seedgen.PingRequest otp/seedgen.PingRequest, *Potp/seedgen.PingRequest;

struct otp/seedgen.PingRequest {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    int64 Ping;
};

typedef struct runtime.iface google.golang.org/protobuf/reflect/protoreflect.ExtensionTypeDescriptor;

typedef struct bucket<vendor/golang.org/x/net/dns/dnsmessage.Class,string> bucket<vendor/golang.org/x/net/dns/dnsmessage.Class,string>, *Pbucket<vendor/golang.org/x/net/dns/dnsmessage.Class,string>;

struct bucket<vendor/golang.org/x/net/dns/dnsmessage.Class,string> {
    uint8 tophash[8];
    vendor/golang.org/x/net/dns/dnsmessage.Class keys[8];
    struct string values[8];
    struct bucket<vendor/golang.org/x/net/dns/dnsmessage.Class,string> *overflow;
};

typedef struct google.golang.org/grpc.funcDialOption google.golang.org/grpc.funcDialOption, *Pgoogle.golang.org/grpc.funcDialOption;

struct google.golang.org/grpc.funcDialOption {
    void (**f)(struct google.golang.org/grpc.dialOptions *);
};

typedef struct google.golang.org/grpc/internal/balancer/gracefulswitch.lbConfig google.golang.org/grpc/internal/balancer/gracefulswitch.lbConfig, *Pgoogle.golang.org/grpc/internal/balancer/gracefulswitch.lbConfig;

struct google.golang.org/grpc/internal/balancer/gracefulswitch.lbConfig {
    google.golang.org/grpc/serviceconfig.LoadBalancingConfig LoadBalancingConfig;
    google.golang.org/grpc/balancer.Builder childBuilder;
    google.golang.org/grpc/serviceconfig.LoadBalancingConfig childConfig;
};

typedef struct bucket<golang.org/x/net/http2.ErrCode,google.golang.org/grpc/codes.Code> bucket<golang.org/x/net/http2.ErrCode,google.golang.org/grpc/codes.Code>, *Pbucket<golang.org/x/net/http2.ErrCode,google.golang.org/grpc/codes.Code>;

struct bucket<golang.org/x/net/http2.ErrCode,google.golang.org/grpc/codes.Code> {
    uint8 tophash[8];
    golang.org/x/net/http2.ErrCode keys[8];
    google.golang.org/grpc/codes.Code values[8];
    struct bucket<golang.org/x/net/http2.ErrCode,google.golang.org/grpc/codes.Code> *overflow;
};

typedef struct struct_{_encoding/json.ptr_interface_{};_encoding/json.len_int_} struct_{_encoding/json.ptr_interface_{};_encoding/json.len_int_}, *Pstruct_{_encoding/json.ptr_interface_{};_encoding/json.len_int_};

struct struct_{_encoding/json.ptr_interface_{};_encoding/json.len_int_} { // Original name: struct { encoding/json.ptr interface {}; encoding/json.len int }
    interface_{} ptr;
    int len;
};

typedef struct syscall.Msghdr syscall.Msghdr, *Psyscall.Msghdr;

struct syscall.Msghdr {
    uint8 *Name;
    uint32 Namelen;
    uint8 Pad_cgo_0[4];
    struct syscall.Iovec *Iov;
    uint64 Iovlen;
    uint8 *Control;
    uint64 Controllen;
    int32 Flags;
    uint8 Pad_cgo_1[4];
};

typedef struct crypto/internal/nistec.P224Point *crypto/internal/nistec.p224Table[15];

typedef struct auth/auth_grpc.RefreshTokenRequest auth/auth_grpc.RefreshTokenRequest, *Pauth/auth_grpc.RefreshTokenRequest;

struct auth/auth_grpc.RefreshTokenRequest {
    struct google.golang.org/protobuf/internal/impl.MessageState state;
    int32 sizeCache;
    struct []uint8 unknownFields;
    struct string Token;
};

typedef struct runtime.mlink runtime.mlink, *Pruntime.mlink;

struct runtime.mlink {
    struct runtime/internal/sys.NotInHeap _;
    struct runtime.mlink *next;
};

typedef struct bucket<google.golang.org/protobuf/encoding/protowire.Number,reflect.StructField> bucket<google.golang.org/protobuf/encoding/protowire.Number,reflect.StructField>, *Pbucket<google.golang.org/protobuf/encoding/protowire.Number,reflect.StructField>;

struct bucket<google.golang.org/protobuf/encoding/protowire.Number,reflect.StructField> {
    uint8 tophash[8];
    google.golang.org/protobuf/encoding/protowire.Number keys[8];
    struct reflect.StructField values[8];
    struct bucket<google.golang.org/protobuf/encoding/protowire.Number,reflect.StructField> *overflow;
};

typedef struct noalg.map.bucket[int64]string noalg.map.bucket[int64]string, *Pnoalg.map.bucket[int64]string;

typedef int64 noalg.[8]int64[8];

struct noalg.map.bucket[int64]string {
    uint8 topbits[8];
    noalg.[8]int64 keys;
    noalg.[8]string elems;
    void *overflow;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*net/http.transferWriter_} noalg.struct_{_F_uintptr;_X0_*net/http.transferWriter_}, *Pnoalg.struct_{_F_uintptr;_X0_*net/http.transferWriter_};

typedef struct net/http.transferWriter net/http.transferWriter, *Pnet/http.transferWriter;

typedef struct runtime.iface io.Closer;

typedef struct hchan<net/http.readResult> hchan<net/http.readResult>, *Phchan<net/http.readResult>;

typedef struct hchan<net/http.readResult> *chan_net/http.readResult;

typedef struct waitq<net/http.readResult> waitq<net/http.readResult>, *Pwaitq<net/http.readResult>;

typedef struct sudog<net/http.readResult> sudog<net/http.readResult>, *Psudog<net/http.readResult>;

typedef struct net/http.readResult net/http.readResult, *Pnet/http.readResult;

typedef void (**net/http.incomparable[0])(void);

struct waitq<net/http.readResult> {
    struct sudog<net/http.readResult> *first;
    struct sudog<net/http.readResult> *last;
};

struct hchan<net/http.readResult> {
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<net/http.readResult> recvq;
    struct waitq<net/http.readResult> sendq;
    struct runtime.mutex lock;
};

struct net/http.transferWriter {
    struct string Method;
    io.Reader Body;
    io.Closer BodyCloser;
    bool ResponseToHEAD;
    int64 ContentLength;
    bool Close;
    struct []string TransferEncoding;
    net/http.Header Header;
    net/http.Header Trailer;
    bool IsResponse;
    error bodyReadError;
    bool FlushHeaders;
    chan_net/http.readResult ByteReadCh;
};

struct noalg.struct_{_F_uintptr;_X0_*net/http.transferWriter_} { // Original name: noalg.struct { F uintptr; X0 *net/http.transferWriter }
    uintptr F;
    struct net/http.transferWriter *X0;
};

struct sudog<net/http.readResult> {
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    struct net/http.readResult *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

struct net/http.readResult {
    net/http.incomparable _;
    int n;
    error err;
    uint8 b;
};

typedef struct golang.org/x/net/trace.lazySprintf golang.org/x/net/trace.lazySprintf, *Pgolang.org/x/net/trace.lazySprintf;

struct golang.org/x/net/trace.lazySprintf {
    struct string format;
    struct []interface_{} a;
};

typedef struct hash<string,float64> hash<string,float64>, *Phash<string,float64>;

typedef struct bucket<string,float64> bucket<string,float64>, *Pbucket<string,float64>;

struct hash<string,float64> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,float64> *buckets;
    struct bucket<string,float64> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<string,float64> {
    uint8 tophash[8];
    struct string keys[8];
    float64 values[8];
    struct bucket<string,float64> *overflow;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*error;_X1_google.golang.org/protobuf/encoding/protojson.encoder;_X2_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor_} noalg.struct_{_F_uintptr;_X0_*error;_X1_google.golang.org/protobuf/encoding/protojson.encoder;_X2_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor_}, *Pnoalg.struct_{_F_uintptr;_X0_*error;_X1_google.golang.org/protobuf/encoding/protojson.encoder;_X2_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor_};

typedef struct google.golang.org/protobuf/encoding/protojson.encoder google.golang.org/protobuf/encoding/protojson.encoder, *Pgoogle.golang.org/protobuf/encoding/protojson.encoder;

typedef struct google.golang.org/protobuf/internal/encoding/json.Encoder google.golang.org/protobuf/internal/encoding/json.Encoder, *Pgoogle.golang.org/protobuf/internal/encoding/json.Encoder;

typedef struct google.golang.org/protobuf/encoding/protojson.MarshalOptions google.golang.org/protobuf/encoding/protojson.MarshalOptions, *Pgoogle.golang.org/protobuf/encoding/protojson.MarshalOptions;

typedef struct runtime.iface interface_{_FindExtensionByName(google.golang.org/protobuf/reflect/protoreflect.FullName)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error);_FindExtensionByNumber(google.golang.org/protobuf/reflect/protoreflect.FullName,_google.golang.org/protobuf/encoding/protowire.Number)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error);_FindMessageByName(google.golang.org/protobuf/reflect/protoreflect.FullName)_(google.golang.org/protobuf/reflect/protoreflect.MessageType,_error);_FindMessageByURL(string)_(google.golang.org/protobuf/reflect/protoreflect.MessageType,_error)_};

struct google.golang.org/protobuf/encoding/protojson.MarshalOptions {
    struct google.golang.org/protobuf/internal/pragma.NoUnkeyedLiterals NoUnkeyedLiterals;
    bool Multiline;
    struct string Indent;
    bool AllowPartial;
    bool UseProtoNames;
    bool UseEnumNumbers;
    bool EmitUnpopulated;
    bool EmitDefaultValues;
    interface_{_FindExtensionByName(google.golang.org/protobuf/reflect/protoreflect.FullName)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error);_FindExtensionByNumber(google.golang.org/protobuf/reflect/protoreflect.FullName,_google.golang.org/protobuf/encoding/protowire.Number)_(google.golang.org/protobuf/reflect/protoreflect.ExtensionType,_error);_FindMessageByName(google.golang.org/protobuf/reflect/protoreflect.FullName)_(google.golang.org/protobuf/reflect/protoreflect.MessageType,_error);_FindMessageByURL(string)_(google.golang.org/protobuf/reflect/protoreflect.MessageType,_error)_} Resolver;
};

struct google.golang.org/protobuf/encoding/protojson.encoder {
    struct google.golang.org/protobuf/internal/encoding/json.Encoder *Encoder;
    struct google.golang.org/protobuf/encoding/protojson.MarshalOptions opts;
};

struct noalg.struct_{_F_uintptr;_X0_*error;_X1_google.golang.org/protobuf/encoding/protojson.encoder;_X2_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor_} { // Original name: noalg.struct { F uintptr; X0 *error; X1 google.golang.org/protobuf/encoding/protojson.encoder; X2 google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor }
    uintptr F;
    error *X0;
    struct google.golang.org/protobuf/encoding/protojson.encoder X1;
    google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor X2;
};

struct google.golang.org/protobuf/internal/encoding/json.Encoder {
    struct string indent;
    google.golang.org/protobuf/internal/encoding/json.kind lastKind;
    struct []uint8 indents;
    struct []uint8 out;
};

typedef struct google.golang.org/grpc/balancer/roundrobin.rrPicker google.golang.org/grpc/balancer/roundrobin.rrPicker, *Pgoogle.golang.org/grpc/balancer/roundrobin.rrPicker;

typedef struct []google.golang.org/grpc/balancer.SubConn []google.golang.org/grpc/balancer.SubConn, *P[]google.golang.org/grpc/balancer.SubConn;

struct []google.golang.org/grpc/balancer.SubConn {
    google.golang.org/grpc/balancer.SubConn *array;
    int len;
    int cap;
};

struct google.golang.org/grpc/balancer/roundrobin.rrPicker {
    struct []google.golang.org/grpc/balancer.SubConn subConns;
    uint32 next;
};

typedef struct math/rand.lockedSource math/rand.lockedSource, *Pmath/rand.lockedSource;

typedef struct math/rand.rngSource math/rand.rngSource, *Pmath/rand.rngSource;

struct math/rand.rngSource {
    int tap;
    int feed;
    int64 vec[607];
};

struct math/rand.lockedSource {
    struct sync.Mutex lk;
    struct math/rand.rngSource *s;
};

typedef struct fmt.fmtFlags fmt.fmtFlags, *Pfmt.fmtFlags;

struct fmt.fmtFlags {
    bool widPresent;
    bool precPresent;
    bool minus;
    bool plus;
    bool sharp;
    bool space;
    bool zero;
    bool plusV;
    bool sharpV;
};

typedef struct text/template/parse.RangeNode text/template/parse.RangeNode, *Ptext/template/parse.RangeNode;

typedef struct text/template/parse.BranchNode text/template/parse.BranchNode, *Ptext/template/parse.BranchNode;

struct text/template/parse.BranchNode {
    text/template/parse.NodeType NodeType;
    text/template/parse.Pos Pos;
    struct text/template/parse.Tree *tr;
    int Line;
    struct text/template/parse.PipeNode *Pipe;
    struct text/template/parse.ListNode *List;
    struct text/template/parse.ListNode *ElseList;
};

struct text/template/parse.RangeNode {
    struct text/template/parse.BranchNode BranchNode;
};

typedef struct bytes.Reader bytes.Reader, *Pbytes.Reader;

struct bytes.Reader {
    struct []uint8 s;
    int64 i;
    int prevRune;
};

typedef struct net/http.redirectHandler net/http.redirectHandler, *Pnet/http.redirectHandler;

struct net/http.redirectHandler {
    struct string url;
    int code;
};

typedef struct text/template.writeError text/template.writeError, *Ptext/template.writeError;

struct text/template.writeError {
    error Err;
};

typedef struct vendor/golang.org/x/text/unicode/norm.Iter vendor/golang.org/x/text/unicode/norm.Iter, *Pvendor/golang.org/x/text/unicode/norm.Iter;

typedef struct vendor/golang.org/x/text/unicode/norm.reorderBuffer vendor/golang.org/x/text/unicode/norm.reorderBuffer, *Pvendor/golang.org/x/text/unicode/norm.reorderBuffer;

typedef struct vendor/golang.org/x/text/unicode/norm.formInfo vendor/golang.org/x/text/unicode/norm.formInfo, *Pvendor/golang.org/x/text/unicode/norm.formInfo;

typedef struct vendor/golang.org/x/text/unicode/norm.input vendor/golang.org/x/text/unicode/norm.input, *Pvendor/golang.org/x/text/unicode/norm.input;

struct vendor/golang.org/x/text/unicode/norm.formInfo {
    vendor/golang.org/x/text/unicode/norm.Form form;
    bool composing;
    bool compatibility;
    void (**info)(struct vendor/golang.org/x/text/unicode/norm.input, int, struct vendor/golang.org/x/text/unicode/norm.Properties *);
    void (**nextMain)(struct vendor/golang.org/x/text/unicode/norm.Iter *, struct []uint8 *);
};

struct vendor/golang.org/x/text/unicode/norm.input {
    struct string str;
    struct []uint8 bytes;
};

struct vendor/golang.org/x/text/unicode/norm.reorderBuffer {
    struct vendor/golang.org/x/text/unicode/norm.Properties rune[32];
    uint8 byte[128];
    uint8 nbyte;
    vendor/golang.org/x/text/unicode/norm.streamSafe ss;
    int nrune;
    struct vendor/golang.org/x/text/unicode/norm.formInfo f;
    struct vendor/golang.org/x/text/unicode/norm.input src;
    int nsrc;
    struct vendor/golang.org/x/text/unicode/norm.input tmpBytes;
    struct []uint8 out;
    void (**flushF)(struct vendor/golang.org/x/text/unicode/norm.reorderBuffer *, bool *);
};

struct vendor/golang.org/x/text/unicode/norm.Iter {
    struct vendor/golang.org/x/text/unicode/norm.reorderBuffer rb;
    uint8 buf[128];
    struct vendor/golang.org/x/text/unicode/norm.Properties info;
    void (**next)(struct vendor/golang.org/x/text/unicode/norm.Iter *, struct []uint8 *);
    void (**asciiF)(struct vendor/golang.org/x/text/unicode/norm.Iter *, struct []uint8 *);
    int p;
    struct []uint8 multiSeg;
};

typedef struct noalg.map.hdr[google.golang.org/protobuf/internal/filedesc.pathKey][]int noalg.map.hdr[google.golang.org/protobuf/internal/filedesc.pathKey][]int, *Pnoalg.map.hdr[google.golang.org/protobuf/internal/filedesc.pathKey][]int;

typedef struct noalg.map.bucket[google.golang.org/protobuf/internal/filedesc.pathKey][]int noalg.map.bucket[google.golang.org/protobuf/internal/filedesc.pathKey][]int, *Pnoalg.map.bucket[google.golang.org/protobuf/internal/filedesc.pathKey][]int;

struct noalg.map.bucket[google.golang.org/protobuf/internal/filedesc.pathKey][]int {
    uint8 topbits[8];
    noalg.[8]google.golang.org/protobuf/internal/filedesc.pathKey keys;
    noalg.[8][]int elems;
    void *overflow;
};

struct noalg.map.hdr[google.golang.org/protobuf/internal/filedesc.pathKey][]int {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[google.golang.org/protobuf/internal/filedesc.pathKey][]int *buckets;
    struct noalg.map.bucket[google.golang.org/protobuf/internal/filedesc.pathKey][]int *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct []int noalg.[8][]int[8];

typedef struct google.golang.org/protobuf/internal/filedesc.pathKey noalg.[8]google.golang.org/protobuf/internal/filedesc.pathKey[8];

typedef struct google.golang.org/grpc/stats.RPCTagInfo google.golang.org/grpc/stats.RPCTagInfo, *Pgoogle.golang.org/grpc/stats.RPCTagInfo;

struct google.golang.org/grpc/stats.RPCTagInfo {
    struct string FullMethodName;
    bool FailFast;
};

typedef struct text/template/parse.elseNode text/template/parse.elseNode, *Ptext/template/parse.elseNode;

struct text/template/parse.elseNode {
    text/template/parse.NodeType NodeType;
    text/template/parse.Pos Pos;
    struct text/template/parse.Tree *tr;
    int Line;
};

typedef struct []*log.Logger []*log.Logger, *P[]*log.Logger;

typedef struct log.Logger log.Logger, *Plog.Logger;

typedef struct sync/atomic.Bool sync/atomic.Bool, *Psync/atomic.Bool;

struct sync/atomic.Bool {
    struct sync/atomic.noCopy _;
    uint32 v;
};

struct log.Logger {
    struct sync.Mutex outMu;
    io.Writer out;
    struct sync/atomic.Pointer[string] prefix;
    struct sync/atomic.Int32 flag;
    struct sync/atomic.Bool isDiscard;
};

struct []*log.Logger {
    struct log.Logger **array;
    int len;
    int cap;
};

