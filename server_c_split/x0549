            ~r0_00 = extraout_DIL_02;
          }
          if ((puVar2 == go_itab__crypto_elliptic_p256Curve_crypto_elliptic_Curve) &&
             (runtime_ifaceeq((runtime_itab *)
                              go_itab__crypto_elliptic_p256Curve_crypto_elliptic_Curve,x,
                              crypto_elliptic_p256,(bool)~r0_00), ~r0_00 = extraout_DIL_03,
             extraout_AL_00 != '\0')) goto LAB_0069ac35;
          if (crypto_elliptic_initonce.done == 0) {
            sync___Once__doSlow(&crypto_elliptic_initonce,
                                (func__ **)&PTR_crypto_elliptic_initAll_008ec8f8);
            ~r0_00 = extraout_DIL_04;
          }
          if ((puVar2 == 
               go_itab__crypto_elliptic_nistCurve__crypto_internal_nistec_P384Point__crypto_elliptic_Curve
              ) && (runtime_ifaceeq((runtime_itab *)
                                    go_itab__crypto_elliptic_nistCurve__crypto_internal_nistec_P384Point__crypto_elliptic_Curve
                                    ,x,crypto_elliptic_p384,(bool)~r0_00), ~r0_00 = extraout_DIL_05,
                   extraout_AL_01 != '\0')) {
            puVar2 = (undefined1 *)0x0;
          }
          else {
            if (crypto_elliptic_initonce.done == 0) {
              sync___Once__doSlow(&crypto_elliptic_initonce,
                                  (func__ **)&PTR_crypto_elliptic_initAll_008ec8f8);
              ~r0_00 = extraout_DIL_06;
            }
            if ((puVar2 == 
                 go_itab__crypto_elliptic_nistCurve__crypto_internal_nistec_P521Point__crypto_elliptic_Curve
                ) && (runtime_ifaceeq((runtime_itab *)
                                      go_itab__crypto_elliptic_nistCurve__crypto_internal_nistec_P521Point__crypto_elliptic_Curve
                                      ,x,crypto_elliptic_p521,(bool)~r0_00), x = extraout_RBX,
                     extraout_AL_02 != '\0')) {
              puVar2 = (undefined1 *)0x0;
            }
            else {
              runtime_newobject((internal_abi_Type *)&DAT_0083e560,x);
              extraout_RAX_00[1] = 0x1c;
              *extraout_RAX_00 = &DAT_008bdd29;
              puVar2 = go_itab__errors_errorString_error;
            }
          }
        }
        pubType = 3;
        goto LAB_0069ae22;
      }
    }
    else if ((sVar1 == -0x3f261b5c) && (extraout_RAX == &DAT_0082a0a0)) {
      puVar2 = (undefined1 *)0x0;
      pubType = 4;
      in_RCX = extraout_RCX;
      goto LAB_0069ae22;
    }
  }
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0);
  extraout_RAX_01[1] = 0x30;
  *extraout_RAX_01 = &DAT_008c8338;
  pubType = 0;
  puVar2 = go_itab__errors_errorString_error;
LAB_0069ae22:
  if (puVar2 != (undefined1 *)0x0) {
    return;
  }
  if (in_RCX == 0) {
    return;
  }
  iVar4 = 0;
  psVar3 = crypto_x509_signatureAlgorithmDetails.array;
  while( true ) {
    if (crypto_x509_signatureAlgorithmDetails.len <= iVar4) {
      runtime_newobject((internal_abi_Type *)&DAT_0083e560,(void *)pubType);
      extraout_RAX_05[1] = 0x20;
      *extraout_RAX_05 = &DAT_008c05d3;
      return;
    }
    details.algo._0_4_ = *(undefined4 *)&psVar3->algo;
    details.algo._4_4_ = *(undefined4 *)((int)&psVar3->algo + 4);
    details.name.str._0_4_ = *(undefined4 *)&(psVar3->name).str;
    details.name.str._4_4_ = *(undefined4 *)((int)&(psVar3->name).str + 4);
    details.name.len._0_4_ = *(undefined4 *)&(psVar3->name).len;
    details.name.len._4_4_ = *(undefined4 *)((int)&(psVar3->name).len + 4);
    details.oid.array._0_4_ = *(undefined4 *)&(psVar3->oid).array;
    details.oid.array._4_4_ = *(undefined4 *)((int)&(psVar3->oid).array + 4);
    details.oid.len._0_4_ = *(undefined4 *)&(psVar3->oid).len;
    details.oid.len._4_4_ = *(undefined4 *)((int)&(psVar3->oid).len + 4);
    details.oid.cap._0_4_ = *(undefined4 *)&(psVar3->oid).cap;
    details.oid.cap._4_4_ = *(undefined4 *)((int)&(psVar3->oid).cap + 4);
    details.pubKeyAlgo._0_4_ = *(undefined4 *)&psVar3->pubKeyAlgo;
    details.pubKeyAlgo._4_4_ = *(undefined4 *)((int)&psVar3->pubKeyAlgo + 4);
    details.hash._0_4_ = *(undefined4 *)&psVar3->hash;
    details.hash._4_4_ = *(undefined4 *)((int)&psVar3->hash + 4);
    key = psVar3->hash;
    if (psVar3->algo == in_RCX) break;
    psVar3 = psVar3 + 1;
    iVar4 = iVar4 + 1;
  }
  if (psVar3->pubKeyAlgo == pubType) {
    if ((key == 0) && (pubType != 4)) {
      runtime_newobject((internal_abi_Type *)&DAT_0083e560,(void *)pubType);
      extraout_RAX_02[1] = 0x2e;
      *extraout_RAX_02 = &DAT_008c78b1;
      return;
    }
    if (key == 2) {
      runtime_newobject((internal_abi_Type *)&DAT_0083e560,(void *)pubType);
      extraout_RAX_03[1] = 0x27;
      *extraout_RAX_03 = &DAT_008c4406;
      return;
    }
    if (&DAT_00000003 <= (undefined *)(in_RCX + -0xd)) {
      return;
    }
    runtime_mapaccess1_fast64
              ((internal_abi_MapType *)&DAT_0082f9e0,(runtime_hmap *)crypto_x509_hashToPSSParameters
               ,key,(undefined *)(in_RCX + -0xd));
    return;
  }
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,(void *)pubType);
  extraout_RAX_04[1] = (char *)0x42;
  *extraout_RAX_04 =
       "x509: requested SignatureAlgorithm does not match private key typeServer retry pushback specified multiple values (%q); not retrying.base.baseBalancer: got state changes for an unknown SubConn: %p, %vtransport: cannot send secure credentials on an insecure connectionfield %v with invalid Mutable call on field with non-composite typeinvalid retry throttling config: tokenRatio (%v) may not be negativeAllThreadsSyscall6 results differ between threads; runtime corruptedreflect: reflect.Value.UnsafePointer on an invalid notinheap pointerexpected a JSON struct with one entry; received entry %v at index %dpadding bytes must all be zeros unless AllowIllegalWrites is enabledhttp: message cannot contain multiple Content-Length headers; got %qembedded IPv4 address must replace the final 2 fields of the addressinvalid descriptor: using edition features in a proto with syntax %sextension %v does not implement protoreflect.ExtensionTypeDescriptor2695994666715063979466701508701963067355791626002630814351006629888126959946667150639794667015087019625940457807714424391721682722368061big: invalid 2nd argument to Int.Jacobi: need odd integer but got %sreflect: embedded interface with unexported method(s) not implementedtoo many hex fields to fit an embedded IPv4 at the end of the addressedwards25519: internal error: setShortBytes called with a long stringblockingPicker: the picked transport is not ready, loop back to repickgrpc: received message after decompression larger than max (%d vs. %d)invalid retry throttling config: maxTokens (%v) out of range (0, 1000]sync/atomic: compare and swap of inconsistently typed value into Valuebytes.Buffer: UnreadByte: previous operation was not a successful readgot %s for stream %d; expected CONTINUATION following %s for stream %dx509: certificate relies on legacy Common Name field, use SANs insteadtransport: set send compressor called after headers sent or stream donegrpc: error unmarshalling service config %s due to methodConfig[%d]: %vtoo many concurrent operations on a single file or socket (..." /* TRUNCATED STRING LITERAL */
  ;
  return;
}



void crypto_x509___Certificate__CreateCRL
               (crypto_x509_Certificate *c,io_Reader rand,interface___ priv,
               __crypto_x509_pkix_RevokedCertificate revokedCerts,time_Time now,time_Time expiry,
               __uint8 crlBytes,error err)

{
  int iVar1;
  runtime_eface e;
  interface___ pub;
  interface___ val;
  interface___ val_00;
  hash_Hash ~r0;
  interface___ val_01;
  __uint8 val_02;
  runtime_slice ~r0_00;
  crypto_x509_pkix_Name n;
  runtime_iface r;
  string params;
  string params_00;
  string params_01;
  crypto_x509_pkix_AlgorithmIdentifier sigAlgo;
  crypto_x509_pkix_RDNSequence ret;
  crypto_x509_pkix_Extension *pcVar2;
  int extraout_RAX;
  crypto_Hash hashFunc;
  crypto_Hash h;
  int extraout_RAX_00;
  undefined8 *extraout_RAX_01;
  crypto_x509_pkix_RelativeDistinguishedNameSET *extraout_RAX_02;
  uint8 *extraout_RAX_03;
  crypto_x509_pkix_Extension *extraout_RAX_04;
  undefined8 extraout_RAX_05;
  int extraout_RAX_06;
  undefined8 extraout_RAX_07;
  undefined8 uVar3;
  undefined8 extraout_RAX_08;
  undefined8 extraout_RAX_09;
  undefined8 in_RCX;
  bool *extraout_RCX;
  int extraout_RCX_00;
  bool *~r0_01;
  undefined8 extraout_RCX_01;
  undefined8 extraout_RCX_02;
  undefined8 uVar4;
  void *~r0_02;
  undefined8 in_RBX;
  void *~r0_03;
  int i;
  int extraout_RBX;
  int extraout_RBX_00;
  uint newLen;
  uint extraout_RBX_01;
  void *extraout_RBX_02;
  undefined8 extraout_RBX_03;
  void *extraout_RBX_04;
  void *pvVar5;
  int extraout_RBX_05;
  void *~r0_04;
  int extraout_RDI;
  int extraout_RDI_00;
  int extraout_RDI_01;
  math_big_Int **in_R8;
  int iVar6;
  uint64 extraout_R8;
  int in_R9;
  int64 extraout_R9;
  int64 extraout_R10;
  int unaff_R14;
  undefined in_XMM15 [16];
  undefined auVar7 [16];
  internal_abi_Type *in_stack_fffffffffffff988;
  internal_abi_Type *piVar8;
  void *in_stack_fffffffffffff990;
  runtime_itab *in_stack_fffffffffffff998;
  void *in_stack_fffffffffffff9a0;
  __uint8 in_stack_fffffffffffff9a8;
  error in_stack_fffffffffffff9c0;
  undefined in_stack_fffffffffffff9d0 [40];
  undefined auVar9 [24];
  error in_stack_fffffffffffff9f8;
  undefined auVar10 [24];
  undefined in_stack_fffffffffffffa08 [120];
  undefined auVar11 [24];
  undefined8 in_stack_fffffffffffffa80;
  undefined8 in_stack_fffffffffffffa88;
  int in_stack_fffffffffffffa90;
  runtime_itab *local_4e8;
  math_big_Int *local_4d0;
  math_big_Int *local_4c8;
  crypto_x509_pkix_RevokedCertificate rc;
  crypto_x509_pkix_Extension aki;
  crypto_x509_pkix_AlgorithmIdentifier signatureAlgorithm;
  crypto_x509_pkix_TBSCertificateList tbsCertList;
  undefined local_180 [344];
  undefined8 local_28;
  int local_20;
  void *local_18;
  int local_10;
  
  while (&stack0xfffffffffffffa08 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  e.data = in_stack_fffffffffffff990;
  e._type = in_stack_fffffffffffff988;
  r.data = in_stack_fffffffffffff9a0;
  r.tab = in_stack_fffffffffffff998;
  runtime_assertE2I2((internal_abi_InterfaceType *)&DAT_0083d6a0,e,r);
  if (extraout_RAX == 0) {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_03);
    extraout_RAX_01[1] = 0x3e;
    *extraout_RAX_01 = &DAT_008cb6b2;
    return;
  }
  (**(code **)(extraout_RAX + 0x18))(~r0_03);
  auVar7 = FUN_0046cdab();
  pub.data = in_stack_fffffffffffff990;
  pub._type = in_stack_fffffffffffff988;
  sigAlgo.Algorithm.len = (int)in_stack_fffffffffffff9a0;
  sigAlgo.Algorithm.array = (int *)in_stack_fffffffffffff998;
  sigAlgo.Algorithm.cap = (int *)in_stack_fffffffffffff9a8.array;
  sigAlgo.Parameters.Class = in_stack_fffffffffffff9a8.len;
  sigAlgo.Parameters.Tag = in_stack_fffffffffffff9a8.cap;
  sigAlgo.Parameters._16_16_ = (undefined  [16])in_stack_fffffffffffff9c0;
  auVar9 = in_stack_fffffffffffff9d0._16_24_;
  sigAlgo.Parameters.Bytes.len = in_stack_fffffffffffff9d0._0_8_;
  sigAlgo.Parameters.Bytes.cap = in_stack_fffffffffffff9d0._8_8_;
  sigAlgo.Parameters.FullBytes.array = (uint8 *)auVar9._0_8_;
  sigAlgo.Parameters.FullBytes.len = auVar9._8_8_;
  sigAlgo.Parameters.FullBytes.cap = auVar9._16_8_;
  crypto_x509_signingParamsForPublicKey
            (pub,auVar7._0_8_,auVar7._8_8_,sigAlgo,in_stack_fffffffffffff9f8);
  FUN_0046d10c();
  auVar7 = FUN_0046d10c();
  h = auVar7._0_8_;
  if (auVar7._8_8_ != 0) {
    return;
  }
  runtime_makeslice((internal_abi_Type *)&DAT_00865380,in_R9,in_R9,~r0_04);
  for (i = 0; i < in_R9; i = i + 1) {
    rc.SerialNumber = *in_R8;
    local_4d0 = in_R8[1];
    local_4c8 = in_R8[2];
    rc.Extensions.array._0_4_ = *(undefined4 *)(in_R8 + 4);
    rc.Extensions.array._4_4_ = *(undefined4 *)((int)in_R8 + 0x24);
    rc.Extensions.len._0_4_ = *(undefined4 *)(in_R8 + 5);
    rc.Extensions.len._4_4_ = *(undefined4 *)((int)in_R8 + 0x2c);
    rc.Extensions.cap._0_4_ = *(undefined4 *)(in_R8 + 6);
    rc.Extensions.cap._4_4_ = *(undefined4 *)((int)in_R8 + 0x34);
    if ((int)local_4d0 < 0) {
      local_4c8 = (math_big_Int *)(((uint)((int)local_4d0 << 1) >> 0x1f) + 0xdd7b17f80);
      local_4d0 = (math_big_Int *)(uint)(*(dword *)(in_R8 + 1) & 0x3fffffff);
    }
    rc.RevocationTime.wall = (uint64)local_4d0;
    rc.RevocationTime.ext = (int64)local_4c8;
    rc.RevocationTime.loc = (time_Location *)0x0;
    iVar6 = i * 0x38;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_wbMove((internal_abi_Type *)&DAT_00865380,(void *)(extraout_RAX_00 + iVar6),&rc);
    }
    iVar1 = extraout_RAX_00 + iVar6;
    *(math_big_Int **)(extraout_RAX_00 + iVar6) = rc.SerialNumber;
    iVar6 = extraout_RAX_00 + iVar6;
    *(undefined4 *)(iVar6 + 8) = (undefined4)rc.RevocationTime.wall;
    *(undefined4 *)(iVar6 + 0xc) = rc.RevocationTime.wall._4_4_;
    *(undefined4 *)(iVar6 + 0x10) = (undefined4)rc.RevocationTime.ext;
    *(undefined4 *)(iVar6 + 0x14) = rc.RevocationTime.ext._4_4_;
    *(undefined4 *)(iVar1 + 0x18) = rc.RevocationTime.loc._0_4_;
    *(undefined4 *)(iVar1 + 0x1c) = rc.RevocationTime.loc._4_4_;
    *(undefined4 *)(iVar1 + 0x20) = rc.Extensions.array._0_4_;
    *(undefined4 *)(iVar1 + 0x24) = rc.Extensions.array._4_4_;
    *(undefined4 *)(iVar1 + 0x28) = (undefined4)rc.Extensions.len;
    *(undefined4 *)(iVar1 + 0x2c) = rc.Extensions.len._4_4_;
    *(undefined4 *)(iVar1 + 0x30) = (undefined4)rc.Extensions.cap;
    *(undefined4 *)(iVar1 + 0x34) = rc.Extensions.cap._4_4_;
    in_R8 = in_R8 + 7;
  }
  piVar8 = (internal_abi_Type *)(c->Subject).Country.array;
  FUN_0046d08e();
  FUN_0046d08e();
  n.Country.len = (int)in_stack_fffffffffffff990;
  n.Country.array = (string *)piVar8;
  n.Country.cap = (int)in_stack_fffffffffffff998;
  n.Organization.array = (string *)in_stack_fffffffffffff9a0;
  n.Organization.len = (string *)in_stack_fffffffffffff9a8.array;
  n.Organization.cap = in_stack_fffffffffffff9a8.len;
  n.OrganizationalUnit.array = in_stack_fffffffffffff9a8.cap;
  n.OrganizationalUnit.len = (int)in_stack_fffffffffffff9c0.tab;
  n.OrganizationalUnit.cap = (int)in_stack_fffffffffffff9c0.data;
  auVar9 = in_stack_fffffffffffff9d0._0_24_;
  n.Locality.array = (string *)auVar9._0_8_;
  n.Locality.len = auVar9._8_8_;
  n.Locality.cap = auVar9._16_8_;
  n.Province.array = (string *)in_stack_fffffffffffff9d0._24_8_;
  n.Province.len = in_stack_fffffffffffff9d0._32_8_;
  n._112_16_ = (undefined  [16])in_stack_fffffffffffff9f8;
  auVar9 = in_stack_fffffffffffffa08._16_24_;
  auVar10 = in_stack_fffffffffffffa08._72_24_;
  auVar11 = in_stack_fffffffffffffa08._96_24_;
  n.StreetAddress.len = in_stack_fffffffffffffa08._0_8_;
  n.StreetAddress.cap = in_stack_fffffffffffffa08._8_8_;
  n.PostalCode.array = (string *)auVar9._0_8_;
  n.PostalCode.len = auVar9._8_8_;
  n.PostalCode.cap = auVar9._16_8_;
  n.SerialNumber.str = (uint8 *)SUB168(in_stack_fffffffffffffa08._40_16_,0);
  n.SerialNumber.len = SUB168(in_stack_fffffffffffffa08._40_16_,8);
  n.CommonName.str = (uint8 *)SUB168(in_stack_fffffffffffffa08._56_16_,0);
  n.CommonName.len = SUB168(in_stack_fffffffffffffa08._56_16_,8);
  n.Names.array = (crypto_x509_pkix_AttributeTypeAndValue *)auVar10._0_8_;
  n.Names.len = auVar10._8_8_;
  n.Names.cap = auVar10._16_8_;
  n.ExtraNames.array = (crypto_x509_pkix_AttributeTypeAndValue *)auVar11._0_8_;
  n.ExtraNames.len = auVar11._8_8_;
  n.ExtraNames.cap = auVar11._16_8_;
  ret.len = in_stack_fffffffffffffa88;
  ret.array = (crypto_x509_pkix_RelativeDistinguishedNameSET *)in_stack_fffffffffffffa80;
  ret.cap = in_stack_fffffffffffffa90;
  crypto_x509_pkix_Name_ToRDNSequence(n,ret);
  local_4e8 = rand.tab;
  if ((int)rand.tab < 0) {
    local_4e8 = (runtime_itab *)((uint)rand.tab & 0x3fffffff);
  }
  tbsCertList.Raw.array = (uint8 *)0x0;
  FUN_0046d08e();
  FUN_0046d10c();
  local_180._8_8_ = in_XMM15._8_8_;
  tbsCertList.ThisUpdate.loc = (time_Location *)0x0;
  tbsCertList.NextUpdate.loc = (time_Location *)0x0;
  ~r0_01 = extraout_RCX;
  tbsCertList.Issuer.array = extraout_RAX_02;
  tbsCertList.Issuer.len = extraout_RBX;
  tbsCertList.Issuer.cap = (int)extraout_RCX;
  tbsCertList.ThisUpdate.wall = (uint64)local_4e8;
  tbsCertList.ThisUpdate.ext = extraout_R9;
  tbsCertList.NextUpdate.wall = extraout_R8;
  tbsCertList.NextUpdate.ext = extraout_R10;
  if ((c->SubjectKeyId).len != 0) {
    aki.Id.array = crypto_x509_oidExtensionAuthorityKeyId.array;
    aki.Id.len._0_4_ = (undefined4)crypto_x509_oidExtensionAuthorityKeyId.len;
    aki.Id.len._4_4_ = (undefined4)((uint)crypto_x509_oidExtensionAuthorityKeyId.len >> 0x20);
    aki.Id.cap._0_4_ = (undefined4)crypto_x509_oidExtensionAuthorityKeyId.cap;
    aki.Id.cap._4_4_ = (undefined4)((uint)crypto_x509_oidExtensionAuthorityKeyId.cap >> 0x20);
    val_02.len = (int)in_stack_fffffffffffff990;
    val_02.array = (uint8 *)piVar8;
    val_02.cap = (int)in_stack_fffffffffffff998;
    aki._24_8_ = in_XMM15._0_8_;
    runtime_convTslice(val_02,(c->SubjectKeyId).array);
    val.data = in_stack_fffffffffffff990;
    val._type = piVar8;
    params.len = (int)in_stack_fffffffffffff9a0;
    params.str = (uint8 *)in_stack_fffffffffffff998;
    encoding_asn1_MarshalWithParams(val,params,in_stack_fffffffffffff9a8,in_stack_fffffffffffff9c0);
    aki.Value.array = extraout_RAX_03;
    aki.Value.cap = extraout_RCX_00;
    aki.Value.len = extraout_RBX_00;
    if (extraout_RDI != 0) {
      return;
    }
    newLen = tbsCertList.Extensions.len + 1;
    if ((uint)tbsCertList.Extensions.cap < newLen) {
      ~r0_00.len = (int)in_stack_fffffffffffff990;
      ~r0_00.array = piVar8;
      ~r0_00.cap = (int)in_stack_fffffffffffff998;
      runtime_growslice(tbsCertList.Extensions.array,newLen,tbsCertList.Extensions.cap,1,
                        (internal_abi_Type *)&DAT_008652c0,~r0_00);
      newLen = extraout_RBX_01;
      tbsCertList.Extensions.array = extraout_RAX_04;
    }
    tbsCertList.Extensions.len = newLen;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_wbMove((internal_abi_Type *)&DAT_008652c0,tbsCertList.Extensions.array + (newLen - 1),
                     &aki);
    }
    auVar7 = aki._24_16_;
    pcVar2 = tbsCertList.Extensions.array + (newLen - 1);
    ~r0_01 = &pcVar2->Critical;
    tbsCertList.Extensions.array[newLen - 1].Id.array = aki.Id.array;
    *(undefined4 *)&tbsCertList.Extensions.array[newLen - 1].Id.len = (undefined4)aki.Id.len;
    *(undefined4 *)((int)&tbsCertList.Extensions.array[newLen - 1].Id.len + 4) = aki.Id.len._4_4_;
    *(undefined4 *)&tbsCertList.Extensions.array[newLen - 1].Id.cap = (undefined4)aki.Id.cap;
    *(undefined4 *)((int)&tbsCertList.Extensions.array[newLen - 1].Id.cap + 4) = aki.Id.cap._4_4_;
    pcVar2->Critical = aki.Critical;
    *(undefined3 *)&pcVar2->field_0x19 = aki._25_3_;
    *(undefined4 *)&tbsCertList.Extensions.array[newLen - 1].field_0x1c = aki._28_4_;
    *(undefined4 *)&tbsCertList.Extensions.array[newLen - 1].Value.array = aki.Value.array._0_4_;
    *(undefined4 *)((int)&tbsCertList.Extensions.array[newLen - 1].Value.array + 4) =
         aki.Value.array._4_4_;
    *(undefined4 *)&tbsCertList.Extensions.array[newLen - 1].Value.len = (undefined4)aki.Value.len;
    *(undefined4 *)((int)&tbsCertList.Extensions.array[newLen - 1].Value.len + 4) =
         aki.Value.len._4_4_;
    *(undefined4 *)&tbsCertList.Extensions.array[newLen - 1].Value.cap = (undefined4)aki.Value.cap;
    *(undefined4 *)((int)&tbsCertList.Extensions.array[newLen - 1].Value.cap + 4) =
         aki.Value.cap._4_4_;
    aki._24_16_ = auVar7;
  }
  runtime_convT((internal_abi_Type *)&DAT_0088e980,&tbsCertList,~r0_01);
  val_00.data = in_stack_fffffffffffff990;
  val_00._type = piVar8;
  params_00.len = (int)in_stack_fffffffffffff9a0;
  params_00.str = (uint8 *)in_stack_fffffffffffff998;
  encoding_asn1_MarshalWithParams
            (val_00,params_00,in_stack_fffffffffffff9a8,in_stack_fffffffffffff9c0);
  if (extraout_RDI_00 == 0) {
    uVar3 = extraout_RAX_05;
    uVar4 = extraout_RCX_01;
    pvVar5 = extraout_RBX_02;
    if (h != 0) {
      ~r0.data = in_stack_fffffffffffff990;
      ~r0.tab = (runtime_itab *)piVar8;
      uVar3 = extraout_RCX_01;
      crypto_Hash_New(h,~r0);
      (**(code **)(extraout_RAX_06 + 0x38))(extraout_RBX_03,extraout_RAX_05,pvVar5,uVar3);
      (**(code **)(extraout_RAX_06 + 0x30))(extraout_RBX_03,0,0);
      uVar3 = extraout_RAX_07;
      uVar4 = extraout_RCX_02;
      pvVar5 = extraout_RBX_04;
    }
    runtime_convT64(h,pvVar5);
    (**(code **)(extraout_RAX + 0x20))
              (~r0_03,in_RBX,in_RCX,uVar3,pvVar5,uVar4,go_itab_crypto_Hash_crypto_SignerOpts,
               extraout_RAX_08);
    if (extraout_RDI_01 != 0) {
      return;
    }
    FUN_0046cd4a();
    local_180._0_8_ = tbsCertList.Raw.array;
    FUN_0046d08e();
    FUN_0046d10c();
    local_10 = extraout_RBX_05 << 3;
    local_28 = extraout_RAX_09;
    local_20 = extraout_RBX_05;
    local_18 = ~r0_02;
    runtime_convT((internal_abi_Type *)&DAT_00865440,local_180,~r0_02);
    val_01.data = in_stack_fffffffffffff990;
    val_01._type = piVar8;
    params_01.len = (int)in_stack_fffffffffffff9a0;
    params_01.str = (uint8 *)in_stack_fffffffffffff998;
    encoding_asn1_MarshalWithParams
              (val_01,params_01,in_stack_fffffffffffff9a8,in_stack_fffffffffffff9c0);
    return;
  }
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void crypto_x509___Certificate__isValid_func1_1
               (interface___ parsedName,interface___ constraint,bool ~r0,error ~r1)

{
  error ~r1_00;
  undefined7 in_register_00000001;
  internal_abi_Type *in_RCX;
  undefined8 *in_RBX;
  runtime_itab *unaff_RBP;
  int unaff_R14;
  void *unaff_retaddr;
  crypto_x509_rfc2821Mailbox in_stack_ffffffffffffffc8;
  string in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((internal_abi_Type *)CONCAT71(in_register_00000001,~r0) == (internal_abi_Type *)&DAT_00854de0)
  {
    if (in_RCX == (internal_abi_Type *)&DAT_008075e0) {
      ~r1_00.data = unaff_retaddr;
      ~r1_00.tab = unaff_RBP;
      crypto_x509_matchEmailConstraint
                (in_stack_ffffffffffffffc8,in_stack_ffffffffffffffe8,SUB81(*in_RBX,0),~r1_00);
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicdottypeE
              (in_RCX,(internal_abi_Type *)&DAT_008075e0,(internal_abi_Type *)&DAT_00821120);
  }
                    // WARNING: Subroutine does not return
  runtime_panicdottypeE
            ((internal_abi_Type *)CONCAT71(in_register_00000001,~r0),
             (internal_abi_Type *)&DAT_00854de0,(internal_abi_Type *)&DAT_00821120);
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void crypto_x509___Certificate__isValid_func1_2
               (interface___ parsedName,interface___ constraint,bool ~r0,error ~r1)

{
  error ~r1_00;
  undefined7 in_register_00000001;
  internal_abi_Type *in_RCX;
  undefined8 *in_RBX;
  runtime_itab *unaff_RBP;
  int unaff_R14;
  void *unaff_retaddr;
  string in_stack_ffffffffffffffd8;
  string in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((internal_abi_Type *)CONCAT71(in_register_00000001,~r0) == (internal_abi_Type *)&DAT_008075e0)
  {
    if (in_RCX == (internal_abi_Type *)&DAT_008075e0) {
      ~r1_00.data = unaff_retaddr;
      ~r1_00.tab = unaff_RBP;
      crypto_x509_matchDomainConstraint
                (in_stack_ffffffffffffffd8,in_stack_ffffffffffffffe8,SUB81(*in_RBX,0),~r1_00);
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicdottypeE
              (in_RCX,(internal_abi_Type *)&DAT_008075e0,(internal_abi_Type *)&DAT_00821120);
  }
                    // WARNING: Subroutine does not return
  runtime_panicdottypeE
            ((internal_abi_Type *)CONCAT71(in_register_00000001,~r0),
             (internal_abi_Type *)&DAT_008075e0,(internal_abi_Type *)&DAT_00821120);
}



void crypto_x509___Certificate__isValid_func1_3
               (interface___ parsedName,interface___ constraint,bool ~r0,error ~r1)

{
  error ~r1_00;
  undefined7 in_register_00000001;
  internal_abi_Type *in_RCX;
  net_url_URL *in_RBX;
  void *unaff_RBP;
  undefined8 *in_RDI;
  int unaff_R14;
  string in_stack_ffffffffffffffe0;
  runtime_itab *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RCX == (internal_abi_Type *)&DAT_008075e0) {
    if ((internal_abi_Type *)CONCAT71(in_register_00000001,~r0) ==
        (internal_abi_Type *)&DAT_00892360) {
      ~r1_00.data = unaff_RBP;
      ~r1_00.tab = in_stack_fffffffffffffff0;
      crypto_x509_matchURIConstraint(in_RBX,in_stack_ffffffffffffffe0,SUB81(*in_RDI,0),~r1_00);
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicdottypeE
              ((internal_abi_Type *)CONCAT71(in_register_00000001,~r0),
               (internal_abi_Type *)&DAT_00892360,(internal_abi_Type *)&DAT_00821120);
  }
                    // WARNING: Subroutine does not return
  runtime_panicdottypeE
            (in_RCX,(internal_abi_Type *)&DAT_008075e0,(internal_abi_Type *)&DAT_00821120);
}



void crypto_x509___Certificate__isValid_func1_4
               (interface___ parsedName,interface___ constraint,bool ~r0,error ~r1)

{
  undefined7 in_register_00000001;
  int i;
  internal_abi_Type *in_RCX;
  int *in_RBX;
  int *in_RDI;
  uint8 mask;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((internal_abi_Type *)CONCAT71(in_register_00000001,~r0) != (internal_abi_Type *)&DAT_00891f40)
  {
                    // WARNING: Subroutine does not return
    runtime_panicdottypeE
              ((internal_abi_Type *)CONCAT71(in_register_00000001,~r0),
               (internal_abi_Type *)&DAT_00891f40,(internal_abi_Type *)&DAT_00821120);
  }
  if (in_RCX != (internal_abi_Type *)&DAT_0083fa60) {
                    // WARNING: Subroutine does not return
    runtime_panicdottypeE
              (in_RCX,(internal_abi_Type *)&DAT_0083fa60,(internal_abi_Type *)&DAT_00821120);
  }
  if (in_RDI[1] == in_RBX[1]) {
    for (i = 0; i < in_RBX[1]; i = i + 1) {
      if ((uint)in_RDI[4] <= (uint)i) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      if ((*(byte *)(*in_RDI + i) & *(byte *)(in_RDI[3] + i)) !=
          (*(byte *)(*in_RBX + i) & *(byte *)(in_RDI[3] + i))) {
        return;
      }
    }
  }
  return;
}



int crypto_x509_init(EVP_PKEY_CTX *ctx)

{
  int extraout_RAX;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  crypto_x509_map_init_0();
  return extraout_RAX;
}



// WARNING: Unknown calling convention

void crypto_x509_map_init_0(void)

{
  runtime_hmap *in_RAX;
  map_crypto_Hash_encoding_asn1_RawValue h;
  undefined2 *extraout_RAX;
  undefined8 *dst;
  undefined2 *extraout_RAX_00;
  undefined8 *dst_00;
  undefined2 *extraout_RAX_01;
  undefined8 *extraout_RAX_02;
  void *dst_01;
  runtime_hmap *extraout_RAX_03;
  void *~r0;
  void *extraout_RBX;
  void *extraout_RBX_00;
  void *extraout_RBX_01;
  void *extraout_RBX_02;
  void *pvVar1;
  void *~r0_00;
  map_crypto_Hash_encoding_asn1_RawValue *extraout_R11;
  int unaff_R14;
  undefined in_XMM15 [16];
  undefined8 local_50;
  undefined4 uStack_48;
  undefined4 uStack_44;
  undefined4 uStack_40;
  undefined4 uStack_3c;
  undefined local_38 [8];
  undefined4 uStack_30;
  undefined4 uStack_2c;
  undefined local_28 [8];
  undefined8 uStack_20;
  undefined local_18 [8];
  undefined8 uStack_10;
  
  while (&stack0xfffffffffffffff8 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RAX = extraout_RAX_03;
  }
  runtime_makemap_small(in_RAX);
  local_50 = in_XMM15._0_8_;
  uStack_48 = in_XMM15._0_4_;
  uStack_44 = in_XMM15._4_4_;
  uStack_40 = in_XMM15._8_4_;
  uStack_3c = in_XMM15._12_4_;
  _local_38 = in_XMM15;
  local_28 = (undefined  [8])local_50;
  runtime_newobject((internal_abi_Type *)&DAT_0081b660,~r0);
  *extraout_RAX = 0x3430;
  *(undefined4 *)(extraout_RAX + 1) = 0xd300fa0;
  *(undefined8 *)(extraout_RAX + 3) = 0x365014886600906;
  *(undefined8 *)(extraout_RAX + 7) = 0x301ca10005010204;
  *(undefined8 *)(extraout_RAX + 0xb) = 0xf78648862a09061a;
  *(undefined8 *)(extraout_RAX + 0xf) = 0x9060d300801010d;
  *(undefined8 *)(extraout_RAX + 0x13) = 0x204036501488660;
  *(undefined8 *)(extraout_RAX + 0x17) = 0x20010203a2000501;
  uStack_20 = extraout_RAX;
  uStack_10 = 0x36;
  local_18 = (undefined  [8])0x36;
  runtime_mapassign_fast64
            ((internal_abi_MapType *)&DAT_0082f9e0,(runtime_hmap *)h,5,(void *)0x20010203a2000501);
  pvVar1 = extraout_RBX;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_wbMove((internal_abi_Type *)&DAT_00881fc0,dst,&local_50);
    pvVar1 = extraout_RBX_00;
  }
  *dst = local_50;
  *(undefined4 *)(dst + 1) = uStack_48;
  *(undefined4 *)((int)dst + 0xc) = uStack_44;
  *(undefined4 *)(dst + 2) = uStack_40;
  *(undefined4 *)((int)dst + 0x14) = uStack_3c;
  *(undefined4 *)(dst + 3) = local_38._0_4_;
  *(undefined4 *)((int)dst + 0x1c) = local_38._4_4_;
  *(undefined4 *)(dst + 4) = uStack_30;
  *(undefined4 *)((int)dst + 0x24) = uStack_2c;
  *(undefined4 *)(dst + 5) = local_28._0_4_;
  *(undefined4 *)((int)dst + 0x2c) = local_28._4_4_;
  *(undefined4 *)(dst + 6) = (undefined4)uStack_20;
  *(undefined4 *)((int)dst + 0x34) = uStack_20._4_4_;
  *(undefined4 *)(dst + 7) = local_18._0_4_;
  *(undefined4 *)((int)dst + 0x3c) = local_18._4_4_;
  *(undefined4 *)(dst + 8) = (undefined4)uStack_10;
  *(undefined4 *)((int)dst + 0x44) = uStack_10._4_4_;
  local_50 = in_XMM15._0_8_;
  uStack_48 = in_XMM15._0_4_;
  uStack_44 = in_XMM15._4_4_;
  uStack_40 = in_XMM15._8_4_;
  uStack_3c = in_XMM15._12_4_;
  _local_38 = in_XMM15;
  local_28 = (undefined  [8])local_50;
  runtime_newobject((internal_abi_Type *)&DAT_0081b660,pvVar1);
  *extraout_RAX_00 = 0x3430;
  *(undefined4 *)(extraout_RAX_00 + 1) = 0xd300fa0;
  *(undefined8 *)(extraout_RAX_00 + 3) = 0x365014886600906;
  *(undefined8 *)(extraout_RAX_00 + 7) = 0x301ca10005020204;
  *(undefined8 *)(extraout_RAX_00 + 0xb) = 0xf78648862a09061a;
  *(undefined8 *)(extraout_RAX_00 + 0xf) = 0x9060d300801010d;
  *(undefined8 *)(extraout_RAX_00 + 0x13) = 0x204036501488660;
  *(undefined8 *)(extraout_RAX_00 + 0x17) = 0x30010203a2000502;
  uStack_20 = extraout_RAX_00;
  uStack_10 = 0x36;
  local_18 = (undefined  [8])0x36;
  runtime_mapassign_fast64
            ((internal_abi_MapType *)&DAT_0082f9e0,(runtime_hmap *)h,6,(void *)0x30010203a2000502);
  pvVar1 = extraout_RBX_01;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_wbMove((internal_abi_Type *)&DAT_00881fc0,dst_00,&local_50);
    pvVar1 = extraout_RBX_02;
  }
  *dst_00 = local_50;
  *(undefined4 *)(dst_00 + 1) = uStack_48;
  *(undefined4 *)((int)dst_00 + 0xc) = uStack_44;
  *(undefined4 *)(dst_00 + 2) = uStack_40;
  *(undefined4 *)((int)dst_00 + 0x14) = uStack_3c;
  *(undefined4 *)(dst_00 + 3) = local_38._0_4_;
  *(undefined4 *)((int)dst_00 + 0x1c) = local_38._4_4_;
  *(undefined4 *)(dst_00 + 4) = uStack_30;
  *(undefined4 *)((int)dst_00 + 0x24) = uStack_2c;
  *(undefined4 *)(dst_00 + 5) = local_28._0_4_;
  *(undefined4 *)((int)dst_00 + 0x2c) = local_28._4_4_;
  *(undefined4 *)(dst_00 + 6) = (undefined4)uStack_20;
  *(undefined4 *)((int)dst_00 + 0x34) = uStack_20._4_4_;
  *(undefined4 *)(dst_00 + 7) = local_18._0_4_;
  *(undefined4 *)((int)dst_00 + 0x3c) = local_18._4_4_;
  *(undefined4 *)(dst_00 + 8) = (undefined4)uStack_10;
  *(undefined4 *)((int)dst_00 + 0x44) = uStack_10._4_4_;
  local_50 = in_XMM15._0_8_;
  uStack_48 = in_XMM15._0_4_;
  uStack_44 = in_XMM15._4_4_;
  uStack_40 = in_XMM15._8_4_;
  uStack_3c = in_XMM15._12_4_;
  _local_38 = in_XMM15;
  local_28 = (undefined  [8])local_50;
  runtime_newobject((internal_abi_Type *)&DAT_0081b660,pvVar1);
  *extraout_RAX_01 = 0x3430;
  *(undefined4 *)(extraout_RAX_01 + 1) = 0xd300fa0;
  *(undefined8 *)(extraout_RAX_01 + 3) = 0x365014886600906;
  *(undefined8 *)(extraout_RAX_01 + 7) = 0x301ca10005030204;
  *(undefined8 *)(extraout_RAX_01 + 0xb) = 0xf78648862a09061a;
  *(undefined8 *)(extraout_RAX_01 + 0xf) = 0x9060d300801010d;
  *(undefined8 *)(extraout_RAX_01 + 0x13) = 0x204036501488660;
  *(undefined8 *)(extraout_RAX_01 + 0x17) = 0x40010203a2000503;
  uStack_20 = extraout_RAX_01;
  uStack_10 = 0x36;
  local_18 = (undefined  [8])0x36;
  runtime_mapassign_fast64((internal_abi_MapType *)&DAT_0082f9e0,(runtime_hmap *)h,7,~r0_00);
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = h;
    extraout_R11[1] = crypto_x509_hashToPSSParameters;
    runtime_wbMove((internal_abi_Type *)&DAT_00881fc0,dst_01,&local_50);
  }
  *extraout_RAX_02 = local_50;
  *(undefined4 *)(extraout_RAX_02 + 1) = uStack_48;
  *(undefined4 *)((int)extraout_RAX_02 + 0xc) = uStack_44;
  *(undefined4 *)(extraout_RAX_02 + 2) = uStack_40;
  *(undefined4 *)((int)extraout_RAX_02 + 0x14) = uStack_3c;
  *(undefined4 *)(extraout_RAX_02 + 3) = local_38._0_4_;
  *(undefined4 *)((int)extraout_RAX_02 + 0x1c) = local_38._4_4_;
  *(undefined4 *)(extraout_RAX_02 + 4) = uStack_30;
  *(undefined4 *)((int)extraout_RAX_02 + 0x24) = uStack_2c;
  *(undefined4 *)(extraout_RAX_02 + 5) = local_28._0_4_;
  *(undefined4 *)((int)extraout_RAX_02 + 0x2c) = local_28._4_4_;
  *(undefined4 *)(extraout_RAX_02 + 6) = (undefined4)uStack_20;
  *(undefined4 *)((int)extraout_RAX_02 + 0x34) = uStack_20._4_4_;
  *(undefined4 *)(extraout_RAX_02 + 7) = local_18._0_4_;
  *(undefined4 *)((int)extraout_RAX_02 + 0x3c) = local_18._4_4_;
  *(undefined4 *)(extraout_RAX_02 + 8) = (undefined4)uStack_10;
  *(undefined4 *)((int)extraout_RAX_02 + 0x44) = uStack_10._4_4_;
  crypto_x509_hashToPSSParameters = h;
  return;
}



void type__eq_crypto_x509_HostnameError
               (crypto_x509_HostnameError *p,crypto_x509_HostnameError *q,bool r)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((q->Certificate == p->Certificate) && ((q->Host).len == (p->Host).len)) {
    runtime_memequal();
  }
  return;
}



void type__eq_crypto_x509_UnknownAuthorityError
               (crypto_x509_UnknownAuthorityError *p,crypto_x509_UnknownAuthorityError *q,bool r)

{
  runtime_itab *tab;
  undefined in_DIL;
  undefined extraout_DIL;
  int unaff_R14;
  crypto_x509_UnknownAuthorityError *pcStack0000000000000008;
  crypto_x509_UnknownAuthorityError *pcStack0000000000000010;
  
  pcStack0000000000000008 = p;
  pcStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_DIL = extraout_DIL;
  }
  if ((pcStack0000000000000010->Cert == pcStack0000000000000008->Cert) &&
     (tab = (pcStack0000000000000008->hintErr).tab, (pcStack0000000000000010->hintErr).tab == tab))
  {
    runtime_ifaceeq(tab,(pcStack0000000000000008->hintErr).data,
                    (pcStack0000000000000010->hintErr).data,(bool)in_DIL);
  }
  return;
}



void type__eq_crypto_x509_CertificateInvalidError
               (crypto_x509_CertificateInvalidError *p,crypto_x509_CertificateInvalidError *q,bool r
               )

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (((q->Cert == p->Cert) && (q->Reason == p->Reason)) && ((q->Detail).len == (p->Detail).len)) {
    runtime_memequal();
  }
  return;
}



void crypto_x509___SignatureAlgorithm__String(string ~r0)

{
  string **ppsVar1;
  int *in_RAX;
  struct___crypto_x509_algo_crypto_x509_SignatureAlgorithm__crypto_x509_name_string__crypto_x509_oid_encoding_asn1_ObjectIdentifier__crypto_x509_pubKeyAlgo_crypto_x509_PublicKeyAlgorithm__crypto_x509_hash_crypto_Hash__
  *psVar2;
  int iVar3;
  int unaff_R14;
  string in_stack_ffffffffffffffa8;
  struct___crypto_x509_algo_crypto_x509_SignatureAlgorithm__crypto_x509_name_string__crypto_x509_oid_encoding_asn1_ObjectIdentifier__crypto_x509_pubKeyAlgo_crypto_x509_PublicKeyAlgorithm__crypto_x509_hash_crypto_Hash__
  details;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.str = (uint8 *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (int *)~r0.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &~r0)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffa8;
  }
  if (in_RAX != (int *)0x0) {
    iVar3 = 0;
    psVar2 = crypto_x509_signatureAlgorithmDetails.array;
    while( true ) {
      if (crypto_x509_signatureAlgorithmDetails.len <= iVar3) {
        strconv_FormatInt(*in_RAX,10,in_stack_ffffffffffffffa8);
        return;
      }
      if (psVar2->algo == *in_RAX) break;
      psVar2 = psVar2 + 1;
      iVar3 = iVar3 + 1;
    }
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void crypto_x509___PublicKeyAlgorithm__String(string ~r0)

{
  string **ppsVar1;
  int *in_RAX;
  int unaff_R14;
  string in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.str = (uint8 *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (int *)~r0.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &~r0)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffe8;
  }
  if (in_RAX == (int *)0x0) {
                    // WARNING: Subroutine does not return
    runtime_panicwrap();
  }
  if (3 < *in_RAX - 1U) {
    strconv_FormatInt(*in_RAX,10,in_stack_ffffffffffffffe8);
  }
  return;
}



void crypto_x509___CertificateInvalidError__Error(string ~r0)

{
  string **ppsVar1;
  string ~r0_00;
  string ~r0_01;
  string ~r0_02;
  string ~r0_03;
  uint8 *in_RAX;
  int unaff_RBP;
  int unaff_R14;
  string in_stack_ffffffffffffffd0;
  string in_stack_ffffffffffffffe0;
  uint8 *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.str = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r0.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &~r0)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffd0;
  }
  if (in_RAX == (uint8 *)0x0) {
                    // WARNING: Subroutine does not return
    runtime_panicwrap();
  }
  switch(*(undefined8 *)(in_RAX + 8)) {
  case 0:
    break;
  case 1:
    ~r0_00.len = unaff_RBP;
    ~r0_00.str = in_stack_fffffffffffffff0;
    runtime_concatstring2
              ((runtime_tmpBuf *)0x0,in_stack_ffffffffffffffd0,in_stack_ffffffffffffffe0,~r0_00);
    break;
  case 2:
    ~r0_01.len = unaff_RBP;
    ~r0_01.str = in_stack_fffffffffffffff0;
    runtime_concatstring2
