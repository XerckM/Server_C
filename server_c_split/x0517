  }
  local_9 = 0;
  vendor_golang_org_x_crypto_cryptobyte___String__readASN1(s,out,&local_9,false,(bool)in_SIL);
  if ((extraout_AL != '\0') && (local_9 == vStack0000000000000018)) {
    return;
  }
  return;
}



void vendor_golang_org_x_crypto_cryptobyte___String__ReadOptionalASN1
               (vendor_golang_org_x_crypto_cryptobyte_String *s,
               vendor_golang_org_x_crypto_cryptobyte_String *out,bool *outPresent,
               vendor_golang_org_x_crypto_cryptobyte_asn1_Tag tag,bool ~r0)

{
  char extraout_AL;
  bool present;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (s->len == 0) {
    present = false;
  }
  else {
    present = *s->array == tag;
  }
  if (outPresent != (bool *)0x0) {
    *outPresent = present;
  }
  if (present != false) {
    vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(s,out,tag,(bool)tag);
    if (extraout_AL == '\0') {
      return;
    }
  }
  return;
}



void vendor_golang_org_x_crypto_cryptobyte___String__SkipOptionalASN1
               (vendor_golang_org_x_crypto_cryptobyte_String *s,
               vendor_golang_org_x_crypto_cryptobyte_asn1_Tag tag,bool ~r0)

{
  undefined in_DIL;
  undefined extraout_DIL;
  int unaff_R14;
  vendor_golang_org_x_crypto_cryptobyte_String unused;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_DIL = extraout_DIL;
  }
  if ((s->len != 0) && (*s->array == tag)) {
    unused.array = (uint8 *)0x0;
    vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(s,&unused,tag,(bool)in_DIL);
    return;
  }
  return;
}



void vendor_golang_org_x_crypto_cryptobyte___String__ReadOptionalASN1Integer
               (vendor_golang_org_x_crypto_cryptobyte_String *s,interface___ out,
               vendor_golang_org_x_crypto_cryptobyte_asn1_Tag tag,interface___ defaultValue,bool ~r0
               )

{
  dword dVar1;
  reflect_Value v;
  reflect_Value v_00;
  char extraout_AL;
  char extraout_AL_00;
  math_big_Word *extraout_RAX;
  math_big_Word *extraout_RAX_00;
  int len;
  undefined7 in_register_00000009;
  math_big_Int *pmVar2;
  int iVar3;
  internal_abi_Type *t;
  internal_abi_Type *t_1;
  undefined7 in_register_00000019;
  math_big_Word *__src;
  undefined *in_RSI;
  math_big_Int *extraout_RSI;
  reflect_flag f;
  vendor_golang_org_x_crypto_cryptobyte_asn1_Tag in_DIL;
  undefined *puVar4;
  math_big_Int *in_R8;
  math_big_Int *defaultValue_1;
  math_big_Word *extraout_R8;
  math_big_Word *__dest;
  int iVar5;
  reflect_flag f_1;
  math_big_Word **extraout_R11;
  int unaff_R14;
  undefined in_XMM15 [16];
  undefined *puStack0000000000000028;
  interface___ in_stack_ffffffffffffff48;
  reflect_flag in_stack_ffffffffffffff58;
  reflect_Value in_stack_ffffffffffffff60;
  bool local_81;
  undefined *local_80;
  int local_78;
  undefined *local_70;
  int local_68;
  math_big_Word *local_60;
  math_big_Word *local_58;
  undefined *local_50;
  undefined *local_48;
  undefined *local_40;
  math_big_Int *local_38;
  undefined *local_30;
  math_big_Int *local_28;
  vendor_golang_org_x_crypto_cryptobyte_String i;
  
  pmVar2 = (math_big_Int *)CONCAT71(in_register_00000009,~r0);
  puStack0000000000000028 = in_RSI;
  defaultValue_1 = in_R8;
  while (i.len = in_XMM15._0_8_, &local_38 <= *(math_big_Int ***)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  local_81 = false;
  i.array = (uint8 *)0x0;
  local_50 = (undefined *)CONCAT71(in_register_00000019,tag);
  local_48 = puStack0000000000000028;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadOptionalASN1
            (s,&i,&local_81,in_DIL,SUB81(puStack0000000000000028,0));
  if (extraout_AL == '\0') {
    return;
  }
  if (local_81 != false) {
    vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Integer
              (&i,in_stack_ffffffffffffff48,SUB81(local_50,0));
    if ((extraout_AL_00 != '\0') && (i.len == 0)) {
      return;
    }
    return;
  }
  if (local_50 == (undefined *)0x0) goto LAB_0066ea87;
  dVar1 = *(dword *)(local_50 + 0x10);
  if (dVar1 < 0x62de383e) {
    if (dVar1 < 0x43cfbb20) {
      if (dVar1 == 0x2e74d42b) {
        puVar4 = &DAT_007f84a0;
      }
      else if (dVar1 == 0x338a7ec0) {
        puVar4 = &DAT_007f85a0;
      }
      else {
        if (dVar1 != 0x43cfbb1f) goto LAB_0066ea87;
        puVar4 = &DAT_008000e0;
      }
    }
    else if (dVar1 == 0x49163278) {
      puVar4 = &DAT_007f8860;
    }
    else {
      if (dVar1 == 0x5051f1be) {
        if (local_50 == &DAT_008aa500) {
          if (local_48 != &DAT_008aa500) {
                    // WARNING: Subroutine does not return
            runtime_gopanic(in_stack_ffffffffffffff48);
          }
          if (pmVar2 == defaultValue_1) {
            return;
          }
          puVar4 = (undefined *)(pmVar2->abs).cap;
          len = (defaultValue_1->abs).len;
          __src = (defaultValue_1->abs).array;
          if ((int)puVar4 < len) {
            local_68 = len;
            local_58 = __src;
            if (len == 1) {
              runtime_makeslice((internal_abi_Type *)&DAT_00808860,1,1,puVar4);
              len = local_68;
              iVar3 = 1;
              __src = local_58;
              puVar4 = &DAT_00000001;
              __dest = extraout_RAX;
            }
            else {
              local_80 = (undefined *)(len + 4);
              runtime_makeslice((internal_abi_Type *)&DAT_00808860,len,(int)local_80,puVar4);
              len = local_68;
              iVar3 = local_68;
              __src = local_58;
              puVar4 = local_80;
              __dest = extraout_RAX_00;
            }
          }
          else {
            __dest = (pmVar2->abs).array;
            iVar3 = len;
          }
          iVar5 = iVar3;
          if (len < iVar3) {
            iVar5 = len;
          }
          if (__dest != __src) {
            local_78 = iVar3;
            local_70 = puVar4;
            local_60 = __dest;
            runtime_memmove(__dest,__src,iVar5 << 3);
            iVar3 = local_78;
            puVar4 = local_70;
            __dest = local_60;
          }
          (pmVar2->abs).len = iVar3;
          (pmVar2->abs).cap = (int)puVar4;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11 = extraout_R8;
            extraout_R11[1] = (pmVar2->abs).array;
            defaultValue_1 = extraout_RSI;
            __dest = extraout_R8;
          }
          (pmVar2->abs).array = __dest;
          pmVar2->neg = defaultValue_1->neg;
          return;
        }
        goto LAB_0066ea87;
      }
      if (dVar1 != 0x62de383d) goto LAB_0066ea87;
      puVar4 = &DAT_007f8460;
    }
  }
  else if (dVar1 < 0xba585d68) {
    if (dVar1 == 0x6e78e923) {
      puVar4 = &DAT_007f8620;
    }
    else if (dVar1 == 0x889ce7f8) {
      puVar4 = &DAT_007f8960;
    }
    else {
      if (dVar1 != 0xba585d67) goto LAB_0066ea87;
      puVar4 = &DAT_007f83e0;
    }
  }
  else if (dVar1 == 0xc3230e0b) {
    puVar4 = &DAT_007f8420;
  }
  else if (dVar1 == 0xd6631a7c) {
    puVar4 = &DAT_007f84e0;
  }
  else {
    if (dVar1 != 0xf3b50de0) goto LAB_0066ea87;
    puVar4 = &DAT_007f85e0;
  }
  if (local_50 == puVar4) {
    if (local_50 != (undefined *)0x0) {
      local_30 = local_50;
      local_28 = pmVar2;
    }
    v.flag = in_stack_ffffffffffffff58;
    v.typ_ = in_stack_ffffffffffffff48._type;
    v.ptr = in_stack_ffffffffffffff48.data;
    reflect_Value_Elem(v,in_stack_ffffffffffffff60);
    if (local_48 != (undefined *)0x0) {
      local_40 = local_48;
      local_38 = defaultValue_1;
    }
    v_00.flag = in_stack_ffffffffffffff58;
    v_00.typ_ = in_stack_ffffffffffffff48._type;
    v_00.ptr = in_stack_ffffffffffffff48.data;
    reflect_Value_Set(v_00,in_stack_ffffffffffffff60);
    return;
  }
LAB_0066ea87:
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffff48);
}



void vendor_golang_org_x_crypto_cryptobyte___String__readASN1
               (vendor_golang_org_x_crypto_cryptobyte_String *s,
               vendor_golang_org_x_crypto_cryptobyte_String *out,
               vendor_golang_org_x_crypto_cryptobyte_asn1_Tag *outTag,bool skipHeader,bool ~r0)

{
  byte bVar1;
  uint8 lenLen;
  dword dVar3;
  uint32 length;
  vendor_golang_org_x_crypto_cryptobyte_String *extraout_RAX;
  byte bVar2;
  uint uVar4;
  uint extraout_RCX;
  uint8 *extraout_RCX_00;
  uint8 lenByte;
  uint32 headerLen;
  uint uVar5;
  vendor_golang_org_x_crypto_cryptobyte_String *extraout_RBX;
  vendor_golang_org_x_crypto_cryptobyte_String *extraout_RBX_00;
  vendor_golang_org_x_crypto_cryptobyte_String *extraout_RBX_01;
  uint8 tag;
  uint8 *extraout_RSI;
  uint8 *puVar6;
  uint8 *extraout_RSI_00;
  char extraout_DIL;
  char extraout_DIL_00;
  int iVar7;
  uint8 *puVar8;
  uint8 *extraout_R8;
  uint8 *extraout_R8_00;
  uint uVar9;
  int i;
  dword dVar10;
  int extraout_R10;
  uint32 result;
  uint8 **extraout_R11;
  uint8 **extraout_R11_00;
  uint8 **extraout_R11_01;
  int unaff_R14;
  bool bVar11;
  interface___ in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (s->len < 2) {
    return;
  }
  bVar2 = *s->array;
  bVar1 = s->array[1];
  if ((bVar2 & 0x1f) == 0x1f) {
    return;
  }
  if (outTag != (vendor_golang_org_x_crypto_cryptobyte_asn1_Tag *)0x0) {
    *outTag = bVar2;
  }
  if ((bVar1 & 0x80) == 0) {
    dVar3 = bVar1 + 2;
    uVar9 = 2;
  }
  else {
    bVar2 = bVar1 & 0x7f;
    if (((bVar2 == 0) || (4 < bVar2)) || (uVar9 = (uint)(byte)(bVar2 + 2), s->len < (int)uVar9)) {
      return;
    }
    if (uVar9 < 2) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    uVar5 = (uint)(bVar1 & 0x7f);
    puVar8 = s->array + ((dword)(-(s->cap + -2) >> 0x3f) & 2);
    uVar4 = uVar5;
    if ((int)(uVar9 - 2) < (int)uVar5) {
      puVar8 = (uint8 *)0x0;
      uVar4 = 0;
    }
    if (puVar8 == (uint8 *)0x0) {
      return;
    }
    result = 0;
    for (uVar9 = 0; (int)uVar9 < (int)uVar5; uVar9 = uVar9 + 1) {
      if (uVar4 <= uVar9) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      result = result << 8 | (dword)puVar8[uVar9];
    }
    if (result < 0x80) {
      return;
    }
    bVar2 = (bVar2 - 1) * '\b';
    if ((dword)(-(dword)(bVar2 < 0x20) & result >> (bVar2 & 0x1f)) == 0) {
      return;
    }
    dVar10 = bVar1 & 0x7f;
    dVar3 = dVar10 + result + 2;
    if (dVar3 < result) {
      return;
    }
    uVar9 = (uint)(dword)(dVar10 + 2);
  }
  uVar4 = (uint)dVar3;
  if (s->len < (int)uVar4) {
    puVar6 = (uint8 *)0x0;
    iVar7 = 0;
    uVar4 = 0;
  }
  else {
    puVar6 = s->array;
    iVar7 = s->cap;
    s->len = s->len - uVar4;
    s->cap = iVar7 - uVar4;
    puVar8 = puVar6 + ((int)-(iVar7 - uVar4) >> 0x3f & uVar4);
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RSI;
      extraout_R11[1] = extraout_RAX->array;
      s = extraout_RAX;
      uVar4 = extraout_RCX;
      out = extraout_RBX;
      puVar8 = extraout_RSI;
      puVar6 = extraout_R8;
      iVar7 = extraout_R10;
      skipHeader = (bool)extraout_DIL;
    }
    s->array = puVar8;
  }
  bVar11 = puVar6 == (uint8 *)0x0;
  if (!bVar11) {
    out->len = uVar4;
    out->cap = iVar7;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_00 = extraout_R8_00;
      extraout_R11_00[1] = extraout_RBX_00->array;
      out = extraout_RBX_00;
      puVar6 = extraout_R8_00;
      skipHeader = (bool)extraout_DIL_00;
    }
    bVar11 = puVar6 == (uint8 *)0x0;
    out->array = puVar6;
  }
  if (bVar11) {
    return;
  }
  if (skipHeader != false) {
    if (out->len < (int)uVar9) {
      puVar6 = (uint8 *)0x0;
    }
    else {
      puVar6 = out->array;
      iVar7 = out->cap - uVar9;
      out->len = out->len - uVar9;
      out->cap = iVar7;
      puVar8 = puVar6 + (-iVar7 >> 0x3f & uVar9);
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_01 = extraout_RCX_00;
        extraout_R11_01[1] = extraout_RBX_01->array;
        puVar8 = extraout_RCX_00;
        out = extraout_RBX_01;
        puVar6 = extraout_RSI_00;
      }
      out->array = puVar8;
    }
    if (puVar6 == (uint8 *)0x0) {
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffffe8);
    }
  }
  return;
}



int vendor_golang_org_x_crypto_cryptobyte_init(EVP_PKEY_CTX *ctx)

{
  math_big_Word *extraout_RAX;
  math_big_Int *extraout_RAX_00;
  math_big_Int *extraout_RAX_01;
  math_big_Int *pmVar1;
  void *in_RBX;
  void *~r0;
  void *extraout_RBX;
  math_big_Word **extraout_R11;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RBX = extraout_RBX;
  }
  runtime_newobject((internal_abi_Type *)&DAT_0081cba0,in_RBX);
  *extraout_RAX = 1;
  runtime_newobject((internal_abi_Type *)&DAT_00855ba0,~r0);
  (extraout_RAX_00->abs).len = 1;
  (extraout_RAX_00->abs).cap = 1;
  pmVar1 = extraout_RAX_00;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier3();
    *extraout_R11 = extraout_RAX;
    extraout_R11[1] = (math_big_Word *)extraout_RAX_01;
    extraout_R11[2] = (math_big_Word *)vendor_golang_org_x_crypto_cryptobyte_bigOne;
    pmVar1 = extraout_RAX_01;
  }
  (pmVar1->abs).array = extraout_RAX;
  vendor_golang_org_x_crypto_cryptobyte_bigOne = pmVar1;
  return (int)pmVar1;
}



void crypto_ecdsa___PublicKey__ECDH(crypto_ecdsa_PublicKey *k,crypto_ecdh_PublicKey *~r0,error ~r1)

{
  __uint8 ~r0_00;
  char cVar1;
  int extraout_RAX;
  undefined8 extraout_RAX_00;
  undefined8 *extraout_RAX_01;
  undefined8 *extraout_RAX_02;
  undefined8 extraout_RCX;
  void *~r0_01;
  void *~r0_02;
  undefined8 extraout_RBX;
  int unaff_R14;
  crypto_elliptic_Curve in_stack_ffffffffffffffc8;
  crypto_ecdh_Curve in_stack_ffffffffffffffd8;
  int iVar2;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  crypto_ecdsa_curveToECDH(in_stack_ffffffffffffffc8,in_stack_ffffffffffffffd8);
  if (extraout_RAX != 0) {
    iVar2 = extraout_RAX;
    cVar1 = (*(code *)(k->Curve).tab[1]._type)((k->Curve).data,k->X,k->Y);
    if (cVar1 != '\0') {
      ~r0_00.cap = iVar2;
      ~r0_00.array = (uint8 *)in_stack_ffffffffffffffd8.tab;
      ~r0_00.len = (int)in_stack_ffffffffffffffd8.data;
      crypto_elliptic_Marshal
                (in_stack_ffffffffffffffc8,(math_big_Int *)(k->Curve).tab,
                 (math_big_Int *)(k->Curve).data,~r0_00);
      (**(code **)(iVar2 + 0x28))(~r0_01,extraout_RAX_00,extraout_RBX,extraout_RCX);
      return;
    }
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_02);
    extraout_RAX_01[1] = 0x19;
    *extraout_RAX_01 = &DAT_008bc149;
    return;
  }
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,~r0_01);
  extraout_RAX_02[1] = 0x27;
  *extraout_RAX_02 = &DAT_008c44a2;
  return;
}



void crypto_ecdsa___PublicKey__Equal(crypto_ecdsa_PublicKey *pub,crypto_PublicKey x,bool ~r0)

{
  runtime_itab *tab;
  char extraout_AL;
  char cVar1;
  char extraout_AL_00;
  crypto_ecdsa_PublicKey *in_RCX;
  crypto_ecdsa_PublicKey *xx;
  undefined7 in_register_00000019;
  undefined extraout_DIL;
  undefined extraout_DIL_00;
  undefined ~r0_00;
  int unaff_R14;
  
  xx = in_RCX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((undefined *)CONCAT71(in_register_00000019,~r0) != &DAT_0087ab80) {
    return;
  }
  crypto_ecdsa_bigIntEqual(pub->X,xx->X,SUB81(xx,0));
  if (extraout_AL == '\0') {
    cVar1 = '\0';
    ~r0_00 = extraout_DIL;
  }
  else {
    crypto_ecdsa_bigIntEqual(pub->Y,xx->Y,SUB81(pub,0));
    ~r0_00 = extraout_DIL_00;
    cVar1 = extraout_AL_00;
  }
  if ((cVar1 != '\0') && (tab = (pub->Curve).tab, (xx->Curve).tab == tab)) {
    runtime_ifaceeq(tab,(pub->Curve).data,(xx->Curve).data,(bool)~r0_00);
  }
  return;
}



void crypto_ecdsa_curveToECDH(crypto_elliptic_Curve c,crypto_ecdh_Curve ~r0)

{
  char extraout_AL;
  char extraout_AL_00;
  char extraout_AL_01;
  undefined1 *in_RAX;
  void *in_RBX;
  undefined in_DIL;
  undefined extraout_DIL;
  undefined extraout_DIL_00;
  undefined extraout_DIL_01;
  undefined extraout_DIL_02;
  undefined extraout_DIL_03;
  undefined extraout_DIL_04;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_DIL = extraout_DIL_04;
  }
  if (crypto_elliptic_initonce.done == 0) {
    sync___Once__doSlow(&crypto_elliptic_initonce,(func__ **)&PTR_crypto_elliptic_initAll_008ec8f8);
    in_DIL = extraout_DIL;
  }
  if ((in_RAX == go_itab__crypto_elliptic_p256Curve_crypto_elliptic_Curve) &&
     (runtime_ifaceeq((runtime_itab *)go_itab__crypto_elliptic_p256Curve_crypto_elliptic_Curve,
                      in_RBX,crypto_elliptic_p256,(bool)in_DIL), in_DIL = extraout_DIL_00,
     extraout_AL != '\0')) {
    return;
  }
  if (crypto_elliptic_initonce.done == 0) {
    sync___Once__doSlow(&crypto_elliptic_initonce,(func__ **)&PTR_crypto_elliptic_initAll_008ec8f8);
    in_DIL = extraout_DIL_01;
  }
  if ((in_RAX == 
       go_itab__crypto_elliptic_nistCurve__crypto_internal_nistec_P384Point__crypto_elliptic_Curve)
     && (runtime_ifaceeq((runtime_itab *)
                         go_itab__crypto_elliptic_nistCurve__crypto_internal_nistec_P384Point__crypto_elliptic_Curve
                         ,in_RBX,crypto_elliptic_p384,(bool)in_DIL), in_DIL = extraout_DIL_02,
        extraout_AL_00 != '\0')) {
    return;
  }
  if (crypto_elliptic_initonce.done == 0) {
    sync___Once__doSlow(&crypto_elliptic_initonce,(func__ **)&PTR_crypto_elliptic_initAll_008ec8f8);
    in_DIL = extraout_DIL_03;
  }
  if ((in_RAX == 
       go_itab__crypto_elliptic_nistCurve__crypto_internal_nistec_P521Point__crypto_elliptic_Curve)
     && (runtime_ifaceeq((runtime_itab *)
                         go_itab__crypto_elliptic_nistCurve__crypto_internal_nistec_P521Point__crypto_elliptic_Curve
                         ,in_RBX,crypto_elliptic_p521,(bool)in_DIL), extraout_AL_01 != '\0')) {
    return;
  }
  return;
}



void crypto_ecdsa_bigIntEqual(math_big_Int *a,math_big_Int *b,bool ~r0)

{
  __uint8 ~r0_00;
  __uint8 ~r0_01;
  int extraout_RAX;
  int extraout_RBX;
  int extraout_RBX_00;
  int iVar1;
  int i;
  uint8 v;
  int unaff_R14;
  undefined8 in_stack_ffffffffffffffd8;
  undefined8 in_stack_ffffffffffffffe0;
  int iVar2;
  int in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ~r0_00.len = in_stack_ffffffffffffffe0;
  ~r0_00.array = (uint8 *)in_stack_ffffffffffffffd8;
  ~r0_00.cap = in_stack_ffffffffffffffe8;
  math_big___Int__Bytes(a,~r0_00);
  ~r0_01.len = extraout_RBX;
  ~r0_01.array = (uint8 *)in_stack_ffffffffffffffd8;
  ~r0_01.cap = extraout_RAX;
  iVar2 = extraout_RBX;
  math_big___Int__Bytes(b,~r0_01);
  if (extraout_RBX_00 == iVar2) {
    for (iVar1 = 0; iVar1 < iVar2; iVar1 = iVar1 + 1) {
    }
  }
  return;
}



void crypto_ecdsa_VerifyASN1(crypto_ecdsa_PublicKey *pub,__uint8 hash,__uint8 sig,bool ~r0)

{
  char extraout_AL;
  crypto_ecdsa_nistCurve__crypto_internal_nistec_P256Point_ *pcVar1;
  crypto_ecdsa_nistCurve__crypto_internal_nistec_P256Point_ *~r0_00;
  crypto_ecdsa_nistCurve__crypto_internal_nistec_P256Point_ *~r0_01;
  crypto_ecdsa_nistCurve__crypto_internal_nistec_P256Point_ *~r0_02;
  crypto_ecdsa_nistCurve__crypto_internal_nistec_P256Point_ *~r0_03;
  crypto_ecdsa_PublicKey *pub_00;
  crypto_ecdsa_PublicKey *pub_01;
  crypto_ecdsa_PublicKey *pub_02;
  crypto_ecdsa_PublicKey *pub_03;
  bool ~r0_04;
  crypto_elliptic_CurveParams *extraout_RBX;
  crypto_elliptic_CurveParams *extraout_RBX_00;
  crypto_elliptic_CurveParams *extraout_RBX_01;
  crypto_elliptic_CurveParams *extraout_RBX_02;
  crypto_elliptic_CurveParams *extraout_RBX_03;
  crypto_elliptic_CurveParams *extraout_RBX_04;
  crypto_elliptic_CurveParams *extraout_RBX_05;
  crypto_elliptic_CurveParams *pcVar2;
  bool in_DIL;
  int unaff_R14;
  undefined auVar3 [16];
  __uint8 in_stack_ffffffffffffffa0;
  __uint8 in_stack_ffffffffffffffb8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  runtime_ifaceeq(crypto_ecdsa_errNoAsm.tab,crypto_ecdsa_errNoAsm.data,crypto_ecdsa_errNoAsm.data,
                  in_DIL);
  if (extraout_AL == '\0') {
    return;
  }
  auVar3 = (**(code **)&(pub->Curve).tab[1].hash)((pub->Curve).data);
  pcVar2 = auVar3._8_8_;
  pcVar1 = auVar3._0_8_;
  if (crypto_elliptic_initonce.done == 0) {
    sync___Once__doSlow(&crypto_elliptic_initonce,(func__ **)&PTR_crypto_elliptic_initAll_008ec8f8);
    pcVar2 = extraout_RBX;
  }
  crypto_elliptic___nistCurve__crypto_internal_nistec_P224Point___Params
            (crypto_elliptic_p224,pcVar2);
  ~r0_04 = SUB81(pub,0);
  if (~r0_00 == pcVar1) {
    crypto_ecdsa_p224((crypto_ecdsa_nistCurve__crypto_internal_nistec_P224Point_ *)~r0_00);
    crypto_ecdsa_verifyNISTEC_go_shape__uint8_
              ((_param7)crypto_ecdsa__dict_verifyNISTEC__crypto_internal_nistec_P224Point_,pub_03,
               in_stack_ffffffffffffffa0,in_stack_ffffffffffffffb8,~r0_04);
    return;
  }
  pcVar2 = extraout_RBX_00;
  if (crypto_elliptic_initonce.done == 0) {
    sync___Once__doSlow(&crypto_elliptic_initonce,(func__ **)&PTR_crypto_elliptic_initAll_008ec8f8);
    pcVar2 = extraout_RBX_01;
  }
  crypto_elliptic___nistCurve__crypto_internal_nistec_P256Point___Params
            (&crypto_elliptic_p256->nistCurve,pcVar2);
  if (~r0_01 != pcVar1) {
    pcVar2 = extraout_RBX_02;
    if (crypto_elliptic_initonce.done == 0) {
      sync___Once__doSlow(&crypto_elliptic_initonce,(func__ **)&PTR_crypto_elliptic_initAll_008ec8f8
                         );
      pcVar2 = extraout_RBX_03;
    }
    crypto_elliptic___nistCurve__crypto_internal_nistec_P384Point___Params
              (crypto_elliptic_p384,pcVar2);
    if (~r0_02 != pcVar1) {
      pcVar2 = extraout_RBX_04;
      if (crypto_elliptic_initonce.done == 0) {
        sync___Once__doSlow(&crypto_elliptic_initonce,
                            (func__ **)&PTR_crypto_elliptic_initAll_008ec8f8);
        pcVar2 = extraout_RBX_05;
      }
      crypto_elliptic___nistCurve__crypto_internal_nistec_P521Point___Params
                (crypto_elliptic_p521,pcVar2);
      if (~r0_03 == pcVar1) {
        crypto_ecdsa_p521((crypto_ecdsa_nistCurve__crypto_internal_nistec_P521Point_ *)~r0_03);
        crypto_ecdsa_verifyNISTEC_go_shape__uint8_
                  ((_param7)crypto_ecdsa__dict_verifyNISTEC__crypto_internal_nistec_P521Point_,
                   pub_00,in_stack_ffffffffffffffa0,in_stack_ffffffffffffffb8,~r0_04);
        return;
      }
      crypto_ecdsa_verifyLegacy(pub,in_stack_ffffffffffffffa0,in_stack_ffffffffffffffb8,~r0);
      return;
    }
    crypto_ecdsa_p384((crypto_ecdsa_nistCurve__crypto_internal_nistec_P384Point_ *)~r0_02);
    crypto_ecdsa_verifyNISTEC_go_shape__uint8_
              ((_param7)crypto_ecdsa__dict_verifyNISTEC__crypto_internal_nistec_P384Point_,pub_01,
               in_stack_ffffffffffffffa0,in_stack_ffffffffffffffb8,~r0_04);
    return;
  }
  crypto_ecdsa_p256(~r0_01);
  crypto_ecdsa_verifyNISTEC_go_shape__uint8_
            ((_param7)crypto_ecdsa__dict_verifyNISTEC__crypto_internal_nistec_P256Point_,pub_02,
             in_stack_ffffffffffffffa0,in_stack_ffffffffffffffb8,~r0_04);
  return;
}



void crypto_ecdsa_parseSignature(__uint8 sig,__uint8 r,__uint8 s,error err)

{
  char extraout_AL;
  char extraout_AL_00;
  byte extraout_AL_01;
  byte bVar1;
  char **extraout_RAX;
  int in_RBX;
  void *extraout_RBX;
  void *extraout_RBX_00;
  void *extraout_RBX_01;
  void *pvVar2;
  undefined8 in_RDI;
  undefined8 extraout_RDI;
  int unaff_R14;
  undefined in_XMM15 [16];
  interface___ in_stack_ffffffffffffff80;
  __uint8 s_local;
  __uint8 r_local;
  vendor_golang_org_x_crypto_cryptobyte_String input;
  vendor_golang_org_x_crypto_cryptobyte_String inner;
  
  while (inner.len = in_XMM15._0_8_, &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  inner.array = (uint8 *)0x0;
  input.len = in_RBX;
  vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1(&input,&inner,0x30,SUB81(in_RDI,0));
  pvVar2 = extraout_RBX;
  if (extraout_AL == '\0') {
    bVar1 = 1;
  }
  else if (input.len == 0) {
    vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Integer
              (&inner,in_stack_ffffffffffffff80,true);
    if (extraout_AL_00 == '\0') {
      bVar1 = 1;
      pvVar2 = extraout_RBX_00;
    }
    else {
      vendor_golang_org_x_crypto_cryptobyte___String__ReadASN1Integer
                (&inner,in_stack_ffffffffffffff80,true);
      bVar1 = extraout_AL_01 ^ 1;
      pvVar2 = extraout_RBX_01;
    }
  }
  else {
    bVar1 = 1;
  }
  if ((bVar1 == 0) && (inner.len == 0)) {
    return;
  }
  runtime_newobject((internal_abi_Type *)&DAT_0083e560,pvVar2);
  extraout_RAX[1] = (char *)0xd;
  *extraout_RAX =
       "invalid ASN.1empty integerunsupported: invalid UTF-8unexpected %sdefine clauseempty commandDownArrowBar;DownTeeArrow;ExponentialE;GreaterEqual;GreaterTilde;HilbertSpace;HumpDownHump;Intersection;LeftArrowBar;LeftTeeArrow;LeftTriangle;LeftUpVector;NotCongruent;NotLessEqual;NotLessTilde;Proportional;RightCeiling;RoundImplies;ShortUpArrow;SquareSubset;UnderBracket;VerticalLine;blacklozenge;exponentiale;risingdotseq;triangledown;triangleleft;NotHumpEqual;varsubsetneq;varsupsetneq;Authenticating.WithDeadline(<not Stringer>/proc/self/exeSubConn(id:%d)grpc-go/1.64.0Server createdunexpected EOF: extra text: internal error.in-addr.arpa./etc/protocolsunknown mode:  on zero Valueunknown methoduserArenaStateread mem statsallocfreetracegcstoptheworldGC assist waitfinalizer waitsync.Cond.WaitSIGABRT: aborts.allocCount= key size wrongruntime: mmap(nil elem type! to finalizer GC worker initruntime: full=runtime: want=MB; allocated bad restart PC-thread limit\nstopm spinning nmidlelocked= needspinning=store64 failedsemaRoot queuebad allocCountbad span statestack overflow untyped args  out of range no module data in goroutine no such deviceis a directorytext file busyfile too largetoo many linkslevel 3 haltedlevel 2 haltedprotocol errortoo many usersunreachable:  reserved_rangefield_presenceunsafe.PointerALREADY_EXISTS\"OUT_OF_RANGE\"%s Channel #%dgrpc-trace-binunknown ID: %vAuthInfo: \'%s\'Content-Lengthaccept-charsetcontent-lengthNot AcceptableMAX_FRAME_SIZEPROTOCOL_ERRORINTERNAL_ERRORREFUSED_STREAMinvalid syntax1907348632812595367431640625show_sensitiveprefix length not an ip:portinvalid PrefixResourceHeaderRCodeNameErrormime/multipartinvalid kind: protobuf_oneofXXX_OneofFuncsneed more data/etc/ssl/certs\\.+*?()|[]{}^$LOGGER_UNKNOWNAccept-CharsetDkim-SignatureREQUEST_METHOD$htmltemplate_ /* %s */null formnovalidateprotobuf errorReservedRangesdata truncatedInstEmptyWidthunknown node: ApplyFunction;DifferentialD;DoubleLeftTee;DoubleUpArrow;LeftTeeVector;LeftVectorBar;LessFullEqual;LongLeftArrow;Longleftarrow;NotTildeEqual;NotTildeTilde..." /* TRUNCATED STRING LITERAL */
  ;
  return;
}



void crypto_ecdsa_p224(crypto_ecdsa_nistCurve__crypto_internal_nistec_P224Point_ *~r0)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (crypto_ecdsa_p224Once.done == 0) {
    sync___Once__doSlow(&crypto_ecdsa_p224Once,(func__ **)&PTR_crypto_ecdsa_p224_func1_008ecb68);
  }
  return;
}



void crypto_ecdsa_p256(crypto_ecdsa_nistCurve__crypto_internal_nistec_P256Point_ *~r0)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (crypto_ecdsa_p256Once.done == 0) {
    sync___Once__doSlow(&crypto_ecdsa_p256Once,(func__ **)&PTR_crypto_ecdsa_p256_func1_008ecb78);
  }
  return;
}



void crypto_ecdsa_p384(crypto_ecdsa_nistCurve__crypto_internal_nistec_P384Point_ *~r0)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (crypto_ecdsa_p384Once.done == 0) {
    sync___Once__doSlow(&crypto_ecdsa_p384Once,(func__ **)&PTR_crypto_ecdsa_p384_func1_008ecb88);
  }
  return;
}



void crypto_ecdsa_p521(crypto_ecdsa_nistCurve__crypto_internal_nistec_P521Point_ *~r0)

{
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (crypto_ecdsa_p521Once.done == 0) {
    sync___Once__doSlow(&crypto_ecdsa_p521Once,(func__ **)&PTR_crypto_ecdsa_p521_func1_008ecb98);
  }
  return;
}



void crypto_ecdsa_hashToInt(__uint8 hash,crypto_elliptic_Curve c,math_big_Int *~r0)

{
  math_big_nat ~r0_00;
  int iVar1;
  math_big_Int *extraout_RAX;
  math_big_Int *ret;
  math_big_Word *extraout_RAX_00;
  math_big_Word *extraout_RAX_01;
  math_big_Word *pmVar2;
  uint in_RCX;
  int orderBytes;
  int iVar3;
  int extraout_RCX;
  uint n;
  int excess;
  uint extraout_RCX_00;
  math_big_Int *z;
  uint in_RBX;
  int i;
  int orderBits;
  int extraout_RBX;
  undefined8 in_RSI;
  uint top;
  uint uVar4;
  int iVar5;
  int in_RDI;
  math_big_Int *extraout_RDI;
  math_big_Int *extraout_RDI_00;
  math_big_Int *~r0_01;
  math_big_Word **extraout_R11;
  int unaff_R14;
  math_big_nat in_stack_ffffffffffffffa8;
  __uint8 in_stack_ffffffffffffffc0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar1 = (**(code **)(in_RDI + 0x30))(in_RSI);
  iVar5 = *(int *)(*(int *)(iVar1 + 8) + 0x10);
  iVar3 = iVar5 + -1;
  if (iVar3 < 0) {
    orderBits = 0;
  }
  else {
    uVar4 = *(uint *)(*(int *)(*(int *)(iVar1 + 8) + 8) + -8 + iVar5 * 8);
    uVar4 = uVar4 >> 1 | uVar4;
    uVar4 = uVar4 >> 2 | uVar4;
    uVar4 = uVar4 >> 4 | uVar4;
    uVar4 = uVar4 >> 8 | uVar4;
    uVar4 = uVar4 >> 0x10 | uVar4;
    uVar4 = uVar4 >> 0x20 | uVar4;
    iVar5 = 0x3f;
    if (uVar4 != 0) {
      for (; uVar4 >> iVar5 == 0; iVar5 = iVar5 + -1) {
      }
    }
    if (uVar4 == 0) {
      iVar5 = -1;
    }
    orderBits = iVar5 + iVar3 * 0x40 + 1;
  }
  uVar4 = (int)(((uint)(orderBits + 7 >> 0x3f) >> 0x3d) + orderBits + 7) >> 3;
  if (((int)uVar4 < (int)in_RBX) && (in_RBX = uVar4, in_RCX < uVar4)) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  runtime_newobject((internal_abi_Type *)&DAT_00855ba0,(void *)orderBits);
  iVar3 = in_RBX << 3;
  ~r0_00.len = in_RBX;
  ~r0_00.array = (math_big_Word *)orderBits;
  ~r0_00.cap = iVar3;
  math_big_nat_setBytes(in_stack_ffffffffffffffa8,in_stack_ffffffffffffffc0,~r0_00);
  (extraout_RAX->abs).len = extraout_RBX;
  (extraout_RAX->abs).cap = extraout_RCX;
  n = iVar3 - orderBits;
  pmVar2 = extraout_RAX_00;
  z = extraout_RAX;
  ~r0_01 = extraout_RDI;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RAX_01;
    extraout_R11[1] = (z->abs).array;
    pmVar2 = extraout_RAX_01;
    n = extraout_RCX_00;
    ~r0_01 = extraout_RDI_00;
  }
  (z->abs).array = pmVar2;
  z->neg = false;
  if (0 < (int)n) {
