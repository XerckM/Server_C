    uStack_1c = in_XMM15._12_4_;
    local_78.c = (runtime_hchan *)(**(code **)(in_RBX + 0x20))(in_RCX);
    local_68._8_8_ = &local_30;
    local_68._0_8_ = local_90;
    local_78.elem = pvVar2;
    runtime_selectgo(&local_78,local_98,(uintptr *)0x0,0,2,true,~r0_03,~r1_00);
    if (extraout_RAX_02 == 0) {
      auVar3 = (**(code **)(in_RBX + 0x28))(in_RCX);
      local_88 = auVar3._8_8_;
      local_80 = auVar3._0_8_;
      ~r0_02 = ~r0_01;
      if (context_Canceled.tab == local_80) {
        runtime_ifaceeq(local_80,local_88,context_Canceled.data,~r0_01);
        auVar3._8_8_ = local_88;
        auVar3._0_8_ = local_80;
        ~r0_02 = extraout_DIL;
        if (extraout_AL != '\0') {
          return;
        }
      }
      local_88 = auVar3._8_8_;
      local_80 = auVar3._0_8_;
      if (context_DeadlineExceeded.tab == local_80) {
        runtime_ifaceeq(local_80,local_88,context_DeadlineExceeded.data,(bool)~r0_02);
      }
      return;
    }
    return;
  }
  (**in_RDI)();
  return;
}



void net_doBlockingWithCtx_go_shape___net_IPAddr_
               (context_Context ctx,_param0 blocking,_param1 ~r0,error ~r1)

{
  char extraout_AL;
  int iVar1;
  uintptr extraout_RAX;
  _param2 res;
  runtime_funcval *extraout_RAX_00;
  runtime_funcval *extraout_RAX_01;
  runtime_funcval *fn;
  int extraout_RAX_02;
  undefined8 in_RCX;
  int in_RBX;
  void *~r0_00;
  bool ~r0_01;
  undefined extraout_DIL;
  undefined ~r0_02;
  code **in_RDI;
  int ~r0_03;
  bool ~r1_00;
  undefined8 *extraout_R11;
  int unaff_R14;
  undefined in_XMM15 [16];
  void *pvVar2;
  undefined auVar3 [16];
  uint16 local_98 [4];
  uintptr local_90;
  void *local_88;
  runtime_itab *local_80;
  runtime_scase local_78;
  undefined local_68 [16];
  _param3 r;
  undefined8 local_30;
  undefined4 uStack_28;
  undefined4 uStack_24;
  undefined4 uStack_20;
  undefined4 uStack_1c;
  
  while (&r.res.cap <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar1 = (**(code **)(in_RBX + 0x20))(in_RCX);
  if (iVar1 != 0) {
    runtime_makechan((internal_abi_ChanType *)blocking[2],1,(runtime_hchan *)blocking);
    local_90 = extraout_RAX;
    runtime_newobject((internal_abi_Type *)&DAT_00869b60,~r0_00);
    extraout_RAX_00->fn = (uintptr)net_doBlockingWithCtx_go_shape___net_IPAddr__func1;
    fn = extraout_RAX_00;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier3();
      *extraout_R11 = in_RDI;
      extraout_R11[1] = local_90;
      extraout_R11[2] = blocking;
      fn = extraout_RAX_01;
    }
    fn[1].fn = (uintptr)in_RDI;
    fn[2].fn = local_90;
    fn[3].fn = (uintptr)blocking;
    runtime_newproc(fn);
    pvVar2 = in_XMM15._8_8_;
    local_30 = in_XMM15._0_8_;
    uStack_28 = in_XMM15._0_4_;
    uStack_24 = in_XMM15._4_4_;
    uStack_20 = in_XMM15._8_4_;
    uStack_1c = in_XMM15._12_4_;
    local_78.c = (runtime_hchan *)(**(code **)(in_RBX + 0x20))(in_RCX);
    local_68._8_8_ = &local_30;
    local_68._0_8_ = local_90;
    local_78.elem = pvVar2;
    runtime_selectgo(&local_78,local_98,(uintptr *)0x0,0,2,true,~r0_03,~r1_00);
    if (extraout_RAX_02 == 0) {
      auVar3 = (**(code **)(in_RBX + 0x28))(in_RCX);
      local_88 = auVar3._8_8_;
      local_80 = auVar3._0_8_;
      ~r0_02 = ~r0_01;
      if (context_Canceled.tab == local_80) {
        runtime_ifaceeq(local_80,local_88,context_Canceled.data,~r0_01);
        auVar3._8_8_ = local_88;
        auVar3._0_8_ = local_80;
        ~r0_02 = extraout_DIL;
        if (extraout_AL != '\0') {
          return;
        }
      }
      local_88 = auVar3._8_8_;
      local_80 = auVar3._0_8_;
      if (context_DeadlineExceeded.tab == local_80) {
        runtime_ifaceeq(local_80,local_88,context_DeadlineExceeded.data,(bool)~r0_02);
      }
      return;
    }
    return;
  }
  (**in_RDI)();
  return;
}



void net_doBlockingWithCtx_go_shape_int_(context_Context ctx,_param0 blocking,_param1 ~r0,error ~r1)

{
  char extraout_AL;
  int iVar1;
  uintptr extraout_RAX;
  _param2 res;
  runtime_funcval *extraout_RAX_00;
  runtime_funcval *extraout_RAX_01;
  runtime_funcval *fn;
  int extraout_RAX_02;
  undefined8 in_RCX;
  void *~r0_00;
  bool ~r0_01;
  undefined extraout_DIL;
  undefined ~r0_02;
  code **in_RDI;
  int ~r0_03;
  bool ~r1_00;
  undefined8 *extraout_R11;
  int unaff_R14;
  undefined in_XMM15 [16];
  void *pvVar2;
  undefined auVar3 [16];
  uint16 local_60 [4];
  uintptr local_58;
  void *local_50;
  runtime_itab *local_48;
  undefined local_40 [16];
  undefined8 local_30;
  runtime_scase local_28;
  undefined local_18 [16];
  
  while (pvVar2 = in_XMM15._8_8_, local_18 + 8 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar1 = (**(code **)(~r0 + 0x20))(in_RCX);
  if (iVar1 != 0) {
    runtime_makechan((internal_abi_ChanType *)blocking[2],1,(runtime_hchan *)blocking);
    local_58 = extraout_RAX;
    runtime_newobject((internal_abi_Type *)&DAT_00869da0,~r0_00);
    extraout_RAX_00->fn = (uintptr)net_doBlockingWithCtx_go_shape_int__func1;
    fn = extraout_RAX_00;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier3();
      *extraout_R11 = in_RDI;
      extraout_R11[1] = local_58;
      extraout_R11[2] = blocking;
      fn = extraout_RAX_01;
    }
    fn[1].fn = (uintptr)in_RDI;
    fn[2].fn = local_58;
    fn[3].fn = (uintptr)blocking;
    runtime_newproc(fn);
    local_30 = 0;
    local_28.c = (runtime_hchan *)(**(code **)(~r0 + 0x20))(in_RCX);
    local_18._8_8_ = local_40;
    local_18._0_8_ = local_58;
    local_28.elem = pvVar2;
    runtime_selectgo(&local_28,local_60,(uintptr *)0x0,0,2,true,~r0_03,~r1_00);
    if (extraout_RAX_02 == 0) {
      auVar3 = (**(code **)(~r0 + 0x28))(in_RCX);
      local_50 = auVar3._8_8_;
      local_48 = auVar3._0_8_;
      ~r0_02 = ~r0_01;
      if (context_Canceled.tab == local_48) {
        runtime_ifaceeq(local_48,local_50,context_Canceled.data,~r0_01);
        auVar3._8_8_ = local_50;
        auVar3._0_8_ = local_48;
        ~r0_02 = extraout_DIL;
        if (extraout_AL != '\0') {
          return;
        }
      }
      local_50 = auVar3._8_8_;
      local_48 = auVar3._0_8_;
      if (context_DeadlineExceeded.tab == local_48) {
        runtime_ifaceeq(local_48,local_50,context_DeadlineExceeded.data,(bool)~r0_02);
      }
      return;
    }
    return;
  }
  (**in_RDI)();
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net___IP__DefaultMask(net_IPMask ~r0)

{
  net_IPMask **ppnVar1;
  net_IPMask ~r0_00;
  uint8 *in_RAX;
  uint8 *unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  net_IP in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r0.array;
  }
  ppnVar1 = *(net_IPMask ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_IPMask **)0x0) && (*ppnVar1 == &~r0)) {
    *ppnVar1 = (net_IPMask *)&stack0xffffffffffffffe0;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.cap = (int)~r0.array;
    ~r0_00.len = unaff_retaddr;
    ~r0_00.array = unaff_RBP;
    net_IP_DefaultMask(in_stack_ffffffffffffffe0,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net___IP__Equal(net_IP x,bool ~r0)

{
  net_IP **ppnVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  int in_RCX;
  int unaff_R14;
  net_IP in_stack_ffffffffffffffc8;
  net_IP in_stack_ffffffffffffffe0;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    x.array = (uint8 *)puVar2;
    x.cap = in_RCX;
    runtime_morestack_noctxt();
    puVar2 = (undefined8 *)x.array;
    in_RCX = x.cap;
  }
  ppnVar1 = *(net_IP ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_IP **)0x0) && (*ppnVar1 == &x)) {
    *ppnVar1 = (net_IP *)&stack0xffffffffffffffc8;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_IP_Equal(in_stack_ffffffffffffffc8,in_stack_ffffffffffffffe0,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net___IP__IsGlobalUnicast(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  int unaff_R14;
  undefined8 *in_stack_00000008;
  net_IP in_stack_ffffffffffffffe0;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = puVar2;
    runtime_morestack_noctxt();
    puVar2 = in_stack_00000008;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined8 **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe0;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_IP_IsGlobalUnicast(in_stack_ffffffffffffffe0,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net___IP__IsInterfaceLocalMulticast(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicwrap();
  }
  return;
}



void net___IP__IsLinkLocalMulticast(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  int unaff_R14;
  undefined8 *in_stack_00000008;
  net_IP in_stack_ffffffffffffffe0;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = puVar2;
    runtime_morestack_noctxt();
    puVar2 = in_stack_00000008;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined8 **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe0;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_IP_IsLinkLocalMulticast(in_stack_ffffffffffffffe0,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net___IP__IsLinkLocalUnicast(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  int unaff_R14;
  undefined8 *in_stack_00000008;
  net_IP in_stack_ffffffffffffffe0;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = puVar2;
    runtime_morestack_noctxt();
    puVar2 = in_stack_00000008;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined8 **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe0;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_IP_IsLinkLocalUnicast(in_stack_ffffffffffffffe0,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net___IP__IsLoopback(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  int unaff_R14;
  undefined8 *in_stack_00000008;
  net_IP in_stack_ffffffffffffffe0;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = puVar2;
    runtime_morestack_noctxt();
    puVar2 = in_stack_00000008;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined8 **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe0;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_IP_IsLoopback(in_stack_ffffffffffffffe0,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net___IP__IsMulticast(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  int unaff_R14;
  undefined8 *in_stack_00000008;
  net_IP in_stack_ffffffffffffffe0;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = puVar2;
    runtime_morestack_noctxt();
    puVar2 = in_stack_00000008;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined8 **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe0;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_IP_IsMulticast(in_stack_ffffffffffffffe0,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net___IP__IsPrivate(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  int unaff_R14;
  undefined8 *in_stack_00000008;
  net_IP in_stack_ffffffffffffffe0;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = puVar2;
    runtime_morestack_noctxt();
    puVar2 = in_stack_00000008;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined8 **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe0;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_IP_IsPrivate(in_stack_ffffffffffffffe0,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net___IP__IsUnspecified(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  undefined8 *puVar2;
  int unaff_R14;
  undefined8 *in_stack_00000008;
  net_IP in_stack_ffffffffffffffe0;
  
  puVar2 = (undefined8 *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000008 = puVar2;
    runtime_morestack_noctxt();
    puVar2 = in_stack_00000008;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined8 **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe0;
  }
  if (puVar2 != (undefined8 *)0x0) {
    net_IP_IsUnspecified(in_stack_ffffffffffffffe0,SUB81(*puVar2,0));
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net___IP__MarshalText(__uint8 ~r0,error ~r1)

{
  __uint8 **pp_Var1;
  __uint8 ~r0_00;
  uint8 *in_RAX;
  uint8 *unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  net_IP in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r0.array;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &~r0)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffe0;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.cap = (int)~r0.array;
    ~r0_00.len = unaff_retaddr;
    ~r0_00.array = unaff_RBP;
    net_IP_MarshalText(in_stack_ffffffffffffffe0,~r0_00,(error)~r0._8_16_);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net___IP__Mask(net_IPMask mask,net_IP ~r0)

{
  net_IPMask **ppnVar1;
  net_IP ~r0_00;
  uint8 *in_RAX;
  int in_RCX;
  uint8 *unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  net_IP in_stack_ffffffffffffffc8;
  net_IPMask in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    mask.array = in_RAX;
    mask.cap = in_RCX;
    runtime_morestack_noctxt();
    in_RAX = mask.array;
    in_RCX = mask.cap;
  }
  ppnVar1 = *(net_IPMask ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_IPMask **)0x0) && (*ppnVar1 == &mask)) {
    *ppnVar1 = (net_IPMask *)&stack0xffffffffffffffc8;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.cap = (int)mask.array;
    ~r0_00.len = unaff_retaddr;
    ~r0_00.array = unaff_RBP;
    net_IP_Mask(in_stack_ffffffffffffffc8,in_stack_ffffffffffffffe0,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void net___IP__String(string ~r0)

{
  string **ppsVar1;
  string ~r0_00;
  uint8 *in_RAX;
  uint8 *unaff_RBP;
  int unaff_R14;
  int unaff_retaddr;
  net_IP in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.str = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r0.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &~r0)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffe0;
  }
  if (in_RAX != (uint8 *)0x0) {
    ~r0_00.len = unaff_retaddr;
    ~r0_00.str = unaff_RBP;
    net_IP_String(in_stack_ffffffffffffffe0,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net___IP__To16(net_IP ~r0)

{
  net_IP **ppnVar1;
  undefined *puVar2;
  undefined8 *in_RAX;
  int extraout_RAX;
  int unaff_R14;
  net_IP nStack_30;
  byte local_c;
  undefined local_b;
  undefined local_a;
  undefined local_9;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.array = (uint8 *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (undefined8 *)~r0.array;
  }
  ppnVar1 = *(net_IP ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_IP **)0x0) && (*ppnVar1 == &~r0)) {
    *ppnVar1 = &nStack_30;
  }
  if (in_RAX != (undefined8 *)0x0) {
    puVar2 = (undefined *)*in_RAX;
    if (in_RAX[1] == 4) {
      local_9 = *puVar2;
      local_a = puVar2[1];
      local_b = puVar2[2];
      local_c = puVar2[3];
      runtime_makeslicecopy
                ((internal_abi_Type *)&DAT_00807920,0x10,net_v4InV6Prefix.len,net_v4InV6Prefix.array
                 ,(void *)(uint)local_c);
      *(undefined *)(extraout_RAX + 0xc) = local_9;
      *(undefined *)(extraout_RAX + 0xd) = local_a;
      *(undefined *)(extraout_RAX + 0xe) = local_b;
      *(byte *)(extraout_RAX + 0xf) = local_c;
    }
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net___IP__To4(net_IP ~r0)

{
  net_IP **ppnVar1;
  int *in_RAX;
  int i;
  int unaff_R14;
  
  ppnVar1 = *(net_IP ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_IP **)0x0) && (*ppnVar1 == &~r0)) {
    *ppnVar1 = (net_IP *)&stack0xfffffffffffffff8;
  }
  if (in_RAX != (int *)0x0) {
    if ((in_RAX[1] != 4) && (in_RAX[1] == 0x10)) {
      for (i = 0; (i < 10 && (*(char *)(*in_RAX + i) == '\0')); i = i + 1) {
      }
    }
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net___IPMask__Size(int ones,int bits)

{
  byte bVar1;
  int *piVar2;
  uint uVar3;
  int i;
  int n;
  uint8 v;
  char cVar4;
  dword dVar5;
  int unaff_R14;
  undefined auStack_18 [16];
  
  piVar2 = *(int **)(unaff_R14 + 0x20);
  if ((piVar2 != (int *)0x0) && ((undefined *)*piVar2 == &stack0x00000008)) {
    *piVar2 = (int)auStack_18;
  }
  if (ones != 0) {
    uVar3 = *(uint *)(ones + 8);
    i = 0;
    while( true ) {
      if ((int)uVar3 <= i) {
        return;
      }
      bVar1 = *(byte *)(*(int *)ones + i);
      dVar5 = (dword)bVar1;
      if (bVar1 != 0xff) break;
      i = i + 1;
    }
    for (; cVar4 = (char)dVar5, (dVar5 & 0x80) != 0; dVar5 = dVar5 << 1) {
    }
    while( true ) {
      if (cVar4 != '\0') {
        return;
      }
      i = i + 1;
      if ((int)uVar3 <= i) break;
      if (uVar3 <= (uint)i) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      cVar4 = *(char *)(*(int *)ones + i);
    }
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net___IPMask__String(string ~r0)

{
  uint8 uVar1;
  string **ppsVar2;
  int iVar3;
  int iVar4;
  int *in_RAX;
  uint8 *ptr;
  uint len;
  int i;
  uint8 tn;
  void *in_RDI;
  void *extraout_RDI;
  int unaff_R14;
  string in_stack_ffffffffffffffc8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.str = (uint8 *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (int *)~r0.str;
    in_RDI = extraout_RDI;
  }
  ppsVar2 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar2 != (string **)0x0) && (*ppsVar2 == &~r0)) {
    *ppsVar2 = (string *)&stack0xffffffffffffffc8;
  }
  if (in_RAX == (int *)0x0) {
                    // WARNING: Subroutine does not return
    runtime_panicwrap();
  }
  iVar3 = in_RAX[1];
  if (iVar3 != 0) {
    len = iVar3 << 1;
    iVar4 = *in_RAX;
    runtime_makeslice((internal_abi_Type *)&DAT_00807920,len,len,in_RDI);
    for (i = 0; i < iVar3; i = i + 1) {
      uVar1 = "goal , cons/mark  maxTrigger= pages/byte\n s.sweepgen= allocCount end tracegc\ntimer_deletens} value: {}, want {r1= [recovered]bad recoverybad g statusentersyscallwirep: p->m=) p->status=releasep: m= sysmonwait= preemptoff=cas64 failedGOTRACEBACK= m->gsignal=-byte limit\nruntime: sp=abi mismatchillegal seekinvalid slothost is downnot pollable<unknown:%d>Sfixed32KindSfixed64Kindmessage_typejava_packageoptimize_forswift_prefixruby_packagedebug_redactdouble_valuestring_valueverificationis_extension has no name has no typereflect.CopyOUT_OF_RANGENormalSocketgrpc-messageContent-Typegrpc-timeoutGrpc-MessageAddr: \'%s\', Cookie.Valuemax-forwardshttp2debug=1http2debug=2status code Multi-StatusNot ModifiedUnauthorizedI\'m a teapotNot ExtendedPUSH_PROMISECONTINUATION152587890625762939453125Cypro_MinoanMeetei_MayekPahawh_HmongSora_SompengSyloti_NagriRCodeSuccessRCodeRefusedprotobuf_keyprotobuf_val (sensitive)grpc_config=ECDSA-SHA256ECDSA-SHA384ECDSA-SHA512SSL_CERT_DIRTYPE_UNKNOWNempty objectMime-VersionX-ImforwardsX-Powered-By/dev/urandomautocompleteFieldNumbersSERIALNUMBERinvalid baseInstAltMatchunexpected )altmatch -> anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen..." /* TRUNCATED STRING LITERAL */
              [(*(byte *)(iVar4 + i) & 0xf) + 0x1f44];
      if (len <= (uint)(i << 1)) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      ptr[i * 2] = "goal , cons/mark  maxTrigger= pages/byte\n s.sweepgen= allocCount end tracegc\ntimer_deletens} value: {}, want {r1= [recovered]bad recoverybad g statusentersyscallwirep: p->m=) p->status=releasep: m= sysmonwait= preemptoff=cas64 failedGOTRACEBACK= m->gsignal=-byte limit\nruntime: sp=abi mismatchillegal seekinvalid slothost is downnot pollable<unknown:%d>Sfixed32KindSfixed64Kindmessage_typejava_packageoptimize_forswift_prefixruby_packagedebug_redactdouble_valuestring_valueverificationis_extension has no name has no typereflect.CopyOUT_OF_RANGENormalSocketgrpc-messageContent-Typegrpc-timeoutGrpc-MessageAddr: \'%s\', Cookie.Valuemax-forwardshttp2debug=1http2debug=2status code Multi-StatusNot ModifiedUnauthorizedI\'m a teapotNot ExtendedPUSH_PROMISECONTINUATION152587890625762939453125Cypro_MinoanMeetei_MayekPahawh_HmongSora_SompengSyloti_NagriRCodeSuccessRCodeRefusedprotobuf_keyprotobuf_val (sensitive)grpc_config=ECDSA-SHA256ECDSA-SHA384ECDSA-SHA512SSL_CERT_DIRTYPE_UNKNOWNempty objectMime-VersionX-ImforwardsX-Powered-By/dev/urandomautocompleteFieldNumbersSERIALNUMBERinvalid baseInstAltMatchunexpected )altmatch -> anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen..." /* TRUNCATED STRING LITERAL */
                   [(*(byte *)(iVar4 + i) >> 4) + 0x1f44];
      if (len <= i * 2 + 1U) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      ptr[i * 2 + 1] = uVar1;
    }
    runtime_slicebytetostring((runtime_tmpBuf *)0x0,ptr,len,in_stack_ffffffffffffffc8);
  }
  return;
}



void net___addrinfoErrno__Error(string ~r0)

{
  string **ppsVar1;
  string ~r0_00;
  undefined8 *in_RAX;
  int unaff_RBP;
  int unaff_R14;
  uint8 *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.str = (uint8 *)in_RAX;
    runtime_morestack_noctxt();
    in_RAX = (undefined8 *)~r0.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &~r0)) {
    *ppsVar1 = (string *)&stack0xfffffffffffffff0;
  }
  if (in_RAX != (undefined8 *)0x0) {
    ~r0_00.len = unaff_RBP;
    ~r0_00.str = in_stack_fffffffffffffff0;
    net__C_gai_strerror((net__Ctype_int)*in_RAX,~r0_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net___addrinfoErrno__Temporary(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net___addrinfoErrno__Timeout(bool ~r0)

{
  int *piVar1;
  undefined7 in_register_00000001;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xfffffffffffffff8;
  }
  if (CONCAT71(in_register_00000001,~r0) != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void net___TCPConn__Close(error ~r0)

{
  error **ppeVar1;
  error ~r0_00;
  runtime_itab *in_RAX;
  void *unaff_RBP;
  int unaff_R14;
  runtime_itab *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r0.tab = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r0.tab;
  }
  ppeVar1 = *(error ***)(unaff_R14 + 0x20);
  if ((ppeVar1 != (error **)0x0) && (*ppeVar1 == &~r0)) {
    *ppeVar1 = (error *)&stack0xfffffffffffffff0;
  }
  ~r0_00.data = unaff_RBP;
  ~r0_00.tab = in_stack_fffffffffffffff0;
  net___conn__Close((net_conn *)in_RAX,~r0_00);
  return;
}



void net___TCPConn__File(os_File *f,error err)

{
  error **ppeVar1;
  error err_00;
  os_File *in_RBX;
  os_File *extraout_RBX;
  void *unaff_RBP;
  int unaff_R14;
  runtime_itab *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    err.tab = (runtime_itab *)f;
    runtime_morestack_noctxt();
    f = (os_File *)err.tab;
    in_RBX = extraout_RBX;
  }
  ppeVar1 = *(error ***)(unaff_R14 + 0x20);
  if ((ppeVar1 != (error **)0x0) && (*ppeVar1 == &err)) {
    *ppeVar1 = (error *)&stack0xfffffffffffffff0;
  }
  err_00.data = unaff_RBP;
  err_00.tab = in_stack_fffffffffffffff0;
  net___conn__File((net_conn *)f,in_RBX,err_00);
  return;
}



void net___TCPConn__LocalAddr(net_Addr ~r0)

{
  net_Addr **ppnVar1;
  int unaff_R14;
  
  ppnVar1 = *(net_Addr ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_Addr **)0x0) && (*ppnVar1 == &~r0)) {
    *ppnVar1 = (net_Addr *)register0x00000020;
  }
  return;
}



void net___TCPConn__Read(__uint8 b,int ~r0,error ~r1)

{
  __uint8 **pp_Var1;
  error ~r1_00;
  int in_RCX;
  int in_RBX;
  void *unaff_RBP;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd8;
  runtime_itab *in_stack_fffffffffffffff0;
  
  b.len = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    b.array = (uint8 *)~r0;
    b.cap = in_RCX;
    runtime_morestack_noctxt();
    ~r0 = (int)b.array;
    in_RCX = b.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &b)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd8;
  }
  ~r1_00.data = unaff_RBP;
  ~r1_00.tab = in_stack_fffffffffffffff0;
  net___conn__Read((net_conn *)~r0,in_stack_ffffffffffffffd8,b.len,~r1_00);
  return;
}



void net___TCPConn__RemoteAddr(net_Addr ~r0)

{
  net_Addr **ppnVar1;
  int unaff_R14;
  
  ppnVar1 = *(net_Addr ***)(unaff_R14 + 0x20);
  if ((ppnVar1 != (net_Addr **)0x0) && (*ppnVar1 == &~r0)) {
    *ppnVar1 = (net_Addr *)register0x00000020;
  }
  return;
}



