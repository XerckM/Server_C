  return;
}



// WARNING: Unknown calling convention

void crypto_x509___Certificate__buildChains_func1(int certType,crypto_x509_Certificate *candidate)

{
  void *dstPtr;
  ___crypto_x509_Certificate chain;
  ___crypto_x509_Certificate currentChain;
  runtime_slice ~r0;
  ___crypto_x509_Certificate currentChain_00;
  runtime_slice ~r0_00;
  _____crypto_x509_Certificate chains;
  char extraout_AL;
  int *extraout_RAX;
  int *extraout_RAX_00;
  char **extraout_RAX_01;
  char **extraout_RAX_02;
  char **ppcVar1;
  int extraout_RAX_03;
  int extraout_RAX_04;
  int *extraout_RAX_05;
  int extraout_RAX_06;
  int extraout_RAX_07;
  void *extraout_RAX_08;
  void *extraout_RAX_09;
  void *pvVar2;
  int extraout_RAX_10;
  int *extraout_RAX_11;
  int *extraout_RAX_12;
  int *piVar3;
  void *extraout_RAX_13;
  void *extraout_RAX_14;
  void *extraout_RAX_15;
  int *extraout_RCX;
  crypto_x509_VerifyOptions *extraout_RCX_00;
  void *extraout_RCX_01;
  crypto_x509_VerifyOptions *pcVar4;
  crypto_x509_VerifyOptions *extraout_RCX_02;
  crypto_x509_VerifyOptions *pcVar5;
  void *extraout_RCX_03;
  void *oldCap;
  int in_RDX;
  void **ppvVar6;
  int iVar7;
  crypto_x509_VerifyOptions *fromlen;
  void *~r0_01;
  void *extraout_RBX;
  void *extraout_RBX_00;
  int extraout_RBX_01;
  int extraout_RBX_02;
  int extraout_RBX_03;
  int extraout_RBX_04;
  int extraout_RBX_05;
  void *pvVar8;
  void *extraout_RBX_06;
  void *extraout_RBX_07;
  int extraout_RBX_08;
  int extraout_RBX_09;
  void *extraout_RBX_10;
  int **_sigChecks;
  int extraout_RSI;
  int extraout_RSI_00;
  int iVar9;
  int extraout_RDI;
  _____crypto_x509_Certificate *_chains;
  void **extraout_R8;
  error *_err;
  void *extraout_R9;
  error *_hintErr;
  crypto_x509_Certificate **_hintCert;
  int **extraout_R11;
  int *extraout_R11_00;
  int *extraout_R11_01;
  int *extraout_R11_02;
  int *extraout_R11_03;
  crypto_x509_Certificate **extraout_R11_04;
  void **extraout_R11_05;
  int *extraout_R11_06;
  crypto_x509_Certificate **extraout_R11_07;
  int *extraout_R11_08;
  void **extraout_R11_09;
  crypto_x509_VerifyOptions *opts;
  crypto_x509_Certificate *c;
  int unaff_R14;
  int iStack0000000000000008;
  crypto_x509_Certificate *pcStack0000000000000010;
  error in_stack_ffffffffffffff28;
  int in_stack_ffffffffffffff38;
  error in_stack_ffffffffffffff40;
  int in_stack_ffffffffffffff50;
  error in_stack_ffffffffffffff58;
  crypto_x509_VerifyOptions *local_58;
  void *local_50;
  crypto_x509_Certificate *local_48;
  void *local_40;
  int local_38;
  int **local_30;
  int *local_28;
  crypto_x509_Certificate **local_20;
  int *local_18;
  void **local_10;
  
  iStack0000000000000008 = certType;
  pcStack0000000000000010 = candidate;
  while (&local_58 <= *(crypto_x509_VerifyOptions ***)(unaff_R14 + 0x10)) {
    runtime_morestack();
  }
  local_30 = *(int ***)(in_RDX + 0x20);
  local_10 = *(void ***)(in_RDX + 0x50);
  local_18 = *(int **)(in_RDX + 0x28);
  local_28 = *(int **)(in_RDX + 0x38);
  local_20 = *(crypto_x509_Certificate ***)(in_RDX + 0x40);
  local_48 = *(crypto_x509_Certificate **)(in_RDX + 0x30);
  if ((pcStack0000000000000010->PublicKey)._type != (internal_abi_Type *)0x0) {
    fromlen = *(crypto_x509_VerifyOptions **)(in_RDX + 0x10);
    local_58 = *(crypto_x509_VerifyOptions **)(in_RDX + 8);
    chain.cap = in_stack_ffffffffffffff38;
    chain.array = (crypto_x509_Certificate **)in_stack_ffffffffffffff28.tab;
    chain.len = (int)in_stack_ffffffffffffff28.data;
    crypto_x509_alreadyInChain(pcStack0000000000000010,chain,SUB81(local_58,0));
    if (extraout_AL == '\0') {
      pvVar2 = ~r0_01;
      if (*local_30 == (int *)0x0) {
        runtime_newobject((internal_abi_Type *)&DAT_00807760,~r0_01);
        piVar3 = extraout_RAX;
        pvVar2 = extraout_RBX;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11 = extraout_RAX_00;
          extraout_R11[1] = *local_30;
          piVar3 = extraout_RAX_00;
          pvVar2 = extraout_RBX_00;
        }
        *local_30 = piVar3;
      }
      **local_30 = **local_30 + 1;
      if (100 < **local_30) {
        runtime_newobject((internal_abi_Type *)&DAT_0083e560,pvVar2);
        extraout_RAX_01[1] = (char *)0x4e;
        *extraout_RAX_01 =
             "x509: signature check attempts limit reached while verifying certificate chain115792089210356248762697446949407573530086143415290314195533631308867097853951115792089210356248762697446949407573529996955224135760342422259061068512044369cannot convert slice with length %y to array or pointer to array with length %xmetadata: FromOutgoingContext got an odd number of input pairs for metadata: %dx509: invalid signature: parent certificate cannot sign this kind of certificatecrypto/rand: blocked for 60 seconds waiting to read random data from the kernel\ncrypto/ecdh: internal error: nistec ScalarBaseMult failed for a fixed-size inputgrpc: Server.RegisterService found the handler of type %v that does not satisfy %vreceived goaway with stream id: %v, which exceeds stream id of previous goaway: %vtransport: http2Server.HandleStreams failed to receive the preface from client: %vx509: a root or intermediate certificate is not authorized to sign for this name: refusing to use HTTP_PROXY value in CGI environment; see golang.org/s/cgihttpproxymethod configs in service config will be ignored due to presence of config selectorreflect: embedded type with methods not implemented if there is more than one fieldjson: invalid use of ,string struct tag, trying to unmarshal unquoted value into %vx509: issuer has name constraints but leaf contains unknown or unconstrained name:  (possibly because of %q while trying to verify candidate authority certificate %q)grpc: received message larger than max length allowed on current machine (%d vs. %d)x509: signature algorithm specifies an %s public key, but have public key of type %Treflect.Value.Interface: cannot return value obtained from unexported field or methodattempt to delete child with id %d from a parent (id=%d) that doesn\'t currently existSubchannel health check is unimplemented at server side, thus health check is disabledreflect: New of type that may not be allocated in heap (possibly undefined cgo C type)x509: a root or intermediate certificate is not authorized for an extended key us..." /* TRUNCATED STRING LITERAL */
        ;
        *local_18 = (int)go_itab__errors_errorString_error;
        ppcVar1 = extraout_RAX_01;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11_00 = (int)extraout_RAX_02;
          extraout_R11_00[1] = local_18[1];
          ppcVar1 = extraout_RAX_02;
        }
        local_18[1] = (int)ppcVar1;
        return;
      }
      crypto_x509___Certificate__CheckSignatureFrom
                (local_48,pcStack0000000000000010,in_stack_ffffffffffffff28);
      if (extraout_RAX_03 != 0) {
        if (*local_28 == 0) {
          *local_28 = extraout_RAX_03;
          iVar7 = extraout_RBX_01;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier4();
            *extraout_R11_01 = extraout_RBX_02;
            extraout_R11_01[1] = extraout_RCX[1];
            extraout_R11_01[2] = (int)pcStack0000000000000010;
            extraout_R11_01[3] = (int)*local_20;
            local_28 = extraout_RCX;
            iVar7 = extraout_RBX_02;
          }
          local_28[1] = iVar7;
          *local_20 = pcStack0000000000000010;
        }
        return;
      }
      currentChain.cap = in_stack_ffffffffffffff38;
      currentChain.array = (crypto_x509_Certificate **)in_stack_ffffffffffffff28.tab;
      currentChain.len = (int)in_stack_ffffffffffffff28.data;
      crypto_x509___Certificate__isValid
                (pcStack0000000000000010,iStack0000000000000008,currentChain,local_58,
                 in_stack_ffffffffffffff40);
      *local_18 = extraout_RAX_04;
      piVar3 = local_18;
      iVar7 = extraout_RBX_03;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_02 = extraout_RBX_04;
        extraout_R11_02[1] = piVar3[1];
        iVar7 = extraout_RBX_04;
      }
      piVar3[1] = iVar7;
      if (*piVar3 == 0) {
        if (iStack0000000000000008 == 1) {
          pcVar5 = (crypto_x509_VerifyOptions *)((int)&(fromlen->DNSName).str + 1);
          runtime_makeslicecopy
                    ((internal_abi_Type *)&DAT_0088f220,(int)pcVar5,(int)fromlen,local_58,
                     &DAT_00000001);
          if (pcVar5 <= fromlen) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          piVar3 = extraout_RAX_11;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_07 = pcStack0000000000000010;
            extraout_R11_07[1] = (crypto_x509_Certificate *)extraout_RAX_12[(int)fromlen];
            piVar3 = extraout_RAX_12;
            pcVar5 = extraout_RCX_02;
          }
          piVar3[(int)fromlen] = (int)pcStack0000000000000010;
          currentChain_00.cap = in_stack_ffffffffffffff38;
          currentChain_00.array = (crypto_x509_Certificate **)in_stack_ffffffffffffff28.tab;
          currentChain_00.len = (int)in_stack_ffffffffffffff28.data;
          chains.cap = in_stack_ffffffffffffff50;
          chains.array = (___crypto_x509_Certificate *)in_stack_ffffffffffffff40.tab;
          chains.len = (int)in_stack_ffffffffffffff40.data;
          crypto_x509___Certificate__buildChains
                    (pcStack0000000000000010,currentChain_00,piVar3,pcVar5,chains,
                     in_stack_ffffffffffffff58);
          *local_18 = extraout_RDI;
          local_50 = extraout_RAX_13;
          piVar3 = local_18;
          iVar7 = extraout_RBX_08;
          iVar9 = extraout_RSI;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_08 = extraout_RSI_00;
            extraout_R11_08[1] = piVar3[1];
            local_50 = extraout_RAX_14;
            iVar7 = extraout_RBX_09;
            iVar9 = extraout_RSI_00;
          }
          piVar3[1] = iVar9;
          pvVar8 = local_10[1];
          pvVar2 = (void *)((int)pvVar8 + iVar7);
          oldCap = local_10[2];
          local_40 = *local_10;
          if (oldCap < pvVar2) {
            ~r0_00.cap = in_stack_ffffffffffffff38;
            ~r0_00.array = in_stack_ffffffffffffff28.tab;
            ~r0_00.len = (int)in_stack_ffffffffffffff28.data;
            runtime_growslice(local_40,(int)pvVar2,(int)oldCap,iVar7,
                              (internal_abi_Type *)&DAT_00804800,~r0_00);
            oldCap = extraout_RCX_03;
            pvVar2 = extraout_RBX_10;
            local_40 = extraout_RAX_15;
          }
          dstPtr = (void *)((int)local_40 + ((int)pvVar8 * 0x18 & (int)pvVar8 - (int)oldCap >> 0x3f)
                           );
          runtime_typedslicecopy
                    ((internal_abi_Type *)&DAT_00804800,dstPtr,(int)pvVar2 - (int)pvVar8,local_50,
                     iVar7,(int)dstPtr);
          local_10[1] = pvVar2;
          local_10[2] = oldCap;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_09 = local_40;
            extraout_R11_09[1] = *extraout_R8;
            local_10 = extraout_R8;
          }
          *local_10 = local_40;
        }
        else if (iStack0000000000000008 == 2) {
          pcVar5 = (crypto_x509_VerifyOptions *)((int)&(fromlen->DNSName).str + 1);
          runtime_makeslicecopy
                    ((internal_abi_Type *)&DAT_0088f220,(int)pcVar5,(int)fromlen,local_58,
                     (void *)0x2);
          if (pcVar5 <= fromlen) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          local_38 = extraout_RAX_06;
          pcVar4 = pcVar5;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_04 = pcStack0000000000000010;
            extraout_R11_04[1] = *(crypto_x509_Certificate **)(extraout_RAX_07 + (int)fromlen * 8);
            local_38 = extraout_RAX_07;
            pcVar4 = extraout_RCX_00;
          }
          *(crypto_x509_Certificate **)(local_38 + (int)fromlen * 8) = pcStack0000000000000010;
          pvVar8 = (void *)((int)local_10[1] + 1);
          pvVar2 = *local_10;
          ppvVar6 = local_10;
          if (local_10[2] < pvVar8) {
            ~r0.cap = in_stack_ffffffffffffff38;
            ~r0.array = in_stack_ffffffffffffff28.tab;
            ~r0.len = (int)in_stack_ffffffffffffff28.data;
            runtime_growslice(pvVar2,(int)pvVar8,(int)local_10[2],1,
                              (internal_abi_Type *)&DAT_00804800,~r0);
            local_10[2] = extraout_RCX_01;
            pvVar2 = extraout_RAX_08;
            ppvVar6 = local_10;
            pvVar8 = extraout_RBX_06;
            if (runtime_writeBarrier._0_4_ != 0) {
              runtime_gcWriteBarrier2();
              *extraout_R11_05 = extraout_RAX_09;
              extraout_R11_05[1] = *ppvVar6;
              pvVar2 = extraout_RAX_09;
              pvVar8 = extraout_RBX_07;
            }
            *ppvVar6 = pvVar2;
            pcVar4 = pcVar5;
          }
          ppvVar6[1] = pvVar8;
          iVar7 = (int)pvVar8 * 3;
          *(crypto_x509_VerifyOptions **)((int)pvVar2 + (int)pvVar8 * 0x18 + -0x10) = pcVar4;
          *(crypto_x509_VerifyOptions **)((int)pvVar2 + (int)pvVar8 * 0x18 + -8) = pcVar4;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_06 = extraout_RAX_10;
            extraout_R11_06[1] = *(int *)((int)extraout_R9 + iVar7 * 8 + -0x18);
            local_38 = extraout_RAX_10;
            pvVar2 = extraout_R9;
          }
          *(int *)((int)pvVar2 + iVar7 * 8 + -0x18) = local_38;
        }
        return;
      }
      if (*local_28 == 0) {
        *local_28 = *piVar3;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier4();
          *extraout_R11_03 = extraout_RBX_05;
          extraout_R11_03[1] = extraout_RAX_05[1];
          extraout_R11_03[2] = (int)pcStack0000000000000010;
          extraout_R11_03[3] = (int)*local_20;
          local_28 = extraout_RAX_05;
          iVar7 = extraout_RBX_05;
        }
        local_28[1] = iVar7;
        *local_20 = pcStack0000000000000010;
      }
      return;
    }
  }
  return;
}



void crypto_x509_validHostname(string host,bool isPattern,bool ~r0)

{
  char *pcVar1;
  char *k;
  __string ~r0_00;
  char extraout_AL;
  int32 extraout_EAX;
  undefined7 in_register_00000001;
  char **extraout_RAX;
  char **ppcVar2;
  char in_CL;
  int i;
  char cVar3;
  undefined7 in_register_00000019;
  uint n;
  int extraout_RBX;
  int extraout_RBX_00;
  int iVar4;
  int j;
  int32 c;
  int iVar5;
  int unaff_R14;
  bool bVar6;
  char cStack0000000000000018;
  string in_stack_ffffffffffffff98;
  string in_stack_ffffffffffffffa8;
  undefined in_stack_ffffffffffffffb8 [16];
  int in_stack_ffffffffffffffc8;
  int iVar7;
  
  n = CONCAT71(in_register_00000019,~r0);
  cStack0000000000000018 = in_CL;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (cStack0000000000000018 == '\0') {
    if (n == 0) {
      cVar3 = '\0';
    }
    else {
      runtime_memequal();
      cVar3 = extraout_AL;
    }
    if ((cVar3 != '\0') && (bVar6 = n < n - 1, n = n - 1, bVar6)) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAlen();
    }
  }
  if (n == 0) {
    return;
  }
  ~r0_00.cap = in_stack_ffffffffffffffc8;
  ~r0_00.array = (string *)in_stack_ffffffffffffffb8._0_8_;
  ~r0_00.len = in_stack_ffffffffffffffb8._8_8_;
  strings_genSplit(in_stack_ffffffffffffff98,in_stack_ffffffffffffffa8,
                   CONCAT71(in_register_00000001,isPattern),n,~r0_00);
  i = 0;
  ppcVar2 = extraout_RAX;
  iVar4 = extraout_RBX;
  cVar3 = cStack0000000000000018;
  iVar7 = extraout_RBX;
  while( true ) {
    if (iVar4 <= i) {
      return;
    }
    pcVar1 = ppcVar2[1];
    if (pcVar1 == (char *)0x0) break;
    k = *ppcVar2;
    if ((((cVar3 == '\0') || (i != 0)) || (pcVar1 != &DAT_00000001)) || (*k != '*')) {
      iVar5 = 0;
      while (j = iVar5, j < (int)pcVar1) {
        c = (int32)(byte)k[j];
        if ((byte)k[j] < 0x80) {
          iVar5 = j + 1;
        }
        else {
          iVar4 = iVar7;
          runtime_decoderune(in_stack_ffffffffffffff98,(int)k,(int32)pcVar1,j);
          iVar5 = extraout_RBX_00;
          cVar3 = cStack0000000000000018;
          c = extraout_EAX;
          iVar7 = iVar4;
        }
        if ((((0x19 < (dword)(c - 0x61U)) && (9 < (dword)(c - 0x30U))) &&
            ((0x19 < (dword)(c - 0x41U) && ((c != 0x2d || (j == 0)))))) && (c != 0x5f)) {
          return;
        }
      }
    }
    ppcVar2 = ppcVar2 + 2;
    i = i + 1;
  }
  return;
}



void crypto_x509_matchExactly(string hostA,string hostB,bool ~r0)

{
  __uint8 ~r0_00;
  __uint8 ~r0_01;
  bool bVar1;
  int32 extraout_EAX;
  int32 extraout_EAX_00;
  undefined7 in_register_00000001;
  char *k;
  uint8 *ptr;
  char *extraout_RAX;
  uint8 *ptr_00;
  char *in_RCX;
  int i;
  int i_1;
  bool isAlreadyLowerCase;
  uint8 c_1;
  bool isAlreadyLowerCase_1;
  uint8 c_3;
  int iVar2;
  int in_RBX;
  int extraout_RBX;
  int n;
  int extraout_RBX_00;
  int extraout_RBX_01;
  int n_00;
  int extraout_RBX_02;
  int32 c;
  int32 c_2;
  int in_RDI;
  int unaff_R14;
  string in_stack_ffffffffffffff50;
  undefined8 in_stack_ffffffffffffff60;
  undefined8 in_stack_ffffffffffffff68;
  int iVar3;
  int in_stack_ffffffffffffff70;
  uint8 local_70 [32];
  uint8 local_50 [32];
  uint8 local_30 [32];
  char *local_10;
  
  k = (char *)CONCAT71(in_register_00000001,~r0);
  while (local_30 <= *(uint8 **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (((in_RBX == 0) || (((in_RBX == 1 && (*k == '.')) || (in_RDI == 0)))) ||
     ((in_RDI == 1 && (*in_RCX == '.')))) {
    return;
  }
  iVar2 = 0;
  do {
    if (in_RBX <= iVar2) {
      bVar1 = true;
      goto LAB_00698ba0;
    }
    c = (int32)(byte)k[iVar2];
    if ((byte)k[iVar2] < 0x80) {
      iVar2 = iVar2 + 1;
    }
    else {
      runtime_decoderune(in_stack_ffffffffffffff50,(int)k,(int32)in_RBX,iVar2);
      iVar2 = extraout_RBX;
      c = extraout_EAX;
    }
    if (c == 0xfffd) {
      bVar1 = false;
      goto LAB_00698ba0;
    }
  } while (0x19 < (dword)(c - 0x41U));
  bVar1 = false;
LAB_00698ba0:
  if (!bVar1) {
    ~r0_00.len = in_stack_ffffffffffffff68;
    ~r0_00.array = (uint8 *)in_stack_ffffffffffffff60;
    ~r0_00.cap = in_stack_ffffffffffffff70;
    runtime_stringtoslicebyte(&local_30,in_stack_ffffffffffffff50,~r0_00);
    for (i = 0; i < n; i = i + 1) {
      if ((byte)(ptr[i] + 0xbf) < 0x1a) {
        ptr[i] = ptr[i] + 0x20;
      }
    }
    runtime_slicebytetostring(&local_50,ptr,n,in_stack_ffffffffffffff50);
    k = extraout_RAX;
    in_RBX = extraout_RBX_00;
  }
  iVar2 = 0;
  iVar3 = in_RBX;
  local_10 = k;
  while( true ) {
    if (in_RDI <= iVar2) {
      bVar1 = true;
      goto LAB_00698c6c;
    }
    c_2 = (int32)(byte)in_RCX[iVar2];
    if ((byte)in_RCX[iVar2] < 0x80) {
      iVar2 = iVar2 + 1;
    }
    else {
      in_RBX = iVar3;
      runtime_decoderune(in_stack_ffffffffffffff50,(int)in_RCX,(int32)in_RDI,iVar2);
      iVar2 = extraout_RBX_01;
      c_2 = extraout_EAX_00;
      iVar3 = in_RBX;
    }
    if (c_2 == 0xfffd) break;
    if ((dword)(c_2 - 0x41U) < 0x1a) {
      bVar1 = false;
LAB_00698c6c:
      if (!bVar1) {
        ~r0_01.len = iVar3;
        ~r0_01.array = (uint8 *)in_stack_ffffffffffffff60;
        ~r0_01.cap = in_stack_ffffffffffffff70;
        runtime_stringtoslicebyte(&local_70,in_stack_ffffffffffffff50,~r0_01);
        for (i_1 = 0; i_1 < n_00; i_1 = i_1 + 1) {
          if ((byte)(ptr_00[i_1] + 0xbf) < 0x1a) {
            ptr_00[i_1] = ptr_00[i_1] + 0x20;
          }
        }
        in_RBX = iVar3;
        runtime_slicebytetostring
                  ((runtime_tmpBuf *)&stack0xffffffffffffff70,ptr_00,n_00,in_stack_ffffffffffffff50)
        ;
        in_RDI = extraout_RBX_02;
      }
      if (in_RBX == in_RDI) {
        runtime_memequal();
      }
      return;
    }
  }
  bVar1 = false;
  goto LAB_00698c6c;
}



void crypto_x509_matchHostnames(string pattern,string host,bool ~r0)

{
  __uint8 ~r0_00;
  __uint8 ~r0_01;
  __string ~r0_02;
  __string ~r0_03;
  char extraout_AL;
  char extraout_AL_00;
  int32 extraout_EAX;
  int32 extraout_EAX_00;
  undefined7 in_register_00000001;
  int iVar1;
  uint8 *ptr;
  int extraout_RAX;
  uint8 *ptr_00;
  char **extraout_RAX_00;
  int extraout_RAX_01;
  int extraout_RAX_02;
  int in_RCX;
  int i_1;
  int i;
  int i_2;
  bool isAlreadyLowerCase;
  uint8 c_1;
  char cVar2;
  bool isAlreadyLowerCase_1;
  uint8 c_3;
  int iVar3;
  int in_RBX;
  int extraout_RBX;
  int n;
  int extraout_RBX_00;
  int extraout_RBX_01;
  int n_00;
  int extraout_RBX_02;
  int extraout_RBX_03;
  uint extraout_RBX_04;
  uint in_RDI;
  int32 c;
  int32 c_2;
  int unaff_R14;
  bool bVar4;
  string in_stack_ffffffffffffff38;
  string in_stack_ffffffffffffff48;
  int in_stack_ffffffffffffff58;
  undefined8 in_stack_ffffffffffffff60;
  int in_stack_ffffffffffffff68;
  int iVar5;
  uint8 local_70 [32];
  uint8 local_50 [8];
  undefined local_48 [24];
  char **local_30;
  int local_28;
  int local_20;
  int local_18;
  char **local_10;
  
  iVar1 = CONCAT71(in_register_00000001,~r0);
  while (local_48 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  iVar3 = 0;
  do {
    if (in_RBX <= iVar3) {
      bVar4 = true;
      goto LAB_00698deb;
    }
    c = (int32)*(byte *)(iVar1 + iVar3);
    if (*(byte *)(iVar1 + iVar3) < 0x80) {
      iVar3 = iVar3 + 1;
    }
    else {
      runtime_decoderune(in_stack_ffffffffffffff38,iVar1,(int32)in_RBX,iVar3);
      iVar3 = extraout_RBX;
      c = extraout_EAX;
    }
    if (c == 0xfffd) {
      bVar4 = false;
      goto LAB_00698deb;
    }
  } while (0x19 < (dword)(c - 0x41U));
  bVar4 = false;
LAB_00698deb:
  if (!bVar4) {
    ~r0_00.cap = in_stack_ffffffffffffff58;
    ~r0_00.array = in_stack_ffffffffffffff48.str;
    ~r0_00.len = in_stack_ffffffffffffff48.len;
    runtime_stringtoslicebyte((runtime_tmpBuf *)local_50,in_stack_ffffffffffffff38,~r0_00);
    for (i_1 = 0; i_1 < n; i_1 = i_1 + 1) {
      if ((byte)(ptr[i_1] + 0xbf) < 0x1a) {
        ptr[i_1] = ptr[i_1] + 0x20;
      }
    }
    runtime_slicebytetostring((runtime_tmpBuf *)0x0,ptr,n,in_stack_ffffffffffffff38);
    iVar1 = extraout_RAX;
    in_RBX = extraout_RBX_00;
  }
  local_20 = iVar1;
  if (in_RDI == 0) {
    cVar2 = '\0';
  }
  else {
    runtime_memequal();
    cVar2 = extraout_AL;
  }
  if ((cVar2 != '\0') && (bVar4 = in_RDI < in_RDI - 1, in_RDI = in_RDI - 1, bVar4)) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAlen();
  }
  iVar3 = 0;
  iVar1 = local_20;
  while( true ) {
    if ((int)in_RDI <= iVar3) {
      bVar4 = true;
      goto LAB_00698f13;
    }
    c_2 = (int32)*(byte *)(iVar3 + in_RCX);
    if (*(byte *)(iVar3 + in_RCX) < 0x80) {
      iVar3 = iVar3 + 1;
    }
    else {
      runtime_decoderune(in_stack_ffffffffffffff38,in_RCX,(int32)in_RDI,iVar3);
      iVar1 = local_20;
      iVar3 = extraout_RBX_01;
      c_2 = extraout_EAX_00;
    }
    if (c_2 == 0xfffd) break;
    if ((dword)(c_2 - 0x41U) < 0x1a) {
      bVar4 = false;
LAB_00698f13:
      if (!bVar4) {
        ~r0_01.cap = in_stack_ffffffffffffff58;
        ~r0_01.array = in_stack_ffffffffffffff48.str;
        ~r0_01.len = in_stack_ffffffffffffff48.len;
        runtime_stringtoslicebyte(&local_70,in_stack_ffffffffffffff38,~r0_01);
        for (i_2 = 0; i_2 < n_00; i_2 = i_2 + 1) {
          if ((byte)(ptr_00[i_2] + 0xbf) < 0x1a) {
            ptr_00[i_2] = ptr_00[i_2] + 0x20;
          }
        }
        runtime_slicebytetostring((runtime_tmpBuf *)0x0,ptr_00,n_00,in_stack_ffffffffffffff38);
        iVar1 = local_20;
        in_RCX = extraout_RAX_02;
        in_RDI = extraout_RBX_04;
      }
      if ((in_RBX != 0) && (in_RDI != 0)) {
        ~r0_02.len = in_stack_ffffffffffffff60;
        ~r0_02.array = (string *)in_stack_ffffffffffffff58;
        ~r0_02.cap = in_stack_ffffffffffffff68;
        local_28 = in_RCX;
        strings_genSplit(in_stack_ffffffffffffff38,in_stack_ffffffffffffff48,iVar1,in_RBX,~r0_02);
        ~r0_03.len = in_stack_ffffffffffffff60;
        ~r0_03.array = (string *)in_stack_ffffffffffffff58;
        ~r0_03.cap = extraout_RBX_02;
        iVar1 = extraout_RBX_02;
        local_30 = extraout_RAX_00;
        strings_genSplit(in_stack_ffffffffffffff38,in_stack_ffffffffffffff48,local_28,in_RDI,~r0_03)
        ;
        if (extraout_RBX_03 != iVar1) {
          return;
        }
        i = 0;
        iVar3 = extraout_RAX_01;
        local_10 = local_30;
        iVar5 = iVar1;
        local_18 = extraout_RAX_01;
        while( true ) {
          if (iVar1 <= i) {
            return;
          }
          if ((((i != 0) || (local_10[1] != &DAT_00000001)) || (**local_10 != '*')) &&
             ((*(char **)(iVar3 + 8 + i * 0x10) != local_10[1] ||
              (iVar1 = iVar5, runtime_memequal(), iVar3 = local_18, iVar5 = iVar1,
              extraout_AL_00 == '\0')))) break;
          local_10 = local_10 + 2;
          i = i + 1;
        }
        return;
      }
      return;
    }
  }
  bVar4 = false;
  goto LAB_00698f13;
}



void crypto_x509___Certificate__VerifyHostname(crypto_x509_Certificate *c,string h,error ~r0)

{
  string s;
  string s_00;
  string s_01;
  string host;
  string host_00;
  string pattern;
  string hostA;
  string ~r0_00;
  net_IP ip;
  uint8 ~r0_01 [16];
  string host_01;
  string hostB;
  __uint8 ~r0_02;
  net_IP x;
  bool bVar1;
  char extraout_AL;
  bool valid;
  char extraout_AL_00;
  bool isAlreadyLowerCase;
  bool validCandidateName;
  char extraout_AL_01;
  char extraout_AL_02;
  char extraout_AL_03;
  int32 extraout_EAX;
  uint8 c_2;
  int iVar2;
  uint8 *ptr;
  uint extraout_RAX;
  uint uVar3;
  char *extraout_RAX_00;
  void *in_RCX;
  void *pvVar4;
  int iVar5;
  int i;
  int32 c_1;
  char *in_RBX;
  int extraout_RBX;
  int n;
  void *extraout_RBX_00;
  net_IP *pnVar6;
  uint8 *puVar7;
  char cVar8;
  int unaff_R14;
  undefined4 in_stack_ffffffffffffff10;
  undefined4 in_stack_ffffffffffffff14;
  undefined4 in_stack_ffffffffffffff18;
  undefined4 in_stack_ffffffffffffff1c;
  uint8 *in_stack_ffffffffffffff20;
  int in_stack_ffffffffffffff28;
  int in_stack_ffffffffffffff30;
  int in_stack_ffffffffffffff38;
  undefined local_88 [24];
  undefined auStack_70 [8];
  uint8 local_68 [40];
  undefined *local_40;
  uint8 *local_38;
  char *local_30;
  net_IP *local_28;
  crypto_x509_Certificate *local_20;
  undefined local_18 [16];
  
  while (auStack_70 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  local_30 = in_RBX;
  pvVar4 = in_RCX;
  if (((2 < (int)in_RCX) && (*in_RBX == '[')) && (in_RBX[(int)in_RCX + -1] == ']')) {
    local_30 = in_RBX + 1;
    pvVar4 = (void *)((int)in_RCX + -2);
  }
  s.str._4_4_ = in_stack_ffffffffffffff14;
  s.str._0_4_ = in_stack_ffffffffffffff10;
  s.len._0_4_ = in_stack_ffffffffffffff18;
  s.len._4_4_ = in_stack_ffffffffffffff1c;
  ~r0_01[8] = (char)in_stack_ffffffffffffff28;
  ~r0_01[9] = (char)((uint)in_stack_ffffffffffffff28 >> 8);
  ~r0_01[10] = (char)((uint)in_stack_ffffffffffffff28 >> 0x10);
  ~r0_01[11] = (char)((uint)in_stack_ffffffffffffff28 >> 0x18);
  ~r0_01[12] = (char)((uint)in_stack_ffffffffffffff28 >> 0x20);
  ~r0_01[13] = (char)((uint)in_stack_ffffffffffffff28 >> 0x28);
  ~r0_01[14] = (char)((uint)in_stack_ffffffffffffff28 >> 0x30);
  ~r0_01[15] = (char)((uint)in_stack_ffffffffffffff28 >> 0x38);
  ~r0_01._0_8_ = in_stack_ffffffffffffff20;
  net_parseIP(s,~r0_01,SUB81(local_30,0));
  if (extraout_AL == '\0') {
    local_40 = (undefined *)0x0;
  }
  else {
    local_40 = local_88;
  }
  local_20 = c;
  if (local_40 != (undefined *)0x0) {
    pnVar6 = (c->IPAddresses).array;
    iVar2 = (c->IPAddresses).len;
    iVar5 = 0;
    while( true ) {
      if (iVar2 <= iVar5) {
        local_18._8_8_ = pvVar4;
        local_18._0_8_ = local_30;
        runtime_convT((internal_abi_Type *)&DAT_0085bda0,&local_20,pvVar4);
        return;
      }
      ip.array._4_4_ = in_stack_ffffffffffffff14;
      ip.array._0_4_ = in_stack_ffffffffffffff10;
      ip.len._0_4_ = in_stack_ffffffffffffff18;
      ip.len._4_4_ = in_stack_ffffffffffffff1c;
      ip.cap = (int)in_stack_ffffffffffffff20;
      x.len = in_stack_ffffffffffffff30;
      x.array = (uint8 *)in_stack_ffffffffffffff28;
      x.cap = in_stack_ffffffffffffff38;
      local_28 = pnVar6;
      net_IP_Equal(ip,x,SUB81(local_40,0));
      if (extraout_AL_00 != '\0') break;
      pnVar6 = local_28 + 1;
      iVar5 = iVar5 + 1;
    }
    return;
  }
  iVar2 = 0;
  while( true ) {
    if ((int)in_RCX <= iVar2) {
      bVar1 = true;
      goto LAB_00699300;
    }
    c_1 = (int32)(byte)in_RBX[iVar2];
    if ((byte)in_RBX[iVar2] < 0x80) {
      iVar2 = iVar2 + 1;
    }
    else {
      s_00.str._4_4_ = in_stack_ffffffffffffff14;
      s_00.str._0_4_ = in_stack_ffffffffffffff10;
      s_00.len._0_4_ = in_stack_ffffffffffffff18;
      s_00.len._4_4_ = in_stack_ffffffffffffff1c;
      runtime_decoderune(s_00,(int)in_RBX,(int32)in_RCX,iVar2);
      iVar2 = extraout_RBX;
      c_1 = extraout_EAX;
    }
    if (c_1 == 0xfffd) break;
    if ((dword)(c_1 - 0x41U) < 0x1a) {
      bVar1 = false;
LAB_00699300:
      pvVar4 = in_RCX;
      if (!bVar1) {
        s_01.str._4_4_ = in_stack_ffffffffffffff14;
        s_01.str._0_4_ = in_stack_ffffffffffffff10;
        s_01.len._0_4_ = in_stack_ffffffffffffff18;
        s_01.len._4_4_ = in_stack_ffffffffffffff1c;
        ~r0_02.len = in_stack_ffffffffffffff28;
        ~r0_02.array = in_stack_ffffffffffffff20;
        ~r0_02.cap = in_stack_ffffffffffffff30;
        runtime_stringtoslicebyte((runtime_tmpBuf *)local_68,s_01,~r0_02);
        for (i = 0; i < n; i = i + 1) {
          if ((byte)(ptr[i] + 0xbf) < 0x1a) {
            ptr[i] = ptr[i] + 0x20;
          }
        }
        ~r0_00.str._4_4_ = in_stack_ffffffffffffff14;
        ~r0_00.str._0_4_ = in_stack_ffffffffffffff10;
        ~r0_00.len._0_4_ = in_stack_ffffffffffffff18;
        ~r0_00.len._4_4_ = in_stack_ffffffffffffff1c;
        runtime_slicebytetostring((runtime_tmpBuf *)0x0,ptr,n,~r0_00);
        pvVar4 = extraout_RBX_00;
        in_RBX = extraout_RAX_00;
      }
      host.str._4_4_ = in_stack_ffffffffffffff14;
      host.str._0_4_ = in_stack_ffffffffffffff10;
      host.len._0_4_ = in_stack_ffffffffffffff18;
      host.len._4_4_ = in_stack_ffffffffffffff1c;
      crypto_x509_validHostname(host,SUB81(in_RBX,0),SUB81(pvVar4,0));
      pnVar6 = (net_IP *)(c->DNSNames).array;
      iVar2 = (c->DNSNames).len;
      iVar5 = 0;
      uVar3 = extraout_RAX;
      do {
        if (iVar2 <= iVar5) {
          runtime_convT((internal_abi_Type *)&DAT_0085bda0,&local_20,in_RCX);
          return;
        }
        puVar7 = pnVar6->array;
        local_28 = pnVar6;
        if ((char)uVar3 == '\0') {
          cVar8 = '\0';
        }
        else {
          host_00.str._4_4_ = in_stack_ffffffffffffff14;
          host_00.str._0_4_ = in_stack_ffffffffffffff10;
          host_00.len._0_4_ = in_stack_ffffffffffffff18;
          host_00.len._4_4_ = in_stack_ffffffffffffff1c;
          local_38 = puVar7;
          crypto_x509_validHostname(host_00,SUB81(puVar7,0),SUB81(pnVar6->len,0));
          puVar7 = local_38;
          cVar8 = extraout_AL_01;
        }
        if (cVar8 == '\0') {
          hostA.str._4_4_ = in_stack_ffffffffffffff14;
          hostA.str._0_4_ = in_stack_ffffffffffffff10;
          hostA.len._0_4_ = in_stack_ffffffffffffff18;
          hostA.len._4_4_ = in_stack_ffffffffffffff1c;
          hostB.len = in_stack_ffffffffffffff28;
          hostB.str = in_stack_ffffffffffffff20;
          crypto_x509_matchExactly(hostA,hostB,SUB81(puVar7,0));
          if (extraout_AL_03 != '\0') {
            return;
          }
        }
        else {
          pattern.str._4_4_ = in_stack_ffffffffffffff14;
          pattern.str._0_4_ = in_stack_ffffffffffffff10;
          pattern.len._0_4_ = in_stack_ffffffffffffff18;
          pattern.len._4_4_ = in_stack_ffffffffffffff1c;
          host_01.len = in_stack_ffffffffffffff28;
          host_01.str = in_stack_ffffffffffffff20;
          crypto_x509_matchHostnames(pattern,host_01,SUB81(puVar7,0));
          if (extraout_AL_02 != '\0') {
            return;
          }
        }
        pnVar6 = (net_IP *)&local_28->cap;
        iVar5 = iVar5 + 1;
        uVar3 = extraout_RAX & 0xff;
      } while( true );
    }
  }
  bVar1 = false;
  goto LAB_00699300;
}



