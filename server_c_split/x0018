    int priority;
    struct string prefix;
    struct strings.trieNode *next;
    struct []*strings.trieNode table;
};

typedef struct crypto/x509.UnhandledCriticalExtension crypto/x509.UnhandledCriticalExtension, *Pcrypto/x509.UnhandledCriticalExtension;

struct crypto/x509.UnhandledCriticalExtension {
};

typedef struct runtime.adjustinfo runtime.adjustinfo, *Pruntime.adjustinfo;

struct runtime.adjustinfo {
    struct runtime.stack old;
    uintptr delta;
    struct runtime.pcvalueCache cache;
    uintptr sghi;
};

typedef struct hchan<int> hchan<int>, *Phchan<int>;

typedef struct waitq<int> waitq<int>, *Pwaitq<int>;

typedef struct sudog<int> sudog<int>, *Psudog<int>;

struct waitq<int> {
    struct sudog<int> *first;
    struct sudog<int> *last;
};

struct sudog<int> {
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    int *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

struct hchan<int> {
    uint qcount;
    uint dataqsiz;
    void *buf;
    uint16 elemsize;
    uint32 closed;
    struct internal/abi.Type *elemtype;
    uint sendx;
    uint recvx;
    struct waitq<int> recvq;
    struct waitq<int> sendq;
    struct runtime.mutex lock;
};

typedef struct noalg.map.hdr[string]*golang.org/x/net/trace.family noalg.map.hdr[string]*golang.org/x/net/trace.family, *Pnoalg.map.hdr[string]*golang.org/x/net/trace.family;

typedef struct noalg.map.bucket[string]*golang.org/x/net/trace.family noalg.map.bucket[string]*golang.org/x/net/trace.family, *Pnoalg.map.bucket[string]*golang.org/x/net/trace.family;

typedef struct golang.org/x/net/trace.family *noalg.[8]*golang.org/x/net/trace.family[8];

struct noalg.map.bucket[string]*golang.org/x/net/trace.family {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8]*golang.org/x/net/trace.family elems;
    void *overflow;
};

struct noalg.map.hdr[string]*golang.org/x/net/trace.family {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string]*golang.org/x/net/trace.family *buckets;
    struct noalg.map.bucket[string]*golang.org/x/net/trace.family *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct encoding/json.field encoding/json.field, *Pencoding/json.field;

typedef struct encoding/json.encodeState encoding/json.encodeState, *Pencoding/json.encodeState;

typedef struct encoding/json.encOpts encoding/json.encOpts, *Pencoding/json.encOpts;

typedef struct hash<interface_{},struct_{}> hash<interface_{},struct_{}>, *Phash<interface_{},struct_{}>;

typedef struct hash<interface_{},struct_{}> *map[interface_{}]struct_{};

typedef struct bucket<interface_{},struct_{}> bucket<interface_{},struct_{}>, *Pbucket<interface_{},struct_{}>;

struct bucket<interface_{},struct_{}> { // Original name: bucket<interface {},struct {}>
    uint8 tophash[8];
    interface_{} keys[8];
    struct struct_{} values[0];
    struct bucket<interface_{},struct_{}> *overflow;
};

struct encoding/json.encodeState {
    struct bytes.Buffer Buffer;
    uint ptrLevel;
    map[interface_{}]struct_{} ptrSeen;
};

struct encoding/json.encOpts {
    bool quoted;
    bool escapeHTML;
};

struct hash<interface_{},struct_{}> { // Original name: hash<interface {},struct {}>
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<interface_{},struct_{}> *buckets;
    struct bucket<interface_{},struct_{}> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct encoding/json.field {
    struct string name;
    struct []uint8 nameBytes;
    struct string nameNonEsc;
    struct string nameEscHTML;
    bool tag;
    struct []int index;
    reflect.Type typ;
    bool omitEmpty;
    bool quoted;
    void (**encoder)(struct encoding/json.encodeState *, struct reflect.Value, struct encoding/json.encOpts);
};

typedef struct crypto/sha512.digest crypto/sha512.digest, *Pcrypto/sha512.digest;

struct crypto/sha512.digest {
    uint64 h[8];
    uint8 x[128];
    int nx;
    uint64 len;
    crypto.Hash function;
};

typedef struct io.multiWriter io.multiWriter, *Pio.multiWriter;

typedef struct []io.Writer []io.Writer, *P[]io.Writer;

struct []io.Writer {
    io.Writer *array;
    int len;
    int cap;
};

struct io.multiWriter {
    struct []io.Writer writers;
};

typedef struct []internal/cpu.option []internal/cpu.option, *P[]internal/cpu.option;

struct []internal/cpu.option {
    struct internal/cpu.option *array;
    int len;
    int cap;
};

typedef struct google.golang.org/grpc.serverStream google.golang.org/grpc.serverStream, *Pgoogle.golang.org/grpc.serverStream;

struct google.golang.org/grpc.serverStream {
    context.Context ctx;
    google.golang.org/grpc/internal/transport.ServerTransport t;
    struct google.golang.org/grpc/internal/transport.Stream *s;
    struct google.golang.org/grpc.parser *p;
    google.golang.org/grpc.baseCodec codec;
    google.golang.org/grpc.Compressor cp;
    google.golang.org/grpc.Decompressor dc;
    google.golang.org/grpc/encoding.Compressor comp;
    google.golang.org/grpc/encoding.Compressor decomp;
    struct string sendCompressorName;
    int maxReceiveMessageSize;
    int maxSendMessageSize;
    struct google.golang.org/grpc.traceInfo *trInfo;
    struct []google.golang.org/grpc/stats.Handler statsHandler;
    struct []google.golang.org/grpc/internal/binarylog.MethodLogger binlogs;
    bool serverHeaderBinlogged;
    struct sync.Mutex mu;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/reflect/protoregistry.Files_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/reflect/protoregistry.Files_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/reflect/protoregistry.Files_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/protobuf/reflect/protoregistry.Files_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/protobuf/reflect/protoregistry.Files }
    uintptr F;
    struct google.golang.org/protobuf/reflect/protoregistry.Files *X0;
};

typedef struct noalg.map.hdr[interface_{}]*sync.entry noalg.map.hdr[interface_{}]*sync.entry, *Pnoalg.map.hdr[interface_{}]*sync.entry;

typedef struct noalg.map.bucket[interface_{}]*sync.entry noalg.map.bucket[interface_{}]*sync.entry, *Pnoalg.map.bucket[interface_{}]*sync.entry;

typedef struct sync.entry *noalg.[8]*sync.entry[8];

struct noalg.map.hdr[interface_{}]*sync.entry { // Original name: noalg.map.hdr[interface {}]*sync.entry
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[interface_{}]*sync.entry *buckets;
    struct noalg.map.bucket[interface_{}]*sync.entry *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

struct noalg.map.bucket[interface_{}]*sync.entry { // Original name: noalg.map.bucket[interface {}]*sync.entry
    uint8 topbits[8];
    noalg.[8]interface_{} keys;
    noalg.[8]*sync.entry elems;
    void *overflow;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*bool;_X1_*google.golang.org/grpc.addrConn_} noalg.struct_{_F_uintptr;_X0_*bool;_X1_*google.golang.org/grpc.addrConn_}, *Pnoalg.struct_{_F_uintptr;_X0_*bool;_X1_*google.golang.org/grpc.addrConn_};

struct noalg.struct_{_F_uintptr;_X0_*bool;_X1_*google.golang.org/grpc.addrConn_} { // Original name: noalg.struct { F uintptr; X0 *bool; X1 *google.golang.org/grpc.addrConn }
    uintptr F;
    bool *X0;
    struct google.golang.org/grpc.addrConn *X1;
};

typedef struct runtime.atomicSpanSetSpinePointer runtime.atomicSpanSetSpinePointer, *Pruntime.atomicSpanSetSpinePointer;

struct runtime.atomicSpanSetSpinePointer {
    struct runtime/internal/atomic.UnsafePointer a;
};

typedef struct otp/seedgen.x.1 otp/seedgen.x.1, *Potp/seedgen.x.1;

struct otp/seedgen.x.1 { // Original name: otp/seedgen.xÂ·1
};

typedef struct encoding/json.Number encoding/json.Number, *Pencoding/json.Number;

struct encoding/json.Number {
    uint8 *str;
    int len;
};

typedef struct mime/multipart.stickyErrorReader mime/multipart.stickyErrorReader, *Pmime/multipart.stickyErrorReader;

struct mime/multipart.stickyErrorReader {
    io.Reader r;
    error err;
};

typedef struct runtime.iface google.golang.org/protobuf/internal/descfmt.list;

typedef struct golang.org/x/net/http2.MetaHeadersFrame golang.org/x/net/http2.MetaHeadersFrame, *Pgolang.org/x/net/http2.MetaHeadersFrame;

typedef struct golang.org/x/net/http2.HeadersFrame golang.org/x/net/http2.HeadersFrame, *Pgolang.org/x/net/http2.HeadersFrame;

struct golang.org/x/net/http2.MetaHeadersFrame {
    struct golang.org/x/net/http2.HeadersFrame *HeadersFrame;
    struct []golang.org/x/net/http2/hpack.HeaderField Fields;
    bool Truncated;
};

struct golang.org/x/net/http2.HeadersFrame {
    struct golang.org/x/net/http2.FrameHeader FrameHeader;
    struct golang.org/x/net/http2.PriorityParam Priority;
    struct []uint8 headerFragBuf;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*[]net.nssCriterion_} noalg.struct_{_F_uintptr;_X0_*[]net.nssCriterion_}, *Pnoalg.struct_{_F_uintptr;_X0_*[]net.nssCriterion_};

struct noalg.struct_{_F_uintptr;_X0_*[]net.nssCriterion_} { // Original name: noalg.struct { F uintptr; X0 *[]net.nssCriterion }
    uintptr F;
    struct []net.nssCriterion *X0;
};

typedef struct google.golang.org/grpc/internal/transport.dataFrame google.golang.org/grpc/internal/transport.dataFrame, *Pgoogle.golang.org/grpc/internal/transport.dataFrame;

struct google.golang.org/grpc/internal/transport.dataFrame {
    uint32 streamID;
    bool endStream;
    struct []uint8 h;
    struct []uint8 d;
    void (**onEachWrite)(void);
};

typedef struct google.golang.org/protobuf/internal/impl.Export google.golang.org/protobuf/internal/impl.Export, *Pgoogle.golang.org/protobuf/internal/impl.Export;

struct google.golang.org/protobuf/internal/impl.Export {
};

typedef struct google.golang.org/grpc.rpcInfo google.golang.org/grpc.rpcInfo, *Pgoogle.golang.org/grpc.rpcInfo;

typedef struct google.golang.org/grpc.compressorInfo google.golang.org/grpc.compressorInfo, *Pgoogle.golang.org/grpc.compressorInfo;

struct google.golang.org/grpc.rpcInfo {
    bool failfast;
    struct google.golang.org/grpc.compressorInfo *preloaderInfo;
};

struct google.golang.org/grpc.compressorInfo {
    google.golang.org/grpc.baseCodec codec;
    google.golang.org/grpc.Compressor cp;
    google.golang.org/grpc/encoding.Compressor comp;
};

typedef struct google.golang.org/protobuf/internal/impl.mapReflect google.golang.org/protobuf/internal/impl.mapReflect, *Pgoogle.golang.org/protobuf/internal/impl.mapReflect;

struct google.golang.org/protobuf/internal/impl.mapReflect {
    struct reflect.Value v;
    google.golang.org/protobuf/internal/impl.Converter keyConv;
    google.golang.org/protobuf/internal/impl.Converter valConv;
};

typedef struct runtime.hiter runtime.hiter, *Pruntime.hiter;

typedef struct internal/abi.MapType internal/abi.MapType, *Pinternal/abi.MapType;

struct runtime.hiter {
    void *key;
    void *elem;
    struct internal/abi.MapType *t;
    struct runtime.hmap *h;
    void *buckets;
    struct runtime.bmap *bptr;
    struct []*runtime.bmap *overflow;
    struct []*runtime.bmap *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

struct internal/abi.MapType {
    struct internal/abi.Type Type;
    struct internal/abi.Type *Key;
    struct internal/abi.Type *Elem;
    struct internal/abi.Type *Bucket;
    void (**Hasher)(void *, uintptr, uintptr *);
    uint8 KeySize;
    uint8 ValueSize;
    uint16 BucketSize;
    uint32 Flags;
};

typedef struct google.golang.org/grpc/internal/resolver/passthrough.passthroughResolver google.golang.org/grpc/internal/resolver/passthrough.passthroughResolver, *Pgoogle.golang.org/grpc/internal/resolver/passthrough.passthroughResolver;

typedef struct runtime.iface google.golang.org/grpc/resolver.ClientConn;

struct google.golang.org/grpc/internal/resolver/passthrough.passthroughResolver {
    struct google.golang.org/grpc/resolver.Target target;
    google.golang.org/grpc/resolver.ClientConn cc;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*fmt.pp;_X1_interface_{};_X2_int32_} noalg.struct_{_F_uintptr;_X0_*fmt.pp;_X1_interface_{};_X2_int32_}, *Pnoalg.struct_{_F_uintptr;_X0_*fmt.pp;_X1_interface_{};_X2_int32_};

typedef struct fmt.pp fmt.pp, *Pfmt.pp;

typedef struct fmt.buffer fmt.buffer, *Pfmt.buffer;

typedef struct fmt.fmt fmt.fmt, *Pfmt.fmt;

struct noalg.struct_{_F_uintptr;_X0_*fmt.pp;_X1_interface_{};_X2_int32_} { // Original name: noalg.struct { F uintptr; X0 *fmt.pp; X1 interface {}; X2 int32 }
    uintptr F;
    struct fmt.pp *X0;
    interface_{} X1;
    int32 X2;
};

struct fmt.fmt {
    struct fmt.buffer *buf;
    struct fmt.fmtFlags fmtFlags;
    int wid;
    int prec;
    uint8 intbuf[68];
};

struct fmt.buffer {
    uint8 *array;
    int len;
    int cap;
};

struct fmt.pp {
    struct fmt.buffer buf;
    interface_{} arg;
    struct reflect.Value value;
    struct fmt.fmt fmt;
    bool reordered;
    bool goodArgNum;
    bool panicking;
    bool erroring;
    bool wrapErrs;
    struct []int wrappedErrs;
};

typedef struct struct_{_runtime/cgo.cstr_*uint8_} struct_{_runtime/cgo.cstr_*uint8_}, *Pstruct_{_runtime/cgo.cstr_*uint8_};

struct struct_{_runtime/cgo.cstr_*uint8_} { // Original name: struct { runtime/cgo.cstr *uint8 }
    uint8 *cstr;
};

typedef struct runtime.scase runtime.scase, *Pruntime.scase;

struct runtime.scase {
    struct runtime.hchan *c;
    void *elem;
};

typedef struct encoding/json.RawMessage noalg.[8]encoding/json.RawMessage[8];

typedef struct runtime.specialprofile runtime.specialprofile, *Pruntime.specialprofile;

struct runtime.specialprofile {
    struct runtime/internal/sys.NotInHeap _;
    struct runtime.special special;
    struct runtime.bucket *b;
};

typedef struct crypto/tls.CipherSuite crypto/tls.CipherSuite, *Pcrypto/tls.CipherSuite;

struct crypto/tls.CipherSuite {
    uint16 ID;
    struct string Name;
    struct []uint16 SupportedVersions;
    bool Insecure;
};

typedef struct google.golang.org/grpc/internal/binarylog.callIDGenerator google.golang.org/grpc/internal/binarylog.callIDGenerator, *Pgoogle.golang.org/grpc/internal/binarylog.callIDGenerator;

struct google.golang.org/grpc/internal/binarylog.callIDGenerator {
    uint64 id;
};

typedef struct syscall.NetlinkRouteRequest syscall.NetlinkRouteRequest, *Psyscall.NetlinkRouteRequest;

typedef struct syscall.RtGenmsg syscall.RtGenmsg, *Psyscall.RtGenmsg;

struct syscall.RtGenmsg {
    uint8 Family;
};

struct syscall.NetlinkRouteRequest {
    struct syscall.NlMsghdr Header;
    struct syscall.RtGenmsg Data;
};

typedef struct hchan<internal/singleflight.Result> *<-chan_internal/singleflight.Result;

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptors;_X1_*google.golang.org/protobuf/internal/impl.MessageInfo_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptors;_X1_*google.golang.org/protobuf/internal/impl.MessageInfo_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptors;_X1_*google.golang.org/protobuf/internal/impl.MessageInfo_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptors;_X1_*google.golang.org/protobuf/internal/impl.MessageInfo_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/reflect/protoreflect.FieldDescriptors; X1 *google.golang.org/protobuf/internal/impl.MessageInfo }
    uintptr F;
    google.golang.org/protobuf/reflect/protoreflect.FieldDescriptors X0;
    struct google.golang.org/protobuf/internal/impl.MessageInfo *X1;
};

typedef struct net/url.EscapeError net/url.EscapeError, *Pnet/url.EscapeError;

struct net/url.EscapeError {
    uint8 *str;
    int len;
};

typedef struct runtime.markBits runtime.markBits, *Pruntime.markBits;

struct runtime.markBits {
    uint8 *bytep;
    uint8 mask;
    uintptr index;
};

typedef struct sudog<*golang.org/x/net/trace.trace> sudog<*golang.org/x/net/trace.trace>, *Psudog<*golang.org/x/net/trace.trace>;

struct sudog<*golang.org/x/net/trace.trace> {
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    struct golang.org/x/net/trace.trace **elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

typedef uint8 strings.byteReplacer[256];

typedef struct []net/http.muxEntry []net/http.muxEntry, *P[]net/http.muxEntry;

struct []net/http.muxEntry {
    struct net/http.muxEntry *array;
    int len;
    int cap;
};

typedef struct vendor/golang.org/x/net/http/httpproxy.cidrMatch vendor/golang.org/x/net/http/httpproxy.cidrMatch, *Pvendor/golang.org/x/net/http/httpproxy.cidrMatch;

struct vendor/golang.org/x/net/http/httpproxy.cidrMatch {
    struct net.IPNet *cidr;
};

typedef struct noalg.map.bucket[net.Listener]bool noalg.map.bucket[net.Listener]bool, *Pnoalg.map.bucket[net.Listener]bool;

struct noalg.map.bucket[net.Listener]bool {
    uint8 topbits[8];
    noalg.[8]net.Listener keys;
    noalg.[8]bool elems;
    void *overflow;
};

typedef net.Listener noalg.[8]net.Listener[8];

typedef struct vendor/golang.org/x/net/dns/dnsmessage.AAAAResource vendor/golang.org/x/net/dns/dnsmessage.AAAAResource, *Pvendor/golang.org/x/net/dns/dnsmessage.AAAAResource;

struct vendor/golang.org/x/net/dns/dnsmessage.AAAAResource {
    uint8 AAAA[16];
};

typedef struct noalg.map.iter[*google.golang.org/grpc.addrConn]struct_{} noalg.map.iter[*google.golang.org/grpc.addrConn]struct_{}, *Pnoalg.map.iter[*google.golang.org/grpc.addrConn]struct_{};

struct noalg.map.iter[*google.golang.org/grpc.addrConn]struct_{} { // Original name: noalg.map.iter[*google.golang.org/grpc.addrConn]struct {}
    struct google.golang.org/grpc.addrConn **key;
    struct struct_{} *elem;
    void *t;
    struct noalg.map.hdr[*google.golang.org/grpc.addrConn]struct_{} *h;
    struct noalg.map.bucket[*google.golang.org/grpc.addrConn]struct_{} *buckets;
    struct noalg.map.bucket[*google.golang.org/grpc.addrConn]struct_{} *bptr;
    void *overflow;
    void *oldoverflow;
    uintptr startBucket;
    uint8 offset;
    bool wrapped;
    uint8 B;
    uint8 i;
    uintptr bucket;
    uintptr checkBucket;
};

typedef struct google.golang.org/grpc/resolver.ResolveNowOptions google.golang.org/grpc/resolver.ResolveNowOptions, *Pgoogle.golang.org/grpc/resolver.ResolveNowOptions;

struct google.golang.org/grpc/resolver.ResolveNowOptions {
};

typedef struct google.golang.org/protobuf/encoding/protojson.typeURLFieldRanger google.golang.org/protobuf/encoding/protojson.typeURLFieldRanger, *Pgoogle.golang.org/protobuf/encoding/protojson.typeURLFieldRanger;

struct google.golang.org/protobuf/encoding/protojson.typeURLFieldRanger {
    google.golang.org/protobuf/internal/order.FieldRanger FieldRanger;
    struct string typeURL;
};

typedef struct noalg.map.hdr[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor noalg.map.hdr[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor, *Pnoalg.map.hdr[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor;

typedef struct noalg.map.bucket[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor noalg.map.bucket[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor, *Pnoalg.map.bucket[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor;

struct noalg.map.bucket[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor {
    uint8 topbits[8];
    noalg.[8]string keys;
    noalg.[8][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor elems;
    void *overflow;
};

struct noalg.map.hdr[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor *buckets;
    struct noalg.map.bucket[string][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct []google.golang.org/protobuf/reflect/protoreflect.FileDescriptor noalg.[8][]google.golang.org/protobuf/reflect/protoreflect.FileDescriptor[8];

typedef struct runtime/internal/atomic.Pointer[go.shape.string] runtime/internal/atomic.Pointer[go.shape.string], *Pruntime/internal/atomic.Pointer[go.shape.string];

struct runtime/internal/atomic.Pointer[go.shape.string] {
    struct runtime/internal/atomic.UnsafePointer u;
};

typedef struct noalg.struct_{_F_uintptr;_R_*runtime.itabTableType_} noalg.struct_{_F_uintptr;_R_*runtime.itabTableType_}, *Pnoalg.struct_{_F_uintptr;_R_*runtime.itabTableType_};

struct noalg.struct_{_F_uintptr;_R_*runtime.itabTableType_} { // Original name: noalg.struct { F uintptr; R *runtime.itabTableType }
    uintptr F;
    struct runtime.itabTableType *R;
};

typedef struct syscall.RawSockaddrNetlink syscall.RawSockaddrNetlink, *Psyscall.RawSockaddrNetlink;

struct syscall.RawSockaddrNetlink {
    uint16 Family;
    uint16 Pad;
    uint32 Pid;
    uint32 Groups;
};

typedef struct []runtime.liveUserArenaChunk []runtime.liveUserArenaChunk, *P[]runtime.liveUserArenaChunk;

typedef struct runtime.liveUserArenaChunk runtime.liveUserArenaChunk, *Pruntime.liveUserArenaChunk;

struct []runtime.liveUserArenaChunk {
    struct runtime.liveUserArenaChunk *array;
    int len;
    int cap;
};

struct runtime.liveUserArenaChunk {
    struct runtime.mspan *mspan;
    void *x;
};

typedef struct net/http.noBody net/http.noBody, *Pnet/http.noBody;

struct net/http.noBody {
};

typedef struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X1_*google.golang.org/protobuf/internal/filedesc.stringName_} noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X1_*google.golang.org/protobuf/internal/filedesc.stringName_}, *Pnoalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X1_*google.golang.org/protobuf/internal/filedesc.stringName_};

struct noalg.struct_{_F_uintptr;_X0_google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor;_X1_*google.golang.org/protobuf/internal/filedesc.stringName_} { // Original name: noalg.struct { F uintptr; X0 google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor; X1 *google.golang.org/protobuf/internal/filedesc.stringName }
    uintptr F;
    google.golang.org/protobuf/reflect/protoreflect.FieldDescriptor X0;
    struct google.golang.org/protobuf/internal/filedesc.stringName *X1;
};

typedef struct internal/bisect.dedup internal/bisect.dedup, *Pinternal/bisect.dedup;

typedef struct hash<uint64,bool> hash<uint64,bool>, *Phash<uint64,bool>;

typedef struct hash<uint64,bool> *map[uint64]bool;

typedef struct bucket<uint64,bool> bucket<uint64,bool>, *Pbucket<uint64,bool>;

struct hash<uint64,bool> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<uint64,bool> *buckets;
    struct bucket<uint64,bool> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct internal/bisect.dedup {
    uint64 recent[128][4];
    struct sync.Mutex mu;
    map[uint64]bool m;
};

struct bucket<uint64,bool> {
    uint8 tophash[8];
    uint64 keys[8];
    bool values[8];
    struct bucket<uint64,bool> *overflow;
};

typedef struct noalg.struct_{_F_uintptr;_X0_int_} noalg.struct_{_F_uintptr;_X0_int_}, *Pnoalg.struct_{_F_uintptr;_X0_int_};

struct noalg.struct_{_F_uintptr;_X0_int_} { // Original name: noalg.struct { F uintptr; X0 int }
    uintptr F;
    int X0;
};

typedef struct sudog<net.result[[]net.IPAddr].1> sudog<net.result[[]net.IPAddr].1>, *Psudog<net.result[[]net.IPAddr].1>;

struct sudog<net.result[[]net.IPAddr].1> { // Original name: sudog<net.result[[]net.IPAddr]Â·1>
    struct runtime.g *g;
    struct runtime.sudog *next;
    struct runtime.sudog *prev;
    struct net.result[[]net.IPAddr].1 *elem;
    int64 acquiretime;
    int64 releasetime;
    uint32 ticket;
    bool isSelect;
    bool success;
    struct runtime.sudog *parent;
    struct runtime.sudog *waitlink;
    struct runtime.sudog *waittail;
    struct runtime.hchan *c;
};

typedef struct unicode.foldPair unicode.foldPair, *Punicode.foldPair;

struct unicode.foldPair {
    uint16 From;
    uint16 To;
};

typedef struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.StreamDesc;_X1_*google.golang.org/grpc.ClientConn;_X2_string;_X3_*google.golang.org/grpc/internal/serviceconfig.MethodConfig;_X4_*func();_X5_[]google.golang.org/grpc.CallOption_} noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.StreamDesc;_X1_*google.golang.org/grpc.ClientConn;_X2_string;_X3_*google.golang.org/grpc/internal/serviceconfig.MethodConfig;_X4_*func();_X5_[]google.golang.org/grpc.CallOption_}, *Pnoalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.StreamDesc;_X1_*google.golang.org/grpc.ClientConn;_X2_string;_X3_*google.golang.org/grpc/internal/serviceconfig.MethodConfig;_X4_*func();_X5_[]google.golang.org/grpc.CallOption_};

struct noalg.struct_{_F_uintptr;_X0_*google.golang.org/grpc.StreamDesc;_X1_*google.golang.org/grpc.ClientConn;_X2_string;_X3_*google.golang.org/grpc/internal/serviceconfig.MethodConfig;_X4_*func();_X5_[]google.golang.org/grpc.CallOption_} { // Original name: noalg.struct { F uintptr; X0 *google.golang.org/grpc.StreamDesc; X1 *google.golang.org/grpc.ClientConn; X2 string; X3 *google.golang.org/grpc/internal/serviceconfig.MethodConfig; X4 *func(); X5 []google.golang.org/grpc.CallOption }
    uintptr F;
    struct google.golang.org/grpc.StreamDesc *X0;
    struct google.golang.org/grpc.ClientConn *X1;
    struct string X2;
    struct google.golang.org/grpc/internal/serviceconfig.MethodConfig *X3;
    void (***X4)(void);
    struct []google.golang.org/grpc.CallOption X5;
};

typedef struct net.ipv6ZoneCache net.ipv6ZoneCache, *Pnet.ipv6ZoneCache;

typedef struct hash<int,string> *map[int]string;

struct net.ipv6ZoneCache {
    struct sync.RWMutex RWMutex;
    struct time.Time lastFetched;
    map[string]int toIndex;
    map[int]string toName;
};

typedef struct google.golang.org/protobuf/internal/filedesc.PlaceholderMessage google.golang.org/protobuf/internal/filedesc.PlaceholderMessage, *Pgoogle.golang.org/protobuf/internal/filedesc.PlaceholderMessage;

struct google.golang.org/protobuf/internal/filedesc.PlaceholderMessage {
    uint8 *str;
    int len;
};

typedef struct hash<reflect.Type,int> hash<reflect.Type,int>, *Phash<reflect.Type,int>;

typedef struct hash<reflect.Type,int> *map[reflect.Type]int;

typedef struct bucket<reflect.Type,int> bucket<reflect.Type,int>, *Pbucket<reflect.Type,int>;

struct hash<reflect.Type,int> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<reflect.Type,int> *buckets;
    struct bucket<reflect.Type,int> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<reflect.Type,int> {
    uint8 tophash[8];
    reflect.Type keys[8];
    int values[8];
    struct bucket<reflect.Type,int> *overflow;
};

typedef struct net/http.bufioFlushWriter net/http.bufioFlushWriter, *Pnet/http.bufioFlushWriter;

struct net/http.bufioFlushWriter {
    io.Writer w;
};

typedef struct go.shape.struct_{_net.servers_[]string;_net.search_[]string;_net.ndots_int;_net.timeout_time.Duration;_net.attempts_int;_net.rotate_bool;_net.unknownOpt_bool;_net.lookup_[]string;_net.err_error;_net.mtime_time.Time;_net.soffset_uint32;_net.singleRequest_bool;_net.useTCP_bool;_net.trustAD_bool;_net.noReload_bool_} go.shape.struct_{_net.servers_[]string;_net.search_[]string;_net.ndots_int;_net.timeout_time.Duration;_net.attempts_int;_net.rotate_bool;_net.unknownOpt_bool;_net.lookup_[]string;_net.err_error;_net.mtime_time.Time;_net.soffset_uint32;_net.singleRequest_bool;_net.useTCP_bool;_net.trustAD_bool;_net.noReload_bool_}, *Pgo.shape.struct_{_net.servers_[]string;_net.search_[]string;_net.ndots_int;_net.timeout_time.Duration;_net.attempts_int;_net.rotate_bool;_net.unknownOpt_bool;_net.lookup_[]string;_net.err_error;_net.mtime_time.Time;_net.soffset_uint32;_net.singleRequest_bool;_net.useTCP_bool;_net.trustAD_bool;_net.noReload_bool_};

struct go.shape.struct_{_net.servers_[]string;_net.search_[]string;_net.ndots_int;_net.timeout_time.Duration;_net.attempts_int;_net.rotate_bool;_net.unknownOpt_bool;_net.lookup_[]string;_net.err_error;_net.mtime_time.Time;_net.soffset_uint32;_net.singleRequest_bool;_net.useTCP_bool;_net.trustAD_bool;_net.noReload_bool_} { // Original name: go.shape.struct { net.servers []string; net.search []string; net.ndots int; net.timeout time.Duration; net.attempts int; net.rotate bool; net.unknownOpt bool; net.lookup []string; net.err error; net.mtime time.Time; net.soffset uint32; net.singleRequest bool; net.useTCP bool; net.trustAD bool; net.noReload bool }
    struct []string servers;
    struct []string search;
    int ndots;
    time.Duration timeout;
    int attempts;
    bool rotate;
    bool unknownOpt;
    struct []string lookup;
    error err;
    struct time.Time mtime;
    uint32 soffset;
    bool singleRequest;
    bool useTCP;
    bool trustAD;
    bool noReload;
};

typedef struct hash<string,map[string]int> hash<string,map[string]int>, *Phash<string,map[string]int>;

typedef struct hash<string,map[string]int> *map[string]map[string]int;

typedef struct bucket<string,map[string]int> bucket<string,map[string]int>, *Pbucket<string,map[string]int>;

struct bucket<string,map[string]int> {
    uint8 tophash[8];
    struct string keys[8];
    map[string]int values[8];
    struct bucket<string,map[string]int> *overflow;
};

struct hash<string,map[string]int> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,map[string]int> *buckets;
    struct bucket<string,map[string]int> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

typedef struct golang.org/x/text/unicode/bidi.Properties golang.org/x/text/unicode/bidi.Properties, *Pgolang.org/x/text/unicode/bidi.Properties;

struct golang.org/x/text/unicode/bidi.Properties {
    uint8 entry;
    uint8 last;
};

typedef struct encoding/asn1.fieldParameters encoding/asn1.fieldParameters, *Pencoding/asn1.fieldParameters;

struct encoding/asn1.fieldParameters {
    bool optional;
    bool explicit;
    bool application;
    bool private;
    int64 *defaultValue;
    int *tag;
    int stringType;
    int timeType;
    bool set;
    bool omitEmpty;
};

typedef struct vendor/golang.org/x/text/unicode/bidi.Properties vendor/golang.org/x/text/unicode/bidi.Properties, *Pvendor/golang.org/x/text/unicode/bidi.Properties;

struct vendor/golang.org/x/text/unicode/bidi.Properties {
    uint8 entry;
    uint8 last;
};

typedef struct noalg.struct_{_F_uintptr;_X0_uintptr;_X1_uintptr;_X2_*runtime.g_} noalg.struct_{_F_uintptr;_X0_uintptr;_X1_uintptr;_X2_*runtime.g_}, *Pnoalg.struct_{_F_uintptr;_X0_uintptr;_X1_uintptr;_X2_*runtime.g_};

struct noalg.struct_{_F_uintptr;_X0_uintptr;_X1_uintptr;_X2_*runtime.g_} { // Original name: noalg.struct { F uintptr; X0 uintptr; X1 uintptr; X2 *runtime.g }
    uintptr F;
    uintptr X0;
    uintptr X1;
    struct runtime.g *X2;
};

typedef struct internal/poll.splicePipe internal/poll.splicePipe, *Pinternal/poll.splicePipe;

typedef struct internal/poll.splicePipeFields internal/poll.splicePipeFields, *Pinternal/poll.splicePipeFields;

struct internal/poll.splicePipeFields {
    int rfd;
    int wfd;
    int data;
};

struct internal/poll.splicePipe {
    struct internal/poll.splicePipeFields splicePipeFields;
    uint8 _[24];
};

typedef struct noalg.map.hdr[golang.org/x/net/http2.SettingID]bool noalg.map.hdr[golang.org/x/net/http2.SettingID]bool, *Pnoalg.map.hdr[golang.org/x/net/http2.SettingID]bool;

struct noalg.map.hdr[golang.org/x/net/http2.SettingID]bool {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct noalg.map.bucket[golang.org/x/net/http2.SettingID]bool *buckets;
    struct noalg.map.bucket[golang.org/x/net/http2.SettingID]bool *oldbuckets;
    uintptr nevacuate;
    void *extra;
};

typedef struct runtime.reflectMethodValue runtime.reflectMethodValue, *Pruntime.reflectMethodValue;

struct runtime.reflectMethodValue {
    uintptr fn;
    struct runtime.bitvector *stack;
    uintptr argLen;
};

typedef struct google.golang.org/grpc/internal/binarylog.logger google.golang.org/grpc/internal/binarylog.logger, *Pgoogle.golang.org/grpc/internal/binarylog.logger;

typedef struct google.golang.org/grpc/internal/binarylog.LoggerConfig google.golang.org/grpc/internal/binarylog.LoggerConfig, *Pgoogle.golang.org/grpc/internal/binarylog.LoggerConfig;

typedef struct hash<string,*google.golang.org/grpc/internal/binarylog.MethodLoggerConfig> hash<string,*google.golang.org/grpc/internal/binarylog.MethodLoggerConfig>, *Phash<string,*google.golang.org/grpc/internal/binarylog.MethodLoggerConfig>;

typedef struct hash<string,*google.golang.org/grpc/internal/binarylog.MethodLoggerConfig> *map[string]*google.golang.org/grpc/internal/binarylog.MethodLoggerConfig;

typedef struct hash<string,struct_{}> hash<string,struct_{}>, *Phash<string,struct_{}>;

typedef struct hash<string,struct_{}> *map[string]struct_{};

typedef struct bucket<string,*google.golang.org/grpc/internal/binarylog.MethodLoggerConfig> bucket<string,*google.golang.org/grpc/internal/binarylog.MethodLoggerConfig>, *Pbucket<string,*google.golang.org/grpc/internal/binarylog.MethodLoggerConfig>;

typedef struct bucket<string,struct_{}> bucket<string,struct_{}>, *Pbucket<string,struct_{}>;

struct google.golang.org/grpc/internal/binarylog.LoggerConfig {
    struct google.golang.org/grpc/internal/binarylog.MethodLoggerConfig *All;
    map[string]*google.golang.org/grpc/internal/binarylog.MethodLoggerConfig Services;
    map[string]*google.golang.org/grpc/internal/binarylog.MethodLoggerConfig Methods;
    map[string]struct_{} Blacklist;
};

struct google.golang.org/grpc/internal/binarylog.logger {
    struct google.golang.org/grpc/internal/binarylog.LoggerConfig config;
};

struct hash<string,*google.golang.org/grpc/internal/binarylog.MethodLoggerConfig> {
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,*google.golang.org/grpc/internal/binarylog.MethodLoggerConfig> *buckets;
    struct bucket<string,*google.golang.org/grpc/internal/binarylog.MethodLoggerConfig> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct hash<string,struct_{}> { // Original name: hash<string,struct {}>
    int count;
    uint8 flags;
    uint8 B;
    uint16 noverflow;
    uint32 hash0;
    struct bucket<string,struct_{}> *buckets;
    struct bucket<string,struct_{}> *oldbuckets;
    uintptr nevacuate;
    struct runtime.mapextra *extra;
};

struct bucket<string,struct_{}> { // Original name: bucket<string,struct {}>
    uint8 tophash[8];
    struct string keys[8];
    struct struct_{} values[0];
    struct bucket<string,struct_{}> *overflow;
};

struct bucket<string,*google.golang.org/grpc/internal/binarylog.MethodLoggerConfig> {
    uint8 tophash[8];
    struct string keys[8];
    struct google.golang.org/grpc/internal/binarylog.MethodLoggerConfig *values[8];
    struct bucket<string,*google.golang.org/grpc/internal/binarylog.MethodLoggerConfig> *overflow;
};

typedef struct google.golang.org/grpc/stats.incomingTagsKey google.golang.org/grpc/stats.incomingTagsKey, *Pgoogle.golang.org/grpc/stats.incomingTagsKey;

struct google.golang.org/grpc/stats.incomingTagsKey {
};

typedef struct time.fileSizeError time.fileSizeError, *Ptime.fileSizeError;

struct time.fileSizeError {
    uint8 *str;
    int len;
};

typedef struct google.golang.org/grpc/peer.peerKey google.golang.org/grpc/peer.peerKey, *Pgoogle.golang.org/grpc/peer.peerKey;

struct google.golang.org/grpc/peer.peerKey {
};

typedef struct noalg.struct_{_regexp/syntax.started_bool;_regexp/syntax.heap_bool;_regexp/syntax.openDefer_bool;_regexp/syntax.sp_uintptr;_regexp/syntax.pc_uintptr;_regexp/syntax.fn_uintptr;_regexp/syntax._panic_uintptr;_regexp/syntax.link_uintptr;_regexp/syntax.fd_uintptr;_regexp/syntax.varp_uintptr;_regexp/syntax.framepc_uintptr_} noalg.struct_{_regexp/syntax.started_bool;_regexp/syntax.heap_bool;_regexp/syntax.openDefer_bool;_regexp/syntax.sp_uintptr;_regexp/syntax.pc_uintptr;_regexp/syntax.fn_uintptr;_regexp/syntax._panic_uintptr;_regexp/syntax.link_uintptr;_regexp/syntax.fd_uintptr;_regexp/syntax.varp_uintptr;_regexp/syntax.framepc_uintptr_}, *Pnoalg.struct_{_regexp/syntax.started_bool;_regexp/syntax.heap_bool;_regexp/syntax.openDefer_bool;_regexp/syntax.sp_uintptr;_regexp/syntax.pc_uintptr;_regexp/syntax.fn_uintptr;_regexp/syntax._panic_uintptr;_regexp/syntax.link_uintptr;_regexp/syntax.fd_uintptr;_regexp/syntax.varp_uintptr;_regexp/syntax.framepc_uintptr_};

struct noalg.struct_{_regexp/syntax.started_bool;_regexp/syntax.heap_bool;_regexp/syntax.openDefer_bool;_regexp/syntax.sp_uintptr;_regexp/syntax.pc_uintptr;_regexp/syntax.fn_uintptr;_regexp/syntax._panic_uintptr;_regexp/syntax.link_uintptr;_regexp/syntax.fd_uintptr;_regexp/syntax.varp_uintptr;_regexp/syntax.framepc_uintptr_} { // Original name: noalg.struct { regexp/syntax.started bool; regexp/syntax.heap bool; regexp/syntax.openDefer bool; regexp/syntax.sp uintptr; regexp/syntax.pc uintptr; regexp/syntax.fn uintptr; regexp/syntax._panic uintptr; regexp/syntax.link uintptr; regexp/syntax.fd uintptr; regexp/syntax.varp uintptr; regexp/syntax.framepc uintptr }
    bool started;
    bool heap;
    bool openDefer;
    uintptr sp;
    uintptr pc;
    uintptr fn;
    uintptr _panic;
    uintptr link;
    uintptr fd;
    uintptr varp;
    uintptr framepc;
};

typedef struct internal/nettrace.LookupIPAltResolverKey internal/nettrace.LookupIPAltResolverKey, *Pinternal/nettrace.LookupIPAltResolverKey;

struct internal/nettrace.LookupIPAltResolverKey {
};

typedef struct noalg.struct_{_F_uintptr;_X0_golang.org/x/net/trace.traceList_} noalg.struct_{_F_uintptr;_X0_golang.org/x/net/trace.traceList_}, *Pnoalg.struct_{_F_uintptr;_X0_golang.org/x/net/trace.traceList_};

struct noalg.struct_{_F_uintptr;_X0_golang.org/x/net/trace.traceList_} { // Original name: noalg.struct { F uintptr; X0 golang.org/x/net/trace.traceList }
    uintptr F;
    struct golang.org/x/net/trace.traceList X0;
};

typedef struct runtime.iface flag.boolFlag;

