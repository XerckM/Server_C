  uStack_28 = local_50;
  uStack_24 = uStack_4c;
  uStack_20 = uStack_48;
  uStack_1c = uStack_44;
  uStack_38 = (undefined4)extraout_RSI;
  uStack_34 = (undefined4)((uint)extraout_RSI >> 0x20);
  local_18._8_4_ = uStack_38;
  local_18._0_8_ = extraout_RDI;
  uStack_c = uStack_34;
  if (in_RAX == (map_string__encoding_json_field)0x0) {
    pvVar2 = (void *)0x0;
  }
  else {
    pvVar2 = *(void **)&in_RAX->flags;
  }
  runtime_convT((internal_abi_Type *)&DAT_00860c40,&local_30,in_RAX);
  actual.data = pvVar2;
  actual._type = in_stack_ffffffffffffff68;
  sync___Map__LoadOrStore
            (&encoding_json_fieldCache,in_stack_ffffffffffffff48,in_stack_ffffffffffffff58,actual,
             SUB81(pvVar2,0));
  local_30 = in_XMM15._0_8_;
  uStack_28 = in_XMM15._0_4_;
  uStack_24 = in_XMM15._4_4_;
  uStack_20 = in_XMM15._8_4_;
  uStack_1c = in_XMM15._12_4_;
  if (have_00 == (internal_abi_Type *)&DAT_00860c40) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicdottypeE
            (have_00,(internal_abi_Type *)&DAT_00860c40,(internal_abi_Type *)&DAT_00821120);
}



void encoding_json_appendFoldedName(__uint8 out,__uint8 in,__uint8 ~r0)

{
  int32 r;
  int32 r_00;
  void *in_RAX;
  void *extraout_RAX;
  uint extraout_RAX_00;
  void *extraout_RAX_01;
  uint uVar1;
  void *extraout_RAX_02;
  uint extraout_RAX_03;
  uint in_RCX;
  uint extraout_RCX;
  uint extraout_RCX_00;
  uint extraout_RCX_01;
  int i;
  uint in_RBX;
  uint extraout_RBX;
  int extraout_RBX_00;
  int n;
  uint extraout_RBX_01;
  uint extraout_RBX_02;
  int iVar2;
  int extraout_RBX_03;
  uint in_RSI;
  int in_RDI;
  int in_R8;
  uint8 c;
  byte bVar3;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffff80;
  __uint8 in_stack_ffffffffffffff98;
  int32 r2;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  i = 0;
  while( true ) {
    if ((int)in_RSI <= i) {
      return;
    }
    if (in_RSI <= (uint)i) break;
    bVar3 = *(byte *)(in_RDI + i);
    if (bVar3 < 0x80) {
      if ((byte)(bVar3 + 0x9f) < 0x1a) {
        bVar3 = bVar3 - 0x20;
      }
      in_RBX = in_RBX + 1;
      if (in_RCX < in_RBX) {
        runtime_growslice(in_RAX,in_RBX,in_RCX,1,(internal_abi_Type *)&DAT_00807920,
                          (runtime_slice)in_stack_ffffffffffffff80);
        in_RAX = extraout_RAX;
        in_RCX = extraout_RCX;
        in_RBX = extraout_RBX;
      }
      *(byte *)((in_RBX - 1) + (int)in_RAX) = bVar3;
      i = i + 1;
    }
    else {
      unicode_utf8_DecodeRune
                (in_stack_ffffffffffffff80,
                 (sdword)in_RDI + ((dword)(-(in_R8 - i) >> 0x3f) & (dword)i),in_RSI - i);
      uVar1 = extraout_RAX_00;
      iVar2 = extraout_RBX_00;
      do {
        r_00 = (int32)uVar1;
        unicode_SimpleFold(r_00,(int32)iVar2);
        uVar1 = extraout_RAX_03;
        iVar2 = extraout_RBX_03;
      } while (r_00 < (sdword)(dword)extraout_RAX_03);
      if ((dword)extraout_RAX_03 < 0x80) {
        in_RBX = in_RBX + 1;
        if (in_RCX < in_RBX) {
          runtime_growslice(in_RAX,in_RBX,in_RCX,1,(internal_abi_Type *)&DAT_00807920,
                            (runtime_slice)in_stack_ffffffffffffff80);
          uVar1 = extraout_RAX_03 & 0xffffffff;
          in_RCX = extraout_RCX_00;
          in_RAX = extraout_RAX_01;
          in_RBX = extraout_RBX_01;
        }
        *(char *)((in_RBX - 1) + (int)in_RAX) = (char)uVar1;
      }
      else {
        unicode_utf8_appendRuneNonASCII
                  (in_stack_ffffffffffffff80,(int32)in_RAX,in_stack_ffffffffffffff98);
        in_RCX = extraout_RCX_01;
        in_RAX = extraout_RAX_02;
        in_RBX = extraout_RBX_02;
      }
      i = i + extraout_RBX_00;
    }
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void encoding_json_appendHTMLEscape(__uint8 dst,__uint8 src,__uint8 ~r0)

{
  byte bVar1;
  uint8 uVar2;
  uint8 uVar3;
  void *in_RAX;
  void *extraout_RAX;
  void *extraout_RAX_00;
  void *extraout_RAX_01;
  uint uVar4;
  void *extraout_RAX_02;
  void *extraout_RAX_03;
  uint in_RCX;
  uint extraout_RCX;
  uint extraout_RCX_00;
  uint extraout_RCX_01;
  uint extraout_RCX_02;
  uint uVar5;
  size_t sVar6;
  uint in_RBX;
  uint extraout_RBX;
  uint extraout_RBX_00;
  uint extraout_RBX_01;
  uint extraout_RBX_02;
  uint in_RSI;
  int in_RDI;
  int in_R8;
  int start;
  uint8 c;
  uint uVar7;
  int unaff_R14;
  runtime_slice in_stack_ffffffffffffff88;
  int i;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar5 = 0;
  start = 0;
  do {
    if ((int)in_RSI <= (int)uVar5) {
      if (in_RSI < (uint)start) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      sVar6 = in_RSI - start;
      if (in_RCX < sVar6 + in_RBX) {
        runtime_growslice(in_RAX,sVar6 + in_RBX,in_RCX,sVar6,(internal_abi_Type *)&DAT_00807920,
                          in_stack_ffffffffffffff88);
        in_RAX = extraout_RAX_03;
      }
      runtime_memmove((void *)((int)in_RAX + in_RBX),
                      (void *)(in_RDI + (start & start - in_R8 >> 0x3f)),sVar6);
      return;
    }
    bVar1 = *(byte *)(in_RDI + uVar5);
    if (((bVar1 == 0x3c) || (bVar1 == 0x3e)) || (bVar1 == 0x26)) {
      if (uVar5 < (uint)start) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      sVar6 = uVar5 - start;
      uVar7 = in_RBX + sVar6;
      if (in_RCX < uVar7) {
        runtime_growslice(in_RAX,uVar7,in_RCX,sVar6,(internal_abi_Type *)&DAT_00807920,
                          in_stack_ffffffffffffff88);
        in_RAX = extraout_RAX;
        in_RCX = extraout_RCX;
        uVar7 = extraout_RBX;
      }
      runtime_memmove((void *)((int)in_RAX + in_RBX),
                      (void *)(in_RDI + (start & start - in_R8 >> 0x3f)),sVar6);
      if ((uint)encoding_json_hex.len <= (uint)(bVar1 >> 4)) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      uVar2 = encoding_json_hex.str[bVar1 >> 4];
      if ((uint)encoding_json_hex.len <= (uint)(bVar1 & 0xf)) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      in_RBX = uVar7 + 6;
      uVar3 = encoding_json_hex.str[bVar1 & 0xf];
      if (in_RCX < in_RBX) {
        runtime_growslice(in_RAX,in_RBX,in_RCX,6,(internal_abi_Type *)&DAT_00807920,
                          in_stack_ffffffffffffff88);
        in_RCX = extraout_RCX_00;
        in_RBX = extraout_RBX_00;
        in_RAX = extraout_RAX_00;
      }
      *(undefined4 *)((in_RBX - 6) + (int)in_RAX) = 0x3030755c;
      *(uint8 *)((in_RBX - 2) + (int)in_RAX) = uVar2;
      *(uint8 *)((in_RBX - 1) + (int)in_RAX) = uVar3;
      start = uVar5 + 1;
    }
    if ((bVar1 == 0xe2) && ((int)(uVar5 + 2) < (int)in_RSI)) {
      if (in_RSI <= uVar5 + 1) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      if (*(char *)(uVar5 + 1 + in_RDI) == -0x80) {
        if (in_RSI <= uVar5 + 2) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        if ((*(byte *)(in_RDI + 2 + uVar5) & 0xfe) == 0xa8) {
          if (uVar5 < (uint)start) {
                    // WARNING: Subroutine does not return
            runtime_panicSliceB();
          }
          sVar6 = uVar5 - start;
          uVar7 = sVar6 + in_RBX;
          if (in_RCX < uVar7) {
            runtime_growslice(in_RAX,uVar7,in_RCX,sVar6,(internal_abi_Type *)&DAT_00807920,
                              in_stack_ffffffffffffff88);
            in_RAX = extraout_RAX_01;
            in_RCX = extraout_RCX_01;
            uVar7 = extraout_RBX_01;
          }
          runtime_memmove((void *)((int)in_RAX + in_RBX),
                          (void *)((start - in_R8 >> 0x3f & start) + in_RDI),sVar6);
          uVar4 = (uint)(*(byte *)(in_RDI + 2 + uVar5) & 0xf);
          if ((uint)encoding_json_hex.len <= uVar4) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          in_RBX = uVar7 + 6;
          uVar2 = encoding_json_hex.str[uVar4];
          if (in_RCX < in_RBX) {
            runtime_growslice(in_RAX,in_RBX,in_RCX,6,(internal_abi_Type *)&DAT_00807920,
                              in_stack_ffffffffffffff88);
            in_RAX = extraout_RAX_02;
            in_RCX = extraout_RCX_02;
            in_RBX = extraout_RBX_02;
          }
          *(undefined *)((in_RBX - 6) + (int)in_RAX) = 0x5c;
          *(undefined4 *)((in_RBX - 5) + (int)in_RAX) = 0x32303275;
          *(uint8 *)((in_RBX - 1) + (int)in_RAX) = uVar2;
          start = uVar5 + 3;
        }
      }
    }
    uVar5 = uVar5 + 1;
  } while( true );
}



// DWARF original prototype: void encoding/json.appendCompact([]uint8 dst, []uint8 src, bool escape,
// []uint8 ~r0, []uint8 ~r0, error ~r1, error ~r1)

void encoding_json_appendCompact
               (__uint8 dst,__uint8 src,bool escape,__uint8 ~r0,__uint8 ~r0_1,error ~r1,error ~r1_1)

{
  byte bVar1;
  uint8 uVar2;
  uint8 uVar3;
  undefined7 in_register_00000001;
  encoding_json_scanner *extraout_RAX;
  encoding_json_scanner *scan;
  encoding_json_scanner *extraout_RAX_00;
  encoding_json_scanner *extraout_RAX_01;
  encoding_json_scanner *oldPtr;
  encoding_json_scanner *extraout_RAX_02;
  uint uVar4;
  encoding_json_scanner *extraout_RAX_03;
  int iVar5;
  int v;
  encoding_json_scanner *extraout_RAX_04;
  int extraout_RAX_05;
  encoding_json_scanner *extraout_RAX_06;
  uint in_RCX;
  uint extraout_RCX;
  uint extraout_RCX_00;
  uint extraout_RCX_01;
  uint extraout_RCX_02;
  uint extraout_RCX_03;
  uint extraout_RCX_04;
  uint in_RBX;
  int origLen;
  uint extraout_RBX;
  uint extraout_RBX_00;
  uint extraout_RBX_01;
  uint extraout_RBX_02;
  uint extraout_RBX_03;
  uint newLen;
  uint extraout_RBX_04;
  uint uVar6;
  uint in_RSI;
  int in_RDI;
  size_t sVar7;
  int in_R8;
  char in_R9B;
  void *pvVar8;
  uint uVar9;
  uint newLen_00;
  uint8 c;
  int unaff_R14;
  runtime_slice in_stack_ffffffffffffff18;
  int i;
  int start;
  uint local_68;
  encoding_json_scanner *local_60;
  void *local_58;
  encoding_json_scanner *local_50;
  error local_48;
  undefined local_38 [16];
  encoding_json_scanner *local_28;
  undefined local_20 [16];
  code **local_10;
  
  while (&local_68 <= *(uint **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  local_28 = (encoding_json_scanner *)0x0;
  encoding_json_newScanner((encoding_json_scanner *)CONCAT71(in_register_00000001,escape));
  local_38._8_8_ = extraout_RAX;
  local_38._0_8_ = encoding_json_appendCompact_func1;
  local_10 = (code **)local_38;
  uVar4 = 0;
  newLen_00 = in_RBX;
  oldPtr = (encoding_json_scanner *)CONCAT71(in_register_00000001,escape);
  local_60 = extraout_RAX;
  for (uVar9 = 0; (int)uVar9 < (int)in_RSI; uVar9 = uVar9 + 1) {
    bVar1 = *(byte *)(in_RDI + uVar9);
    if ((in_R9B != '\0') && (((bVar1 == 0x3c || (bVar1 == 0x3e)) || (bVar1 == 0x26)))) {
      if (uVar9 < uVar4) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      local_68 = uVar9 - uVar4;
      uVar6 = local_68 + newLen_00;
      local_50 = (encoding_json_scanner *)(in_RDI + ((int)(uVar4 - in_R8) >> 0x3f & uVar4));
      if (in_RCX < uVar6) {
        runtime_growslice(oldPtr,uVar6,in_RCX,local_68,(internal_abi_Type *)&DAT_00807920,
                          in_stack_ffffffffffffff18);
        oldPtr = extraout_RAX_00;
        in_RCX = extraout_RCX;
        uVar6 = extraout_RBX;
      }
      sVar7 = local_68;
      local_68 = uVar6;
      pvVar8 = local_50;
      local_50 = oldPtr;
      runtime_memmove((void *)((int)&oldPtr->step + newLen_00),pvVar8,sVar7);
      if ((uint)encoding_json_hex.len <= (uint)(bVar1 >> 4)) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      uVar2 = encoding_json_hex.str[bVar1 >> 4];
      if ((uint)encoding_json_hex.len <= (uint)(bVar1 & 0xf)) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      newLen_00 = local_68 + 6;
      uVar3 = encoding_json_hex.str[bVar1 & 0xf];
      oldPtr = local_50;
      if (in_RCX < newLen_00) {
        runtime_growslice(local_50,newLen_00,in_RCX,6,(internal_abi_Type *)&DAT_00807920,
                          in_stack_ffffffffffffff18);
        oldPtr = extraout_RAX_01;
        in_RCX = extraout_RCX_00;
        newLen_00 = extraout_RBX_00;
      }
      *(undefined4 *)((newLen_00 - 6) + (int)oldPtr) = 0x3030755c;
      *(uint8 *)((newLen_00 - 2) + (int)oldPtr) = uVar2;
      *(uint8 *)((newLen_00 - 1) + (int)oldPtr) = uVar3;
      uVar4 = uVar9 + 1;
    }
    if (((in_R9B != '\0') && (bVar1 == 0xe2)) && ((int)(uVar9 + 2) < (int)in_RSI)) {
      if (in_RSI <= uVar9 + 1) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      if (*(char *)(uVar9 + 1 + in_RDI) == -0x80) {
        if (in_RSI <= uVar9 + 2) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        if ((*(byte *)(in_RDI + 2 + uVar9) & 0xfe) == 0xa8) {
          if (uVar9 < uVar4) {
                    // WARNING: Subroutine does not return
            runtime_panicSliceB();
          }
          local_68 = uVar9 - uVar4;
          uVar6 = local_68 + newLen_00;
          local_50 = (encoding_json_scanner *)(((int)(uVar4 - in_R8) >> 0x3f & uVar4) + in_RDI);
          if (in_RCX < uVar6) {
            runtime_growslice(oldPtr,uVar6,in_RCX,local_68,(internal_abi_Type *)&DAT_00807920,
                              in_stack_ffffffffffffff18);
            oldPtr = extraout_RAX_02;
            in_RCX = extraout_RCX_01;
            uVar6 = extraout_RBX_01;
          }
          uVar4 = in_RCX;
          pvVar8 = local_50;
          local_50 = oldPtr;
          runtime_memmove((void *)((int)&oldPtr->step + newLen_00),pvVar8,local_68);
          local_68 = uVar4;
          uVar4 = (uint)(*(byte *)(in_RDI + 2 + uVar9) & 0xf);
          if ((uint)encoding_json_hex.len <= uVar4) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          newLen_00 = uVar6 + 6;
          uVar2 = encoding_json_hex.str[uVar4];
          if (local_68 < newLen_00) {
            runtime_growslice(local_50,newLen_00,local_68,6,(internal_abi_Type *)&DAT_00807920,
                              in_stack_ffffffffffffff18);
            local_50 = extraout_RAX_03;
            local_68 = extraout_RCX_02;
            newLen_00 = extraout_RBX_02;
          }
          *(undefined *)((newLen_00 - 6) + (int)local_50) = 0x5c;
          *(undefined4 *)((newLen_00 - 5) + (int)local_50) = 0x32303275;
          *(uint8 *)((newLen_00 - 1) + (int)local_50) = uVar2;
          uVar4 = uVar9 + 3;
          oldPtr = local_50;
          in_RCX = local_68;
        }
      }
    }
    local_68 = in_RCX;
    local_50 = oldPtr;
    iVar5 = (**local_60->step)(local_60,bVar1,(int *)*local_60->step);
    uVar6 = local_68;
    in_RCX = local_68;
    if (8 < iVar5) {
      oldPtr = local_50;
      if (iVar5 == 0xb) break;
      if (uVar9 < uVar4) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      sVar7 = uVar9 - uVar4;
      newLen = sVar7 + newLen_00;
      pvVar8 = (void *)((uVar4 & (int)(uVar4 - in_R8) >> 0x3f) + in_RDI);
      if (local_68 < newLen) {
        local_68 = sVar7;
        local_58 = pvVar8;
        runtime_growslice(local_50,newLen,uVar6,sVar7,(internal_abi_Type *)&DAT_00807920,
                          in_stack_ffffffffffffff18);
        local_50 = extraout_RAX_04;
        newLen = extraout_RBX_03;
        sVar7 = local_68;
        pvVar8 = local_58;
        in_RCX = extraout_RCX_03;
      }
      local_68 = newLen;
      runtime_memmove((void *)((int)&local_50->step + newLen_00),pvVar8,sVar7);
      uVar4 = uVar9 + 1;
      newLen_00 = local_68;
    }
    oldPtr = local_50;
  }
  local_68 = in_RCX;
  local_50 = oldPtr;
  encoding_json___scanner__eof(local_60,newLen_00);
  uVar9 = local_68;
  if (extraout_RAX_05 != 0xb) {
    if (in_RSI < uVar4) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    sVar7 = in_RSI - uVar4;
    uVar6 = sVar7 + newLen_00;
    pvVar8 = (void *)(in_RDI + ((int)(uVar4 - in_R8) >> 0x3f & uVar4));
    local_20._8_8_ = local_68;
    if (local_68 < uVar6) {
      local_68 = sVar7;
      local_58 = pvVar8;
      runtime_growslice(local_50,uVar6,uVar9,sVar7,(internal_abi_Type *)&DAT_00807920,
                        in_stack_ffffffffffffff18);
      local_50 = extraout_RAX_06;
      sVar7 = local_68;
      uVar6 = extraout_RBX_04;
      pvVar8 = local_58;
      local_20._8_8_ = extraout_RCX_04;
    }
    local_68 = uVar6;
    runtime_memmove((void *)((int)&local_50->step + newLen_00),pvVar8,sVar7);
    local_28 = local_50;
    local_20._0_8_ = local_68;
    (**local_10)();
    return;
  }
  if (local_68 < in_RBX) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  local_48 = local_60->err;
  local_28 = local_50;
  (**local_10)();
  return;
}



// WARNING: Unknown calling convention

void encoding_json_appendCompact_func1(void)

{
  int *piVar1;
  int in_RDX;
  int unaff_R14;
  undefined auStack_10 [8];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  encoding_json_freeScanner(*(encoding_json_scanner **)(in_RDX + 8));
  return;
}



// DWARF original prototype: void encoding/json.appendIndent([]uint8 dst, []uint8 src, string
// prefix, string indent, []uint8 ~r0, []uint8 ~r0, error ~r1, error ~r1)

void encoding_json_appendIndent
               (__uint8 dst,__uint8 src,string prefix,string indent,__uint8 ~r0,__uint8 ~r0_1,
               error ~r1,error ~r1_1)

{
  uint8 uVar1;
  bool bVar2;
  encoding_json_scanner *in_RAX;
  encoding_json_scanner *extraout_RAX;
  encoding_json_scanner *scan;
  int iVar3;
  int v;
  encoding_json_scanner *extraout_RAX_00;
  encoding_json_scanner *extraout_RAX_01;
  encoding_json_scanner *extraout_RAX_02;
  encoding_json_scanner *extraout_RAX_03;
  encoding_json_scanner *extraout_RAX_04;
  encoding_json_scanner *extraout_RAX_05;
  encoding_json_scanner *extraout_RAX_06;
  encoding_json_scanner *extraout_RAX_07;
  encoding_json_scanner *extraout_RAX_08;
  encoding_json_scanner *extraout_RAX_09;
  encoding_json_scanner *extraout_RAX_10;
  int extraout_RAX_11;
  encoding_json_scanner *extraout_RAX_12;
  encoding_json_scanner *extraout_RAX_13;
  int iVar4;
  encoding_json_scanner *extraout_RAX_14;
  encoding_json_scanner *extraout_RAX_15;
  uint in_RCX;
  int depth;
  uint8 c;
  uint extraout_RCX;
  uint extraout_RCX_00;
  uint extraout_RCX_01;
  uint extraout_RCX_02;
  uint extraout_RCX_03;
  uint extraout_RCX_04;
  uint extraout_RCX_05;
  uint extraout_RCX_06;
  uint extraout_RCX_07;
  uint extraout_RCX_08;
  uint extraout_RCX_09;
  uint extraout_RCX_10;
  uint extraout_RCX_11;
  uint extraout_RCX_12;
  uint extraout_RCX_13;
  uint in_RBX;
  int origLen;
  uint uVar5;
  uint extraout_RBX;
  uint extraout_RBX_00;
  uint extraout_RBX_01;
  uint extraout_RBX_02;
  uint extraout_RBX_03;
  uint extraout_RBX_04;
  uint extraout_RBX_05;
  uint extraout_RBX_06;
  uint extraout_RBX_07;
  uint extraout_RBX_08;
  uint extraout_RBX_09;
  uint extraout_RBX_10;
  uint extraout_RBX_11;
  uint extraout_RBX_12;
  uint uVar6;
  uint extraout_RBX_13;
  int in_RSI;
  int in_RDI;
  bool needIndent;
  void *in_R9;
  size_t in_R10;
  int *piVar7;
  int unaff_R14;
  undefined auVar8 [16];
  runtime_slice in_stack_fffffffffffffed0;
  int i_2;
  int i_1;
  int i;
  uint local_c8;
  uint local_c0;
  uint local_b0;
  uint local_a8;
  uint local_a0;
  int local_98;
  uint local_90;
  int *local_88;
  uint local_80;
  uint local_78;
  int local_70;
  encoding_json_scanner *local_68;
  encoding_json_scanner *local_60;
  encoding_json_scanner *local_58;
  encoding_json_scanner *local_50;
  error local_48;
  undefined local_38 [16];
  encoding_json_scanner *local_28;
  undefined local_20 [16];
  code **local_10;
  
  while (&local_b0 <= *(uint **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  local_28 = (encoding_json_scanner *)0x0;
  encoding_json_newScanner(in_RAX);
  local_38._8_8_ = extraout_RAX;
  local_38._0_8_ = encoding_json_appendIndent_func1;
  local_10 = (code **)local_38;
  bVar2 = false;
  depth = 0;
  piVar7 = (int *)0x0;
  local_c8 = in_RBX;
  local_68 = extraout_RAX;
  while (iVar4 = depth, local_a0 = in_RCX, local_50 = in_RAX, (int)piVar7 < in_RSI) {
    uVar1 = *(uint8 *)(in_RDI + (int)piVar7);
    local_68->bytes = local_68->bytes + 1;
    local_98 = depth;
    local_88 = piVar7;
    auVar8 = (**local_68->step)(local_68,uVar1,piVar7);
    iVar4 = auVar8._8_8_;
    iVar3 = auVar8._0_8_;
    depth = local_98;
    local_a8 = local_a0;
    local_58 = local_50;
    if (iVar3 != 9) {
      if (iVar3 == 0xb) break;
      if (((bVar2) && (iVar3 != 5)) && (iVar3 != 8)) {
        uVar5 = local_c8 + 1;
        if (local_a0 < uVar5) {
          runtime_growslice(local_50,uVar5,local_a0,1,(internal_abi_Type *)&DAT_00807920,
                            in_stack_fffffffffffffed0);
          local_a0 = extraout_RCX;
          local_50 = extraout_RAX_00;
          uVar5 = extraout_RBX;
        }
        *(undefined *)((uVar5 - 1) + (int)local_50) = 10;
        local_c8 = in_R10 + uVar5;
        if (local_a0 < local_c8) {
          runtime_growslice(local_50,local_c8,local_a0,in_R10,(internal_abi_Type *)&DAT_00807920,
                            in_stack_fffffffffffffed0);
          local_a0 = extraout_RCX_00;
          local_50 = extraout_RAX_01;
          local_c8 = extraout_RBX_00;
        }
        runtime_memmove((void *)((int)&local_50->step + uVar5),in_R9,in_R10);
        local_98 = local_98 + 1;
        for (iVar4 = 0; iVar4 < local_98; iVar4 = iVar4 + 1) {
          uVar5 = dst.len + local_c8;
          uVar6 = local_c8;
          if (local_a0 < uVar5) {
            local_80 = local_c8;
            runtime_growslice(local_50,uVar5,local_a0,dst.len,(internal_abi_Type *)&DAT_00807920,
                              in_stack_fffffffffffffed0);
            local_a0 = extraout_RCX_13;
            uVar6 = local_80;
            local_50 = extraout_RAX_15;
            uVar5 = extraout_RBX_13;
          }
          local_c8 = uVar5;
          runtime_memmove((void *)((int)&local_50->step + uVar6),dst.array,dst.len);
        }
        bVar2 = false;
      }
      local_a8 = local_a0;
      local_58 = local_50;
      if (iVar3 == 0) {
        local_c8 = local_c8 + 1;
        if (local_a0 < local_c8) {
          runtime_growslice(local_50,local_c8,local_a0,1,(internal_abi_Type *)&DAT_00807920,
                            in_stack_fffffffffffffed0);
          local_a8 = extraout_RCX_01;
          local_58 = extraout_RAX_02;
          local_c8 = extraout_RBX_01;
        }
        *(uint8 *)((local_c8 - 1) + (int)local_58) = uVar1;
        depth = local_98;
      }
      else if (uVar1 < 0x5c) {
        if (uVar1 == 0x2c) {
          local_c8 = local_c8 + 1;
          if (local_a0 < local_c8) {
            runtime_growslice(local_50,local_c8,local_a0,1,(internal_abi_Type *)&DAT_00807920,
                              in_stack_fffffffffffffed0);
            local_a0 = extraout_RCX_03;
            local_50 = extraout_RAX_04;
            local_c8 = extraout_RBX_03;
          }
          *(undefined *)((local_c8 - 1) + (int)local_50) = 0x2c;
          local_c8 = local_c8 + 1;
          if (local_a0 < local_c8) {
            runtime_growslice(local_50,local_c8,local_a0,1,(internal_abi_Type *)&DAT_00807920,
                              in_stack_fffffffffffffed0);
            local_a0 = extraout_RCX_04;
            local_50 = extraout_RAX_05;
            local_c8 = extraout_RBX_04;
          }
          *(undefined *)((local_c8 - 1) + (int)local_50) = 10;
          local_c0 = in_R10 + local_c8;
          if (local_a0 < local_c0) {
            runtime_growslice(local_50,local_c0,local_a0,in_R10,(internal_abi_Type *)&DAT_00807920,
                              in_stack_fffffffffffffed0);
            local_a0 = extraout_RCX_05;
            local_50 = extraout_RAX_06;
            local_c0 = extraout_RBX_05;
          }
          local_a8 = local_a0;
          local_58 = local_50;
          runtime_memmove((void *)((int)&local_50->step + local_c8),in_R9,in_R10);
          for (iVar4 = 0; depth = local_98, local_c8 = local_c0, iVar4 < local_98; iVar4 = iVar4 + 1
              ) {
            uVar5 = dst.len + local_c0;
            if (local_a8 < uVar5) {
              local_78 = local_c0;
              runtime_growslice(local_58,uVar5,local_a8,dst.len,(internal_abi_Type *)&DAT_00807920,
                                in_stack_fffffffffffffed0);
              local_a8 = extraout_RCX_12;
              local_c0 = local_78;
              local_58 = extraout_RAX_14;
              uVar5 = extraout_RBX_12;
            }
            runtime_memmove((void *)((int)&local_58->step + local_c0),dst.array,dst.len);
            local_c0 = uVar5;
          }
        }
        else if (uVar1 == 0x3a) {
          local_c8 = local_c8 + 2;
          if (local_a0 < local_c8) {
            runtime_growslice(local_50,local_c8,local_a0,2,(internal_abi_Type *)&DAT_00807920,
                              in_stack_fffffffffffffed0);
            local_a8 = extraout_RCX_02;
            local_58 = extraout_RAX_03;
            local_c8 = extraout_RBX_02;
          }
          *(undefined2 *)((local_c8 - 2) + (int)local_58) = 0x203a;
          depth = local_98;
        }
        else {
          if (uVar1 == 0x5b) goto LAB_0055a9a6;
LAB_0055aaed:
          local_c8 = local_c8 + 1;
          if (local_a0 < local_c8) {
            runtime_growslice(local_50,local_c8,local_a0,1,(internal_abi_Type *)&DAT_00807920,
                              in_stack_fffffffffffffed0);
            local_a8 = extraout_RCX_09;
            local_58 = extraout_RAX_10;
            local_c8 = extraout_RBX_09;
          }
          *(uint8 *)((local_c8 - 1) + (int)local_58) = uVar1;
          depth = local_98;
        }
      }
      else {
        if (uVar1 != 0x5d) {
          if (uVar1 == 0x7b) {
LAB_0055a9a6:
            local_c8 = local_c8 + 1;
            if (local_a0 < local_c8) {
              runtime_growslice(local_50,local_c8,local_a0,1,(internal_abi_Type *)&DAT_00807920,
                                in_stack_fffffffffffffed0);
              local_a8 = extraout_RCX_06;
              local_58 = extraout_RAX_07;
              local_c8 = extraout_RBX_06;
            }
            *(uint8 *)((local_c8 - 1) + (int)local_58) = uVar1;
            bVar2 = true;
            depth = local_98;
            goto LAB_0055a5a4;
          }
          if (uVar1 != 0x7d) goto LAB_0055aaed;
        }
        if (bVar2) {
          bVar2 = false;
        }
        else {
          uVar5 = local_c8 + 1;
          if (local_a0 < uVar5) {
            runtime_growslice(local_50,uVar5,local_a0,1,(internal_abi_Type *)&DAT_00807920,
                              in_stack_fffffffffffffed0);
            local_a0 = extraout_RCX_07;
            local_50 = extraout_RAX_08;
            uVar5 = extraout_RBX_07;
          }
          *(undefined *)((uVar5 - 1) + (int)local_50) = 10;
          local_c8 = in_R10 + uVar5;
          if (local_a0 < local_c8) {
            runtime_growslice(local_50,local_c8,local_a0,in_R10,(internal_abi_Type *)&DAT_00807920,
                              in_stack_fffffffffffffed0);
            local_a0 = extraout_RCX_08;
            local_50 = extraout_RAX_09;
            local_c8 = extraout_RBX_08;
          }
          local_b0 = local_a0;
          local_60 = local_50;
          runtime_memmove((void *)((int)&local_50->step + uVar5),in_R9,in_R10);
          local_98 = local_98 + -1;
          for (iVar4 = 0; local_a0 = local_b0, local_50 = local_60, iVar4 < local_98;
              iVar4 = iVar4 + 1) {
            uVar5 = dst.len + local_c8;
            if (local_b0 < uVar5) {
              local_90 = local_c8;
              runtime_growslice(local_60,uVar5,local_b0,dst.len,(internal_abi_Type *)&DAT_00807920,
                                in_stack_fffffffffffffed0);
              local_b0 = extraout_RCX_10;
              local_c8 = local_90;
              local_60 = extraout_RAX_12;
              uVar5 = extraout_RBX_10;
            }
            runtime_memmove((void *)((int)&local_60->step + local_c8),dst.array,dst.len);
            local_c8 = uVar5;
          }
        }
        local_c8 = local_c8 + 1;
        depth = local_98;
        local_a8 = local_a0;
        local_58 = local_50;
        if (local_a0 < local_c8) {
          local_70 = local_98;
          runtime_growslice(local_50,local_c8,local_a0,1,(internal_abi_Type *)&DAT_00807920,
                            in_stack_fffffffffffffed0);
          depth = local_70;
          local_a8 = extraout_RCX_11;
          local_58 = extraout_RAX_13;
          local_c8 = extraout_RBX_11;
        }
        *(uint8 *)((local_c8 - 1) + (int)local_58) = uVar1;
      }
    }
LAB_0055a5a4:
    in_RCX = local_a8;
    in_RAX = local_58;
    piVar7 = (int *)((int)local_88 + 1);
  }
  encoding_json___scanner__eof(local_68,iVar4);
  if (extraout_RAX_11 != 0xb) {
    local_28 = local_50;
    local_20._8_8_ = local_a0;
    local_20._0_8_ = local_c8;
    (**local_10)();
    return;
  }
  if (local_a0 < in_RBX) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  local_48 = local_68->err;
  local_28 = local_50;
  (**local_10)();
  return;
}



// WARNING: Unknown calling convention

void encoding_json_appendIndent_func1(void)

{
  int *piVar1;
  int in_RDX;
  int unaff_R14;
  undefined auStack_10 [8];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  encoding_json_freeScanner(*(encoding_json_scanner **)(in_RDX + 8));
  return;
}



void encoding_json_checkValid(__uint8 data,encoding_json_scanner *scan,error ~r0)

{
  uint8 uVar1;
  encoding_json_scanner *extraout_RAX;
  encoding_json_scanner *extraout_RAX_00;
  int iVar2;
  int extraout_RAX_01;
  undefined8 extraout_RCX;
  undefined8 extraout_RCX_00;
  int *piVar3;
  uint8 c;
  int in_RBX;
  int extraout_RBX;
  int extraout_RBX_00;
  encoding_json_scanner *in_RDI;
  encoding_json_scanner *extraout_RDI;
  encoding_json_scanner *extraout_RDI_00;
  undefined8 *extraout_R11;
  undefined8 *extraout_R11_00;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11 = extraout_RCX;
    scan = extraout_RAX;
    in_RBX = extraout_RBX;
    in_RDI = extraout_RDI;
  }
  in_RDI->step = (func__encoding_json_scanner__uint8__int **)
                 &PTR_encoding_json_stateBeginValue_008eb960;
  (in_RDI->parseState).len = 0;
  (in_RDI->err).tab = (runtime_itab *)0x0;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11_00 = extraout_RCX_00;
    scan = extraout_RAX_00;
    in_RBX = extraout_RBX_00;
    in_RDI = extraout_RDI_00;
  }
  (in_RDI->err).data = (void *)0x0;
  in_RDI->endTop = false;
  piVar3 = (int *)0x0;
  while( true ) {
    if (in_RBX <= (int)piVar3) {
      encoding_json___scanner__eof(in_RDI,in_RBX);
      if (extraout_RAX_01 == 0xb) {
        return;
      }
      return;
    }
    uVar1 = *(uint8 *)((int)&scan->step + (int)piVar3);
    in_RDI->bytes = in_RDI->bytes + 1;
    iVar2 = (**in_RDI->step)(in_RDI,uVar1,piVar3);
    if (iVar2 == 0xb) break;
    piVar3 = (int *)((int)piVar3 + 1);
  }
  return;
}


