  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RSI == in_RBX) {
    if (in_RSI == in_RBX) {
      runtime_memequal();
    }
    return;
  }
  if ((in_RBX == 4) && (in_RSI == 0x10)) {
    if (net_v4InV6Prefix.len == 0xc) {
      runtime_memequal();
      cVar1 = extraout_AL;
    }
    else {
      cVar1 = '\0';
    }
    if (cVar1 != '\0') {
      runtime_memequal();
    }
    return;
  }
  if ((in_RBX == 0x10) && (in_RSI == 4)) {
    if (net_v4InV6Prefix.len == 0xc) {
      runtime_memequal();
      cVar1 = extraout_AL_00;
    }
    else {
      cVar1 = '\0';
    }
    if (cVar1 != '\0') {
      runtime_memequal();
    }
    return;
  }
  return;
}



void net_IP_matchAddrFamily(net_IP ip,net_IP x,bool ~r0)

{
  undefined uVar1;
  undefined uVar2;
  undefined uVar3;
  undefined uVar4;
  undefined7 in_register_00000001;
  int i_2;
  uint8 *puVar5;
  undefined *puVar6;
  undefined *puVar7;
  size_t sVar8;
  int i_3;
  int i_1;
  int i;
  int in_RBX;
  int in_RSI;
  uint8 *in_RDI;
  int unaff_R14;
  bool bVar9;
  undefined in_XMM15 [16];
  uint8 local_28 [16];
  undefined local_18 [16];
  
  puVar6 = (undefined *)CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  puVar7 = puVar6;
  if (in_RBX != 4) {
    if (in_RBX == 0x10) {
      for (i = 0; i < 10; i = i + 1) {
        if (puVar6[i] != '\0') goto LAB_005ebff8;
      }
      if ((puVar6[10] == -1) && (puVar6[0xb] == -1)) {
        puVar7 = puVar6 + 0xc;
        goto LAB_005ebffa;
      }
    }
LAB_005ebff8:
    puVar7 = (undefined *)0x0;
  }
LAB_005ebffa:
  if (puVar7 != (undefined *)0x0) {
    puVar5 = in_RDI;
    if (in_RSI != 4) {
      if (in_RSI == 0x10) {
        for (i_1 = 0; i_1 < 10; i_1 = i_1 + 1) {
          if (in_RDI[i_1] != 0) goto LAB_005ec250;
        }
        if ((in_RDI[10] == 0xff) && (in_RDI[0xb] == 0xff)) {
          puVar5 = in_RDI + 0xc;
          goto LAB_005ec252;
        }
      }
LAB_005ec250:
      puVar5 = (uint8 *)0x0;
    }
LAB_005ec252:
    if (puVar5 != (uint8 *)0x0) {
      return;
    }
  }
  if (in_RBX == 4) {
    uVar1 = *puVar6;
    uVar2 = puVar6[1];
    uVar3 = puVar6[2];
    uVar4 = puVar6[3];
    sVar8 = 0x10;
    if (net_v4InV6Prefix.len < 0x10) {
      sVar8 = net_v4InV6Prefix.len;
    }
    local_18._0_12_ = in_XMM15._0_12_;
    if (net_v4InV6Prefix.array != local_18) {
      runtime_memmove(local_18,net_v4InV6Prefix.array,sVar8);
    }
    local_18[12] = uVar1;
    local_18[13] = uVar2;
    local_18[14] = uVar3;
    local_18[15] = uVar4;
    puVar7 = local_18;
  }
  else {
    puVar7 = puVar6;
    if (in_RBX != 0x10) {
      puVar7 = (undefined *)0x0;
    }
  }
  if (puVar7 == (undefined *)0x0) {
    bVar9 = false;
    goto LAB_005ec107;
  }
  if (in_RBX != 4) {
    if (in_RBX == 0x10) {
      for (i_3 = 0; i_3 < 10; i_3 = i_3 + 1) {
        if (puVar6[i_3] != '\0') goto LAB_005ec158;
      }
      if ((puVar6[10] == -1) && (puVar6[0xb] == -1)) {
        puVar6 = puVar6 + 0xc;
        goto LAB_005ec15a;
      }
    }
LAB_005ec158:
    puVar6 = (undefined *)0x0;
  }
LAB_005ec15a:
  if (puVar6 == (undefined *)0x0) {
    if (in_RSI == 4) {
      sVar8 = 0x10;
      if (net_v4InV6Prefix.len < 0x10) {
        sVar8 = net_v4InV6Prefix.len;
      }
      if (net_v4InV6Prefix.array != local_28) {
        runtime_memmove(local_28,net_v4InV6Prefix.array,sVar8);
      }
      puVar5 = local_28;
    }
    else {
      puVar5 = in_RDI;
      if (in_RSI != 0x10) {
        puVar5 = (uint8 *)0x0;
      }
    }
    bVar9 = puVar5 != (uint8 *)0x0;
  }
  else {
    bVar9 = false;
  }
LAB_005ec107:
  if (((bVar9) && (in_RSI != 4)) && (in_RSI == 0x10)) {
    for (i_2 = 0; (i_2 < 10 && (in_RDI[i_2] == 0)); i_2 = i_2 + 1) {
    }
  }
  return;
}



void net_IPMask_Size(net_IPMask m,int ones,int bits)

{
  int i;
  int n;
  uint8 v;
  dword dVar1;
  
  n = 0;
  for (i = 0; i < bits; i = i + 1) {
    dVar1 = (dword)*(byte *)(ones + i);
    if (*(byte *)(ones + i) != 0xff) goto LAB_005ec36e;
    n = n + 8;
  }
  goto LAB_005ec34b;
LAB_005ec36e:
  for (; (dVar1 & 0x80) != 0; dVar1 = dVar1 << 1) {
    n = n + 1;
  }
  if ((char)dVar1 == '\0') {
    do {
      i = i + 1;
      if (bits <= i) goto LAB_005ec34b;
      if ((uint)bits <= (uint)i) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
    } while (*(char *)(ones + i) == '\0');
    n = -1;
  }
  else {
    n = -1;
  }
LAB_005ec34b:
  if (n != -1) {
    return;
  }
  return;
}



void net_IPMask_String(net_IPMask m,string ~r0)

{
  uint8 uVar1;
  int in_RAX;
  uint8 *ptr;
  uint len;
  int in_RBX;
  int i;
  uint8 tn;
  void *in_RDI;
  void *extraout_RDI;
  int unaff_R14;
  string in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  if (in_RBX != 0) {
    len = in_RBX << 1;
    runtime_makeslice((internal_abi_Type *)&DAT_00807920,len,len,in_RDI);
    i = 0;
    while( true ) {
      if (in_RBX <= i) {
        runtime_slicebytetostring((runtime_tmpBuf *)0x0,ptr,len,in_stack_ffffffffffffffd8);
        return;
      }
      uVar1 = "goal , cons/mark  maxTrigger= pages/byte\n s.sweepgen= allocCount end tracegc\ntimer_deletens} value: {}, want {r1= [recovered]bad recoverybad g statusentersyscallwirep: p->m=) p->status=releasep: m= sysmonwait= preemptoff=cas64 failedGOTRACEBACK= m->gsignal=-byte limit\nruntime: sp=abi mismatchillegal seekinvalid slothost is downnot pollable<unknown:%d>Sfixed32KindSfixed64Kindmessage_typejava_packageoptimize_forswift_prefixruby_packagedebug_redactdouble_valuestring_valueverificationis_extension has no name has no typereflect.CopyOUT_OF_RANGENormalSocketgrpc-messageContent-Typegrpc-timeoutGrpc-MessageAddr: \'%s\', Cookie.Valuemax-forwardshttp2debug=1http2debug=2status code Multi-StatusNot ModifiedUnauthorizedI\'m a teapotNot ExtendedPUSH_PROMISECONTINUATION152587890625762939453125Cypro_MinoanMeetei_MayekPahawh_HmongSora_SompengSyloti_NagriRCodeSuccessRCodeRefusedprotobuf_keyprotobuf_val (sensitive)grpc_config=ECDSA-SHA256ECDSA-SHA384ECDSA-SHA512SSL_CERT_DIRTYPE_UNKNOWNempty objectMime-VersionX-ImforwardsX-Powered-By/dev/urandomautocompleteFieldNumbersSERIALNUMBERinvalid baseInstAltMatchunexpected )altmatch -> anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen..." /* TRUNCATED STRING LITERAL */
              [(*(byte *)(in_RAX + i) & 0xf) + 0x1f44];
      if (len <= (uint)(i << 1)) break;
      ptr[i * 2] = "goal , cons/mark  maxTrigger= pages/byte\n s.sweepgen= allocCount end tracegc\ntimer_deletens} value: {}, want {r1= [recovered]bad recoverybad g statusentersyscallwirep: p->m=) p->status=releasep: m= sysmonwait= preemptoff=cas64 failedGOTRACEBACK= m->gsignal=-byte limit\nruntime: sp=abi mismatchillegal seekinvalid slothost is downnot pollable<unknown:%d>Sfixed32KindSfixed64Kindmessage_typejava_packageoptimize_forswift_prefixruby_packagedebug_redactdouble_valuestring_valueverificationis_extension has no name has no typereflect.CopyOUT_OF_RANGENormalSocketgrpc-messageContent-Typegrpc-timeoutGrpc-MessageAddr: \'%s\', Cookie.Valuemax-forwardshttp2debug=1http2debug=2status code Multi-StatusNot ModifiedUnauthorizedI\'m a teapotNot ExtendedPUSH_PROMISECONTINUATION152587890625762939453125Cypro_MinoanMeetei_MayekPahawh_HmongSora_SompengSyloti_NagriRCodeSuccessRCodeRefusedprotobuf_keyprotobuf_val (sensitive)grpc_config=ECDSA-SHA256ECDSA-SHA384ECDSA-SHA512SSL_CERT_DIRTYPE_UNKNOWNempty objectMime-VersionX-ImforwardsX-Powered-By/dev/urandomautocompleteFieldNumbersSERIALNUMBERinvalid baseInstAltMatchunexpected )altmatch -> anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen..." /* TRUNCATED STRING LITERAL */
                   [(*(byte *)(in_RAX + i) >> 4) + 0x1f44];
      if (len <= i * 2 + 1U) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      ptr[i * 2 + 1] = uVar1;
      i = i + 1;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  return;
}



void net_networkNumberAndMask(net_IPNet *n,net_IP ip,net_IPMask m)

{
  int iVar1;
  int i;
  int iVar2;
  uint8 *puVar3;
  
  iVar1 = (n->IP).len;
  puVar3 = (n->IP).array;
  iVar2 = iVar1;
  if (iVar1 != 4) {
    if (iVar1 == 0x10) {
      for (i = 0; i < 10; i = i + 1) {
        if (puVar3[i] != 0) goto LAB_005ec59d;
      }
      if ((puVar3[10] == 0xff) && (puVar3[0xb] == 0xff)) {
        puVar3 = puVar3 + 0xc;
        iVar2 = 4;
        goto LAB_005ec50e;
      }
    }
LAB_005ec59d:
    puVar3 = (uint8 *)0x0;
    iVar2 = 0;
  }
LAB_005ec50e:
  if ((puVar3 == (uint8 *)0x0) && (iVar2 = iVar1, iVar1 != 0x10)) {
    return;
  }
  iVar1 = (n->Mask).len;
  if (iVar1 == 4) {
    if (iVar2 != 4) {
      return;
    }
  }
  else if (iVar1 != 0x10) {
    return;
  }
  return;
}



void net___IPNet__Contains(net_IPNet *n,net_IP ip,bool ~r0)

{
  net_IPMask m;
  net_IP ip_00;
  int extraout_RAX;
  int in_RCX;
  int i;
  int iVar1;
  undefined7 in_register_00000019;
  int iVar2;
  int extraout_RBX;
  int unaff_RBP;
  uint extraout_RSI;
  int extraout_RDI;
  int l;
  int i_1;
  int unaff_R14;
  undefined8 unaff_retaddr;
  undefined in_stack_ffffffffffffffe8 [16];
  
  iVar2 = CONCAT71(in_register_00000019,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    ip.array = (uint8 *)n;
  }
  ip_00.cap = unaff_RBP;
  ip_00.array = (uint8 *)in_stack_ffffffffffffffe8._0_8_;
  ip_00.len = in_stack_ffffffffffffffe8._8_8_;
  m.len = (int)ip.array;
  m.array = (uint8 *)unaff_retaddr;
  m.cap = iVar2;
  net_networkNumberAndMask(n,ip_00,m);
  iVar1 = iVar2;
  l = in_RCX;
  if (in_RCX != 4) {
    if (in_RCX == 0x10) {
      for (i_1 = 0; i_1 < 10; i_1 = i_1 + 1) {
        if (*(char *)(iVar2 + i_1) != '\0') goto LAB_005ec651;
      }
      if ((*(char *)(iVar2 + 10) == -1) && (*(char *)(iVar2 + 0xb) == -1)) {
        iVar1 = iVar2 + 0xc;
        l = 4;
        goto LAB_005ec656;
      }
    }
LAB_005ec651:
    iVar1 = 0;
    l = 0;
  }
LAB_005ec656:
  if (iVar1 == 0) {
    iVar1 = iVar2;
    l = in_RCX;
  }
  if (extraout_RBX != l) {
    return;
  }
  i = 0;
  while( true ) {
    if (l <= i) {
      return;
    }
    if (extraout_RSI <= (uint)i) break;
    if ((*(byte *)(i + iVar1) & *(byte *)(i + extraout_RDI)) !=
        (*(byte *)(i + extraout_RAX) & *(byte *)(i + extraout_RDI))) {
      return;
    }
    i = i + 1;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void net___IPNet__Network(net_IPNet *n,string ~r0)

{
  return;
}



void net___IPNet__String(net_IPNet *n,string ~r0)

{
  uint8 uVar1;
  char cVar2;
  net_IP ip;
  net_IP ip_00;
  net_IP ip_01;
  string a1;
  string a1_00;
  string ~r0_00;
  string ~r0_01;
  net_IPMask m;
  string a2;
  string a2_00;
  string ~r0_02;
  string ~r0_03;
  int extraout_RAX;
  uint8 *ptr;
  uint uVar3;
  int i_2;
  int i;
  uint uVar4;
  int i_1;
  uint extraout_RSI;
  uint8 tn;
  int extraout_RDI;
  void *~r0_04;
  int n_1;
  int l;
  uint8 v;
  dword dVar5;
  int unaff_R14;
  undefined in_XMM15 [16];
  string in_stack_ffffffffffffff38;
  uint8 *in_stack_ffffffffffffff48;
  uint8 *in_stack_ffffffffffffff50;
  uint8 *in_stack_ffffffffffffff58;
  int in_stack_ffffffffffffff60;
  uint8 *in_stack_ffffffffffffff68;
  int in_stack_ffffffffffffff70;
  char cStack_6d;
  undefined4 local_6c;
  undefined auStack_68 [12];
  undefined4 uStack_5c;
  uint8 local_58 [16];
  undefined local_48 [16];
  uint8 local_38 [32];
  int local_18;
  
  while (local_48 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (n == (net_IPNet *)0x0) {
    return;
  }
  ip.cap = (int)in_stack_ffffffffffffff48;
  ip.array = in_stack_ffffffffffffff38.str;
  ip.len = in_stack_ffffffffffffff38.len;
  m.len = (int)in_stack_ffffffffffffff58;
  m.array = in_stack_ffffffffffffff50;
  m.cap = in_stack_ffffffffffffff60;
  net_networkNumberAndMask(n,ip,m);
  if ((extraout_RAX == 0) || (extraout_RDI == 0)) {
    return;
  }
  n_1 = 0;
  for (i = 0; l = n_1, i < (int)extraout_RSI; i = i + 1) {
    dVar5 = (dword)*(byte *)(extraout_RDI + i);
    if (*(byte *)(extraout_RDI + i) != 0xff) goto LAB_005eca36;
    n_1 = n_1 + 8;
  }
  goto LAB_005ec7e0;
LAB_005eca36:
  for (; (dVar5 & 0x80) != 0; dVar5 = dVar5 << 1) {
    l = l + 1;
  }
  if ((char)dVar5 == '\0') {
    do {
      i = i + 1;
      if ((int)extraout_RSI <= i) goto LAB_005ec7e0;
      if (extraout_RSI <= (uint)i) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
    } while (*(char *)(extraout_RDI + i) == '\0');
    l = -1;
  }
  else {
    l = -1;
  }
LAB_005ec7e0:
  if (l != -1) {
    ip_01.cap = (int)in_stack_ffffffffffffff48;
    ip_01.array = in_stack_ffffffffffffff38.str;
    ip_01.len = in_stack_ffffffffffffff38.len;
    ~r0_01.len = (int)in_stack_ffffffffffffff58;
    ~r0_01.str = in_stack_ffffffffffffff50;
    net_IP_String(ip_01,~r0_01);
    if (l != 0) {
      local_6c = in_XMM15._0_4_;
      auStack_68 = in_XMM15._0_12_;
      uStack_5c = in_XMM15._12_4_;
      uVar3 = 0x13;
      uVar4 = l;
      while (cVar2 = (char)uVar4, 9 < uVar4) {
        uVar4 = uVar4 / 10;
        if (0x13 < uVar3) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        auStack_68[uVar3 - 4] = cVar2 + (char)uVar4 * -10 + '0';
        uVar3 = uVar3 - 1;
      }
      if (0x13 < uVar3) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      auStack_68[uVar3 - 4] = cVar2 + '0';
      runtime_slicebytetostring
                ((runtime_tmpBuf *)local_58,auStack_68 + ((uVar3 & (int)(uVar3 - 0x14) >> 0x3f) - 4)
                 ,-(uVar3 - 0x14),in_stack_ffffffffffffff38);
    }
    a1.len = (int)in_stack_ffffffffffffff50;
    a1.str = in_stack_ffffffffffffff48;
    a2.len = in_stack_ffffffffffffff60;
    a2.str = in_stack_ffffffffffffff58;
    ~r0_02.len = l;
    ~r0_02.str = in_stack_ffffffffffffff68;
    runtime_concatstring3((runtime_tmpBuf *)0x0,in_stack_ffffffffffffff38,a1,a2,~r0_02);
    return;
  }
  ip_00.cap = (int)in_stack_ffffffffffffff48;
  ip_00.array = in_stack_ffffffffffffff38.str;
  ip_00.len = in_stack_ffffffffffffff38.len;
  ~r0_00.len = (int)in_stack_ffffffffffffff58;
  ~r0_00.str = in_stack_ffffffffffffff50;
  local_18 = extraout_RDI;
  net_IP_String(ip_00,~r0_00);
  if (extraout_RSI != 0) {
    uVar4 = extraout_RSI << 1;
    runtime_makeslice((internal_abi_Type *)&DAT_00807920,uVar4,uVar4,~r0_04);
    for (i_1 = 0; i_1 < (int)extraout_RSI; i_1 = i_1 + 1) {
      uVar1 = "goal , cons/mark  maxTrigger= pages/byte\n s.sweepgen= allocCount end tracegc\ntimer_deletens} value: {}, want {r1= [recovered]bad recoverybad g statusentersyscallwirep: p->m=) p->status=releasep: m= sysmonwait= preemptoff=cas64 failedGOTRACEBACK= m->gsignal=-byte limit\nruntime: sp=abi mismatchillegal seekinvalid slothost is downnot pollable<unknown:%d>Sfixed32KindSfixed64Kindmessage_typejava_packageoptimize_forswift_prefixruby_packagedebug_redactdouble_valuestring_valueverificationis_extension has no name has no typereflect.CopyOUT_OF_RANGENormalSocketgrpc-messageContent-Typegrpc-timeoutGrpc-MessageAddr: \'%s\', Cookie.Valuemax-forwardshttp2debug=1http2debug=2status code Multi-StatusNot ModifiedUnauthorizedI\'m a teapotNot ExtendedPUSH_PROMISECONTINUATION152587890625762939453125Cypro_MinoanMeetei_MayekPahawh_HmongSora_SompengSyloti_NagriRCodeSuccessRCodeRefusedprotobuf_keyprotobuf_val (sensitive)grpc_config=ECDSA-SHA256ECDSA-SHA384ECDSA-SHA512SSL_CERT_DIRTYPE_UNKNOWNempty objectMime-VersionX-ImforwardsX-Powered-By/dev/urandomautocompleteFieldNumbersSERIALNUMBERinvalid baseInstAltMatchunexpected )altmatch -> anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen..." /* TRUNCATED STRING LITERAL */
              [(*(byte *)(i_1 + local_18) & 0xf) + 0x1f44];
      if (uVar4 <= (uint)(i_1 << 1)) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      ptr[i_1 * 2] = "goal , cons/mark  maxTrigger= pages/byte\n s.sweepgen= allocCount end tracegc\ntimer_deletens} value: {}, want {r1= [recovered]bad recoverybad g statusentersyscallwirep: p->m=) p->status=releasep: m= sysmonwait= preemptoff=cas64 failedGOTRACEBACK= m->gsignal=-byte limit\nruntime: sp=abi mismatchillegal seekinvalid slothost is downnot pollable<unknown:%d>Sfixed32KindSfixed64Kindmessage_typejava_packageoptimize_forswift_prefixruby_packagedebug_redactdouble_valuestring_valueverificationis_extension has no name has no typereflect.CopyOUT_OF_RANGENormalSocketgrpc-messageContent-Typegrpc-timeoutGrpc-MessageAddr: \'%s\', Cookie.Valuemax-forwardshttp2debug=1http2debug=2status code Multi-StatusNot ModifiedUnauthorizedI\'m a teapotNot ExtendedPUSH_PROMISECONTINUATION152587890625762939453125Cypro_MinoanMeetei_MayekPahawh_HmongSora_SompengSyloti_NagriRCodeSuccessRCodeRefusedprotobuf_keyprotobuf_val (sensitive)grpc_config=ECDSA-SHA256ECDSA-SHA384ECDSA-SHA512SSL_CERT_DIRTYPE_UNKNOWNempty objectMime-VersionX-ImforwardsX-Powered-By/dev/urandomautocompleteFieldNumbersSERIALNUMBERinvalid baseInstAltMatchunexpected )altmatch -> anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen..." /* TRUNCATED STRING LITERAL */
                     [(*(byte *)(i_1 + local_18) >> 4) + 0x1f44];
      if (uVar4 <= i_1 * 2 + 1U) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      ptr[i_1 * 2 + 1] = uVar1;
    }
    runtime_slicebytetostring(&local_38,ptr,uVar4,in_stack_ffffffffffffff38);
  }
  a1_00.len = (int)in_stack_ffffffffffffff50;
  a1_00.str = in_stack_ffffffffffffff48;
  a2_00.len = in_stack_ffffffffffffff60;
  a2_00.str = in_stack_ffffffffffffff58;
  ~r0_03.len = in_stack_ffffffffffffff70;
  ~r0_03.str = in_stack_ffffffffffffff68;
  runtime_concatstring3((runtime_tmpBuf *)0x0,in_stack_ffffffffffffff38,a1_00,a2_00,~r0_03);
  return;
}



void net_parseIP(string s,uint8 ~r0 [16],bool ~r1)

{
  string s_00;
  net_netip_Addr ip;
  net_netip_Addr ~r0_00;
  error ~r1_00;
  undefined8 *extraout_RCX;
  int iVar1;
  int extraout_RDI;
  int unaff_R14;
  undefined4 in_stack_ffffffffffffffc0;
  undefined4 in_stack_ffffffffffffffc4;
  undefined4 in_stack_ffffffffffffffc8;
  undefined4 in_stack_ffffffffffffffcc;
  internal_intern_Value *in_stack_ffffffffffffffd0;
  uint8 in_stack_ffffffffffffffd8 [16];
  undefined4 in_stack_ffffffffffffffe8;
  undefined4 in_stack_ffffffffffffffec;
  undefined4 in_stack_fffffffffffffff0;
  undefined4 in_stack_fffffffffffffff4;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  s_00.str._4_4_ = in_stack_ffffffffffffffc4;
  s_00.str._0_4_ = in_stack_ffffffffffffffc0;
  s_00.len._0_4_ = in_stack_ffffffffffffffc8;
  s_00.len._4_4_ = in_stack_ffffffffffffffcc;
  ~r0_00._8_16_ = (net_netip_uint128)in_stack_ffffffffffffffd8;
  ~r0_00.addr.hi = (uint64)in_stack_ffffffffffffffd0;
  ~r1_00.tab._4_4_ = in_stack_ffffffffffffffec;
  ~r1_00.tab._0_4_ = in_stack_ffffffffffffffe8;
  ~r1_00.data._0_4_ = in_stack_fffffffffffffff0;
  ~r1_00.data._4_4_ = in_stack_fffffffffffffff4;
  net_netip_ParseAddr(s_00,~r0_00,~r1_00);
  if (extraout_RDI == 0) {
    if (extraout_RCX == (undefined8 *)0x0) {
      iVar1 = 0;
    }
    else if ((undefined *)*extraout_RCX == &DAT_008075e0) {
      iVar1 = *(int *)(extraout_RCX[1] + 8);
    }
    else {
      iVar1 = 0;
    }
    if (iVar1 == 0) {
      ip.addr.hi._4_4_ = in_stack_ffffffffffffffc4;
      ip.addr.hi._0_4_ = in_stack_ffffffffffffffc0;
      ip.addr.lo._0_4_ = in_stack_ffffffffffffffc8;
      ip.addr.lo._4_4_ = in_stack_ffffffffffffffcc;
      ip.z = in_stack_ffffffffffffffd0;
      net_netip_Addr_As16(ip,in_stack_ffffffffffffffd8);
      return;
    }
  }
  return;
}



void net_ParseCIDR(string s,net_IP ~r0,net_IPNet *~r1,error ~r2)

{
  byte bVar1;
  string s_00;
  net_netip_Addr ip;
  net_IP ip_00;
  net_netip_Addr ~r0_00;
  uint8 a16 [16];
  net_IPMask mask;
  error ~r1_00;
  net_IP ~r0_01;
  bool bVar2;
  undefined8 *extraout_RAX;
  undefined8 *extraout_RAX_00;
  undefined8 *extraout_RAX_01;
  undefined8 *extraout_RAX_02;
  int extraout_RAX_03;
  undefined8 *extraout_RAX_04;
  undefined8 *extraout_RAX_05;
  net_IPNet **extraout_RAX_06;
  uint8 (*_addr16) [16];
  undefined8 extraout_RAX_07;
  undefined8 *extraout_RAX_08;
  undefined8 *extraout_RAX_09;
  undefined8 *extraout_RAX_10;
  undefined8 *puVar3;
  int i;
  internal_intern_Value *extraout_RCX;
  undefined8 extraout_RCX_00;
  int iVar4;
  int i_1;
  int iVar5;
  int l;
  uint in_RBX;
  void *~r0_02;
  void *~r0_03;
  void *extraout_RBX;
  void *~r0_04;
  void *pvVar6;
  int extraout_RDI;
  int iVar7;
  void *pvVar8;
  bool ok;
  int n;
  net_IPNet **extraout_R11;
  net_IPNet **extraout_R11_00;
  net_IPNet **extraout_R11_01;
  undefined8 *extraout_R11_02;
  int *extraout_R11_03;
  int unaff_R14;
  net_IPNet *pnVar9;
  undefined4 uVar10;
  undefined4 uVar11;
  undefined uVar12;
  undefined7 in_stack_ffffffffffffff79;
  uint in_stack_ffffffffffffff80;
  uint uVar13;
  internal_intern_Value *in_stack_ffffffffffffff88;
  runtime_itab *in_stack_ffffffffffffff90;
  void *in_stack_ffffffffffffff98;
  int in_stack_ffffffffffffffa8;
  undefined8 local_18;
  net_IPNet **local_10;
  
  while (&local_18 <= *(undefined8 **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  uVar10 = (undefined4)in_RBX;
  uVar11 = (undefined4)(in_RBX >> 0x20);
  uVar12 = 0x2f;
  pnVar9 = ~r1;
  internal_bytealg_IndexByteString();
  if ((int)in_stack_ffffffffffffff80 < 0) {
    runtime_newobject((internal_abi_Type *)&DAT_0084ebc0,~r0_02);
    extraout_RAX_01[1] = 0xc;
    *extraout_RAX_01 = &DAT_008b4339;
    extraout_RAX_01[3] = in_RBX;
    puVar3 = extraout_RAX_01;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_00 = ~r1;
      puVar3 = extraout_RAX_02;
    }
    puVar3[2] = ~r1;
    return;
  }
  if (in_RBX < in_stack_ffffffffffffff80) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAlen();
  }
  if (in_RBX < in_stack_ffffffffffffff80 + 1) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
  s_00.len._0_4_ = uVar10;
  s_00.str = (uint8 *)pnVar9;
  s_00.len._4_4_ = uVar11;
  ~r0_00.addr.hi._1_7_ = in_stack_ffffffffffffff79;
  ~r0_00.addr.hi._0_1_ = uVar12;
  ~r0_00.addr.lo = in_stack_ffffffffffffff80;
  ~r0_00.z = in_stack_ffffffffffffff88;
  ~r1_00.data = in_stack_ffffffffffffff98;
  ~r1_00.tab = in_stack_ffffffffffffff90;
  uVar13 = in_stack_ffffffffffffff80;
  net_netip_ParseAddr(s_00,~r0_00,~r1_00);
  iVar5 = (in_RBX - in_stack_ffffffffffffff80) + -1;
  if (extraout_RDI == 0) {
    if (extraout_RCX == (internal_intern_Value *)0x0) {
      iVar7 = 0;
    }
    else if ((extraout_RCX->cmpVal)._type == (internal_abi_Type *)&DAT_008075e0) {
      iVar7 = *(int *)((int)(extraout_RCX->cmpVal).data + 8);
    }
    else {
      iVar7 = 0;
    }
    if (iVar7 == 0) {
      n = 0;
      for (iVar7 = 0;
          ((iVar7 < iVar5 &&
           (bVar1 = *(byte *)((int)&(~r1->IP).array +
                             iVar7 + (in_stack_ffffffffffffff80 + 1 & -iVar5 >> 0x3f)), 0x2f < bVar1
           )) && (bVar1 < 0x3a)); iVar7 = iVar7 + 1) {
        n = (uint)(byte)(bVar1 - 0x30) + n * 10;
        if (0xfffffe < n) {
          bVar2 = false;
          n = 0xffffff;
          goto LAB_005ecda9;
        }
      }
      if (iVar7 == 0) {
        bVar2 = false;
        n = 0;
        iVar7 = 0;
      }
      else {
        bVar2 = true;
      }
LAB_005ecda9:
      if (((bVar2) && (iVar7 == iVar5)) && (-1 < n)) {
        if (net_netip_z0 == extraout_RCX) {
          pvVar8 = (void *)0x0;
        }
        else if (net_netip_z4 == extraout_RCX) {
          pvVar8 = (void *)0x20;
        }
        else {
          pvVar8 = (void *)0x80;
        }
        if (n <= (int)pvVar8) {
          if (net_netip_z0 == extraout_RCX) {
            iVar5 = 0;
          }
          else if (net_netip_z4 == extraout_RCX) {
            iVar5 = 0x20;
          }
          else {
            iVar5 = 0x80;
          }
          pvVar6 = ~r0_03;
          if ((iVar5 == 0x20) || (iVar5 == 0x80)) {
            if (iVar5 < n) {
              iVar5 = 0;
              iVar7 = 0;
              n = (int)in_stack_ffffffffffffff98;
            }
            else {
              iVar5 = iVar5 >> 3;
              runtime_makeslice((internal_abi_Type *)&DAT_00807920,iVar5,iVar5,pvVar8);
              pvVar6 = extraout_RBX;
              pvVar8 = (void *)n;
              for (iVar4 = 0; iVar7 = extraout_RAX_03, in_stack_ffffffffffffffa8 = iVar5,
                  iVar4 < iVar5; iVar4 = iVar4 + 1) {
                if (pvVar8 < (void *)0x8) {
                  *(byte *)(extraout_RAX_03 + iVar4) = ~(0xffU >> ((byte)pvVar8 & 0x1f));
                  pvVar6 = (void *)0x0;
                }
                else {
                  *(undefined *)(extraout_RAX_03 + iVar4) = 0xff;
                  pvVar6 = (void *)((int)pvVar8 + -8);
                }
                pvVar8 = pvVar6;
              }
            }
          }
          else {
            iVar5 = 0;
            iVar7 = 0;
            n = (int)in_stack_ffffffffffffff98;
          }
          runtime_newobject((internal_abi_Type *)&DAT_008130c0,pvVar6);
          ip.addr.lo._0_4_ = uVar10;
          ip.addr.hi = (uint64)pnVar9;
          ip.addr.lo._4_4_ = uVar11;
          ip.z._0_1_ = uVar12;
          ip.z._1_7_ = in_stack_ffffffffffffff79;
          a16._8_8_ = in_stack_ffffffffffffff88;
          a16[0] = (char)uVar13;
          a16[1] = (char)(uVar13 >> 8);
          a16[2] = (char)(uVar13 >> 0x10);
          a16[3] = (char)(uVar13 >> 0x18);
          a16[4] = (char)(uVar13 >> 0x20);
          a16[5] = (char)(uVar13 >> 0x28);
          a16[6] = (char)(uVar13 >> 0x30);
          a16[7] = (char)(uVar13 >> 0x38);
          local_10 = extraout_RAX_06;
          net_netip_Addr_As16(ip,a16);
          *local_10 = pnVar9;
          *(undefined4 *)(local_10 + 1) = uVar10;
          *(undefined4 *)((int)local_10 + 0xc) = uVar11;
          ip_00.len._0_4_ = uVar10;
          ip_00.array = (uint8 *)pnVar9;
          ip_00.len._4_4_ = uVar11;
          ip_00.cap._0_1_ = uVar12;
          ip_00.cap._1_7_ = in_stack_ffffffffffffff79;
          mask.len = (int)in_stack_ffffffffffffff88;
          mask.array = (uint8 *)uVar13;
          mask.cap = (int)in_stack_ffffffffffffff90;
          ~r0_01.len = iVar5;
          ~r0_01.array = (uint8 *)n;
          ~r0_01.cap = in_stack_ffffffffffffffa8;
          net_IP_Mask(ip_00,mask,~r0_01);
          local_18 = extraout_RAX_07;
          runtime_newobject((internal_abi_Type *)&DAT_0084ea80,~r0_04);
          extraout_RAX_08[1] = ~r0_04;
          extraout_RAX_08[2] = extraout_RCX_00;
          puVar3 = extraout_RAX_08;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier1();
            *extraout_R11_02 = local_18;
            puVar3 = extraout_RAX_09;
          }
          *puVar3 = local_18;
          puVar3[4] = iVar5;
          puVar3[5] = iVar5;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier1();
            *extraout_R11_03 = iVar7;
            puVar3 = extraout_RAX_10;
          }
          puVar3[3] = iVar7;
          return;
        }
      }
      runtime_newobject((internal_abi_Type *)&DAT_0084ebc0,~r0_03);
      extraout_RAX_04[1] = 0xc;
      *extraout_RAX_04 = &DAT_008b4339;
      extraout_RAX_04[3] = in_RBX;
      puVar3 = extraout_RAX_04;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier1();
        *extraout_R11_01 = ~r1;
        puVar3 = extraout_RAX_05;
      }
      puVar3[2] = ~r1;
      return;
    }
  }
  runtime_newobject((internal_abi_Type *)&DAT_0084ebc0,~r0_03);
  extraout_RAX[1] = 0xc;
  *extraout_RAX = &DAT_008b4339;
  extraout_RAX[3] = in_RBX;
  puVar3 = extraout_RAX;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11 = ~r1;
    puVar3 = extraout_RAX_00;
  }
  puVar3[2] = ~r1;
  return;
}



void net___IPAddr__Network(net_IPAddr *a,string ~r0)

{
  return;
}



void net___IPAddr__String(net_IPAddr *a,string ~r0)

{
  net_IP ip;
  string a1;
  string ~r0_00;
  string a2;
  string ~r0_01;
  int unaff_RBP;
  int unaff_R14;
  string in_stack_ffffffffffffffc0;
  uint8 *in_stack_ffffffffffffffd0;
  uint8 *in_stack_ffffffffffffffd8;
  uint8 *in_stack_ffffffffffffffe0;
  int in_stack_ffffffffffffffe8;
  uint8 *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (a == (net_IPAddr *)0x0) {
    return;
  }
  if ((a->IP).len != 0) {
    ip.cap = (int)in_stack_ffffffffffffffd0;
    ip.array = in_stack_ffffffffffffffc0.str;
    ip.len = in_stack_ffffffffffffffc0.len;
    ~r0_00.len = (int)in_stack_ffffffffffffffe0;
    ~r0_00.str = in_stack_ffffffffffffffd8;
    net_IP_String(ip,~r0_00);
  }
  if ((a->Zone).len == 0) {
    return;
  }
  a1.len = (int)in_stack_ffffffffffffffd8;
  a1.str = in_stack_ffffffffffffffd0;
  a2.len = in_stack_ffffffffffffffe8;
  a2.str = in_stack_ffffffffffffffe0;
  ~r0_01.len = unaff_RBP;
  ~r0_01.str = in_stack_fffffffffffffff0;
  runtime_concatstring3((runtime_tmpBuf *)0x0,in_stack_ffffffffffffffc0,a1,a2,~r0_01);
  return;
}



void net___IPAddr__isWildcard(net_IPAddr *a,bool ~r0)

{
  uint8 *puVar1;
  int unaff_R14;
  net_IP in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((a != (net_IPAddr *)0x0) && (puVar1 = (a->IP).array, puVar1 != (uint8 *)0x0)) {
    net_IP_IsUnspecified(in_stack_ffffffffffffffe0,SUB81(puVar1,0));
    return;
  }
  return;
}



void net___IPConn__SyscallConn(net_IPConn *c,syscall_RawConn ~r0,error ~r1)

{
  net_netFD *pnVar1;
  net_netFD **extraout_RAX;
  net_netFD **extraout_RAX_00;
  net_netFD **ppnVar2;
  void *in_RBX;
  void *extraout_RBX;
  net_netFD **extraout_R11;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RBX = extraout_RBX;
  }
  if ((c->conn).fd == (net_netFD *)0x0) {
    return;
  }
  pnVar1 = (c->conn).fd;
  runtime_newobject((internal_abi_Type *)&DAT_0083fde0,in_RBX);
  ppnVar2 = extraout_RAX;
  if (runtime_writeBarrier._0_4_ != 0) {
