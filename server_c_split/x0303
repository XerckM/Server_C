          runtime_panicIndex();
        }
        uVar2 = encoding_json_hex.str[bVar1 >> 4];
        if ((uint)encoding_json_hex.len <= (uint)(bVar1 & 0xf)) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        newLen = uVar7 + 6;
        uVar3 = encoding_json_hex.str[bVar1 & 0xf];
        if (in_RDI < newLen) {
          ~r0_06.cap = in_stack_ffffffffffffff60;
          ~r0_06.array = in_stack_ffffffffffffff50.str;
          ~r0_06.len = in_stack_ffffffffffffff50.len;
          runtime_growslice(local_10,newLen,in_RDI,6,(internal_abi_Type *)&DAT_00807920,~r0_06);
          local_10 = extraout_RAX_05;
          in_RDI = extraout_RCX_05;
          newLen = extraout_RBX_05;
        }
        *(undefined4 *)((newLen - 6) + (int)local_10) = 0x3030755c;
        *(uint8 *)((newLen - 2) + (int)local_10) = uVar2;
        *(uint8 *)((newLen - 1) + (int)local_10) = uVar3;
      }
    }
    else if (bVar1 == 0xd) {
      newLen = uVar7 + 2;
      if (in_RDI < newLen) {
        ~r0_04.cap = in_stack_ffffffffffffff60;
        ~r0_04.array = in_stack_ffffffffffffff50.str;
        ~r0_04.len = in_stack_ffffffffffffff50.len;
        runtime_growslice(local_10,newLen,in_RDI,2,(internal_abi_Type *)&DAT_00807920,~r0_04);
        local_10 = extraout_RAX_03;
        in_RDI = extraout_RCX_03;
        newLen = extraout_RBX_03;
      }
      *(undefined2 *)((newLen - 2) + (int)local_10) = 0x725c;
    }
    else {
      if ((bVar1 != 0x22) && (bVar1 != 0x5c)) goto LAB_0055f5b4;
      newLen = uVar7 + 2;
      if (in_RDI < newLen) {
        ~r0_05.cap = in_stack_ffffffffffffff60;
        ~r0_05.array = in_stack_ffffffffffffff50.str;
        ~r0_05.len = in_stack_ffffffffffffff50.len;
        runtime_growslice(local_10,newLen,in_RDI,2,(internal_abi_Type *)&DAT_00807920,~r0_05);
        in_RDI = extraout_RCX_04;
        local_10 = extraout_RAX_04;
        newLen = extraout_RBX_04;
      }
      *(undefined *)((newLen - 2) + (int)local_10) = 0x5c;
      *(byte *)((newLen - 1) + (int)local_10) = bVar1;
    }
    uVar8 = uVar8 + 1;
    uVar6 = uVar8;
    local_18 = local_10;
  } while( true );
}



void type__eq_encoding_json_MarshalerError
               (encoding_json_MarshalerError *p,encoding_json_MarshalerError *q,bool r)

{
  runtime_itab *prVar1;
  char extraout_AL;
  char extraout_AL_00;
  undefined in_DIL;
  bool ~r0;
  undefined extraout_DIL;
  int unaff_R14;
  encoding_json_MarshalerError *peStack0000000000000008;
  encoding_json_MarshalerError *peStack0000000000000010;
  
  peStack0000000000000008 = p;
  peStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_DIL = extraout_DIL;
  }
  prVar1 = (peStack0000000000000008->Type).tab;
  if (((((peStack0000000000000010->Type).tab == prVar1) &&
       (runtime_ifaceeq(prVar1,(peStack0000000000000008->Type).data,
                        (peStack0000000000000010->Type).data,(bool)in_DIL), extraout_AL != '\0')) &&
      (prVar1 = (peStack0000000000000008->Err).tab, (peStack0000000000000010->Err).tab == prVar1))
     && ((runtime_ifaceeq(prVar1,(peStack0000000000000008->Err).data,
                          (peStack0000000000000010->Err).data,~r0), extraout_AL_00 != '\0' &&
         ((peStack0000000000000010->sourceFunc).len == (peStack0000000000000008->sourceFunc).len))))
  {
    runtime_memequal();
  }
  return;
}



void type__eq_encoding_json_UnmarshalTypeError
               (encoding_json_UnmarshalTypeError *p,encoding_json_UnmarshalTypeError *q,bool r)

{
  runtime_itab *tab;
  char extraout_AL;
  char extraout_AL_00;
  char extraout_AL_01;
  bool ~r0;
  int unaff_R14;
  encoding_json_UnmarshalTypeError *peStack0000000000000008;
  encoding_json_UnmarshalTypeError *peStack0000000000000010;
  
  peStack0000000000000008 = p;
  peStack0000000000000010 = q;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((((((peStack0000000000000010->Value).len == (peStack0000000000000008->Value).len) &&
        (runtime_memequal(), extraout_AL != '\0')) &&
       (tab = (peStack0000000000000008->Type).tab, (peStack0000000000000010->Type).tab == tab)) &&
      ((runtime_ifaceeq(tab,(peStack0000000000000008->Type).data,
                        (peStack0000000000000010->Type).data,~r0), extraout_AL_00 != '\0' &&
       (peStack0000000000000010->Offset == peStack0000000000000008->Offset)))) &&
     (((peStack0000000000000010->Struct).len == (peStack0000000000000008->Struct).len &&
      (((peStack0000000000000008->Field).len == (peStack0000000000000010->Field).len &&
       (runtime_memequal(), extraout_AL_01 != '\0')))))) {
    runtime_memequal();
  }
  return;
}



void encoding_json___Number__Float64(float64 ~r0,error ~r1)

{
  error **ppeVar1;
  error ~r1_00;
  runtime_itab *in_RAX;
  void *unaff_RBP;
  int unaff_R14;
  string in_stack_ffffffffffffffe0;
  runtime_itab *in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r1.tab = in_RAX;
    runtime_morestack_noctxt();
    in_RAX = ~r1.tab;
  }
  ppeVar1 = *(error ***)(unaff_R14 + 0x20);
  if ((ppeVar1 != (error **)0x0) && (*ppeVar1 == &~r1)) {
    *ppeVar1 = (error *)&stack0xffffffffffffffe0;
  }
  if (in_RAX != (runtime_itab *)0x0) {
    ~r1_00.data = unaff_RBP;
    ~r1_00.tab = in_stack_fffffffffffffff0;
    strconv_ParseFloat(in_stack_ffffffffffffffe0,(int)in_RAX->inter,~r0,~r1_00);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void encoding_json___Number__Int64(int64 ~r0,error ~r1)

{
  error **ppeVar1;
  int unaff_R14;
  string in_stack_ffffffffffffffd8;
  error in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ~r1.tab = (runtime_itab *)~r0;
    runtime_morestack_noctxt();
    ~r0 = (int64)~r1.tab;
  }
  ppeVar1 = *(error ***)(unaff_R14 + 0x20);
  if ((ppeVar1 != (error **)0x0) && (*ppeVar1 == &~r1)) {
    *ppeVar1 = (error *)&stack0xffffffffffffffd8;
  }
  if ((runtime_itab *)~r0 != (runtime_itab *)0x0) {
    strconv_ParseInt(in_stack_ffffffffffffffd8,(int)*(internal_abi_InterfaceType **)~r0,
                     (int)*(internal_abi_Type **)(~r0 + 8),10,in_stack_ffffffffffffffe8);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



void encoding_json___Number__String(string ~r0)

{
  string **ppsVar1;
  int in_RAX;
  int unaff_R14;
  
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &~r0)) {
    *ppsVar1 = (string *)&stack0xfffffffffffffff8;
  }
  if (in_RAX != 0) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicwrap();
}



// WARNING: Unknown calling convention

void encoding_json___encodeState__Available(void)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



// WARNING: Unknown calling convention

void encoding_json___encodeState__AvailableBuffer(void)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



// WARNING: Unknown calling convention

void encoding_json___encodeState__Bytes(void)

{
  int *piVar1;
  int in_RAX;
  int unaff_R14;
  undefined auStack_18 [16];
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_18;
  }
  if (*(uint *)(in_RAX + 0x18) <= *(uint *)(in_RAX + 8)) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceB();
}



// WARNING: Unknown calling convention

void encoding_json___encodeState__Cap(void)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



// WARNING: Unknown calling convention

void encoding_json___encodeState__Grow(int n)

{
  int *piVar1;
  bytes_Buffer *in_RAX;
  uint extraout_RAX;
  int m;
  int in_RCX;
  int extraout_RCX;
  int unaff_R14;
  bytes_Buffer *pbStack0000000000000008;
  int in_stack_00000010;
  interface___ in_stack_ffffffffffffffe8;
  
  pbStack0000000000000008 = in_RAX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000010 = n;
    runtime_morestack_noctxt();
    in_RCX = extraout_RCX;
    n = in_stack_00000010;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((bytes_Buffer **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe8;
  }
  if (-1 < n) {
    bytes___Buffer__grow(pbStack0000000000000008,n,in_RCX);
    if (extraout_RAX <= (uint)(pbStack0000000000000008->buf).cap) {
      (pbStack0000000000000008->buf).len = extraout_RAX;
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffe8);
}



// WARNING: Unknown calling convention

void encoding_json___encodeState__Len(void)

{
  int *piVar1;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  return;
}



// WARNING: Unknown calling convention

void encoding_json___encodeState__Next(int n)

{
  uint uVar1;
  int *piVar2;
  uint uVar3;
  int in_RAX;
  int iVar4;
  int m;
  int unaff_R14;
  undefined auStack_18 [16];
  
  piVar2 = *(int **)(unaff_R14 + 0x20);
  if ((piVar2 != (int *)0x0) && ((undefined *)*piVar2 == &stack0x00000008)) {
    *piVar2 = (int)auStack_18;
  }
  *(undefined *)(in_RAX + 0x20) = 0;
  uVar3 = *(uint *)(in_RAX + 0x18);
  iVar4 = *(int *)(in_RAX + 8) - uVar3;
  if (iVar4 < n) {
    n = iVar4;
  }
  uVar1 = n + uVar3;
  if (uVar1 <= *(uint *)(in_RAX + 0x10)) {
    if (uVar3 <= uVar1) {
      *(uint *)(in_RAX + 0x18) = uVar1;
      if (0 < n) {
        *(undefined *)(in_RAX + 0x20) = 0xff;
      }
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicSliceB();
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceAcap();
}



void encoding_json___encodeState__Read(__uint8 p,int n,error err)

{
  void *__src;
  __uint8 **pp_Var1;
  uint uVar2;
  uint uVar3;
  size_t in_RCX;
  void *in_RBX;
  int unaff_R14;
  __uint8 _Stack_28;
  size_t local_10;
  
  p.len = (int)in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    p.array = (uint8 *)n;
    p.cap = in_RCX;
    runtime_morestack_noctxt();
    n = (int)p.array;
    in_RCX = p.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &p)) {
    *pp_Var1 = &_Stack_28;
  }
  *(undefined *)(n + 0x20) = 0;
  uVar2 = *(uint *)(n + 8);
  uVar3 = *(uint *)(n + 0x18);
  if ((int)uVar3 < (int)uVar2) {
    if (uVar2 < uVar3) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    __src = (void *)(*(int *)n + (uVar3 & (int)(uVar3 - *(int *)(n + 0x10)) >> 0x3f));
    local_10 = in_RCX;
    if ((int)(uVar2 - uVar3) < (int)in_RCX) {
      local_10 = uVar2 - uVar3;
    }
    p.array = (uint8 *)n;
    if ((void *)p.len != __src) {
      runtime_memmove((void *)p.len,__src,local_10);
    }
    *(int *)((int)p.array + 0x18) = *(int *)((int)p.array + 0x18) + local_10;
    if (0 < (int)local_10) {
      *(undefined *)((int)p.array + 0x20) = 0xff;
    }
  }
  else {
    *(int *)(n + 8) = 0;
    *(int *)(n + 0x18) = 0;
    *(undefined *)(n + 0x20) = 0;
  }
  return;
}



// WARNING: Unknown calling convention

void encoding_json___encodeState__ReadByte(void)

{
  int *piVar1;
  uint uVar2;
  int in_RAX;
  uint8 c;
  int unaff_R14;
  undefined auStack_18 [16];
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_18;
  }
  uVar2 = *(uint *)(in_RAX + 0x18);
  if ((int)uVar2 < (int)*(uint *)(in_RAX + 8)) {
    if (*(uint *)(in_RAX + 8) <= uVar2) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    *(uint *)(in_RAX + 0x18) = uVar2 + 1;
    *(undefined *)(in_RAX + 0x20) = 0xff;
  }
  else {
    *(undefined8 *)(in_RAX + 8) = 0;
    *(undefined8 *)(in_RAX + 0x18) = 0;
    *(undefined *)(in_RAX + 0x20) = 0;
  }
  return;
}



void encoding_json___encodeState__ReadBytes(uint8 delim,__uint8 line,error err)

{
  __uint8 **pp_Var1;
  undefined7 in_register_00000001;
  bytes_Buffer *b;
  void *__src;
  void *extraout_RAX;
  void *__dest;
  uint8 in_BL;
  size_t __n;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffff98;
  error in_stack_ffffffffffffffb0;
  
  b = (bytes_Buffer *)CONCAT71(in_register_00000001,delim);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    line.array = (uint8 *)b;
    line.len._0_1_ = in_BL;
    runtime_morestack_noctxt();
    b = (bytes_Buffer *)line.array;
    in_BL = (uint8)line.len;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &line)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffff98;
  }
  bytes___Buffer__readSlice(b,in_BL,in_stack_ffffffffffffff98,in_stack_ffffffffffffffb0);
  if (__n == 0) {
    __dest = (void *)0x0;
  }
  else {
    runtime_growslice((void *)0x0,__n,0,__n,(internal_abi_Type *)&DAT_00807920,
                      (runtime_slice)in_stack_ffffffffffffff98);
    __dest = extraout_RAX;
  }
  runtime_memmove(__dest,__src,__n);
  return;
}



void encoding_json___encodeState__ReadFrom(io_Reader r,int64 n,error err)

{
  io_Reader **ppiVar1;
  error err_00;
  void *in_RBX;
  void *unaff_RBP;
  int unaff_R14;
  io_Reader in_stack_ffffffffffffffe0;
  runtime_itab *in_stack_fffffffffffffff0;
  
  r.data = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    r.tab = (runtime_itab *)n;
    runtime_morestack_noctxt();
    n = (int64)r.tab;
  }
  ppiVar1 = *(io_Reader ***)(unaff_R14 + 0x20);
  if ((ppiVar1 != (io_Reader **)0x0) && (*ppiVar1 == &r)) {
    *ppiVar1 = (io_Reader *)&stack0xffffffffffffffe0;
  }
  err_00.data = unaff_RBP;
  err_00.tab = in_stack_fffffffffffffff0;
  bytes___Buffer__ReadFrom((bytes_Buffer *)n,in_stack_ffffffffffffffe0,(int64)r.data,err_00);
  return;
}



void encoding_json___encodeState__ReadRune(int32 r,int size,error err)

{
  error **ppeVar1;
  error err_00;
  undefined4 in_register_00000004;
  bytes_Buffer *b;
  int in_RCX;
  int extraout_RCX;
  int32 r_00;
  int32 extraout_EBX;
  void *unaff_RBP;
  int unaff_R14;
  runtime_itab *in_stack_fffffffffffffff0;
  
  r_00 = (int32)size;
  b = (bytes_Buffer *)CONCAT44(in_register_00000004,r);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    err.tab = (runtime_itab *)b;
    runtime_morestack_noctxt();
    b = (bytes_Buffer *)err.tab;
    in_RCX = extraout_RCX;
    r_00 = extraout_EBX;
  }
  ppeVar1 = *(error ***)(unaff_R14 + 0x20);
  if ((ppeVar1 != (error **)0x0) && (*ppeVar1 == &err)) {
    *ppeVar1 = (error *)&stack0xfffffffffffffff0;
  }
  err_00.data = unaff_RBP;
  err_00.tab = in_stack_fffffffffffffff0;
  bytes___Buffer__ReadRune(b,r_00,in_RCX,err_00);
  return;
}



void encoding_json___encodeState__ReadString(uint8 delim,string line,error err)

{
  string **ppsVar1;
  __uint8 line_00;
  error err_00;
  undefined7 in_register_00000001;
  bytes_Buffer *b;
  uint8 *ptr;
  uint8 in_BL;
  int n;
  int unaff_R14;
  string in_stack_ffffffffffffffd0;
  int in_stack_ffffffffffffffe0;
  runtime_itab *in_stack_ffffffffffffffe8;
  void *in_stack_fffffffffffffff0;
  
  b = (bytes_Buffer *)CONCAT71(in_register_00000001,delim);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    line.str = (uint8 *)b;
    line.len._0_1_ = in_BL;
    runtime_morestack_noctxt();
    b = (bytes_Buffer *)line.str;
    in_BL = (uint8)line.len;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &line)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffd0;
  }
  line_00.cap = in_stack_ffffffffffffffe0;
  line_00.array = in_stack_ffffffffffffffd0.str;
  line_00.len = in_stack_ffffffffffffffd0.len;
  err_00.data = in_stack_fffffffffffffff0;
  err_00.tab = in_stack_ffffffffffffffe8;
  bytes___Buffer__readSlice(b,in_BL,line_00,err_00);
  runtime_slicebytetostring((runtime_tmpBuf *)0x0,ptr,n,in_stack_ffffffffffffffd0);
  return;
}



// WARNING: Unknown calling convention

void encoding_json___encodeState__Reset(void)

{
  int *piVar1;
  int in_RAX;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  *(undefined8 *)(in_RAX + 8) = 0;
  *(undefined8 *)(in_RAX + 0x18) = 0;
  *(undefined *)(in_RAX + 0x20) = 0;
  return;
}



// WARNING: Unknown calling convention

void encoding_json___encodeState__String(void)

{
  int *piVar1;
  uint uVar2;
  int *in_RAX;
  int unaff_R14;
  int *piStack0000000000000008;
  string in_stack_ffffffffffffffe0;
  
  piStack0000000000000008 = in_RAX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((int **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe0;
  }
  uVar2 = piStack0000000000000008[3];
  if (uVar2 <= (uint)piStack0000000000000008[1]) {
    runtime_slicebytetostring
              ((runtime_tmpBuf *)0x0,
               (uint8 *)(*piStack0000000000000008 +
                        (uVar2 & (int)(uVar2 - piStack0000000000000008[2]) >> 0x3f)),
               piStack0000000000000008[1] - uVar2,in_stack_ffffffffffffffe0);
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceB();
}



// WARNING: Unknown calling convention

void encoding_json___encodeState__Truncate(int n)

{
  uint uVar1;
  int *piVar2;
  int in_RAX;
  int unaff_R14;
  int iStack0000000000000008;
  int in_stack_00000010;
  interface___ in_stack_ffffffffffffffe8;
  
  iStack0000000000000008 = in_RAX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000010 = n;
    runtime_morestack_noctxt();
    n = in_stack_00000010;
  }
  piVar2 = *(int **)(unaff_R14 + 0x20);
  if ((piVar2 != (int *)0x0) && ((int *)*piVar2 == &stack0x00000008)) {
    *piVar2 = (int)&stack0xffffffffffffffe8;
  }
  if (n == 0) {
    *(undefined8 *)(iStack0000000000000008 + 8) = 0;
    *(undefined8 *)(iStack0000000000000008 + 0x18) = 0;
    *(undefined *)(iStack0000000000000008 + 0x20) = 0;
  }
  else {
    *(undefined *)(iStack0000000000000008 + 0x20) = 0;
    if ((n < 0) ||
       (*(int *)(iStack0000000000000008 + 8) - *(int *)(iStack0000000000000008 + 0x18) < n)) {
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffffe8);
    }
    uVar1 = *(int *)(iStack0000000000000008 + 0x18) + n;
    if (*(uint *)(iStack0000000000000008 + 0x10) < uVar1) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceAcap();
    }
    *(uint *)(iStack0000000000000008 + 8) = uVar1;
  }
  return;
}



// WARNING: Unknown calling convention

void encoding_json___encodeState__UnreadByte(void)

{
  int *piVar1;
  int in_RAX;
  int unaff_R14;
  
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)register0x00000020;
  }
  if (*(char *)(in_RAX + 0x20) != '\0') {
    *(undefined *)(in_RAX + 0x20) = 0;
    if (0 < *(int *)(in_RAX + 0x18)) {
      *(int *)(in_RAX + 0x18) = *(int *)(in_RAX + 0x18) + -1;
    }
  }
  return;
}



// WARNING: Unknown calling convention

void encoding_json___encodeState__UnreadRune(void)

{
  char cVar1;
  int *piVar2;
  int in_RAX;
  char **extraout_RAX;
  void *in_RBX;
  void *extraout_RBX;
  int unaff_R14;
  int iStack0000000000000008;
  undefined auStack_18 [16];
  
  iStack0000000000000008 = in_RAX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RBX = extraout_RBX;
  }
  piVar2 = *(int **)(unaff_R14 + 0x20);
  if ((piVar2 != (int *)0x0) && ((int *)*piVar2 == &stack0x00000008)) {
    *piVar2 = (int)auStack_18;
  }
  cVar1 = *(char *)(iStack0000000000000008 + 0x20);
  if (cVar1 < '\x01') {
    runtime_newobject((internal_abi_Type *)&DAT_0083e560,in_RBX);
    extraout_RAX[1] = (char *)0x4a;
    *extraout_RAX =
         "bytes.Buffer: UnreadRune: previous operation was not a successful ReadRuneheader list size to send violates the maximum size (%d bytes) set by serverHeader list size to send violates the maximum size (%d bytes) set by clienttransport: http2Server.HandleStreams received bogus greeting from client: %qtransport: http2Server.HandleStreams saw invalid preface type %T from clienttransport: trying to send header list size larger than the limit set by peergrpc: credentials.Bundle may not be used with individual TransportCredentialsClientConn\'s authority from transport creds %q and dial option %q don\'t matchMapIter.Next called on an iterator that does not have an associated map Valuereflect: embedded type with methods not implemented if type is not first fieldtransport: http2Server.HandleStreams failed to read initial settings frame: %vx509: signature check attempts limit reached while verifying certificate chain115792089210356248762697446949407573530086143415290314195533631308867097853951115792089210356248762697446949407573529996955224135760342422259061068512044369cannot convert slice with length %y to array or pointer to array with length %xmetadata: FromOutgoingContext got an odd number of input pairs for metadata: %dx509: invalid signature: parent certificate cannot sign this kind of certificatecrypto/rand: blocked for 60 seconds waiting to read random data from the kernel\ncrypto/ecdh: internal error: nistec ScalarBaseMult failed for a fixed-size inputgrpc: Server.RegisterService found the handler of type %v that does not satisfy %vreceived goaway with stream id: %v, which exceeds stream id of previous goaway: %vtransport: http2Server.HandleStreams failed to receive the preface from client: %vx509: a root or intermediate certificate is not authorized to sign for this name: refusing to use HTTP_PROXY value in CGI environment; see golang.org/s/cgihttpproxymethod configs in service config will be ignored due to presence of config selectorreflect: embedded type with methods not implemented if there is more than one fieldj..." /* TRUNCATED STRING LITERAL */
    ;
  }
  else {
    if ((int)cVar1 <= *(int *)(iStack0000000000000008 + 0x18)) {
      *(int *)(iStack0000000000000008 + 0x18) = *(int *)(iStack0000000000000008 + 0x18) - (int)cVar1
      ;
    }
    *(undefined *)(iStack0000000000000008 + 0x20) = 0;
  }
  return;
}



void encoding_json___encodeState__Write(__uint8 p,int n,error err)

{
  __uint8 **pp_Var1;
  error err_00;
  int in_RCX;
  int in_RBX;
  void *unaff_RBP;
  int unaff_R14;
  __uint8 in_stack_ffffffffffffffd8;
  runtime_itab *in_stack_fffffffffffffff0;
  
  p.len = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    p.array = (uint8 *)n;
    p.cap = in_RCX;
    runtime_morestack_noctxt();
    n = (int)p.array;
    in_RCX = p.cap;
  }
  pp_Var1 = *(__uint8 ***)(unaff_R14 + 0x20);
  if ((pp_Var1 != (__uint8 **)0x0) && (*pp_Var1 == &p)) {
    *pp_Var1 = (__uint8 *)&stack0xffffffffffffffd8;
  }
  err_00.data = unaff_RBP;
  err_00.tab = in_stack_fffffffffffffff0;
  bytes___Buffer__Write((bytes_Buffer *)n,in_stack_ffffffffffffffd8,p.len,err_00);
  return;
}



// WARNING: Unknown calling convention

void encoding_json___encodeState__WriteByte(uint8 c)

{
  int *piVar1;
  bytes_Buffer *in_RAX;
  int unaff_R14;
  bytes_Buffer *pbStack0000000000000008;
  uint8 in_stack_00000010;
  error in_stack_ffffffffffffffe8;
  
  pbStack0000000000000008 = in_RAX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    in_stack_00000010 = c;
    runtime_morestack_noctxt();
    c = in_stack_00000010;
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((bytes_Buffer **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffe8;
  }
  bytes___Buffer__WriteByte(pbStack0000000000000008,c,in_stack_ffffffffffffffe8);
  return;
}



void encoding_json___encodeState__WriteRune(int32 r,int n,error err)

{
  error **ppeVar1;
  undefined4 in_register_00000004;
  bytes_Buffer *b;
  int in_RCX;
  int extraout_RCX;
  int unaff_R14;
  error in_stack_ffffffffffffffe8;
  
  b = (bytes_Buffer *)CONCAT44(in_register_00000004,r);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    err.tab = (runtime_itab *)b;
    err.data._0_4_ = (dword)n;
    runtime_morestack_noctxt();
    n = (int)(dword)err.data;
    b = (bytes_Buffer *)err.tab;
    in_RCX = extraout_RCX;
  }
  ppeVar1 = *(error ***)(unaff_R14 + 0x20);
  if ((ppeVar1 != (error **)0x0) && (*ppeVar1 == &err)) {
    *ppeVar1 = (error *)&stack0xffffffffffffffe8;
  }
  bytes___Buffer__WriteRune(b,(dword)n,in_RCX,in_stack_ffffffffffffffe8);
  return;
}



void encoding_json___encodeState__WriteString(string s,int n,error err)

{
  string **ppsVar1;
  error err_00;
  int in_RBX;
  void *unaff_RBP;
  int unaff_R14;
  string in_stack_ffffffffffffffe0;
  runtime_itab *in_stack_fffffffffffffff0;
  
  s.len = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    s.str = (uint8 *)n;
    runtime_morestack_noctxt();
    n = (int)s.str;
  }
  ppsVar1 = *(string ***)(unaff_R14 + 0x20);
  if ((ppsVar1 != (string **)0x0) && (*ppsVar1 == &s)) {
    *ppsVar1 = (string *)&stack0xffffffffffffffe0;
  }
  err_00.data = unaff_RBP;
  err_00.tab = in_stack_fffffffffffffff0;
  bytes___Buffer__WriteString((bytes_Buffer *)n,in_stack_ffffffffffffffe0,s.len,err_00);
  return;
}



void encoding_json___encodeState__WriteTo(io_Writer w,int64 n,error err)

{
  io_Writer **ppiVar1;
  error err_00;
  void *in_RBX;
  void *unaff_RBP;
  int unaff_R14;
  io_Writer in_stack_ffffffffffffffe0;
  runtime_itab *in_stack_fffffffffffffff0;
  
  w.data = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    w.tab = (runtime_itab *)n;
    runtime_morestack_noctxt();
    n = (int64)w.tab;
  }
  ppiVar1 = *(io_Writer ***)(unaff_R14 + 0x20);
  if ((ppiVar1 != (io_Writer **)0x0) && (*ppiVar1 == &w)) {
    *ppiVar1 = (io_Writer *)&stack0xffffffffffffffe0;
  }
  err_00.data = unaff_RBP;
  err_00.tab = in_stack_fffffffffffffff0;
  bytes___Buffer__WriteTo((bytes_Buffer *)n,in_stack_ffffffffffffffe0,(int64)w.data,err_00);
  return;
}



// WARNING: Unknown calling convention

void encoding_json_jsonError_Error(void)

{
  int *piVar1;
  int in_RAX;
  undefined8 in_RBX;
  int unaff_R14;
  int iStack0000000000000008;
  undefined8 uStack0000000000000010;
  undefined auStack_10 [8];
  
  iStack0000000000000008 = in_RAX;
  uStack0000000000000010 = in_RBX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((int *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  (**(code **)(iStack0000000000000008 + 0x18))(uStack0000000000000010);
  return;
}



// WARNING: Unknown calling convention

void encoding_json___jsonError__Error(void)

{
  int *piVar1;
  int *in_RAX;
  int unaff_R14;
  int *piStack0000000000000008;
  undefined auStack_10 [8];
  
  piStack0000000000000008 = in_RAX;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((int **)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)auStack_10;
  }
  (**(code **)(*piStack0000000000000008 + 0x18))(piStack0000000000000008[1]);
  return;
}



void encoding_json___byIndex__Len(int ~r0)

{
  int *piVar1;
