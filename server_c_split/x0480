  runtime_panicIndex();
}



void math_big___Float__SetInt(math_big_Float *z,math_big_Int *x,math_big_Float *~r0)

{
  int iVar1;
  math_big_Word *__src;
  math_big_Word *extraout_RAX;
  math_big_Word *extraout_RAX_00;
  math_big_Float *extraout_RAX_01;
  math_big_Float *pmVar2;
  int iVar3;
  uint top;
  uint uVar4;
  int iVar5;
  uint32 uVar6;
  int i;
  void *in_RDI;
  math_big_Word *extraout_RDI;
  math_big_Word *__dest;
  void *extraout_RDI_00;
  int iVar7;
  math_big_Word **extraout_R11;
  int unaff_R14;
  math_big_Float *pmStack0000000000000008;
  math_big_nat in_stack_ffffffffffffffa8;
  
  pmStack0000000000000008 = z;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI_00;
  }
  iVar5 = (x->abs).len;
  iVar1 = iVar5 + -1;
  if (iVar1 < 0) {
    uVar4 = 0;
  }
  else {
    uVar4 = (x->abs).array[iVar5 + -1];
    uVar4 = uVar4 >> 1 | uVar4;
    uVar4 = uVar4 >> 2 | uVar4;
    uVar4 = uVar4 >> 4 | uVar4;
    uVar4 = uVar4 >> 8 | uVar4;
    uVar4 = uVar4 >> 0x10 | uVar4;
    uVar4 = uVar4 >> 0x20 | uVar4;
    iVar5 = 0x3f;
    if (uVar4 != 0) {
      for (; uVar4 >> iVar5 == 0; iVar5 = iVar5 + -1) {
      }
    }
    in_RDI = (void *)0xffffffffffffffff;
    if (uVar4 == 0) {
      iVar5 = -1;
    }
    uVar4 = iVar5 + iVar1 * 0x40 + 1;
  }
  if (pmStack0000000000000008->prec == 0) {
    uVar6 = 0x40;
    if (0x40 < (dword)uVar4) {
      uVar6 = (dword)uVar4;
    }
    pmStack0000000000000008->prec = uVar6;
  }
  pmStack0000000000000008->acc = 0;
  pmStack0000000000000008->neg = x->neg;
  iVar1 = (x->abs).len;
  __src = (x->abs).array;
  if (iVar1 != 0) {
    iVar5 = (pmStack0000000000000008->mant).cap;
    iVar3 = iVar1;
    if (iVar5 < iVar1) {
      if (iVar1 == 1) {
        runtime_makeslice((internal_abi_Type *)&DAT_00808860,1,1,in_RDI);
        iVar5 = 1;
        iVar3 = 1;
        __dest = extraout_RAX;
      }
      else {
        iVar5 = iVar1 + 4;
        runtime_makeslice((internal_abi_Type *)&DAT_00808860,iVar1,iVar5,in_RDI);
        __dest = extraout_RAX_00;
      }
    }
    else {
      __dest = (pmStack0000000000000008->mant).array;
    }
    iVar7 = iVar3;
    if (iVar1 < iVar3) {
      iVar7 = iVar1;
    }
    if (__dest != __src) {
      runtime_memmove(__dest,__src,iVar7 << 3);
    }
    (pmStack0000000000000008->mant).len = iVar3;
    (pmStack0000000000000008->mant).cap = iVar5;
    pmVar2 = pmStack0000000000000008;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RDI;
      extraout_R11[1] = (extraout_RAX_01->mant).array;
      pmVar2 = extraout_RAX_01;
      __dest = extraout_RDI;
    }
    (pmVar2->mant).array = __dest;
    math_big_fnorm(in_stack_ffffffffffffffa8,(int64)__dest);
    math_big___Float__setExpAndRound(pmStack0000000000000008,uVar4 & 0xffffffff,0);
    return;
  }
  pmStack0000000000000008->form = 0;
  return;
}



void math_big___Float__Set(math_big_Float *z,math_big_Float *x,math_big_Float *~r0)

{
  int len;
  math_big_Word *__src;
  math_big_Word *extraout_RAX;
  math_big_Word *extraout_RAX_00;
  math_big_Float *extraout_RAX_01;
  int iVar1;
  int cap;
  math_big_Float *extraout_RBX;
  void *in_RDI;
  math_big_Word *extraout_RDI;
  math_big_Word *__dest;
  void *extraout_RDI_00;
  int iVar2;
  math_big_Word **extraout_R11;
  int unaff_R14;
  double in_XMM0_Qa;
  math_big_Float *pmStack0000000000000008;
  
  while (pmStack0000000000000008 = z, &stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    z = pmStack0000000000000008;
    in_RDI = extraout_RDI_00;
  }
  z->acc = 0;
  if (z != x) {
    z->form = x->form;
    z->neg = x->neg;
    if (x->form == 1) {
      z->exp = x->exp;
      cap = (z->mant).cap;
      len = (x->mant).len;
      __src = (x->mant).array;
      iVar1 = len;
      if (cap < len) {
        if (len == 1) {
          runtime_makeslice((internal_abi_Type *)&DAT_00808860,1,1,in_RDI);
          cap = 1;
          iVar1 = 1;
          __dest = extraout_RAX;
        }
        else {
          cap = len + 4;
          runtime_makeslice((internal_abi_Type *)&DAT_00808860,len,cap,in_RDI);
          __dest = extraout_RAX_00;
        }
      }
      else {
        __dest = (z->mant).array;
      }
      iVar2 = iVar1;
      if (len < iVar1) {
        iVar2 = len;
      }
      if (__dest != __src) {
        runtime_memmove(__dest,__src,iVar2 << 3);
      }
      (pmStack0000000000000008->mant).len = iVar1;
      (pmStack0000000000000008->mant).cap = cap;
      z = pmStack0000000000000008;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11 = extraout_RDI;
        extraout_R11[1] = (extraout_RAX_01->mant).array;
        z = extraout_RAX_01;
        x = extraout_RBX;
        __dest = extraout_RDI;
      }
      (z->mant).array = __dest;
    }
    if (z->prec == 0) {
      z->prec = x->prec;
    }
    else if (z->prec < x->prec) {
      math_big___Float__round(in_XMM0_Qa);
    }
  }
  return;
}



void math_big___Float__Float64(math_big_Float *x,float64 ~r0,math_big_Accuracy ~r1)

{
  math_big_form mVar1;
  uint uVar2;
  math_big_Word *pmVar3;
  bool bVar4;
  math_big_Float *~r0_00;
  int iVar5;
  sdword sVar6;
  int32 e;
  uint64 mant;
  int i_1;
  uint64 bexp;
  int p;
  uint64 sign;
  uint uVar7;
  uint uVar8;
  int i;
  int unaff_R14;
  undefined in_XMM15 [16];
  interface___ in_stack_ffffffffffffffc0;
  math_big_Float r;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  mVar1 = x->form;
  if (mVar1 == 0) {
    if (x->neg == false) {
      return;
    }
    return;
  }
  if (mVar1 != 1) {
    if (mVar1 != 2) {
                    // WARNING: Subroutine does not return
      runtime_gopanic(in_stack_ffffffffffffffc0);
    }
    if (x->neg == false) {
      return;
    }
    return;
  }
  sVar6 = x->exp + -1;
  if (sVar6 < -0x3fe) {
    ~r0_00 = (math_big_Float *)(sVar6 + 0x433);
    if (-1 < (int)~r0_00) {
      if (sVar6 != -0x433) goto LAB_00638ee8;
      uVar2 = (x->mant).len;
      uVar7 = uVar2 * 0x40 - 1;
      uVar8 = uVar7 >> 6;
      if (uVar8 < uVar2) {
        pmVar3 = (x->mant).array;
        for (iVar5 = 0; iVar5 < (int)uVar8; iVar5 = iVar5 + 1) {
          if (pmVar3[iVar5] != 0) {
            bVar4 = true;
            goto LAB_00639049;
          }
        }
        if ((-(uint)(-(((dword)uVar7 & 0x3f) - 0x40) < 0x40) &
            pmVar3[uVar8] << (-(char)uVar7 & 0x3fU)) == 0) {
          bVar4 = false;
        }
        else {
          bVar4 = true;
        }
      }
      else if (uVar2 == 0) {
        bVar4 = false;
      }
      else {
        bVar4 = true;
      }
LAB_00639049:
      if (bVar4) {
        if (x->neg == false) {
          return;
        }
        return;
      }
    }
    if (x->neg == false) {
      return;
    }
    return;
  }
  ~r0_00 = (math_big_Float *)0x35;
LAB_00638ee8:
  r._4_2_ = in_XMM15._4_2_;
  r.form = in_XMM15[6];
  r.neg = in_XMM15[7];
  r.mant.array = in_XMM15._0_8_;
  r.mant.len = in_XMM15._8_8_;
  r.prec = (uint32)~r0_00;
  r._24_16_ = in_XMM15;
  math_big___Float__Set(&r,x,~r0_00);
  if ((r.form != 2) && ((sdword)(r.exp + -1) < 0x400)) {
    return;
  }
  if (x->neg == false) {
    return;
  }
  return;
}



void math_big___Int__Sign(math_big_Int *x,int ~r0)

{
  if ((x->abs).len == 0) {
    return;
  }
  if (x->neg != false) {
    return;
  }
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void math_big___Int__SetInt64(math_big_Int *z,int64 x,math_big_Int *~r0)

{
  math_big_nat ~r0_00;
  math_big_Word *extraout_RAX;
  math_big_Word *extraout_RAX_00;
  math_big_Word *pmVar1;
  int extraout_RCX;
  int extraout_RBX;
  undefined8 unaff_RBP;
  math_big_Word **extraout_R11;
  int unaff_R14;
  int unaff_retaddr;
  math_big_nat in_stack_ffffffffffffffd8;
  undefined8 in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ~r0_00.len = unaff_RBP;
  ~r0_00.array = (math_big_Word *)in_stack_fffffffffffffff0;
  ~r0_00.cap = unaff_retaddr;
  math_big_nat_setUint64(in_stack_ffffffffffffffd8,(uint64)(z->abs).array,~r0_00);
  (z->abs).len = extraout_RBX;
  (z->abs).cap = extraout_RCX;
  pmVar1 = extraout_RAX;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RAX_00;
    extraout_R11[1] = (z->abs).array;
    pmVar1 = extraout_RAX_00;
  }
  (z->abs).array = pmVar1;
  z->neg = x < 0;
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void math_big___Int__SetUint64(math_big_Int *z,uint64 x,math_big_Int *~r0)

{
  math_big_nat ~r0_00;
  math_big_Word *extraout_RAX;
  math_big_Word *extraout_RAX_00;
  math_big_Word *pmVar1;
  int extraout_RCX;
  int extraout_RBX;
  undefined8 unaff_RBP;
  math_big_Word **extraout_R11;
  int unaff_R14;
  int unaff_retaddr;
  math_big_nat in_stack_ffffffffffffffd8;
  undefined8 in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ~r0_00.len = unaff_RBP;
  ~r0_00.array = (math_big_Word *)in_stack_fffffffffffffff0;
  ~r0_00.cap = unaff_retaddr;
  math_big_nat_setUint64(in_stack_ffffffffffffffd8,(uint64)(z->abs).array,~r0_00);
  (z->abs).len = extraout_RBX;
  (z->abs).cap = extraout_RCX;
  pmVar1 = extraout_RAX;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RAX_00;
    extraout_R11[1] = (z->abs).array;
    pmVar1 = extraout_RAX_00;
  }
  (z->abs).array = pmVar1;
  z->neg = false;
  return;
}



void math_big___Int__Set(math_big_Int *z,math_big_Int *x,math_big_Int *~r0)

{
  int len;
  math_big_Word *__src;
  math_big_Word *extraout_RAX;
  math_big_Word *extraout_RAX_00;
  math_big_Int *extraout_RAX_01;
  int iVar1;
  int cap;
  math_big_Int *extraout_RBX;
  void *in_RDI;
  math_big_Word *extraout_RDI;
  math_big_Word *__dest;
  void *extraout_RDI_00;
  int iVar2;
  math_big_Word **extraout_R11;
  int unaff_R14;
  math_big_Int *pmStack0000000000000008;
  math_big_Int *pmStack0000000000000010;
  
  pmStack0000000000000008 = z;
  pmStack0000000000000010 = x;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI_00;
  }
  if (pmStack0000000000000008 != pmStack0000000000000010) {
    cap = (pmStack0000000000000008->abs).cap;
    len = (pmStack0000000000000010->abs).len;
    __src = (pmStack0000000000000010->abs).array;
    iVar1 = len;
    if (cap < len) {
      if (len == 1) {
        runtime_makeslice((internal_abi_Type *)&DAT_00808860,1,1,in_RDI);
        cap = 1;
        iVar1 = 1;
        __dest = extraout_RAX;
      }
      else {
        cap = len + 4;
        runtime_makeslice((internal_abi_Type *)&DAT_00808860,len,cap,in_RDI);
        __dest = extraout_RAX_00;
      }
    }
    else {
      __dest = (pmStack0000000000000008->abs).array;
    }
    iVar2 = iVar1;
    if (len < iVar1) {
      iVar2 = len;
    }
    if (__dest != __src) {
      runtime_memmove(__dest,__src,iVar2 << 3);
    }
    (pmStack0000000000000008->abs).len = iVar1;
    (pmStack0000000000000008->abs).cap = cap;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RDI;
      extraout_R11[1] = (extraout_RAX_01->abs).array;
      pmStack0000000000000008 = extraout_RAX_01;
      pmStack0000000000000010 = extraout_RBX;
      __dest = extraout_RDI;
    }
    (pmStack0000000000000008->abs).array = __dest;
    pmStack0000000000000008->neg = pmStack0000000000000010->neg;
  }
  return;
}



void math_big___Int__Bits(math_big_Int *x,__math_big_Word ~r0)

{
  return;
}



void math_big___Int__SetBits(math_big_Int *z,__math_big_Word abs,math_big_Int *~r0)

{
  math_big_Int *extraout_RAX;
  uint in_RCX;
  int i;
  math_big_Int *extraout_RBX;
  uint in_RDI;
  math_big_Int **extraout_R11;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  while ((0 < (int)in_RCX && (*(int *)((int)~r0 + in_RCX * 8 + -8) == 0))) {
    in_RCX = in_RCX - 1;
  }
  if (in_RDI < in_RCX) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceAcap();
  }
  (z->abs).len = in_RCX;
  (z->abs).cap = in_RDI;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RBX;
    extraout_R11[1] = (math_big_Int *)(extraout_RAX->abs).array;
    z = extraout_RAX;
    ~r0 = extraout_RBX;
  }
  (z->abs).array = (math_big_Word *)~r0;
  z->neg = false;
  return;
}



void math_big___Int__Abs(math_big_Int *z,math_big_Int *x,math_big_Int *~r0)

{
  int len;
  math_big_Word *__src;
  math_big_Word *extraout_RAX;
  math_big_Word *extraout_RAX_00;
  math_big_Int *extraout_RAX_01;
  int iVar1;
  int cap;
  math_big_Int *extraout_RBX;
  void *in_RDI;
  math_big_Word *extraout_RDI;
  math_big_Word *__dest;
  void *extraout_RDI_00;
  int iVar2;
  math_big_Word **extraout_R11;
  int unaff_R14;
  math_big_Int *pmStack0000000000000008;
  math_big_Int *pmStack0000000000000010;
  
  pmStack0000000000000008 = z;
  pmStack0000000000000010 = x;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI_00;
  }
  if (pmStack0000000000000008 != pmStack0000000000000010) {
    cap = (pmStack0000000000000008->abs).cap;
    len = (pmStack0000000000000010->abs).len;
    __src = (pmStack0000000000000010->abs).array;
    iVar1 = len;
    if (cap < len) {
      if (len == 1) {
        runtime_makeslice((internal_abi_Type *)&DAT_00808860,1,1,in_RDI);
        cap = 1;
        iVar1 = 1;
        __dest = extraout_RAX;
      }
      else {
        cap = len + 4;
        runtime_makeslice((internal_abi_Type *)&DAT_00808860,len,cap,in_RDI);
        __dest = extraout_RAX_00;
      }
    }
    else {
      __dest = (pmStack0000000000000008->abs).array;
    }
    iVar2 = iVar1;
    if (len < iVar1) {
      iVar2 = len;
    }
    if (__dest != __src) {
      runtime_memmove(__dest,__src,iVar2 << 3);
    }
    (pmStack0000000000000008->abs).len = iVar1;
    (pmStack0000000000000008->abs).cap = cap;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RDI;
      extraout_R11[1] = (extraout_RAX_01->abs).array;
      pmStack0000000000000008 = extraout_RAX_01;
      pmStack0000000000000010 = extraout_RBX;
      __dest = extraout_RDI;
    }
    (pmStack0000000000000008->abs).array = __dest;
    pmStack0000000000000008->neg = pmStack0000000000000010->neg;
  }
  pmStack0000000000000008->neg = false;
  return;
}



void math_big___Int__Neg(math_big_Int *z,math_big_Int *x,math_big_Int *~r0)

{
  int len;
  math_big_Word *__src;
  math_big_Word *extraout_RAX;
  math_big_Word *extraout_RAX_00;
  math_big_Int *extraout_RAX_01;
  byte bVar1;
  int iVar2;
  int cap;
  math_big_Int *extraout_RBX;
  void *in_RDI;
  math_big_Word *extraout_RDI;
  math_big_Word *__dest;
  void *extraout_RDI_00;
  int iVar3;
  math_big_Word **extraout_R11;
  int unaff_R14;
  math_big_Int *pmStack0000000000000008;
  math_big_Int *pmStack0000000000000010;
  
  pmStack0000000000000008 = z;
  pmStack0000000000000010 = x;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI_00;
  }
  if (pmStack0000000000000008 != pmStack0000000000000010) {
    cap = (pmStack0000000000000008->abs).cap;
    len = (pmStack0000000000000010->abs).len;
    __src = (pmStack0000000000000010->abs).array;
    iVar2 = len;
    if (cap < len) {
      if (len == 1) {
        runtime_makeslice((internal_abi_Type *)&DAT_00808860,1,1,in_RDI);
        cap = 1;
        iVar2 = 1;
        __dest = extraout_RAX;
      }
      else {
        cap = len + 4;
        runtime_makeslice((internal_abi_Type *)&DAT_00808860,len,cap,in_RDI);
        __dest = extraout_RAX_00;
      }
    }
    else {
      __dest = (pmStack0000000000000008->abs).array;
    }
    iVar3 = iVar2;
    if (len < iVar2) {
      iVar3 = len;
    }
    if (__dest != __src) {
      runtime_memmove(__dest,__src,iVar3 << 3);
    }
    (pmStack0000000000000008->abs).len = iVar2;
    (pmStack0000000000000008->abs).cap = cap;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RDI;
      extraout_R11[1] = (extraout_RAX_01->abs).array;
      pmStack0000000000000008 = extraout_RAX_01;
      pmStack0000000000000010 = extraout_RBX;
      __dest = extraout_RDI;
    }
    (pmStack0000000000000008->abs).array = __dest;
    pmStack0000000000000008->neg = pmStack0000000000000010->neg;
  }
  if ((pmStack0000000000000008->abs).len == 0) {
    bVar1 = false;
  }
  else {
    bVar1 = pmStack0000000000000008->neg ^ 1;
  }
  pmStack0000000000000008->neg = (bool)bVar1;
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void math_big___Int__Add(math_big_Int *z,math_big_Int *x,math_big_Int *y,math_big_Int *~r0)

{
  math_big_nat ~r0_00;
  math_big_nat ~r0_01;
  math_big_nat ~r0_02;
  math_big_Word *extraout_RAX;
  math_big_Word *extraout_RAX_00;
  int iVar1;
  math_big_Word *extraout_RAX_01;
  math_big_Word *extraout_RAX_02;
  math_big_Word *pmVar2;
  math_big_Word *extraout_RAX_03;
  math_big_Word *extraout_RAX_04;
  byte bVar3;
  int extraout_RCX;
  int extraout_RCX_00;
  int extraout_RCX_01;
  bool neg;
  int extraout_RBX;
  int extraout_RBX_00;
  int extraout_RBX_01;
  undefined8 unaff_RBP;
  math_big_Word **extraout_R11;
  math_big_Word **extraout_R11_00;
  math_big_Word **extraout_R11_01;
  int unaff_R14;
  int unaff_retaddr;
  math_big_nat in_stack_ffffffffffffffa8;
  math_big_nat in_stack_ffffffffffffffc0;
  math_big_nat in_stack_ffffffffffffffd8;
  undefined7 in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  bVar3 = x->neg;
  if (y->neg == (bool)bVar3) {
    ~r0_00.array._7_1_ = (bool)bVar3;
    ~r0_00.array._0_7_ = in_stack_fffffffffffffff0;
    ~r0_00.len = unaff_RBP;
    ~r0_00.cap = unaff_retaddr;
    math_big_nat_add(in_stack_ffffffffffffffa8,in_stack_ffffffffffffffc0,in_stack_ffffffffffffffd8,
                     ~r0_00);
    (z->abs).len = extraout_RBX;
    (z->abs).cap = extraout_RCX;
    pmVar2 = extraout_RAX;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RAX_00;
      extraout_R11[1] = (z->abs).array;
      pmVar2 = extraout_RAX_00;
    }
    (z->abs).array = pmVar2;
  }
  else {
    iVar1 = math_big_nat_cmp((x->abs).array,(void *)(x->abs).len);
    if (iVar1 < 0) {
      ~r0_02.array._7_1_ = bVar3;
      ~r0_02.array._0_7_ = in_stack_fffffffffffffff0;
      ~r0_02.len = unaff_RBP;
      ~r0_02.cap = unaff_retaddr;
      math_big_nat_sub(in_stack_ffffffffffffffa8,in_stack_ffffffffffffffc0,in_stack_ffffffffffffffd8
                       ,~r0_02);
      (z->abs).len = extraout_RBX_01;
      (z->abs).cap = extraout_RCX_01;
      pmVar2 = extraout_RAX_03;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_01 = extraout_RAX_04;
        extraout_R11_01[1] = (z->abs).array;
        pmVar2 = extraout_RAX_04;
      }
      (z->abs).array = pmVar2;
      bVar3 = bVar3 ^ 1;
    }
    else {
      ~r0_01.array._7_1_ = bVar3;
      ~r0_01.array._0_7_ = in_stack_fffffffffffffff0;
      ~r0_01.len = unaff_RBP;
      ~r0_01.cap = unaff_retaddr;
      math_big_nat_sub(in_stack_ffffffffffffffa8,in_stack_ffffffffffffffc0,in_stack_ffffffffffffffd8
                       ,~r0_01);
      (z->abs).len = extraout_RBX_00;
      (z->abs).cap = extraout_RCX_00;
      pmVar2 = extraout_RAX_01;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_00 = extraout_RAX_02;
        extraout_R11_00[1] = (z->abs).array;
        pmVar2 = extraout_RAX_02;
      }
      (z->abs).array = pmVar2;
    }
  }
  z->neg = (bool)((z->abs).len != 0 & bVar3);
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void math_big___Int__Sub(math_big_Int *z,math_big_Int *x,math_big_Int *y,math_big_Int *~r0)

{
  math_big_nat ~r0_00;
  math_big_nat ~r0_01;
  math_big_nat ~r0_02;
  math_big_Word *extraout_RAX;
  math_big_Word *extraout_RAX_00;
  int iVar1;
  math_big_Word *extraout_RAX_01;
  math_big_Word *extraout_RAX_02;
  math_big_Word *pmVar2;
  math_big_Word *extraout_RAX_03;
  math_big_Word *extraout_RAX_04;
  byte bVar3;
  int extraout_RCX;
  int extraout_RCX_00;
  int extraout_RCX_01;
  bool neg;
  int extraout_RBX;
  int extraout_RBX_00;
  int extraout_RBX_01;
  undefined8 unaff_RBP;
  math_big_Word **extraout_R11;
  math_big_Word **extraout_R11_00;
  math_big_Word **extraout_R11_01;
  int unaff_R14;
  int unaff_retaddr;
  math_big_nat in_stack_ffffffffffffffa8;
  math_big_nat in_stack_ffffffffffffffc0;
  math_big_nat in_stack_ffffffffffffffd8;
  undefined7 in_stack_fffffffffffffff0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  bVar3 = x->neg;
  if (y->neg == (bool)bVar3) {
    iVar1 = math_big_nat_cmp((x->abs).array,(void *)(x->abs).len);
    if (iVar1 < 0) {
      ~r0_02.array._7_1_ = bVar3;
      ~r0_02.array._0_7_ = in_stack_fffffffffffffff0;
      ~r0_02.len = unaff_RBP;
      ~r0_02.cap = unaff_retaddr;
      math_big_nat_sub(in_stack_ffffffffffffffa8,in_stack_ffffffffffffffc0,in_stack_ffffffffffffffd8
                       ,~r0_02);
      (z->abs).len = extraout_RBX_01;
      (z->abs).cap = extraout_RCX_01;
      pmVar2 = extraout_RAX_03;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_01 = extraout_RAX_04;
        extraout_R11_01[1] = (z->abs).array;
        pmVar2 = extraout_RAX_04;
      }
      (z->abs).array = pmVar2;
      bVar3 = bVar3 ^ 1;
    }
    else {
      ~r0_01.array._7_1_ = bVar3;
      ~r0_01.array._0_7_ = in_stack_fffffffffffffff0;
      ~r0_01.len = unaff_RBP;
      ~r0_01.cap = unaff_retaddr;
      math_big_nat_sub(in_stack_ffffffffffffffa8,in_stack_ffffffffffffffc0,in_stack_ffffffffffffffd8
                       ,~r0_01);
      (z->abs).len = extraout_RBX_00;
      (z->abs).cap = extraout_RCX_00;
      pmVar2 = extraout_RAX_01;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_00 = extraout_RAX_02;
        extraout_R11_00[1] = (z->abs).array;
        pmVar2 = extraout_RAX_02;
      }
      (z->abs).array = pmVar2;
    }
  }
  else {
    ~r0_00.array._7_1_ = (bool)bVar3;
    ~r0_00.array._0_7_ = in_stack_fffffffffffffff0;
    ~r0_00.len = unaff_RBP;
    ~r0_00.cap = unaff_retaddr;
    math_big_nat_add(in_stack_ffffffffffffffa8,in_stack_ffffffffffffffc0,in_stack_ffffffffffffffd8,
                     ~r0_00);
    (z->abs).len = extraout_RBX;
    (z->abs).cap = extraout_RCX;
    pmVar2 = extraout_RAX;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RAX_00;
      extraout_R11[1] = (z->abs).array;
      pmVar2 = extraout_RAX_00;
    }
    (z->abs).array = pmVar2;
  }
  z->neg = (bool)((z->abs).len != 0 & bVar3);
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void math_big___Int__Mul(math_big_Int *z,math_big_Int *x,math_big_Int *y,math_big_Int *~r0)

{
  math_big_nat ~r0_00;
  math_big_Word *extraout_RAX;
  math_big_Word *extraout_RAX_00;
  math_big_Word *pmVar1;
  math_big_Word *extraout_RAX_01;
  math_big_Word *extraout_RAX_02;
  int extraout_RCX;
  int extraout_RCX_00;
  int extraout_RBX;
  int extraout_RBX_00;
  int extraout_RBX_01;
  int iVar2;
  math_big_Word *unaff_RBP;
  math_big_Word **extraout_R11;
  math_big_Word **extraout_R11_00;
  int unaff_R14;
  bool bVar3;
  undefined8 unaff_retaddr;
  math_big_nat in_stack_ffffffffffffffb0;
  math_big_nat in_stack_ffffffffffffffc8;
  math_big_nat in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (y == x) {
    math_big_nat_sqr(in_stack_ffffffffffffffb0,in_stack_ffffffffffffffc8,in_stack_ffffffffffffffe0);
    (z->abs).len = extraout_RBX;
    (z->abs).cap = extraout_RCX;
    pmVar1 = extraout_RAX;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RAX_00;
      extraout_R11[1] = (z->abs).array;
      pmVar1 = extraout_RAX_00;
    }
    (z->abs).array = pmVar1;
    z->neg = false;
    return;
  }
  ~r0_00.cap = (int)z;
  ~r0_00.len = unaff_retaddr;
  ~r0_00.array = unaff_RBP;
  math_big_nat_mul(in_stack_ffffffffffffffb0,in_stack_ffffffffffffffc8,in_stack_ffffffffffffffe0,
                   ~r0_00);
  (z->abs).len = extraout_RBX_00;
  (z->abs).cap = extraout_RCX_00;
  pmVar1 = extraout_RAX_01;
  iVar2 = extraout_RBX_00;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = extraout_RAX_02;
    extraout_R11_00[1] = (z->abs).array;
    pmVar1 = extraout_RAX_02;
    iVar2 = extraout_RBX_01;
  }
  (z->abs).array = pmVar1;
  if (iVar2 == 0) {
    bVar3 = false;
  }
  else {
    bVar3 = y->neg != x->neg;
  }
  z->neg = bVar3;
  return;
}



void math_big___Int__MulRange(math_big_Int *z,int64 a,int64 b,math_big_Int *~r0)

{
  math_big_nat ~r0_00;
  math_big_Word *extraout_RAX;
  math_big_Word *extraout_RAX_00;
  math_big_Word *pmVar1;
  int extraout_RCX;
  int extraout_RBX;
  bool neg;
  math_big_Word **extraout_R11;
  int unaff_R14;
  undefined uVar2;
  math_big_nat in_stack_ffffffffffffffc8;
  undefined in_stack_ffffffffffffffe0 [23];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (a <= b) {
    if (a < 1) {
      if (-1 < b) {
        math_big___Int__SetInt64(z,0,(math_big_Int *)b);
        return;
      }
      if (a < 0) {
        uVar2 = ((sdword)b - (sdword)a & 1U) == 0;
      }
      else {
        uVar2 = false;
      }
    }
    else {
      uVar2 = false;
    }
    ~r0_00.cap._7_1_ = (bool)uVar2;
    ~r0_00._0_23_ = in_stack_ffffffffffffffe0;
    math_big_nat_mulRange(in_stack_ffffffffffffffc8,(uint64)(z->abs).array,(z->abs).len,~r0_00);
    (z->abs).len = extraout_RBX;
    (z->abs).cap = extraout_RCX;
    pmVar1 = extraout_RAX;
    if (runtime_writeBarrier._0_4_ != 0) {
