        uStack_34 = extraout_RAX_04[5];
        uStack_30 = extraout_RAX_04[6];
        uStack_2c = extraout_RAX_04[7];
        local_28 = extraout_RAX_04[8];
        uStack_24 = extraout_RAX_04[9];
        uStack_20 = extraout_RAX_04[10];
        uStack_1c = extraout_RAX_04[0xb];
        local_18 = extraout_RAX_04[0xc];
        uStack_14 = extraout_RAX_04[0xd];
        uStack_10 = extraout_RAX_04[0xe];
        uStack_c = extraout_RAX_04[0xf];
        newLen = newLen + 1;
        pvVar3 = local_a8;
        pvVar5 = pvVar6;
        if (oldCap < newLen) {
          runtime_growslice(local_a8,newLen,oldCap,1,(internal_abi_Type *)&DAT_0087db80,
                            (runtime_slice)in_stack_fffffffffffffed0);
          pvVar3 = extraout_RAX_05;
          oldCap = extraout_RCX;
          newLen = extraout_RBX;
          pvVar5 = pvVar6;
        }
        iVar4 = (newLen - 1) * 0x40;
        dst = (undefined4 *)((int)pvVar3 + iVar4);
        if (runtime_writeBarrier._0_4_ != 0) {
          local_90 = dst;
          local_88 = pvVar3;
          runtime_wbMove((internal_abi_Type *)&DAT_0087db80,dst,&local_48);
          pvVar3 = local_88;
          dst = local_90;
        }
        *dst = local_48;
        dst[1] = uStack_44;
        dst[2] = uStack_40;
        dst[3] = uStack_3c;
        dst[4] = local_38;
        dst[5] = uStack_34;
        dst[6] = uStack_30;
        dst[7] = uStack_2c;
        *(undefined4 *)((int)pvVar3 + iVar4 + 0x20) = local_28;
        *(undefined4 *)((int)pvVar3 + iVar4 + 0x24) = uStack_24;
        *(undefined4 *)((int)pvVar3 + iVar4 + 0x28) = uStack_20;
        *(undefined4 *)((int)pvVar3 + iVar4 + 0x2c) = uStack_1c;
        *(undefined4 *)((int)pvVar3 + iVar4 + 0x30) = local_18;
        *(undefined4 *)((int)pvVar3 + iVar4 + 0x34) = uStack_14;
        *(undefined4 *)((int)pvVar3 + iVar4 + 0x38) = uStack_10;
        *(undefined4 *)((int)pvVar3 + iVar4 + 0x3c) = uStack_c;
        puVar2 = local_78;
        iVar4 = local_b0;
        pvVar6 = pvVar5;
        if (ifindex == local_80->Index) {
          return;
        }
      }
    }
    puVar2 = puVar2 + 5;
    iVar4 = iVar4 + 1;
  } while( true );
}



void net_newLink(syscall_IfInfomsg *ifim,__syscall_NetlinkRouteAttr attrs,net_Interface *~r0)

{
  short sVar1;
  uint16 uVar2;
  dword dVar3;
  uint8 *puVar4;
  uint8 *puVar5;
  int *extraout_RAX;
  net_Interface *ifi;
  int extraout_RAX_00;
  int extraout_RAX_01;
  int iVar6;
  int *extraout_RAX_02;
  int *piVar7;
  int in_RCX;
  syscall_IfInfomsg *extraout_RCX;
  syscall_IfInfomsg *psVar8;
  net_Flags f;
  uint uVar9;
  int extraout_RBX;
  int extraout_RBX_00;
  int iVar10;
  int extraout_RSI;
  int iVar11;
  dword *extraout_R8;
  dword *ptr;
  int *extraout_R11;
  dword **extraout_R11_00;
  int unaff_R14;
  string in_stack_ffffffffffffffb0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  dVar3 = ifim->Flags;
  runtime_newobject((internal_abi_Type *)&DAT_0087db80,~r0);
  *extraout_RAX = (int)ifim->Index;
  uVar9 = (uint)(dVar3 & 1);
  if ((dVar3 & 0x40) != 0) {
    uVar9 = dVar3 & 1 | 0x20;
  }
  if ((dVar3 & 2) != 0) {
    uVar9 = uVar9 | 2;
  }
  if ((dVar3 & 8) != 0) {
    uVar9 = uVar9 | 4;
  }
  if ((dVar3 & 0x10) != 0) {
    uVar9 = uVar9 | 8;
  }
  if ((dVar3 & 0x1000) != 0) {
    uVar9 = uVar9 | 0x10;
  }
  extraout_RAX[7] = uVar9;
  iVar10 = 0;
  piVar7 = extraout_RAX;
  psVar8 = ifim;
  iVar6 = in_RCX;
  do {
    if (iVar6 <= iVar10) {
      return;
    }
    sVar1 = *(short *)((int)&~r0->Index + 2);
    ptr = (dword *)~r0->MTU;
    puVar4 = (~r0->Name).str;
    puVar5 = (uint8 *)(~r0->Name).len;
    if (sVar1 == 1) {
      if (puVar4 == (uint8 *)0x4) {
        uVar2 = psVar8->Type;
        if ((uVar2 != 0x300) && ((uVar2 != 0x308 && (uVar2 != 0x30a)))) {
LAB_005ead4e:
          for (iVar11 = 0; iVar11 < (int)puVar4; iVar11 = iVar11 + 1) {
            if (*(char *)((int)ptr + iVar11) != '\0') {
              piVar7[5] = (int)puVar4;
              piVar7[6] = (int)puVar5;
              if (runtime_writeBarrier._0_4_ != 0) {
                runtime_gcWriteBarrier2();
                *extraout_R11_00 = extraout_R8;
                extraout_R11_00[1] = (dword *)extraout_RAX_02[4];
                piVar7 = extraout_RAX_02;
                psVar8 = extraout_RCX;
                iVar6 = extraout_RBX_00;
                iVar10 = extraout_RSI;
                ptr = extraout_R8;
              }
              piVar7[4] = (int)ptr;
              break;
            }
          }
        }
      }
      else if ((puVar4 != (uint8 *)0x10) || ((psVar8->Type != 0x301 && (psVar8->Type != 0x337))))
      goto LAB_005ead4e;
    }
    else if (sVar1 == 3) {
      if (puVar5 < puVar4 + -1) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceAcap();
      }
      runtime_slicebytetostring
                ((runtime_tmpBuf *)0x0,(uint8 *)ptr,(int)(puVar4 + -1),in_stack_ffffffffffffffb0);
      extraout_RAX[3] = extraout_RBX;
      iVar6 = extraout_RAX_00;
      piVar7 = extraout_RAX;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11 = extraout_RAX_01;
        extraout_R11[1] = piVar7[2];
        iVar6 = extraout_RAX_01;
      }
      piVar7[2] = iVar6;
      psVar8 = ifim;
      iVar6 = in_RCX;
    }
    else if (sVar1 == 4) {
      if (puVar5 < (uint8 *)0x4) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceAcap();
      }
      piVar7[1] = (uint)*ptr;
    }
    ~r0 = (net_Interface *)&~r0->HardwareAddr;
    iVar10 = iVar10 + 1;
  } while( true );
}



void net_IP_IsUnspecified(net_IP ip,bool ~r0)

{
  char extraout_AL;
  int unaff_R14;
  net_IP in_stack_ffffffffffffffc8;
  net_IP in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  net_IP_Equal(in_stack_ffffffffffffffc8,in_stack_ffffffffffffffe0,~r0);
  if (extraout_AL == '\0') {
    net_IP_Equal(in_stack_ffffffffffffffc8,in_stack_ffffffffffffffe0,~r0);
  }
  return;
}



void net_IP_IsLoopback(net_IP ip,bool ~r0)

{
  bool bVar1;
  undefined7 in_register_00000001;
  int iVar2;
  int i;
  int in_RBX;
  int unaff_R14;
  net_IP in_stack_ffffffffffffffc8;
  net_IP in_stack_ffffffffffffffe0;
  
  iVar2 = CONCAT71(in_register_00000001,~r0);
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RBX == 4) {
    bVar1 = true;
  }
  else {
    if (in_RBX == 0x10) {
      for (i = 0; i < 10; i = i + 1) {
        if (*(char *)(iVar2 + i) != '\0') goto LAB_005eaf99;
      }
      if ((*(char *)(iVar2 + 10) == -1) && (*(char *)(iVar2 + 0xb) == -1)) {
        iVar2 = iVar2 + 0xc;
        bVar1 = true;
        goto LAB_005eaf50;
      }
    }
LAB_005eaf99:
    iVar2 = 0;
    bVar1 = false;
  }
LAB_005eaf50:
  if (iVar2 == 0) {
    net_IP_Equal(in_stack_ffffffffffffffc8,in_stack_ffffffffffffffe0,~r0);
    return;
  }
  if (!bVar1) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  return;
}



void net_IP_IsPrivate(net_IP ip,bool ~r0)

{
  char cVar1;
  undefined7 in_register_00000001;
  char *pcVar2;
  int i;
  int in_RBX;
  uint uVar3;
  
  pcVar2 = (char *)CONCAT71(in_register_00000001,~r0);
  if (in_RBX == 4) {
    uVar3 = 4;
  }
  else {
    if (in_RBX == 0x10) {
      for (i = 0; i < 10; i = i + 1) {
        if (pcVar2[i] != '\0') goto LAB_005eb0e5;
      }
      if ((pcVar2[10] == -1) && (pcVar2[0xb] == -1)) {
        pcVar2 = pcVar2 + 0xc;
        uVar3 = 4;
        goto LAB_005eb04b;
      }
    }
LAB_005eb0e5:
    pcVar2 = (char *)0x0;
    uVar3 = 0;
  }
LAB_005eb04b:
  if (pcVar2 == (char *)0x0) {
    return;
  }
  if (uVar3 == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  cVar1 = *pcVar2;
  if (cVar1 != '\n') {
    if (cVar1 == -0x54) {
      if (uVar3 < 2) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      if ((pcVar2[1] & 0xf0U) == 0x10) {
        return;
      }
    }
    if ((cVar1 == -0x40) && (uVar3 < 2)) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
  }
  return;
}



void net_IP_IsMulticast(net_IP ip,bool ~r0)

{
  bool bVar1;
  undefined7 in_register_00000001;
  int iVar2;
  int i;
  int in_RBX;
  
  iVar2 = CONCAT71(in_register_00000001,~r0);
  if (in_RBX == 4) {
    bVar1 = true;
  }
  else {
    if (in_RBX == 0x10) {
      for (i = 0; i < 10; i = i + 1) {
        if (*(char *)(iVar2 + i) != '\0') goto LAB_005eb1a5;
      }
      if ((*(char *)(iVar2 + 10) == -1) && (*(char *)(iVar2 + 0xb) == -1)) {
        iVar2 = iVar2 + 0xc;
        bVar1 = true;
        goto LAB_005eb163;
      }
    }
LAB_005eb1a5:
    iVar2 = 0;
    bVar1 = false;
  }
LAB_005eb163:
  if (iVar2 == 0) {
    return;
  }
  if (bVar1) {
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void net_IP_IsInterfaceLocalMulticast(net_IP ip,bool ~r0)

{
  return;
}



void net_IP_IsLinkLocalMulticast(net_IP ip,bool ~r0)

{
  undefined7 in_register_00000001;
  char *pcVar1;
  int i;
  int in_RBX;
  uint uVar2;
  
  pcVar1 = (char *)CONCAT71(in_register_00000001,~r0);
  if (in_RBX == 4) {
    uVar2 = 4;
  }
  else {
    if (in_RBX == 0x10) {
      for (i = 0; i < 10; i = i + 1) {
        if (pcVar1[i] != '\0') goto LAB_005eb2ef;
      }
      if ((pcVar1[10] == -1) && (pcVar1[0xb] == -1)) {
        pcVar1 = pcVar1 + 0xc;
        uVar2 = 4;
        goto LAB_005eb26b;
      }
    }
LAB_005eb2ef:
    pcVar1 = (char *)0x0;
    uVar2 = 0;
  }
LAB_005eb26b:
  if (pcVar1 == (char *)0x0) {
    return;
  }
  if (uVar2 == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if (*pcVar1 == -0x20) {
    if (uVar2 < 2) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    if ((pcVar1[1] == '\0') && (uVar2 < 3)) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
  }
  return;
}



void net_IP_IsLinkLocalUnicast(net_IP ip,bool ~r0)

{
  undefined7 in_register_00000001;
  char *pcVar1;
  int i;
  int in_RBX;
  uint uVar2;
  
  pcVar1 = (char *)CONCAT71(in_register_00000001,~r0);
  if (in_RBX == 4) {
    uVar2 = 4;
  }
  else {
    if (in_RBX == 0x10) {
      for (i = 0; i < 10; i = i + 1) {
        if (pcVar1[i] != '\0') goto LAB_005eb3c7;
      }
      if ((pcVar1[10] == -1) && (pcVar1[0xb] == -1)) {
        pcVar1 = pcVar1 + 0xc;
        uVar2 = 4;
        goto LAB_005eb363;
      }
    }
LAB_005eb3c7:
    pcVar1 = (char *)0x0;
    uVar2 = 0;
  }
LAB_005eb363:
  if (pcVar1 == (char *)0x0) {
    return;
  }
  if (uVar2 == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if ((*pcVar1 == -0x57) && (uVar2 < 2)) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  return;
}



void net_IP_IsGlobalUnicast(net_IP ip,bool ~r0)

{
  byte extraout_AL;
  byte bVar1;
  char extraout_AL_00;
  byte extraout_AL_01;
  char extraout_AL_02;
  int in_RBX;
  int unaff_R14;
  net_IP in_stack_ffffffffffffffc8;
  net_IP in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((in_RBX == 4) || (in_RBX == 0x10)) {
    net_IP_Equal(in_stack_ffffffffffffffc8,in_stack_ffffffffffffffe0,~r0);
    bVar1 = extraout_AL ^ 1;
  }
  else {
    bVar1 = 0;
  }
  if (bVar1 == 0) {
    bVar1 = 0;
  }
  else {
    net_IP_IsUnspecified(in_stack_ffffffffffffffc8,~r0);
    if (extraout_AL_00 == '\0') {
      net_IP_IsLoopback(in_stack_ffffffffffffffc8,~r0);
      bVar1 = extraout_AL_01 ^ 1;
    }
    else {
      bVar1 = 0;
    }
  }
  if ((bVar1 != 0) && (net_IP_IsMulticast(in_stack_ffffffffffffffc8,~r0), extraout_AL_02 == '\0')) {
    net_IP_IsLinkLocalUnicast(in_stack_ffffffffffffffc8,~r0);
  }
  return;
}



void net_IP_To4(net_IP ip,net_IP ~r0)

{
  int in_RAX;
  int i;
  int in_RBX;
  
  if (in_RBX == 4) {
    return;
  }
  if (in_RBX == 0x10) {
    for (i = 0; i < 10; i = i + 1) {
      if (*(char *)(in_RAX + i) != '\0') {
        return;
      }
    }
    if ((*(char *)(in_RAX + 10) == -1) && (*(char *)(in_RAX + 0xb) == -1)) {
      return;
    }
  }
  return;
}



void net_IP_To16(net_IP ip,net_IP ~r0)

{
  undefined uVar1;
  byte bVar2;
  undefined uVar3;
  undefined uVar4;
  undefined *in_RAX;
  int extraout_RAX;
  int in_RBX;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RBX != 4) {
    if (in_RBX == 0x10) {
      return;
    }
    return;
  }
  uVar1 = *in_RAX;
  bVar2 = in_RAX[1];
  uVar3 = in_RAX[2];
  uVar4 = in_RAX[3];
  runtime_makeslicecopy
            ((internal_abi_Type *)&DAT_00807920,0x10,net_v4InV6Prefix.len,net_v4InV6Prefix.array,
             (void *)(uint)bVar2);
  *(undefined *)(extraout_RAX + 0xc) = uVar1;
  *(byte *)(extraout_RAX + 0xd) = bVar2;
  *(undefined *)(extraout_RAX + 0xe) = uVar3;
  *(undefined *)(extraout_RAX + 0xf) = uVar4;
  return;
}



void net_IP_DefaultMask(net_IP ip,net_IPMask ~r0)

{
  byte *in_RAX;
  int i;
  int in_RBX;
  
  if (in_RBX != 4) {
    if (in_RBX == 0x10) {
      for (i = 0; i < 10; i = i + 1) {
        if (in_RAX[i] != 0) goto LAB_005eb725;
      }
      if ((in_RAX[10] == 0xff) && (in_RAX[0xb] == 0xff)) {
        in_RAX = in_RAX + 0xc;
        in_RBX = 4;
        goto LAB_005eb6a5;
      }
    }
LAB_005eb725:
    in_RAX = (byte *)0x0;
    in_RBX = 0;
  }
LAB_005eb6a5:
  if (in_RAX == (byte *)0x0) {
    return;
  }
  if (in_RBX == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if (*in_RAX < 0x80) {
    return;
  }
  if (0xbf < *in_RAX) {
    return;
  }
  return;
}



void net_IP_Mask(net_IP ip,net_IPMask mask,net_IP ~r0)

{
  char extraout_AL;
  int in_RAX;
  int extraout_RAX;
  int in_RCX;
  char cVar1;
  int iVar2;
  int n;
  int i;
  int in_RSI;
  void *in_RDI;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if ((in_RSI == 0x10) && (n == 4)) {
    for (iVar2 = 0; iVar2 < 0xc; iVar2 = iVar2 + 1) {
      if (*(char *)((int)in_RDI + iVar2) != -1) goto LAB_005eb793;
    }
    in_RDI = (void *)((int)in_RDI + 0xc);
    in_RSI = 4;
  }
LAB_005eb793:
  if (in_RSI == 4) {
    if (n == 0x10) {
      if (net_v4InV6Prefix.len == 0xc) {
        runtime_memequal();
        cVar1 = extraout_AL;
      }
      else {
        cVar1 = '\0';
      }
    }
    else {
      cVar1 = '\0';
    }
  }
  else {
    cVar1 = '\0';
  }
  if (cVar1 != '\0') {
    if ((uint)n < 0xc) {
                    // WARNING: Subroutine does not return
      runtime_panicSliceB();
    }
    in_RAX = in_RAX + (uint)((dword)(-(in_RCX + -0xc) >> 0x3f) & 0xc);
    n = n - 0xc;
  }
  if (n != in_RSI) {
    return;
  }
  runtime_makeslice((internal_abi_Type *)&DAT_00807920,n,n,in_RDI);
  for (i = 0; i < n; i = i + 1) {
    *(byte *)(extraout_RAX + i) = *(byte *)(i + in_RAX) & *(byte *)((int)in_RDI + i);
  }
  return;
}



void net_IP_String(net_IP ip,string ~r0)

{
  uint8 uVar1;
  string ~r0_00;
  string a0;
  net_netip_Addr ip_00;
  net_netip_Addr ip_01;
  string a1;
  net_netip_Addr ~r0_01;
  string ~r0_02;
  string ~r0_03;
  string ~r0_04;
  bool bVar2;
  uint8 (*in_RAX) [16];
  uint8 *ptr;
  uint len;
  int i_1;
  uint in_RBX;
  int i;
  uint8 tn;
  void *in_RDI;
  void *extraout_RDI;
  int unaff_R14;
  undefined4 in_stack_ffffffffffffff98;
  undefined4 uVar3;
  undefined4 in_stack_ffffffffffffff9c;
  undefined4 uVar4;
  undefined4 in_stack_ffffffffffffffa0;
  undefined4 uVar5;
  undefined4 in_stack_ffffffffffffffa4;
  undefined4 uVar6;
  internal_intern_Value *in_stack_ffffffffffffffa8;
  uint8 *in_stack_ffffffffffffffb0;
  internal_intern_Value *in_stack_ffffffffffffffb8;
  uint8 local_28 [32];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  if (in_RBX == 0) {
    return;
  }
  if ((in_RBX != 4) && (in_RBX != 0x10)) {
    len = in_RBX << 1;
    runtime_makeslice((internal_abi_Type *)&DAT_00807920,len,len,in_RDI);
    i = 0;
    while( true ) {
      if ((int)in_RBX <= i) {
        ~r0_00.str._4_4_ = in_stack_ffffffffffffff9c;
        ~r0_00.str._0_4_ = in_stack_ffffffffffffff98;
        ~r0_00.len._0_4_ = in_stack_ffffffffffffffa0;
        ~r0_00.len._4_4_ = in_stack_ffffffffffffffa4;
        runtime_slicebytetostring(&local_28,ptr,len,~r0_00);
        a0.str._4_4_ = in_stack_ffffffffffffff9c;
        a0.str._0_4_ = in_stack_ffffffffffffff98;
        a0.len._0_4_ = in_stack_ffffffffffffffa0;
        a0.len._4_4_ = in_stack_ffffffffffffffa4;
        a1.len = (int)in_stack_ffffffffffffffb0;
        a1.str = (uint8 *)in_stack_ffffffffffffffa8;
        ~r0_04.len = len;
        ~r0_04.str = (uint8 *)in_stack_ffffffffffffffb8;
        runtime_concatstring2((runtime_tmpBuf *)0x0,a0,a1,~r0_04);
        return;
      }
      uVar1 = "goal , cons/mark  maxTrigger= pages/byte\n s.sweepgen= allocCount end tracegc\ntimer_deletens} value: {}, want {r1= [recovered]bad recoverybad g statusentersyscallwirep: p->m=) p->status=releasep: m= sysmonwait= preemptoff=cas64 failedGOTRACEBACK= m->gsignal=-byte limit\nruntime: sp=abi mismatchillegal seekinvalid slothost is downnot pollable<unknown:%d>Sfixed32KindSfixed64Kindmessage_typejava_packageoptimize_forswift_prefixruby_packagedebug_redactdouble_valuestring_valueverificationis_extension has no name has no typereflect.CopyOUT_OF_RANGENormalSocketgrpc-messageContent-Typegrpc-timeoutGrpc-MessageAddr: \'%s\', Cookie.Valuemax-forwardshttp2debug=1http2debug=2status code Multi-StatusNot ModifiedUnauthorizedI\'m a teapotNot ExtendedPUSH_PROMISECONTINUATION152587890625762939453125Cypro_MinoanMeetei_MayekPahawh_HmongSora_SompengSyloti_NagriRCodeSuccessRCodeRefusedprotobuf_keyprotobuf_val (sensitive)grpc_config=ECDSA-SHA256ECDSA-SHA384ECDSA-SHA512SSL_CERT_DIRTYPE_UNKNOWNempty objectMime-VersionX-ImforwardsX-Powered-By/dev/urandomautocompleteFieldNumbersSERIALNUMBERinvalid baseInstAltMatchunexpected )altmatch -> anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen..." /* TRUNCATED STRING LITERAL */
              [((*in_RAX)[i] & 0xf) + 0x1f44];
      if (len <= (uint)(i << 1)) break;
      ptr[i * 2] = "goal , cons/mark  maxTrigger= pages/byte\n s.sweepgen= allocCount end tracegc\ntimer_deletens} value: {}, want {r1= [recovered]bad recoverybad g statusentersyscallwirep: p->m=) p->status=releasep: m= sysmonwait= preemptoff=cas64 failedGOTRACEBACK= m->gsignal=-byte limit\nruntime: sp=abi mismatchillegal seekinvalid slothost is downnot pollable<unknown:%d>Sfixed32KindSfixed64Kindmessage_typejava_packageoptimize_forswift_prefixruby_packagedebug_redactdouble_valuestring_valueverificationis_extension has no name has no typereflect.CopyOUT_OF_RANGENormalSocketgrpc-messageContent-Typegrpc-timeoutGrpc-MessageAddr: \'%s\', Cookie.Valuemax-forwardshttp2debug=1http2debug=2status code Multi-StatusNot ModifiedUnauthorizedI\'m a teapotNot ExtendedPUSH_PROMISECONTINUATION152587890625762939453125Cypro_MinoanMeetei_MayekPahawh_HmongSora_SompengSyloti_NagriRCodeSuccessRCodeRefusedprotobuf_keyprotobuf_val (sensitive)grpc_config=ECDSA-SHA256ECDSA-SHA384ECDSA-SHA512SSL_CERT_DIRTYPE_UNKNOWNempty objectMime-VersionX-ImforwardsX-Powered-By/dev/urandomautocompleteFieldNumbersSERIALNUMBERinvalid baseInstAltMatchunexpected )altmatch -> anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen..." /* TRUNCATED STRING LITERAL */
                   [((*in_RAX)[i] >> 4) + 0x1f44];
      if (len <= i * 2 + 1U) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      ptr[i * 2 + 1] = uVar1;
      i = i + 1;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if (in_RBX == 4) {
    bVar2 = true;
  }
  else {
    if (in_RBX == 0x10) {
      for (i_1 = 0; i_1 < 10; i_1 = i_1 + 1) {
        if ((*in_RAX)[i_1] != 0) goto LAB_005eb9ff;
      }
      if (((*in_RAX)[10] == 0xff) && ((*in_RAX)[0xb] == 0xff)) {
        bVar2 = true;
        goto LAB_005eb999;
      }
    }
LAB_005eb9ff:
    bVar2 = false;
  }
LAB_005eb999:
  if (bVar2) {
    ip_01.addr.hi._4_4_ = in_stack_ffffffffffffff9c;
    ip_01.addr.hi._0_4_ = in_stack_ffffffffffffff98;
    ip_01.addr.lo._0_4_ = in_stack_ffffffffffffffa0;
    ip_01.addr.lo._4_4_ = in_stack_ffffffffffffffa4;
    ip_01.z = in_stack_ffffffffffffffa8;
    ~r0_03.len = (int)in_stack_ffffffffffffffb8;
    ~r0_03.str = in_stack_ffffffffffffffb0;
    net_netip_Addr_String(ip_01,~r0_03);
    return;
  }
  if (in_RBX < 0x10) {
                    // WARNING: Subroutine does not return
    runtime_panicSliceConvert();
  }
  uVar3 = *(undefined4 *)*in_RAX;
  uVar4 = *(undefined4 *)(*in_RAX + 4);
  uVar5 = *(undefined4 *)(*in_RAX + 8);
  uVar6 = *(undefined4 *)(*in_RAX + 0xc);
  ~r0_01.addr.lo = (uint64)in_stack_ffffffffffffffb0;
  ~r0_01.addr.hi = (uint64)in_stack_ffffffffffffffa8;
  ~r0_01.z = in_stack_ffffffffffffffb8;
  net_netip_AddrFrom16(*in_RAX,~r0_01);
  ip_00.addr.hi._4_4_ = uVar4;
  ip_00.addr.hi._0_4_ = uVar3;
  ip_00.addr.lo._0_4_ = uVar5;
  ip_00.addr.lo._4_4_ = uVar6;
  ip_00.z = in_stack_ffffffffffffffa8;
  ~r0_02.len = (int)in_stack_ffffffffffffffb8;
  ~r0_02.str = in_stack_ffffffffffffffb0;
  net_netip_Addr_String(ip_00,~r0_02);
  return;
}



void net_IP_MarshalText(net_IP ip,__uint8 ~r0,error ~r1)

{
  uint8 uVar1;
  net_IP ip_00;
  __uint8 ~r0_00;
  string ~r0_01;
  int in_RAX;
  uint8 *ptr;
  undefined8 extraout_RAX;
  undefined8 *extraout_RAX_00;
  undefined8 *extraout_RAX_01;
  undefined8 *puVar2;
  uint len;
  int in_RBX;
  int i;
  void *~r0_02;
  uint8 tn;
  void *in_RDI;
  void *extraout_RDI;
  undefined8 *extraout_R11;
  int unaff_R14;
  string in_stack_ffffffffffffffc8;
  int in_stack_ffffffffffffffd8;
  uint8 *in_stack_ffffffffffffffe0;
  void *pvVar3;
  int in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RDI = extraout_RDI;
  }
  if (in_RBX == 0) {
    return;
  }
  if ((in_RBX != 4) && (in_RBX != 0x10)) {
    len = in_RBX << 1;
    runtime_makeslice((internal_abi_Type *)&DAT_00807920,len,len,in_RDI);
    i = 0;
    while( true ) {
      if (in_RBX <= i) {
        runtime_slicebytetostring((runtime_tmpBuf *)0x0,ptr,len,in_stack_ffffffffffffffc8);
        pvVar3 = ~r0_02;
        runtime_newobject((internal_abi_Type *)&DAT_0084eb20,~r0_02);
        extraout_RAX_00[1] = 0x12;
        *extraout_RAX_00 = &DAT_008b7859;
        extraout_RAX_00[3] = pvVar3;
        puVar2 = extraout_RAX_00;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier1();
          *extraout_R11 = extraout_RAX;
          puVar2 = extraout_RAX_01;
        }
        puVar2[2] = extraout_RAX;
        return;
      }
      uVar1 = "goal , cons/mark  maxTrigger= pages/byte\n s.sweepgen= allocCount end tracegc\ntimer_deletens} value: {}, want {r1= [recovered]bad recoverybad g statusentersyscallwirep: p->m=) p->status=releasep: m= sysmonwait= preemptoff=cas64 failedGOTRACEBACK= m->gsignal=-byte limit\nruntime: sp=abi mismatchillegal seekinvalid slothost is downnot pollable<unknown:%d>Sfixed32KindSfixed64Kindmessage_typejava_packageoptimize_forswift_prefixruby_packagedebug_redactdouble_valuestring_valueverificationis_extension has no name has no typereflect.CopyOUT_OF_RANGENormalSocketgrpc-messageContent-Typegrpc-timeoutGrpc-MessageAddr: \'%s\', Cookie.Valuemax-forwardshttp2debug=1http2debug=2status code Multi-StatusNot ModifiedUnauthorizedI\'m a teapotNot ExtendedPUSH_PROMISECONTINUATION152587890625762939453125Cypro_MinoanMeetei_MayekPahawh_HmongSora_SompengSyloti_NagriRCodeSuccessRCodeRefusedprotobuf_keyprotobuf_val (sensitive)grpc_config=ECDSA-SHA256ECDSA-SHA384ECDSA-SHA512SSL_CERT_DIRTYPE_UNKNOWNempty objectMime-VersionX-ImforwardsX-Powered-By/dev/urandomautocompleteFieldNumbersSERIALNUMBERinvalid baseInstAltMatchunexpected )altmatch -> anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen..." /* TRUNCATED STRING LITERAL */
              [(*(byte *)(in_RAX + i) & 0xf) + 0x1f44];
      if (len <= (uint)(i << 1)) break;
      ptr[i * 2] = "goal , cons/mark  maxTrigger= pages/byte\n s.sweepgen= allocCount end tracegc\ntimer_deletens} value: {}, want {r1= [recovered]bad recoverybad g statusentersyscallwirep: p->m=) p->status=releasep: m= sysmonwait= preemptoff=cas64 failedGOTRACEBACK= m->gsignal=-byte limit\nruntime: sp=abi mismatchillegal seekinvalid slothost is downnot pollable<unknown:%d>Sfixed32KindSfixed64Kindmessage_typejava_packageoptimize_forswift_prefixruby_packagedebug_redactdouble_valuestring_valueverificationis_extension has no name has no typereflect.CopyOUT_OF_RANGENormalSocketgrpc-messageContent-Typegrpc-timeoutGrpc-MessageAddr: \'%s\', Cookie.Valuemax-forwardshttp2debug=1http2debug=2status code Multi-StatusNot ModifiedUnauthorizedI\'m a teapotNot ExtendedPUSH_PROMISECONTINUATION152587890625762939453125Cypro_MinoanMeetei_MayekPahawh_HmongSora_SompengSyloti_NagriRCodeSuccessRCodeRefusedprotobuf_keyprotobuf_val (sensitive)grpc_config=ECDSA-SHA256ECDSA-SHA384ECDSA-SHA512SSL_CERT_DIRTYPE_UNKNOWNempty objectMime-VersionX-ImforwardsX-Powered-By/dev/urandomautocompleteFieldNumbersSERIALNUMBERinvalid baseInstAltMatchunexpected )altmatch -> anynotnl -> caller error{{continue}}block clauseCircleMinus;CircleTimes;Equilibrium;GreaterLess;LeftCeiling;LessGreater;MediumSpace;NotPrecedes;NotSucceeds;OverBracket;RightVector;Rrightarrow;RuleDelayed;SmallCircle;SquareUnion;SubsetEqual;UpDownArrow;Updownarrow;VerticalBar;backepsilon;blacksquare;circledcirc;circleddash;curlyeqprec;curlyeqsucc;diamondsuit;eqslantless;expectation;nRightarrow;nrightarrow;preccurlyeq;precnapprox;quaternions;straightphi;succcurlyeq;succnapprox;thickapprox;updownarrow;NotLessLess;NotSuperset;invalid kindavx5124fmapsavx512bitalgping_responsegot a GetSeedgraceful_stop %v deadline:/etc/zoneinfoparsing time  out of range is too large (default %q) (default %v)Usage of %s:\nlame referral/etc/servicesdalTLDpSugct?profMemActiveprofMemFuturetraceStackTabexecRInternaltestRInternalGC sweep waitSIGQUIT: quitSIGKILL: killout of memory is nil, not value method bad map state span.base()=bad flushGen..." /* TRUNCATED STRING LITERAL */
                   [(*(byte *)(in_RAX + i) >> 4) + 0x1f44];
      if (len <= i * 2 + 1U) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      ptr[i * 2 + 1] = uVar1;
      i = i + 1;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  ip_00.cap = in_stack_ffffffffffffffd8;
  ip_00.array = in_stack_ffffffffffffffc8.str;
  ip_00.len = in_stack_ffffffffffffffc8.len;
  ~r0_01.len = in_stack_ffffffffffffffe8;
  ~r0_01.str = in_stack_ffffffffffffffe0;
  net_IP_String(ip_00,~r0_01);
  ~r0_00.len = (int)in_stack_ffffffffffffffe0;
  ~r0_00.array = (uint8 *)in_stack_ffffffffffffffd8;
  ~r0_00.cap = in_stack_ffffffffffffffe8;
  runtime_stringtoslicebyte((runtime_tmpBuf *)0x0,in_stack_ffffffffffffffc8,~r0_00);
  return;
}



void net___IP__UnmarshalText(net_IP *ip,__uint8 text,error ~r0)

{
  string ~r0_00;
  string s;
  char extraout_AL;
  bool valid;
  net_IP *extraout_RAX;
  undefined8 extraout_RAX_00;
  undefined4 *extraout_RAX_01;
  uint8 (*_addr) [16];
  int iVar1;
  undefined8 *extraout_RAX_02;
  undefined8 *extraout_RAX_03;
  undefined8 *puVar2;
  int in_RCX;
  undefined8 extraout_RCX;
  net_IP *extraout_RCX_00;
  undefined4 *puVar3;
  uint8 *in_RBX;
  void *~r0_01;
  void *~r0_02;
  undefined8 *extraout_R11;
  uint8 **extraout_R11_00;
  undefined8 *extraout_R11_01;
  int unaff_R14;
  undefined in_XMM15 [16];
  undefined4 in_stack_ffffffffffffffb0;
  undefined4 in_stack_ffffffffffffffb4;
  undefined4 in_stack_ffffffffffffffb8;
  undefined4 in_stack_ffffffffffffffbc;
  uint8 in_stack_ffffffffffffffc0 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (in_RCX == 0) {
    ip->len = in_XMM15._0_8_;
    ip->cap = in_XMM15._8_8_;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11 = extraout_RCX;
      ip = extraout_RAX;
    }
    ip->array = (uint8 *)0x0;
    return;
  }
  ~r0_00.str._4_4_ = in_stack_ffffffffffffffb4;
  ~r0_00.str._0_4_ = in_stack_ffffffffffffffb0;
  ~r0_00.len._0_4_ = in_stack_ffffffffffffffb8;
  ~r0_00.len._4_4_ = in_stack_ffffffffffffffbc;
  runtime_slicebytetostring((runtime_tmpBuf *)0x0,in_RBX,in_RCX,~r0_00);
  runtime_newobject((internal_abi_Type *)&DAT_008130c0,~r0_01);
  s.str._4_4_ = in_stack_ffffffffffffffb4;
  s.str._0_4_ = in_stack_ffffffffffffffb0;
  s.len._0_4_ = in_stack_ffffffffffffffb8;
  s.len._4_4_ = in_stack_ffffffffffffffbc;
  net_parseIP(s,in_stack_ffffffffffffffc0,SUB81(extraout_RAX_00,0));
  *extraout_RAX_01 = in_stack_ffffffffffffffb0;
  extraout_RAX_01[1] = in_stack_ffffffffffffffb4;
  extraout_RAX_01[2] = in_stack_ffffffffffffffb8;
  extraout_RAX_01[3] = in_stack_ffffffffffffffbc;
  if (extraout_AL == '\0') {
    puVar3 = (undefined4 *)0x0;
    iVar1 = 0;
  }
  else {
    iVar1 = 0x10;
    puVar3 = extraout_RAX_01;
  }
  if (puVar3 == (undefined4 *)0x0) {
    runtime_newobject((internal_abi_Type *)&DAT_0084ebc0,~r0_02);
    extraout_RAX_02[1] = 10;
    *extraout_RAX_02 = &DAT_008b3141;
    extraout_RAX_02[3] = ~r0_01;
    puVar2 = extraout_RAX_02;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_01 = extraout_RAX_00;
      puVar2 = extraout_RAX_03;
    }
    puVar2[2] = extraout_RAX_00;
    return;
  }
  ip->len = iVar1;
  ip->cap = iVar1;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = (uint8 *)puVar3;
    extraout_R11_00[1] = extraout_RCX_00->array;
    ip = extraout_RCX_00;
  }
  ip->array = (uint8 *)puVar3;
  return;
}



void net_IP_Equal(net_IP ip,net_IP x,bool ~r0)

{
  char extraout_AL;
  char extraout_AL_00;
  char cVar1;
  int in_RBX;
  int in_RSI;
  int unaff_R14;
  
