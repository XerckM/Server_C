            local_88 = iVar13;
            local_80 = uVar9;
            local_78 = uVar7;
            local_48 = p_Var11;
            runtime_growslice(oldPtr,newLen,p_Var11[uVar6 - 1].cap,1,
                              (internal_abi_Type *)&DAT_00864cc0,
                              (runtime_slice)in_stack_fffffffffffffee8);
            *(undefined8 *)((int)local_48 + local_78 * 8 + -8) = extraout_RCX_01;
            oldPtr = extraout_RAX_01;
            uVar7 = local_78;
            newLen = extraout_RBX_00;
            p_Var11 = local_48;
            if (runtime_writeBarrier._0_4_ != 0) {
              runtime_gcWriteBarrier2();
              *extraout_R11_00 = extraout_RAX_02;
              extraout_R11_00[1] = (&extraout_R8[-1].array)[uVar7];
              oldPtr = extraout_RAX_02;
              newLen = extraout_RBX_01;
              p_Var11 = extraout_R8;
            }
            (&p_Var11[-1].array)[uVar7] = oldPtr;
            iVar13 = local_88;
            uVar9 = local_80;
          }
          *(uint *)((int)p_Var11 + uVar7 * 8 + -0x10) = newLen;
          oldPtr[newLen - 1].size = iVar13;
          oldPtr[newLen - 1].width = uVar9;
          oldPtr[newLen - 1].htab = bVar3 == 9;
          auVar4._8_8_ = in_XMM15_Qb;
          auVar4._0_8_ = in_XMM15_Qa;
          (b->cell).size = auVar4._0_8_;
          (b->cell).width = auVar4._8_8_;
          (b->cell).htab = false;
          local_90 = *(int *)((int)p_Var11 + uVar7 * 8 + -0x10);
          if ((((bVar3 == 10) || (bVar3 == 0xc)) &&
              ((text_tabwriter___Writer__addLine(b,bVar3 == 0xc), bVar3 == 0xc || (local_90 == 1))))
             && ((text_tabwriter___Writer__flushNoDefers(b), bVar3 == 0xc &&
                 (((dword)b->flags >> 5 & 1) != 0)))) {
            text_tabwriter___Writer__write0(b,in_stack_fffffffffffffee8);
          }
        }
        else if (bVar3 == 0x26) goto LAB_0077fdcf;
      }
      else if (bVar3 == 0x3c) {
LAB_0077fdcf:
        if ((b->flags & 1) != 0) {
          if ((uint)i < local_a8) {
                    // WARNING: Subroutine does not return
            runtime_panicSliceB();
          }
          sVar8 = i - local_a8;
          uVar9 = (b->buf).cap;
          local_78 = (b->buf).len;
          uVar6 = sVar8 + local_78;
          pvVar12 = (void *)(((int)(local_a8 - in_RDI) >> 0x3f & local_a8) + n);
          puVar10 = (b->buf).array;
          if (uVar9 < uVar6) {
            local_60 = pvVar12;
            runtime_growslice(puVar10,uVar6,uVar9,sVar8,(internal_abi_Type *)&DAT_00807920,
                              (runtime_slice)in_stack_fffffffffffffee8);
            pvVar12 = local_60;
            uVar9 = extraout_RCX_02;
            uVar6 = extraout_RBX_02;
            puVar10 = extraout_RAX_03;
          }
          puVar2 = puVar10 + local_78;
          local_80 = uVar6;
          local_78 = uVar9;
          local_40 = puVar10;
          runtime_memmove(puVar2,pvVar12,sVar8);
          (b->buf).len = local_80;
          (b->buf).cap = local_78;
          uVar6 = local_80;
          ptVar5 = b;
          uVar9 = local_78;
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_01 = local_40;
            extraout_R11_01[1] = (ptVar5->buf).array;
            uVar6 = extraout_RCX_03;
            uVar9 = extraout_RSI_00;
          }
          (ptVar5->buf).array = local_40;
          (ptVar5->cell).size = (ptVar5->cell).size + sVar8;
          uVar7 = ptVar5->pos;
          if (uVar6 < uVar7) {
                    // WARNING: Subroutine does not return
            runtime_panicSliceB();
          }
          unicode_utf8_RuneCount
                    (in_stack_fffffffffffffee8,
                     (int)(local_40 + ((int)-(uVar9 - uVar7) >> 0x3f & uVar7)));
          piVar1 = &(b->cell).width;
          *piVar1 = *piVar1 + extraout_RAX_04;
          b->pos = (b->buf).len;
          local_a8 = local_98;
          if (bVar3 == 0x26) {
            b->endChar = 0x3b;
          }
          else if (bVar3 == 0x3c) {
            b->endChar = 0x3e;
          }
          else if (bVar3 == 0xff) {
            b->endChar = 0xff;
          }
        }
      }
      else if (bVar3 == 0xff) {
        if ((uint)i < local_a8) {
                    // WARNING: Subroutine does not return
          runtime_panicSliceB();
        }
        sVar8 = i - local_a8;
        uVar9 = (b->buf).cap;
        local_78 = (b->buf).len;
        uVar6 = sVar8 + local_78;
        pvVar12 = (void *)(((int)(local_a8 - in_RDI) >> 0x3f & local_a8) + n);
        puVar10 = (b->buf).array;
        if (uVar9 < uVar6) {
          local_58 = pvVar12;
          runtime_growslice(puVar10,uVar6,uVar9,sVar8,(internal_abi_Type *)&DAT_00807920,
                            (runtime_slice)in_stack_fffffffffffffee8);
          pvVar12 = local_58;
          uVar9 = extraout_RCX_04;
          uVar6 = extraout_RBX_03;
          puVar10 = extraout_RAX_05;
        }
        puVar2 = puVar10 + local_78;
        local_80 = uVar6;
        local_78 = uVar9;
        local_40 = puVar10;
        runtime_memmove(puVar2,pvVar12,sVar8);
        (b->buf).len = local_80;
        (b->buf).cap = local_78;
        uVar6 = local_80;
        ptVar5 = b;
        uVar9 = local_78;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11_02 = local_40;
          extraout_R11_02[1] = (ptVar5->buf).array;
          uVar6 = extraout_RCX_05;
          uVar9 = extraout_RSI_01;
        }
        (ptVar5->buf).array = local_40;
        (ptVar5->cell).size = (ptVar5->cell).size + sVar8;
        uVar7 = ptVar5->pos;
        if (uVar6 < uVar7) {
                    // WARNING: Subroutine does not return
          runtime_panicSliceB();
        }
        unicode_utf8_RuneCount
                  (in_stack_fffffffffffffee8,
                   (int)(local_40 + ((int)-(uVar9 - uVar7) >> 0x3f & uVar7)));
        piVar1 = &(b->cell).width;
        *piVar1 = *piVar1 + extraout_RAX_06;
        b->pos = (b->buf).len;
        local_a8 = local_98;
        if (((dword)b->flags >> 1 & 1) != 0) {
          local_a8 = local_98 + 1;
        }
        b->endChar = 0xff;
      }
    }
    else if (b->endChar == bVar3) {
      uVar6 = i + 1;
      uVar9 = uVar6;
      if ((bVar3 == 0xff) && (((dword)b->flags >> 1 & 1) != 0)) {
        uVar9 = i;
      }
      if (in_RDI < uVar9) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceAcap();
      }
      if (uVar9 < local_a8) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      sVar8 = uVar9 - local_a8;
      uVar7 = (b->buf).cap;
      local_78 = (b->buf).len;
      uVar9 = sVar8 + local_78;
      pvVar12 = (void *)(((int)(local_a8 - in_RDI) >> 0x3f & local_a8) + n);
      puVar10 = (b->buf).array;
      if (uVar7 < uVar9) {
        local_68 = pvVar12;
        runtime_growslice(puVar10,uVar9,uVar7,sVar8,(internal_abi_Type *)&DAT_00807920,
                          (runtime_slice)in_stack_fffffffffffffee8);
        pvVar12 = local_68;
        uVar7 = extraout_RCX_06;
        uVar9 = extraout_RBX_04;
        puVar10 = extraout_RAX_07;
      }
      puVar2 = puVar10 + local_78;
      local_80 = uVar9;
      local_78 = uVar7;
      local_40 = puVar10;
      runtime_memmove(puVar2,pvVar12,sVar8);
      (b->buf).len = local_80;
      (b->buf).cap = local_78;
      ptVar5 = b;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_03 = local_40;
        extraout_R11_03[1] = (extraout_RAX_08->buf).array;
        ptVar5 = extraout_RAX_08;
      }
      (ptVar5->buf).array = local_40;
      (ptVar5->cell).size = (ptVar5->cell).size + sVar8;
      text_tabwriter___Writer__endEscape(ptVar5);
      local_a8 = uVar6;
    }
    i = local_98 + 1;
  } while( true );
}



// WARNING: Unknown calling convention

void text_tabwriter___Writer__Write_func1(void)

{
  int *piVar1;
  int in_RDX;
  int unaff_R14;
  string in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack();
  }
  piVar1 = *(int **)(unaff_R14 + 0x20);
  if ((piVar1 != (int *)0x0) && ((undefined *)*piVar1 == &stack0x00000008)) {
    *piVar1 = (int)&stack0xffffffffffffffd8;
  }
  text_tabwriter___Writer__handlePanic
            (*(text_tabwriter_Writer **)(in_RDX + 8),*(error **)(in_RDX + 0x10),
             in_stack_ffffffffffffffd8);
  return;
}



void type__eq_text_tabwriter_cell(text_tabwriter_cell *p,text_tabwriter_cell *q,bool r)

{
  if ((q->size == p->size) && (q->width == p->width)) {
    return;
  }
  return;
}



// WARNING: Restarted to delay deadcode elimination for space: stack

void golang_org_x_net_internal_timeseries_defaultClock_Time(time_Time ~r0)

{
  time_Time ~r0_00;
  uint64 unaff_RBP;
  int unaff_R14;
  undefined8 unaff_retaddr;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ~r0_00.loc = (time_Location *)~r0.wall;
  ~r0_00.ext = unaff_retaddr;
  ~r0_00.wall = unaff_RBP;
  time_Now(~r0_00);
  return;
}



// WARNING: Unknown calling convention

void golang_org_x_net_internal_timeseries___tsLevel__Clear
               (golang_org_x_net_internal_timeseries_tsLevel *l)

{
  int iVar1;
  runtime_itab *prVar2;
  golang_org_x_net_internal_timeseries_tsLevel *extraout_RAX;
  golang_org_x_net_internal_timeseries_tsLevel *pgVar3;
  int extraout_RAX_00;
  int i;
  int iVar4;
  golang_org_x_net_internal_timeseries_tsLevel *extraout_RCX;
  time_Location *ptVar5;
  golang_org_x_net_internal_timeseries_Observable *pgVar6;
  int extraout_RBX;
  undefined8 extraout_RSI;
  time_Location **extraout_R11;
  undefined8 *extraout_R11_00;
  int unaff_R14;
  undefined in_XMM15 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  l->oldest = 0;
  l->newest = (l->buckets).len + -1;
  (l->end).wall = in_XMM15._0_8_;
  (l->end).ext = in_XMM15._8_8_;
  if (runtime_writeBarrier._0_4_ != 0) {
    ptVar5 = (l->end).loc;
    runtime_gcWriteBarrier1();
    *extraout_R11 = ptVar5;
    l = extraout_RAX;
  }
  (l->end).loc = (time_Location *)0x0;
  iVar1 = (l->buckets).len;
  i = 0;
  pgVar3 = l;
  while( true ) {
    if (iVar1 <= i) {
      return;
    }
    if ((uint)(pgVar3->buckets).len <= (uint)i) break;
    pgVar6 = (pgVar3->buckets).array;
    iVar4 = i * 0x10;
    prVar2 = pgVar6[i].tab;
    if (prVar2 != (runtime_itab *)0x0) {
      (*(code *)prVar2[1].inter)(pgVar6[i].data);
      if ((uint)(l->buckets).len <= (uint)i) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      pgVar6 = (l->buckets).array;
      pgVar6[i].tab = (runtime_itab *)0x0;
      pgVar3 = l;
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier1();
        *extraout_R11_00 = extraout_RSI;
        i = extraout_RAX_00;
        pgVar3 = extraout_RCX;
        iVar4 = extraout_RBX;
      }
      *(undefined8 *)((int)&pgVar6->data + iVar4) = 0;
    }
    i = i + 1;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



// WARNING: Unknown calling convention

void golang_org_x_net_internal_timeseries___tsLevel__InitLevel
               (golang_org_x_net_internal_timeseries_tsLevel *l,time_Duration size,int numBuckets,
               func___golang_org_x_net_internal_timeseries_Observable **f)

{
  golang_org_x_net_internal_timeseries_tsLevel *extraout_RAX;
  golang_org_x_net_internal_timeseries_Observable *extraout_RAX_00;
  golang_org_x_net_internal_timeseries_Observable *extraout_RAX_01;
  golang_org_x_net_internal_timeseries_Observable *pgVar1;
  int extraout_RCX;
  golang_org_x_net_internal_timeseries_tsLevel *extraout_RSI;
  func___golang_org_x_net_internal_timeseries_Observable **extraout_RDI;
  undefined8 *extraout_R11;
  golang_org_x_net_internal_timeseries_Observable **extraout_R11_00;
  int unaff_R14;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  l->size = size;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RDI;
    extraout_R11[1] = extraout_RAX->provider;
    l = extraout_RAX;
    numBuckets = extraout_RCX;
    f = extraout_RDI;
  }
  l->provider = f;
  runtime_makeslice((internal_abi_Type *)&DAT_00847060,numBuckets,numBuckets,f);
  (l->buckets).len = numBuckets;
  (l->buckets).cap = numBuckets;
  pgVar1 = extraout_RAX_00;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = extraout_RAX_01;
    extraout_R11_00[1] = (extraout_RSI->buckets).array;
    pgVar1 = extraout_RAX_01;
    l = extraout_RSI;
  }
  (l->buckets).array = pgVar1;
  return;
}



int golang_org_x_net_internal_timeseries___timeSeries__init(EVP_PKEY_CTX *ctx)

{
  golang_org_x_net_internal_timeseries_timeSeries *extraout_RAX;
  golang_org_x_net_internal_timeseries_timeSeries *extraout_RAX_00;
  golang_org_x_net_internal_timeseries_tsLevel **extraout_RAX_01;
  golang_org_x_net_internal_timeseries_tsLevel **extraout_RAX_02;
  golang_org_x_net_internal_timeseries_tsLevel **ppgVar1;
  uint uVar2;
  golang_org_x_net_internal_timeseries_timeSeries *ts;
  golang_org_x_net_internal_timeseries_tsLevel *extraout_RAX_03;
  golang_org_x_net_internal_timeseries_tsLevel *extraout_RAX_04;
  golang_org_x_net_internal_timeseries_tsLevel *pgVar3;
  golang_org_x_net_internal_timeseries_Observable *extraout_RAX_05;
  golang_org_x_net_internal_timeseries_Observable *extraout_RAX_06;
  golang_org_x_net_internal_timeseries_Observable *pgVar4;
  golang_org_x_net_internal_timeseries_timeSeries *extraout_RAX_07;
  int extraout_RAX_08;
  int in_RCX;
  int extraout_RCX;
  int extraout_RCX_00;
  int iVar5;
  int in_RBX;
  int extraout_RBX;
  void *extraout_RBX_00;
  void *extraout_RBX_01;
  void *~r0;
  void *extraout_RBX_02;
  void *extraout_RBX_03;
  void *extraout_RBX_04;
  func___golang_org_x_net_internal_timeseries_Observable **in_RSI;
  func___golang_org_x_net_internal_timeseries_Observable **extraout_RSI;
  golang_org_x_net_internal_timeseries_timeSeries *extraout_RSI_00;
  golang_org_x_net_internal_timeseries_tsLevel *extraout_RSI_01;
  golang_org_x_net_internal_timeseries_tsLevel *extraout_RSI_02;
  void *in_RDI;
  void *extraout_RDI;
  void *extraout_RDI_00;
  int extraout_RDI_01;
  int in_R8;
  int extraout_R8;
  func___golang_org_x_net_internal_timeseries_Observable **extraout_R8_00;
  func___golang_org_x_net_internal_timeseries_Observable **ppfVar6;
  golang_org_x_net_internal_timeseries_tsLevel **extraout_R8_01;
  runtime_itab *in_R9;
  runtime_itab *extraout_R9;
  void *in_R10;
  void *extraout_R10;
  void *extraout_R10_00;
  undefined8 *extraout_R11;
  void **extraout_R11_00;
  undefined8 *extraout_R11_01;
  undefined8 *extraout_R11_02;
  golang_org_x_net_internal_timeseries_Observable **extraout_R11_03;
  golang_org_x_net_internal_timeseries_tsLevel **extraout_R11_04;
  int unaff_R14;
  int iStack0000000000000010;
  runtime_itab *prStack0000000000000038;
  void *pvStack0000000000000040;
  error in_stack_ffffffffffffff90;
  error in_stack_ffffffffffffffa0;
  int i;
  golang_org_x_net_internal_timeseries_tsLevel *newLevel;
  undefined local_38 [16];
  undefined local_28 [16];
  undefined local_18 [16];
  
  iStack0000000000000010 = in_RBX;
  prStack0000000000000038 = in_R9;
  pvStack0000000000000040 = in_R10;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11 = extraout_RSI;
    extraout_R11[1] = extraout_RAX->provider;
    ctx = (EVP_PKEY_CTX *)extraout_RAX;
    in_RCX = extraout_RCX;
    iStack0000000000000010 = extraout_RBX;
    in_RSI = extraout_RSI;
    in_RDI = extraout_RDI;
    in_R8 = extraout_R8;
    prStack0000000000000038 = extraout_R9;
    pvStack0000000000000040 = extraout_R10;
  }
  ((golang_org_x_net_internal_timeseries_timeSeries *)ctx)->provider = in_RSI;
  *(int *)((int)ctx + 8) = in_R8;
  ((golang_org_x_net_internal_timeseries_Clock *)((int)ctx + 0x50))->tab = prStack0000000000000038;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = extraout_R10_00;
    extraout_R11_00[1] = (extraout_RAX_00->clock).data;
    ctx = (EVP_PKEY_CTX *)extraout_RAX_00;
    in_RCX = extraout_RCX_00;
    in_RDI = extraout_RDI_00;
    pvStack0000000000000040 = extraout_R10_00;
  }
  ((golang_org_x_net_internal_timeseries_Clock *)((int)ctx + 0x50))->data = pvStack0000000000000040;
  runtime_makeslice((internal_abi_Type *)&DAT_00839ec0,in_RCX,in_RCX,in_RDI);
  ((___golang_org_x_net_internal_timeseries_tsLevel *)((int)ctx + 0x10))->len = in_RCX;
  ((___golang_org_x_net_internal_timeseries_tsLevel *)((int)ctx + 0x10))->cap = in_RCX;
  ppgVar1 = extraout_RAX_01;
  iVar5 = in_RCX;
  ~r0 = extraout_RBX_00;
  ts = (golang_org_x_net_internal_timeseries_timeSeries *)ctx;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_01 = extraout_RAX_02;
    extraout_R11_01[1] = (extraout_RSI_00->levels).array;
    ppgVar1 = extraout_RAX_02;
    ~r0 = extraout_RBX_01;
    ts = extraout_RSI_00;
  }
  (ts->levels).array = ppgVar1;
  uVar2 = 0;
  do {
    if (iVar5 <= (int)uVar2) {
LAB_007809b4:
      golang_org_x_net_internal_timeseries___timeSeries__Clear(ts);
      return extraout_RAX_08;
    }
    if ((0 < (int)uVar2) &&
       (*(int *)(iStack0000000000000010 + uVar2 * 8) <=
        *(int *)(iStack0000000000000010 + -8 + uVar2 * 8))) {
      local_38._8_8_ = &PTR_DAT_0095db50;
      local_38._0_8_ = &DAT_008075e0;
      local_18._8_8_ = 1;
      local_18._0_8_ = 1;
      local_28._8_8_ = local_38;
      local_28._0_8_ = golang_org_x_net_internal_timeseries___timeSeries__init_Print_func1;
      log___Logger__output
                (log_std,0,2,(func___uint8____uint8 **)local_28,in_stack_ffffffffffffff90,
                 in_stack_ffffffffffffffa0);
      ts = (golang_org_x_net_internal_timeseries_timeSeries *)ctx;
      goto LAB_007809b4;
    }
    runtime_newobject((internal_abi_Type *)&DAT_00887120,~r0);
    iVar5 = *(int *)((int)ctx + 8);
    ppfVar6 = ((golang_org_x_net_internal_timeseries_timeSeries *)ctx)->provider;
    extraout_RAX_03->size = *(time_Duration *)(iStack0000000000000010 + uVar2 * 8);
    pgVar3 = extraout_RAX_03;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier1();
      *extraout_R11_02 = extraout_R8_00;
      pgVar3 = extraout_RAX_04;
      iVar5 = extraout_RDI_01;
      ppfVar6 = extraout_R8_00;
    }
    pgVar3->provider = ppfVar6;
    runtime_makeslice((internal_abi_Type *)&DAT_00847060,iVar5,iVar5,(void *)iVar5);
    (pgVar3->buckets).len = iVar5;
    (pgVar3->buckets).cap = iVar5;
    pgVar4 = extraout_RAX_05;
    ~r0 = extraout_RBX_02;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_03 = extraout_RAX_06;
      extraout_R11_03[1] = (extraout_RSI_01->buckets).array;
      pgVar4 = extraout_RAX_06;
      ~r0 = extraout_RBX_03;
      pgVar3 = extraout_RSI_01;
    }
    (pgVar3->buckets).array = pgVar4;
    if ((uint)((___golang_org_x_net_internal_timeseries_tsLevel *)((int)ctx + 0x10))->len <= uVar2)
    {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    ppgVar1 = ((___golang_org_x_net_internal_timeseries_tsLevel *)((int)ctx + 0x10))->array;
    ts = (golang_org_x_net_internal_timeseries_timeSeries *)ctx;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_04 = extraout_RSI_02;
      extraout_R11_04[1] = extraout_R8_01[uVar2];
      ts = extraout_RAX_07;
      ~r0 = extraout_RBX_04;
      pgVar3 = extraout_RSI_02;
      ppgVar1 = extraout_R8_01;
    }
    ppgVar1[uVar2] = pgVar3;
    uVar2 = uVar2 + 1;
    iVar5 = in_RCX;
  } while( true );
}


/*
Unable to decompile 'golang.org/x/net/internal/timeseries.(*timeSeries).init.Print.func1'
Cause: 
Low-level Error: Overlapping input varnodes
*/


// WARNING: Variable defined which should be unmapped: i
// WARNING: Unknown calling convention

void golang_org_x_net_internal_timeseries___timeSeries__Clear
               (golang_org_x_net_internal_timeseries_timeSeries *ts)

{
  int iVar1;
  golang_org_x_net_internal_timeseries_Observable ~r0;
  golang_org_x_net_internal_timeseries_Observable ~r0_00;
  golang_org_x_net_internal_timeseries_timeSeries *extraout_RAX;
  runtime_itab *extraout_RAX_00;
  runtime_itab *extraout_RAX_01;
  uint uVar2;
  time_Location *ptVar3;
  golang_org_x_net_internal_timeseries_timeSeries *pgVar4;
  void *extraout_RBX;
  void *extraout_RBX_00;
  void *extraout_RBX_01;
  void *extraout_RBX_02;
  void *pvVar5;
  undefined8 extraout_RBX_03;
  time_Location **extraout_R11;
  void **extraout_R11_00;
  void **extraout_R11_01;
  undefined8 *extraout_R11_02;
  int unaff_R14;
  undefined in_XMM15 [16];
  golang_org_x_net_internal_timeseries_Observable in_stack_ffffffffffffffd0;
  runtime_itab *prStack_20;
  int i;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  (ts->lastAdd).wall = in_XMM15._0_8_;
  (ts->lastAdd).ext = in_XMM15._8_8_;
  if (runtime_writeBarrier._0_4_ != 0) {
    ptVar3 = (ts->lastAdd).loc;
    runtime_gcWriteBarrier1();
    *extraout_R11 = ptVar3;
    ts = extraout_RAX;
  }
  (ts->lastAdd).loc = (time_Location *)0x0;
  ~r0.data = (void *)i;
  ~r0.tab = prStack_20;
  golang_org_x_net_internal_timeseries___timeSeries__resetObservation
            (ts,in_stack_ffffffffffffffd0,~r0);
  (ts->total).tab = extraout_RAX_00;
  pgVar4 = ts;
  pvVar5 = extraout_RBX;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_00 = extraout_RBX_00;
    extraout_R11_00[1] = (pgVar4->total).data;
    pvVar5 = extraout_RBX_00;
  }
  (pgVar4->total).data = pvVar5;
  ~r0_00.data = (void *)i;
  ~r0_00.tab = prStack_20;
  golang_org_x_net_internal_timeseries___timeSeries__resetObservation
            (pgVar4,in_stack_ffffffffffffffd0,~r0_00);
  (ts->pending).tab = extraout_RAX_01;
  pgVar4 = ts;
  pvVar5 = extraout_RBX_01;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier2();
    *extraout_R11_01 = extraout_RBX_02;
    extraout_R11_01[1] = (pgVar4->pending).data;
    pvVar5 = extraout_RBX_02;
  }
  (pgVar4->pending).data = pvVar5;
  (pgVar4->pendingTime).wall = in_XMM15._0_8_;
  (pgVar4->pendingTime).ext = in_XMM15._8_8_;
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier1();
    *extraout_R11_02 = extraout_RBX_03;
  }
  (pgVar4->pendingTime).loc = (time_Location *)0x0;
  pgVar4->dirty = false;
  iVar1 = (pgVar4->levels).len;
  uVar2 = 0;
  while( true ) {
    if (iVar1 <= (int)uVar2) {
      return;
    }
    if ((uint)(pgVar4->levels).len <= uVar2) break;
    golang_org_x_net_internal_timeseries___tsLevel__Clear((pgVar4->levels).array[uVar2]);
    uVar2 = uVar2 + 1;
    pgVar4 = ts;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



void golang_org_x_net_internal_timeseries___timeSeries__Add
               (golang_org_x_net_internal_timeseries_timeSeries *ts,
               golang_org_x_net_internal_timeseries_Observable observation)

{
  int unaff_R14;
  golang_org_x_net_internal_timeseries_Observable in_stack_ffffffffffffffc8;
  time_Time in_stack_ffffffffffffffd8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  (*(code *)((ts->clock).tab)->fun[0])((ts->clock).data);
  golang_org_x_net_internal_timeseries___timeSeries__AddWithTime
            (ts,in_stack_ffffffffffffffc8,in_stack_ffffffffffffffd8);
  return;
}



void golang_org_x_net_internal_timeseries___timeSeries__AddWithTime
               (golang_org_x_net_internal_timeseries_timeSeries *ts,
               golang_org_x_net_internal_timeseries_Observable observation,time_Time t)

{
  golang_org_x_net_internal_timeseries_tsLevel *pgVar1;
  int64 iVar2;
  time_Time t_00;
  time_Time t_01;
  time_Time t_02;
  time_Time t_03;
  time_Time t_04;
  time_Time t_05;
  time_Time u;
  time_Time u_00;
  time_Time ~r0;
  time_Time u_01;
  bool ~r0_00;
  undefined ~r0_01;
  char extraout_AL_00;
  char extraout_AL_01;
  uint64 extraout_RAX;
  undefined8 in_RCX;
  time_Duration smallBucketDuration;
  golang_org_x_net_internal_timeseries_timeSeries *pgVar3;
  undefined8 in_RBX;
  int64 in_RSI;
  time_Location *extraout_RSI;
  time_Location *ptVar4;
  uint64 in_RDI;
  time_Location *in_R8;
  time_Location **extraout_R11;
  time_Location **extraout_R11_00;
  int unaff_R14;
  time_Location *ptStack0000000000000030;
  golang_org_x_net_internal_timeseries_Observable in_stack_ffffffffffffffa8;
  time_Location *in_stack_ffffffffffffffb8;
  undefined in_stack_ffffffffffffffc0 [16];
  time_Location *in_stack_ffffffffffffffd0;
  char extraout_AL;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    ptStack0000000000000030 = in_R8;
    runtime_morestack_noctxt();
    in_R8 = ptStack0000000000000030;
  }
  if ((ts->levels).len == 0) {
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  t_00.loc = in_stack_ffffffffffffffb8;
  t_00.wall = (uint64)in_stack_ffffffffffffffa8.tab;
  t_00.ext = (int64)in_stack_ffffffffffffffa8.data;
  u.loc = in_stack_ffffffffffffffd0;
  u.wall = in_stack_ffffffffffffffc0._0_8_;
  u.ext = in_stack_ffffffffffffffc0._8_8_;
  ~r0_00 = SUB81(in_RDI,0);
  time_Time_After(t_00,u,~r0_00);
  ~r0_01 = ~r0_00;
  if (extraout_AL != '\0') {
    (ts->lastAdd).wall = in_RDI;
    (ts->lastAdd).ext = in_RSI;
    pgVar3 = ts;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = in_R8;
      extraout_R11[1] = (pgVar3->lastAdd).loc;
      in_RDI = extraout_RAX;
    }
    (pgVar3->lastAdd).loc = in_R8;
    ~r0_01 = (char)in_RDI;
  }
  t_01.loc = in_stack_ffffffffffffffb8;
  t_01.wall = (uint64)in_stack_ffffffffffffffa8.tab;
  t_01.ext = (int64)in_stack_ffffffffffffffa8.data;
  u_00.loc = in_stack_ffffffffffffffd0;
  u_00.wall = in_stack_ffffffffffffffc0._0_8_;
  u_00.ext = in_stack_ffffffffffffffc0._8_8_;
  time_Time_After(t_01,u_00,(bool)~r0_01);
  if (extraout_AL_00 == '\0') {
    t_03.loc = in_stack_ffffffffffffffb8;
    t_03.wall = (uint64)in_stack_ffffffffffffffa8.tab;
    t_03.ext = (int64)in_stack_ffffffffffffffa8.data;
    ~r0.loc = in_stack_ffffffffffffffd0;
    ~r0.wall = in_stack_ffffffffffffffc0._0_8_;
    ~r0.ext = in_stack_ffffffffffffffc0._8_8_;
    time_Time_Add(t_03,(ts->pendingTime).wall,~r0);
    t_04.loc = in_stack_ffffffffffffffb8;
    t_04.wall = (uint64)in_stack_ffffffffffffffa8.tab;
    t_04.ext = (int64)in_stack_ffffffffffffffa8.data;
    u_01.loc = in_stack_ffffffffffffffd0;
    u_01.wall = in_stack_ffffffffffffffc0._0_8_;
    u_01.ext = in_stack_ffffffffffffffc0._8_8_;
    time_Time_After(t_04,u_01,~r0_00);
    if (extraout_AL_01 == '\0') {
      t_05.ext = in_stack_ffffffffffffffc0._0_8_;
      t_05.loc = (time_Location *)in_stack_ffffffffffffffc0._8_8_;
      t_05.wall = (uint64)in_stack_ffffffffffffffb8;
      golang_org_x_net_internal_timeseries___timeSeries__mergeValue
                (ts,in_stack_ffffffffffffffa8,t_05);
    }
    else {
      (*(code *)((ts->pending).tab)->fun[0])((ts->pending).data,in_RBX,in_RCX);
      ts->dirty = true;
    }
  }
  else {
    t_02.loc = in_stack_ffffffffffffffb8;
    t_02.wall = (uint64)in_stack_ffffffffffffffa8.tab;
    t_02.ext = (int64)in_stack_ffffffffffffffa8.data;
    golang_org_x_net_internal_timeseries___timeSeries__advance(ts,t_02);
    golang_org_x_net_internal_timeseries___timeSeries__mergePendingUpdates(ts);
    if ((ts->levels).len == 0) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    pgVar1 = *(ts->levels).array;
    iVar2 = (pgVar1->end).ext;
    ptVar4 = (pgVar1->end).loc;
    (ts->pendingTime).wall = (pgVar1->end).wall;
    (ts->pendingTime).ext = iVar2;
    pgVar3 = ts;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11_00 = extraout_RSI;
      extraout_R11_00[1] = (pgVar3->pendingTime).loc;
      ptVar4 = extraout_RSI;
    }
    (pgVar3->pendingTime).loc = ptVar4;
    (*(code *)(pgVar3->pending).tab[1]._type)((pgVar3->pending).data,in_RBX,in_RCX);
    ts->dirty = true;
  }
  return;
}



void golang_org_x_net_internal_timeseries___timeSeries__mergeValue
               (golang_org_x_net_internal_timeseries_timeSeries *ts,
               golang_org_x_net_internal_timeseries_Observable observation,time_Time t)

{
  int iVar1;
  golang_org_x_net_internal_timeseries_tsLevel **ppgVar2;
  int iVar3;
  int iVar4;
  int extraout_RAX;
  int iVar5;
  undefined8 in_RCX;
  golang_org_x_net_internal_timeseries_tsLevel *extraout_RCX;
  golang_org_x_net_internal_timeseries_tsLevel *pgVar6;
  uint uVar7;
  int bucketNumber;
  golang_org_x_net_internal_timeseries_Observable *pgVar8;
  undefined8 in_RBX;
  undefined8 extraout_RBX;
  undefined8 uVar9;
  int extraout_RSI;
  uint extraout_RDI;
  golang_org_x_net_internal_timeseries_tsLevel *level;
  int iVar10;
  undefined8 *extraout_R11;
  int index;
  int unaff_R14;
  undefined auVar11 [16];
  time_Time in_stack_ffffffffffffff80;
  time_Time in_stack_ffffffffffffff98;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  ppgVar2 = (ts->levels).array;
  iVar3 = (ts->levels).len;
  iVar10 = 0;
  do {
    if (iVar3 <= iVar10) {
      (*(code *)((ts->total).tab)->fun[0])((ts->total).data);
      return;
    }
    pgVar6 = ppgVar2[iVar10];
    time_Time_Sub(in_stack_ffffffffffffff80,in_stack_ffffffffffffff98,(pgVar6->end).wall);
    iVar5 = pgVar6->size;
    if (iVar5 == 0) {
                    // WARNING: Subroutine does not return
      runtime_panicdivide();
    }
    iVar4 = ts->numBuckets;
    if (iVar5 == -1) {
      iVar5 = -extraout_RAX;
    }
    else {
      iVar5 = extraout_RAX / iVar5;
    }
    iVar1 = (iVar4 - iVar5) + -1;
    if ((-1 < iVar1) && (iVar1 < iVar4)) {
      if (iVar4 == -1) {
        uVar7 = 0;
      }
      else {
        uVar7 = ((iVar4 - iVar5) + pgVar6->oldest + -1) % iVar4;
      }
      if ((uint)(pgVar6->buckets).len <= uVar7) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      iVar5 = uVar7 * 0x10;
      if ((pgVar6->buckets).array[uVar7].tab == (runtime_itab *)0x0) {
        auVar11 = (**pgVar6->provider)
                            ((golang_org_x_net_internal_timeseries_Observable *)*pgVar6->provider);
        uVar9 = auVar11._8_8_;
        if ((uint)(pgVar6->buckets).len <= uVar7) {
                    // WARNING: Subroutine does not return
          runtime_panicIndex();
        }
        pgVar8 = (pgVar6->buckets).array;
        pgVar8[uVar7].tab = auVar11._0_8_;
        if (runtime_writeBarrier._0_4_ != 0) {
          runtime_gcWriteBarrier2();
          *extraout_R11 = extraout_RBX;
          extraout_R11[1] = *(undefined8 *)((int)&pgVar8->data + extraout_RSI);
          pgVar6 = extraout_RCX;
          uVar9 = extraout_RBX;
          iVar5 = extraout_RSI;
          uVar7 = extraout_RDI;
        }
        *(undefined8 *)((int)&pgVar8->data + iVar5) = uVar9;
      }
      if ((uint)(pgVar6->buckets).len <= uVar7) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      pgVar8 = (pgVar6->buckets).array;
      (**(code **)(*(int *)((int)&pgVar8->tab + iVar5) + 0x18))
                (*(undefined8 *)((int)&pgVar8->data + iVar5),in_RBX,in_RCX);
    }
    iVar10 = iVar10 + 1;
  } while( true );
}



// WARNING: Unknown calling convention

void golang_org_x_net_internal_timeseries___timeSeries__mergePendingUpdates
               (golang_org_x_net_internal_timeseries_timeSeries *ts)

{
  time_Time t;
  runtime_itab *extraout_RAX;
  void *extraout_RBX;
  void *extraout_RBX_00;
  void *pvVar1;
  void **extraout_R11;
  int unaff_R14;
  golang_org_x_net_internal_timeseries_timeSeries *pgStack0000000000000008;
  golang_org_x_net_internal_timeseries_Observable in_stack_ffffffffffffffc8;
  golang_org_x_net_internal_timeseries_Observable in_stack_ffffffffffffffd8;
  time_Location *in_stack_ffffffffffffffe8;
  
  pgStack0000000000000008 = ts;
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  if (pgStack0000000000000008->dirty != false) {
    t.loc = in_stack_ffffffffffffffe8;
    t.wall = (uint64)in_stack_ffffffffffffffd8.tab;
    t.ext = (int64)in_stack_ffffffffffffffd8.data;
    golang_org_x_net_internal_timeseries___timeSeries__mergeValue
              (pgStack0000000000000008,in_stack_ffffffffffffffc8,t);
    golang_org_x_net_internal_timeseries___timeSeries__resetObservation
              (pgStack0000000000000008,in_stack_ffffffffffffffc8,in_stack_ffffffffffffffd8);
    (pgStack0000000000000008->pending).tab = extraout_RAX;
    pvVar1 = extraout_RBX;
    if (runtime_writeBarrier._0_4_ != 0) {
      runtime_gcWriteBarrier2();
      *extraout_R11 = extraout_RBX_00;
      extraout_R11[1] = (pgStack0000000000000008->pending).data;
      pvVar1 = extraout_RBX_00;
    }
    (pgStack0000000000000008->pending).data = pvVar1;
    pgStack0000000000000008->dirty = false;
  }
  return;
}



void golang_org_x_net_internal_timeseries___timeSeries__advance
               (golang_org_x_net_internal_timeseries_timeSeries *ts,time_Time t)

{
