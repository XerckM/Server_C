  char extraout_AL_04;
  char extraout_AL_05;
  char extraout_AL_06;
  char extraout_AL_07;
  char extraout_AL_08;
  internal_abi_Name n;
  internal_abi_Name n_00;
  uint uVar8;
  internal_abi_Name iVar9;
  uint8 *extraout_RAX;
  uint8 *extraout_RAX_00;
  internal_abi_Type *extraout_RAX_01;
  internal_abi_Type *tityp;
  internal_abi_Type *v_00;
  internal_abi_Type *vityp;
  char extraout_AL_09;
  char extraout_AL_10;
  uintptr uadd_3;
  uint uVar10;
  char extraout_BL;
  bool ok;
  undefined **extraout_RCX;
  undefined **~r0_00;
  uintptr uadd;
  uintptr uadd_1;
  ushort uVar12;
  internal_abi_Imethod *vm;
  int iVar13;
  int extraout_RBX;
  int extraout_RBX_00;
  int extraout_RBX_01;
  int extraout_RBX_02;
  int extraout_RBX_03;
  int extraout_RBX_04;
  int extraout_RBX_05;
  int extraout_RBX_06;
  int extraout_RBX_07;
  int extraout_RBX_08;
  int extraout_RBX_09;
  int extraout_RBX_10;
  int extraout_RBX_11;
  int extraout_RBX_12;
  int extraout_RBX_13;
  int extraout_RBX_14;
  uint uVar14;
  uintptr uadd_2;
  undefined8 in_RSI;
  internal_abi_UncommonType *ut;
  undefined8 extraout_RSI;
  bool ~r0_01;
  bool ~r0_02;
  bool ~r0_03;
  undefined7 in_register_00000039;
  void *pvVar15;
  void *~r0_04;
  void *extraout_RDI;
  internal_abi_UncommonType *uv;
  internal_abi_Imethod *tm;
  int unaff_R14;
  struct___ _autotmp_103;
  runtime_rtype rStack0000000000000010;
  string in_stack_fffffffffffffed8;
  int i_3;
  int i_2;
  int i_1;
  int i;
  int local_a8;
  int local_a0;
  int local_98;
  int local_90;
  internal_abi_UncommonType *local_88;
  uint8 *local_80;
  void *local_78;
  internal_abi_Type *local_70;
  internal_abi_Name local_58;
  internal_abi_Name local_50;
  internal_abi_Name local_48;
  uintptr local_40;
  uintptr local_38;
  uintptr local_30;
  map_runtime__typePair_struct___ local_20;
  runtime__typePair tp;
  
  pvVar15 = (void *)CONCAT71(in_register_00000039,~r0);
  rStack0000000000000010.Type = v;
  while (&local_a8 <= *(int **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
    in_RSI = extraout_RSI;
    pvVar15 = extraout_RDI;
  }
  tp.t2 = rStack0000000000000010.Type;
  tp.t1 = t;
  local_20 = seen;
  runtime_mapaccess2((internal_abi_MapType *)&DAT_0082caa0,(runtime_hmap *)seen,&tp,pvVar15,
                     SUB81(in_RSI,0));
  if (extraout_BL != '\0') {
    return;
  }
  runtime_mapassign((internal_abi_MapType *)&DAT_0082caa0,(runtime_hmap *)local_20,&tp,~r0_04);
  if (t == rStack0000000000000010.Type) {
    return;
  }
  bVar1 = t->Kind_;
  bVar11 = bVar1 & 0x1f;
  if (((rStack0000000000000010.Type)->Kind_ & 0x1f) != bVar11) {
    return;
  }
  runtime_rtype_string((runtime_rtype)t,in_stack_fffffffffffffed8);
  runtime_rtype_string(rStack0000000000000010,in_stack_fffffffffffffed8);
  if ((extraout_RBX_00 != extraout_RBX) || (runtime_memequal(), extraout_AL == '\0')) {
    return;
  }
  if ((t->TFlag & 1) == 0) {
    ut = (internal_abi_UncommonType *)0x0;
    ~r0_00 = extraout_RCX;
  }
  else {
    ~r0_00 = &runtime_typesEqual_jump18;
    switch(t->Kind_ & 0x1f) {
    case 0x11:
      ut = (internal_abi_UncommonType *)&t[1].Equal;
      break;
    case 0x12:
      ut = (internal_abi_UncommonType *)&t[1].Hash;
      break;
    case 0x13:
      ut = (internal_abi_UncommonType *)&t[1].PtrBytes;
      break;
    case 0x14:
      ut = (internal_abi_UncommonType *)&t[1].GCData;
      break;
    case 0x15:
      ut = (internal_abi_UncommonType *)&t[1].Str;
      break;
    case 0x16:
      ut = (internal_abi_UncommonType *)&t[1].PtrBytes;
      break;
    case 0x17:
      ut = (internal_abi_UncommonType *)&t[1].PtrBytes;
      break;
    default:
      ut = (internal_abi_UncommonType *)(t + 1);
      break;
    case 0x19:
      ut = (internal_abi_UncommonType *)&t[1].GCData;
    }
  }
  if (((rStack0000000000000010.Type)->TFlag & 1) == 0) {
    uv = (internal_abi_UncommonType *)0x0;
  }
  else {
    ~r0_00 = &runtime_typesEqual_jump34;
    switch((rStack0000000000000010.Type)->Kind_ & 0x1f) {
    case 0x11:
      uv = (internal_abi_UncommonType *)&rStack0000000000000010.Type[1].Equal;
      break;
    case 0x12:
      uv = (internal_abi_UncommonType *)&rStack0000000000000010.Type[1].Hash;
      break;
    case 0x13:
      uv = (internal_abi_UncommonType *)&rStack0000000000000010.Type[1].PtrBytes;
      break;
    case 0x14:
      uv = (internal_abi_UncommonType *)&rStack0000000000000010.Type[1].GCData;
      break;
    case 0x15:
      uv = (internal_abi_UncommonType *)&rStack0000000000000010.Type[1].Str;
      break;
    case 0x16:
      uv = (internal_abi_UncommonType *)&rStack0000000000000010.Type[1].PtrBytes;
      break;
    case 0x17:
      uv = (internal_abi_UncommonType *)&rStack0000000000000010.Type[1].PtrBytes;
      break;
    default:
      uv = (internal_abi_UncommonType *)(rStack0000000000000010.Type + 1);
      break;
    case 0x19:
      uv = (internal_abi_UncommonType *)&rStack0000000000000010.Type[1].GCData;
    }
  }
  if (ut == (internal_abi_UncommonType *)0x0) {
    if (uv != (internal_abi_UncommonType *)0x0) {
      return;
    }
  }
  else {
    if (uv == (internal_abi_UncommonType *)0x0) {
      return;
    }
    local_88 = uv;
    runtime_resolveNameOff(t,ut->PkgPath,(internal_abi_Name)~r0_00);
    internal_abi_Name_Name(n,in_stack_fffffffffffffed8);
    iVar9.Bytes._4_4_ = 0;
    iVar9.Bytes._0_4_ = local_88->PkgPath;
    runtime_resolveNameOff(rStack0000000000000010.Type,local_88->PkgPath,iVar9);
    internal_abi_Name_Name(n_00,in_stack_fffffffffffffed8);
    if ((extraout_RBX_02 != extraout_RBX_01) || (runtime_memequal(), extraout_AL_00 == '\0')) {
      return;
    }
  }
  if ((bVar11 != 0) && (bVar11 < 0x11)) {
    return;
  }
  if (9 < (bVar1 & 0x1f) - 0x11) {
    runtime_printlock();
    runtime_printstring(in_stack_fffffffffffffed8);
    runtime_printuint((uint)(bVar1 & 0x1f));
    runtime_printnl();
    runtime_printunlock();
                    // WARNING: Subroutine does not return
    runtime_throw(in_stack_fffffffffffffed8);
  }
  ~r0_01 = SUB81(rStack0000000000000010.Type,0);
  switch(bVar1 & 0x1f) {
  case 0x11:
    runtime_typesEqual((internal_abi_Type *)t[1].Size_,
                       (internal_abi_Type *)rStack0000000000000010.Type[1].Size_,local_20,~r0_01);
    return;
  case 0x12:
    if (rStack0000000000000010.Type[1].PtrBytes == t[1].PtrBytes) {
      runtime_typesEqual((internal_abi_Type *)t[1].Size_,
                         (internal_abi_Type *)rStack0000000000000010.Type[1].Size_,local_20,~r0_01);
    }
    return;
  case 0x13:
    if (*(short *)((int)&rStack0000000000000010.Type[1].Size_ + 2) ==
        *(short *)((int)&t[1].Size_ + 2)) {
      uVar12 = *(ushort *)&t[1].Size_;
      uVar8 = (uint)uVar12;
      uVar2 = *(ushort *)&rStack0000000000000010.Type[1].Size_;
      uVar10 = (uint)uVar2;
      if (uVar2 == uVar12) {
        if ((t->TFlag & 1) == 0) {
          uadd = 0x38;
        }
        else {
          uadd = 0x48;
        }
        if (uVar12 == 0) {
          uVar8 = 0;
          local_90 = 0;
        }
        else {
          local_90 = (int)&t->Size_ + uadd;
          if (0x10000 < uVar8) {
                    // WARNING: Subroutine does not return
            runtime_panicSlice3Alen();
          }
        }
        if (((rStack0000000000000010.Type)->TFlag & 1) == 0) {
          uadd_1 = 0x38;
        }
        else {
          uadd_1 = 0x48;
        }
        if (uVar2 == 0) {
          uVar10 = 0;
          local_98 = 0;
        }
        else {
          local_98 = (int)&(rStack0000000000000010.Type)->Size_ + uadd_1;
          if (0x10000 < uVar10) {
                    // WARNING: Subroutine does not return
            runtime_panicSlice3Alen();
          }
        }
        uVar14 = 0;
        while( true ) {
          if ((int)uVar8 <= (int)uVar14) {
            uVar12 = *(ushort *)((int)&t[1].Size_ + 2) & 0x7fff;
            if (uVar12 == 0) {
              iVar13 = 0;
              local_a0 = 0;
            }
            else {
              if ((t->TFlag & 1) == 0) {
                uadd_2 = 0x38;
              }
              else {
                uadd_2 = 0x48;
              }
              uVar10 = (uint)*(ushort *)&t[1].Size_;
              uVar8 = (uint)(ushort)(uVar12 + *(ushort *)&t[1].Size_);
              if (uVar8 < uVar10) {
                    // WARNING: Subroutine does not return
                runtime_panicSlice3C();
              }
              iVar13 = uVar8 - uVar10;
              local_a0 = (int)&t->Size_ + (uVar10 << 3 & -iVar13 >> 0x3f) + uadd_2;
            }
            uVar12 = *(ushort *)((int)&rStack0000000000000010.Type[1].Size_ + 2) & 0x7fff;
            if (uVar12 == 0) {
              uVar8 = 0;
              local_a8 = 0;
            }
            else {
              if (((rStack0000000000000010.Type)->TFlag & 1) == 0) {
                uadd_3 = 0x38;
              }
              else {
                uadd_3 = 0x48;
              }
              uVar10 = (uint)*(ushort *)&rStack0000000000000010.Type[1].Size_;
              uVar8 = (uint)(ushort)(uVar12 + *(ushort *)&rStack0000000000000010.Type[1].Size_);
              if (uVar8 < uVar10) {
                    // WARNING: Subroutine does not return
                runtime_panicSlice3C();
              }
              uVar8 = uVar8 - uVar10;
              local_a8 = (int)&(rStack0000000000000010.Type)->Size_ +
                         (uVar10 << 3 & (int)-uVar8 >> 0x3f) + uadd_3;
            }
            uVar10 = 0;
            while( true ) {
              if (iVar13 <= (int)uVar10) {
                return;
              }
              t_00 = *(internal_abi_Type **)(local_a0 + uVar10 * 8);
              if (uVar8 <= uVar10) break;
              runtime_typesEqual(t_00,*(internal_abi_Type **)(local_a8 + uVar10 * 8),local_20,
                                 SUB81(t_00,0));
              if (extraout_AL_11 == '\0') {
                return;
              }
              uVar10 = uVar10 + 1;
            }
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          if (uVar10 <= uVar14) {
                    // WARNING: Subroutine does not return
            runtime_panicIndex();
          }
          runtime_typesEqual(*(internal_abi_Type **)(local_90 + uVar14 * 8),
                             *(internal_abi_Type **)(local_98 + uVar14 * 8),local_20,
                             SUB81(rStack0000000000000010.Type,0));
          if (extraout_AL_10 == '\0') break;
          uVar14 = uVar14 + 1;
        }
        return;
      }
    }
    return;
  case 0x14:
    internal_abi_Name_Name((uint8 *)t[1].Size_,in_stack_fffffffffffffed8);
    internal_abi_Name_Name((uint8 *)rStack0000000000000010.Type[1].Size_,in_stack_fffffffffffffed8);
    if ((extraout_RBX_04 != extraout_RBX_03) || (runtime_memequal(), extraout_AL_01 == '\0')) {
      return;
    }
    iVar3._0_4_ = t[1].Hash;
    iVar3._4_1_ = t[1].TFlag;
    iVar3._5_1_ = t[1].Align_;
    iVar3._6_1_ = t[1].FieldAlign_;
    iVar3._7_1_ = t[1].Kind_;
    iVar4._0_4_ = rStack0000000000000010.Type[1].Hash;
    iVar4._4_1_ = rStack0000000000000010.Type[1].TFlag;
    iVar4._5_1_ = rStack0000000000000010.Type[1].Align_;
    iVar4._6_1_ = rStack0000000000000010.Type[1].FieldAlign_;
    iVar4._7_1_ = rStack0000000000000010.Type[1].Kind_;
    if (iVar4 != iVar3) {
      return;
    }
    iVar9.Bytes = (uint8 *)0x0;
    while( true ) {
      if (iVar3 <= (int)iVar9.Bytes) {
        return;
      }
      if (*(uint8 **)&t[1].Hash <= iVar9.Bytes) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      uVar7 = t[1].PtrBytes;
      pvVar15 = (void *)(uVar7 + (int)iVar9.Bytes * 8);
      if (*(uint8 **)&rStack0000000000000010.Type[1].Hash <= iVar9.Bytes) {
                    // WARNING: Subroutine does not return
        runtime_panicIndex();
      }
      local_48.Bytes = (uint8 *)rStack0000000000000010.Type[1].PtrBytes;
      local_80 = local_48.Bytes + (int)iVar9.Bytes * 8;
      local_78 = pvVar15;
      local_40 = uVar7;
      runtime_resolveNameOff
                (pvVar15,*(internal_abi_NameOff *)(uVar7 + (int)iVar9.Bytes * 8),local_48);
      local_50.Bytes = extraout_RAX;
      runtime_resolveNameOff
                (local_80,*(internal_abi_NameOff *)(local_48.Bytes + (int)iVar9.Bytes * 8),iVar9);
      local_58.Bytes = extraout_RAX_00;
      internal_abi_Name_Name(local_50,in_stack_fffffffffffffed8);
      internal_abi_Name_Name(local_58,in_stack_fffffffffffffed8);
      if ((extraout_RBX_12 != extraout_RBX_11) || (runtime_memequal(), extraout_AL_07 == '\0'))
      break;
      runtime_pkgPath(local_50,in_stack_fffffffffffffed8);
      runtime_pkgPath(local_58,in_stack_fffffffffffffed8);
      if ((extraout_RBX_14 != extraout_RBX_13) || (runtime_memequal(), extraout_AL_08 == '\0')) {
        return;
      }
      runtime_resolveTypeOff
                (local_78,*(internal_abi_TypeOff *)(local_40 + 4 + (int)iVar9.Bytes * 8),
                 (internal_abi_Type *)iVar9.Bytes);
      local_70 = extraout_RAX_01;
      runtime_resolveTypeOff
                (local_80,*(internal_abi_TypeOff *)(local_48.Bytes + (int)iVar9.Bytes * 8 + 4),
                 (internal_abi_Type *)iVar9.Bytes);
      runtime_typesEqual(local_70,v_00,local_20,~r0_03);
      if (extraout_AL_09 == '\0') {
        return;
      }
      iVar9.Bytes = iVar9.Bytes + 1;
    }
    return;
  case 0x15:
    runtime_typesEqual((internal_abi_Type *)t[1].Size_,
                       (internal_abi_Type *)rStack0000000000000010.Type[1].Size_,local_20,~r0_01);
    if (extraout_AL_02 != '\0') {
      runtime_typesEqual((internal_abi_Type *)t[1].PtrBytes,
                         (internal_abi_Type *)rStack0000000000000010.Type[1].PtrBytes,local_20,
                         ~r0_02);
    }
    return;
  case 0x16:
    runtime_typesEqual((internal_abi_Type *)t[1].Size_,
                       (internal_abi_Type *)rStack0000000000000010.Type[1].Size_,local_20,~r0_01);
    return;
  case 0x17:
    runtime_typesEqual((internal_abi_Type *)t[1].Size_,
                       (internal_abi_Type *)rStack0000000000000010.Type[1].Size_,local_20,~r0_01);
    return;
  default:
    return;
  case 0x19:
    iVar13._0_4_ = rStack0000000000000010.Type[1].Hash;
    iVar13._4_1_ = rStack0000000000000010.Type[1].TFlag;
    iVar13._5_1_ = rStack0000000000000010.Type[1].Align_;
    iVar13._6_1_ = rStack0000000000000010.Type[1].FieldAlign_;
    iVar13._7_1_ = rStack0000000000000010.Type[1].Kind_;
    iVar5._0_4_ = t[1].Hash;
    iVar5._4_1_ = t[1].TFlag;
    iVar5._5_1_ = t[1].Align_;
    iVar5._6_1_ = t[1].FieldAlign_;
    iVar5._7_1_ = t[1].Kind_;
    if (iVar5 != iVar13) {
      return;
    }
    internal_abi_Name_Name((uint8 *)t[1].Size_,in_stack_fffffffffffffed8);
    internal_abi_Name_Name((uint8 *)rStack0000000000000010.Type[1].Size_,in_stack_fffffffffffffed8);
    if ((extraout_RBX_06 != extraout_RBX_05) || (runtime_memequal(), extraout_AL_03 == '\0')) {
      return;
    }
    iVar6._0_4_ = t[1].Hash;
    iVar6._4_1_ = t[1].TFlag;
    iVar6._5_1_ = t[1].Align_;
    iVar6._6_1_ = t[1].FieldAlign_;
    iVar6._7_1_ = t[1].Kind_;
    uVar8 = 0;
  }
  while( true ) {
    if (iVar6 <= (int)uVar8) {
      return;
    }
    uVar10._0_4_ = t[1].Hash;
    uVar10._4_1_ = t[1].TFlag;
    uVar10._5_1_ = t[1].Align_;
    uVar10._6_1_ = t[1].FieldAlign_;
    uVar10._7_1_ = t[1].Kind_;
    if (uVar10 <= uVar8) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    uVar14._0_4_ = rStack0000000000000010.Type[1].Hash;
    uVar14._4_1_ = rStack0000000000000010.Type[1].TFlag;
    uVar14._5_1_ = rStack0000000000000010.Type[1].Align_;
    uVar14._6_1_ = rStack0000000000000010.Type[1].FieldAlign_;
    uVar14._7_1_ = rStack0000000000000010.Type[1].Kind_;
    if (uVar14 <= uVar8) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    local_30 = t[1].PtrBytes;
    local_38 = rStack0000000000000010.Type[1].PtrBytes;
    internal_abi_Name_Name
              ((internal_abi_Name)*(uint8 **)(local_30 + uVar8 * 0x18),in_stack_fffffffffffffed8);
    internal_abi_Name_Name
              ((internal_abi_Name)*(uint8 **)(local_38 + uVar8 * 0x18),in_stack_fffffffffffffed8);
    if ((extraout_RBX_08 != extraout_RBX_07) || (runtime_memequal(), extraout_AL_04 == '\0')) {
      return;
    }
    runtime_typesEqual(*(internal_abi_Type **)(local_30 + 8 + uVar8 * 0x18),
                       *(internal_abi_Type **)(local_38 + 8 + uVar8 * 0x18),local_20,
                       SUB81(local_38,0));
    if (extraout_AL_05 == '\0') {
      return;
    }
    internal_abi_Name_Tag
              ((internal_abi_Name)*(uint8 **)(local_30 + uVar8 * 0x18),in_stack_fffffffffffffed8);
    internal_abi_Name_Tag
              ((internal_abi_Name)*(uint8 **)(local_38 + uVar8 * 0x18),in_stack_fffffffffffffed8);
    if ((extraout_RBX_10 != extraout_RBX_09) || (runtime_memequal(), extraout_AL_06 == '\0')) {
      return;
    }
    if (*(int *)(local_38 + 0x10 + uVar8 * 0x18) != *(int *)(local_30 + 0x10 + uVar8 * 0x18)) {
      return;
    }
    if (((**(byte **)(local_38 + uVar8 * 0x18) & 8) != 0) !=
        ((**(byte **)(local_30 + uVar8 * 0x18) & 8) != 0)) break;
    uVar8 = uVar8 + 1;
  }
  return;
}



// WARNING: Unknown calling convention
// DWARF original prototype: void runtime.panicunsafestringlen(void)

void runtime_panicunsafestringlen(void)

{
  int unaff_R14;
  interface___ in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffe8);
}



// WARNING: Unknown calling convention
// DWARF original prototype: void runtime.panicunsafestringnilptr(void)

void runtime_panicunsafestringnilptr(void)

{
  int unaff_R14;
  interface___ in_stack_ffffffffffffffe8;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
                    // WARNING: Subroutine does not return
  runtime_gopanic(in_stack_ffffffffffffffe8);
}



// WARNING: Unknown calling convention
// DWARF original prototype: void runtime.panicunsafeslicelen(void)

void runtime_panicunsafeslicelen(void)

{
  int unaff_R14;
  uintptr unaff_retaddr;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
                    // WARNING: Subroutine does not return
  runtime_panicunsafeslicelen1(unaff_retaddr);
}



// WARNING: Unknown calling convention
// DWARF original prototype: void runtime.panicunsafeslicelen1(uintptr pc)

void runtime_panicunsafeslicelen1(uintptr pc)

{
  int unaff_R14;
  string in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
                    // WARNING: Subroutine does not return
  runtime_panicCheck1(pc,in_stack_ffffffffffffffe0);
}



// WARNING: Unknown calling convention
// DWARF original prototype: void runtime.panicunsafeslicenilptr(void)

void runtime_panicunsafeslicenilptr(void)

{
  int unaff_R14;
  uintptr unaff_retaddr;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
                    // WARNING: Subroutine does not return
  runtime_panicunsafeslicenilptr1(unaff_retaddr);
}



// WARNING: Unknown calling convention
// DWARF original prototype: void runtime.panicunsafeslicenilptr1(uintptr pc)

void runtime_panicunsafeslicenilptr1(uintptr pc)

{
  int unaff_R14;
  string in_stack_ffffffffffffffe0;
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
                    // WARNING: Subroutine does not return
  runtime_panicCheck1(pc,in_stack_ffffffffffffffe0);
}



void runtime_decoderune(string s,int k,int32 r,int pos)

{
  byte bVar1;
  byte bVar2;
  byte bVar3;
  dword dVar4;
  undefined4 in_register_0000001c;
  int iVar5;
  uint uVar6;
  
  uVar6 = CONCAT44(in_register_0000001c,r);
  if ((int)uVar6 <= pos) {
    return;
  }
  if ((uint)pos <= uVar6) {
    iVar5 = uVar6 - pos;
    uVar6 = -iVar5 >> 0x3f & pos;
    if (iVar5 == 0) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    bVar1 = *(byte *)(k + uVar6);
    if (0xbf < bVar1) {
      dVar4 = (dword)bVar1;
      if (bVar1 < 0xe0) {
        if (((1 < iVar5) && (bVar1 = *(byte *)(k + 1 + uVar6), 0x7f < bVar1)) &&
           ((bVar1 < 0xc0 && (0x7f < (dword)(bVar1 & 0x3f | (dVar4 & 0x1f) << 6))))) {
          return;
        }
      }
      else if (bVar1 < 0xf0) {
        if ((((2 < iVar5) && (bVar1 = *(byte *)(k + 1 + uVar6), 0x7f < bVar1)) && (bVar1 < 0xc0)) &&
           (((bVar2 = *(byte *)(k + 2 + uVar6), 0x7f < bVar2 && (bVar2 < 0xc0)) &&
            ((dVar4 = bVar2 & 0x3f | (bVar1 & 0x3f) << 6 | (dVar4 & 0xf) << 0xc, 0x7ff < dVar4 &&
             (0x7ff < (dword)(dVar4 - 0xd800))))))) {
          return;
        }
      }
      else if (((((bVar1 < 0xf8) && (3 < iVar5)) && (bVar1 = *(byte *)(k + 1 + uVar6), 0x7f < bVar1)
                ) && ((bVar1 < 0xc0 && (bVar2 = *(byte *)(k + 2 + uVar6), 0x7f < bVar2)))) &&
              (((bVar2 < 0xc0 &&
                ((bVar3 = *(byte *)(k + 3 + uVar6), 0x7f < bVar3 && (bVar3 < 0xc0)))) &&
               ((dword)((bVar3 & 0x3f |
                        (dVar4 & 7) << 0x12 | (bVar1 & 0x3f) << 0xc | (bVar2 & 0x3f) << 6) - 0x10000
                       ) < 0x100000)))) {
        return;
      }
    }
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicSliceB();
}



// Local variable i:uint32[EDI:4] conflicts with parameter, skipped.

void runtime_encoderune(__uint8 p,int32 r,int ~r0)

{
  byte bVar1;
  undefined4 in_register_00000004;
  byte *pbVar2;
  byte bVar3;
  dword in_EDI;
  
  pbVar2 = (byte *)CONCAT44(in_register_00000004,r);
  bVar3 = (byte)in_EDI;
  if (in_EDI < 0x80) {
    if (~r0 != 0) {
      *pbVar2 = bVar3;
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  bVar1 = (byte)((sdword)in_EDI >> 6);
  if (in_EDI < 0x800) {
    if (1 < (uint)~r0) {
      *pbVar2 = bVar1 | 0xc0;
      pbVar2[1] = bVar3 & 0x3f | 0x80;
      return;
    }
                    // WARNING: Subroutine does not return
    runtime_panicIndex();
  }
  if ((in_EDI < 0x110000) && (0x7ff < (dword)(in_EDI - 0xd800))) {
    if (0xffff < in_EDI) {
      if (3 < (uint)~r0) {
        *pbVar2 = (byte)((sdword)in_EDI >> 0x12) | 0xf0;
        pbVar2[1] = (byte)((sdword)in_EDI >> 0xc) & 0x3f | 0x80;
        pbVar2[2] = bVar1 & 0x3f | 0x80;
        pbVar2[3] = bVar3 & 0x3f | 0x80;
        return;
      }
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
  }
  else {
    in_EDI = 0xfffd;
  }
  if (2 < (uint)~r0) {
    *pbVar2 = (byte)((sdword)in_EDI >> 0xc) | 0xe0;
    pbVar2[1] = (byte)((sdword)in_EDI >> 6) & 0x3f | 0x80;
    pbVar2[2] = (byte)in_EDI & 0x3f | 0x80;
    return;
  }
                    // WARNING: Subroutine does not return
  runtime_panicIndex();
}



// WARNING: Unknown calling convention

void runtime_vdsoInitFromSysinfoEhdr(runtime_vdsoInfo *info,runtime_elfEhdr *hdr)

{
  dword dVar1;
  uint32 uVar2;
  uint32 uVar3;
  uint64 uVar4;
  bool bVar5;
  runtime_vdsoInfo *extraout_RAX;
  runtime_vdsoInfo *extraout_RAX_00;
  runtime_vdsoInfo *extraout_RAX_01;
  runtime_vdsoInfo *extraout_RAX_02;
  runtime_vdsoInfo *extraout_RAX_03;
  runtime_vdsoInfo *extraout_RAX_04;
  runtime_vdsoInfo *extraout_RAX_05;
  runtime_vdsoInfo *extraout_RAX_06;
  runtime_vdsoInfo *extraout_RAX_07;
  runtime_vdsoInfo *extraout_RAX_08;
  uint16 i;
  uint32 nbucket;
  uint32 nbucket_1;
  int i_1;
  uint32 *extraout_RCX;
  uint uVar6;
  uint extraout_RCX_00;
  uint32 *extraout_RCX_01;
  uint32 *puVar7;
  bool foundVaddr;
  uint32 (*gnuhash) [1];
  uint32 bloomSize;
  uint32 (*pauVar8) [1];
  void *pt;
  undefined8 extraout_RBX;
  uint32 (*hash) [1];
  uint32 nchain;
  uint32 (*extraout_RBX_00) [1];
  uint32 (*extraout_RBX_01) [1];
  uint32 (*extraout_RBX_02) [1];
  uint32 (*extraout_RBX_03) [1];
  uint32 (*extraout_RBX_04) [1];
  uint uVar9;
  uint extraout_RBX_05;
  uint32 (*extraout_RBX_06) [1];
  uint32 (*pauVar10) [1];
  undefined8 extraout_RSI;
  uint32 *extraout_RSI_00;
  uint extraout_RSI_01;
  runtime_elfDyn (*dyn) [1];
  runtime_elfDyn (*extraout_RDI) [1];
  runtime_elfDyn (*extraout_RDI_00) [1];
  runtime_elfDyn (*extraout_RDI_01) [1];
  runtime_elfDyn (*extraout_RDI_02) [1];
  runtime_elfDyn (*extraout_RDI_03) [1];
  uint uVar11;
  int iVar12;
  int extraout_R8;
  int extraout_R8_00;
  int extraout_R8_01;
  int extraout_R8_02;
  uint32 (*extraout_R8_03) [1];
  runtime_elfVerdef *prVar13;
  uintptr p;
  runtime_elfVerdef *extraout_R9;
  runtime_elfVerdef *extraout_R9_00;
  runtime_elfVerdef *extraout_R9_01;
  runtime_elfVerdef *extraout_R9_02;
  undefined8 *extraout_R11;
  runtime_elfVerdef **extraout_R11_00;
  runtime_elfVerdef **extraout_R11_01;
  runtime_elfVerdef **extraout_R11_02;
  runtime_elfVerdef **extraout_R11_03;
  undefined8 *extraout_R11_04;
  uint32 **extraout_R11_05;
  uint32 **extraout_R11_06;
  uint32 (**extraout_R11_07) [1];
  uint32 **extraout_R11_08;
  int unaff_R14;
  undefined in_XMM15 [16];
  
  while (&stack0x00000000 <= *(undefined **)(unaff_R14 + 0x10)) {
    runtime_morestack_noctxt();
  }
  info->valid = false;
  info->loadAddr = (uintptr)hdr;
  uVar4 = hdr->e_phoff;
  bVar5 = false;
  dyn = (runtime_elfDyn (*) [1])0x0;
  for (i = 0; i < hdr->e_phnum; i = i + 1) {
    iVar12 = (uint)i * 0x38;
    if (*(sdword *)(hdr->e_ident + iVar12 + uVar4) == 1) {
      if (!bVar5) {
        info->loadOffset =
             (*(int *)(hdr->e_ident + iVar12 + 8 + uVar4) -
             *(int *)(hdr->e_ident + iVar12 + uVar4 + 0x10)) + info->loadAddr;
      }
      bVar5 = true;
    }
    else if (*(sdword *)(hdr->e_ident + iVar12 + uVar4) == 2) {
      dyn = (runtime_elfDyn (*) [1])(*(int *)(hdr->e_ident + iVar12 + 8 + uVar4) + info->loadAddr);
    }
  }
  if ((!bVar5) || (dyn == (runtime_elfDyn (*) [1])0x0)) {
    return;
  }
  if (runtime_writeBarrier._0_4_ != 0) {
    runtime_gcWriteBarrier4();
    *extraout_R11 = extraout_RBX;
    extraout_R11[1] = extraout_RAX->symtab;
    extraout_R11[2] = extraout_RAX->versym;
    extraout_R11[3] = extraout_RAX->verdef;
    info = extraout_RAX;
    dyn = extraout_RDI;
  }
  info->symtab = (runtime_elfSym (*) [1])in_XMM15._0_8_;
  info->symstrings = (uint8 (*) [1])in_XMM15._8_8_;
  info->versym = (uint16 (*) [1])in_XMM15._0_8_;
  info->verdef = (runtime_elfVerdef *)in_XMM15._8_8_;
  i_1 = 0;
  pauVar8 = (uint32 (*) [1])0x0;
  pauVar10 = (uint32 (*) [1])0x0;
  while( true ) {
    if (0x3ffffffffffe < (uint)i_1) {
                    // WARNING: Subroutine does not return
      runtime_panicIndex();
    }
    if (dyn[i_1][0].d_tag == 0) break;
    iVar12 = dyn[i_1][0].d_tag;
    prVar13 = (runtime_elfVerdef *)(dyn[i_1][0].d_val + info->loadOffset);
    gnuhash = pauVar8;
    hash = pauVar10;
    if (iVar12 < 7) {
      hash = (uint32 (*) [1])prVar13;
      if (iVar12 != 4) {
        if (iVar12 == 5) {
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_00 = extraout_R9;
            extraout_R11_00[1] = (runtime_elfVerdef *)extraout_RAX_00->symstrings;
            info = extraout_RAX_00;
            pauVar10 = extraout_RBX_00;
            dyn = extraout_RDI_00;
            i_1 = extraout_R8;
            prVar13 = extraout_R9;
          }
          info->symstrings = (uint8 (*) [1])prVar13;
          gnuhash = pauVar8;
          hash = pauVar10;
        }
        else {
          hash = pauVar10;
          if (iVar12 == 6) {
            if (runtime_writeBarrier._0_4_ != 0) {
              runtime_gcWriteBarrier2();
              *extraout_R11_01 = extraout_R9_00;
              extraout_R11_01[1] = (runtime_elfVerdef *)extraout_RAX_01->symtab;
              info = extraout_RAX_01;
              pauVar10 = extraout_RBX_01;
              dyn = extraout_RDI_01;
              i_1 = extraout_R8_00;
              prVar13 = extraout_R9_00;
            }
            info->symtab = (runtime_elfSym (*) [1])prVar13;
            gnuhash = pauVar8;
            hash = pauVar10;
          }
        }
      }
    }
    else {
      gnuhash = (uint32 (*) [1])prVar13;
      if (iVar12 != 0x6ffffef5) {
        if (iVar12 == 0x6ffffff0) {
          if (runtime_writeBarrier._0_4_ != 0) {
            runtime_gcWriteBarrier2();
            *extraout_R11_02 = extraout_R9_01;
            extraout_R11_02[1] = (runtime_elfVerdef *)extraout_RAX_02->versym;
            info = extraout_RAX_02;
            pauVar10 = extraout_RBX_02;
            dyn = extraout_RDI_02;
            i_1 = extraout_R8_01;
            prVar13 = extraout_R9_01;
          }
          info->versym = &prVar13->vd_version;
          gnuhash = pauVar8;
          hash = pauVar10;
        }
        else {
          gnuhash = pauVar8;
          if (iVar12 == 0x6ffffffc) {
            if (runtime_writeBarrier._0_4_ != 0) {
              runtime_gcWriteBarrier2();
              *extraout_R11_03 = extraout_R9_02;
              extraout_R11_03[1] = extraout_RAX_03->verdef;
              info = extraout_RAX_03;
              pauVar10 = extraout_RBX_03;
              dyn = extraout_RDI_03;
              i_1 = extraout_R8_02;
              prVar13 = extraout_R9_02;
            }
            info->verdef = prVar13;
            gnuhash = pauVar8;
            hash = pauVar10;
          }
        }
      }
    }
    i_1 = i_1 + 1;
    pauVar8 = gnuhash;
    pauVar10 = hash;
  }
  if (((info->symstrings != (uint8 (*) [1])0x0) && (info->symtab != (runtime_elfSym (*) [1])0x0)) &&
     ((pauVar10 != (uint32 (*) [1])0x0 || (pauVar8 != (uint32 (*) [1])0x0)))) {
    if (info->verdef == (runtime_elfVerdef *)0x0) {
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier1();
        *extraout_R11_04 = extraout_RSI;
        info = extraout_RAX_04;
        pauVar10 = extraout_RBX_04;
      }
      info->versym = (uint16 (*) [1])0x0;
    }
    if (pauVar8 == (uint32 (*) [1])0x0) {
      uVar2 = (*pauVar10)[0];
      uVar9 = (uint)(dword)(uVar2 + 2);
      uVar11 = 0xffffffffffff;
      if (0xffffffffffff < uVar9) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceAlen();
      }
      if (uVar9 < 2) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      uVar3 = pauVar10[1][0];
      (info->bucket).len = uVar9 - 2;
      (info->bucket).cap = 0xfffffffffffd;
      pauVar8 = pauVar10 + 2;
      uVar6 = (uint)(dword)(uVar2 + uVar3 + 2);
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
        *extraout_R11_07 = extraout_R8_03;
        extraout_R11_07[1] = (uint32 (*) [1])(extraout_RAX_07->bucket).array;
        info = extraout_RAX_07;
        uVar6 = extraout_RCX_00;
        pauVar10 = extraout_RBX_06;
        uVar9 = extraout_RSI_01;
        pauVar8 = extraout_R8_03;
      }
      (info->bucket).array = *pauVar8;
      if (uVar11 < uVar6) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceAlen();
      }
      if (uVar6 < uVar9) {
                    // WARNING: Subroutine does not return
        runtime_panicSliceB();
      }
      (info->chain).len = uVar6 - uVar9;
      (info->chain).cap = uVar11 - uVar9;
      puVar7 = (uint32 *)((int)*pauVar10 + (uVar9 << 2 & (int)-(uVar11 - uVar9) >> 0x3f));
      if (runtime_writeBarrier._0_4_ != 0) {
        runtime_gcWriteBarrier2();
